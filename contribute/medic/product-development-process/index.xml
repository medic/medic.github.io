<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>Community Health Toolkit – Product Development Process</title><link>https://docs.communityhealthtoolkit.org/contribute/medic/product-development-process/</link><description>Recent content in Product Development Process on Community Health Toolkit</description><generator>Hugo -- gohugo.io</generator><atom:link href="https://docs.communityhealthtoolkit.org/contribute/medic/product-development-process/index.xml" rel="self" type="application/rss+xml"/><item><title>Contribute: Continuous Discovery Overview</title><link>https://docs.communityhealthtoolkit.org/contribute/medic/product-development-process/continuous-discovery-overview/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://docs.communityhealthtoolkit.org/contribute/medic/product-development-process/continuous-discovery-overview/</guid><description>
&lt;p>The continuous discovery mindset is one that acknowledges that digital products are never &amp;ldquo;done&amp;rdquo; and can always be made better. The &amp;ldquo;discovery&amp;rdquo; aspect is that those working on the product should empathize with those who use it and operate with those people in mind, both for finding the most impactful areas of work and in how to measure impact.&lt;/p>
&lt;p>Teammates choose work with impact in mind and develop solutions with an expectation that people will use what is built and we can measure a positive change.&lt;/p>
&lt;p>Some key activities that are common in such a process are:&lt;/p>
&lt;ol>
&lt;li>Starting with a clear desired outcome.&lt;/li>
&lt;li>All teammates actively engaged in talking directly with people who use the software.&lt;/li>
&lt;li>Solutions designed with users in mind, with an understanding of their environment.&lt;/li>
&lt;li>Desire to deploy solutions quickly, measure the change, and work with partners to make further improvements.&lt;/li>
&lt;/ol>
&lt;p>This quote from &lt;a href="https://www.producttalk.org/">Teresa Torres&lt;/a> sums up the process nicely:&lt;/p>
&lt;blockquote>
&lt;p>Good product discovery has a simple underlying structure: Start with an outcome, discover opportunities, discover solutions.&lt;/p>
&lt;/blockquote></description></item><item><title>Contribute: Focused Working Groups</title><link>https://docs.communityhealthtoolkit.org/contribute/medic/product-development-process/focused-groups/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://docs.communityhealthtoolkit.org/contribute/medic/product-development-process/focused-groups/</guid><description>
&lt;p>The Product team as a whole is focused on digital health tools helping to achieve Universal Health Coverage, and care reaching everyone when and where they need it. The team is made up of 4 different groups, with each group focusing on outcomes to serve different people.&lt;/p>
&lt;h2 id="care-teams">Care Teams&lt;/h2>
&lt;p>Focused on building effective tools to provide care in the hardest-to-reach communities.&lt;/p>
&lt;p>Key users: Patients, Families, Caregivers, Community Health Workers, Supervisors.&lt;/p>
&lt;p>Team members:&lt;/p>
&lt;ul>
&lt;li>Product Manager&lt;/li>
&lt;li>Product Designer&lt;/li>
&lt;li>UX Researchers&lt;/li>
&lt;li>Software Developers&lt;/li>
&lt;li>Quality Assurance Engineer&lt;/li>
&lt;/ul>
&lt;p>Videos:&lt;/p>
&lt;ul>
&lt;li>&lt;a href="https://youtu.be/X49ML5AqnBM">Introduction to Care Teams Focused Working Group&lt;/a>&lt;/li>
&lt;/ul>
&lt;p>See Care Teams OKRs &lt;a href="https://github.com/orgs/medic/projects/112/views/11">here&lt;/a>.&lt;/p>
&lt;h2 id="allies">Allies&lt;/h2>
&lt;p>Focused on efficient scaling of health impact with digital health systems.&lt;/p>
&lt;p>Key users: App Admins, Implementing Partners, App Developers, Data Scientists.&lt;/p>
&lt;p>Team members:&lt;/p>
&lt;ul>
&lt;li>Technical Product Owner&lt;/li>
&lt;li>Product Designer&lt;/li>
&lt;li>UX Researchers&lt;/li>
&lt;li>Software Developers&lt;/li>
&lt;li>Quality Assurance Engineer&lt;/li>
&lt;/ul>
&lt;p>Videos:&lt;/p>
&lt;ul>
&lt;li>&lt;a href="https://www.youtube.com/watch?v=dsc1XMdXhXs">Introduction to Allies Focused Working Group&lt;/a>&lt;/li>
&lt;li>&lt;a href="https://www.youtube.com/watch?v=wg7rQebc9-o">Inner workings of Product Team&amp;rsquo;s Allies&lt;/a>&lt;/li>
&lt;/ul>
&lt;p>See Allies OKRs &lt;a href="https://github.com/orgs/medic/projects/112/views/12">here&lt;/a>.&lt;/p>
&lt;h2 id="infrastructure">Infrastructure&lt;/h2>
&lt;p>Focused on robust and efficient development, deployment, and support of CHT infrastructure.&lt;/p>
&lt;p>Key users: App Developers, App Deployers, Core Engineers.&lt;/p>
&lt;p>Team members:&lt;/p>
&lt;ul>
&lt;li>Technical Product Owner&lt;/li>
&lt;li>Site Reliability Engineers&lt;/li>
&lt;li>Software Developers&lt;/li>
&lt;li>Quality Assurance Engineer&lt;/li>
&lt;/ul>
&lt;p>Videos:&lt;/p>
&lt;ul>
&lt;li>&lt;a href="https://youtu.be/75xlm9t5cp8">Introduction to Infrastructure Focused Working Group&lt;/a>&lt;/li>
&lt;/ul>
&lt;p>See Infrastructure OKRs &lt;a href="https://github.com/orgs/medic/projects/112/views/15">here&lt;/a>.&lt;/p>
&lt;h2 id="ecosystem">Ecosystem&lt;/h2>
&lt;p>This Focused Working Group&amp;rsquo;s primary objective is to build on the Community Health Toolkit in collaboration with other members/partners in the digital health ecosystem (DHE). The team actively develops enhancements and promotes their implementation within the DHE.&lt;/p>
&lt;p>Key users: Data scientists, Integrators, Program Administrators and Implementing partners.&lt;/p>
&lt;p>Team members:&lt;/p>
&lt;ul>
&lt;li>Technical Product Owner&lt;/li>
&lt;li>Product Designer&lt;/li>
&lt;li>UX Researchers&lt;/li>
&lt;li>Software Developers&lt;/li>
&lt;li>Quality Assurance Engineer&lt;/li>
&lt;/ul>
&lt;p>Videos:&lt;/p>
&lt;ul>
&lt;li>&lt;a href="https://www.youtube.com/watch?v=R2Yd7_t4DbE">Introduction to Ecosystem Focused Working Group&lt;/a>&lt;/li>
&lt;/ul>
&lt;p>See Ecosystem OKRs &lt;a href="https://github.com/orgs/medic/projects/112/views/16">here&lt;/a>.&lt;/p></description></item><item><title>Contribute: Schedule of Activities</title><link>https://docs.communityhealthtoolkit.org/contribute/medic/product-development-process/schedule-of-events/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://docs.communityhealthtoolkit.org/contribute/medic/product-development-process/schedule-of-events/</guid><description>
&lt;h2 id="annually">Annually&lt;/h2>
&lt;ul>
&lt;li>Set goals (strategies and measures)&lt;/li>
&lt;li>Identify desired outcomes the team will work towards&lt;/li>
&lt;/ul>
&lt;h2 id="quarterly">Quarterly&lt;/h2>
&lt;ul>
&lt;li>Choose outcome(s) for Focused Working Groups to work towards&lt;/li>
&lt;li>Outcome kickoff&lt;/li>
&lt;/ul>
&lt;h2 id="monthly">Monthly&lt;/h2>
&lt;ul>
&lt;li>Communicate status and progress of work towards current outcome(s)&lt;/li>
&lt;li>Recognize and establish certainty around time sensitive, project-initiated tasks&lt;/li>
&lt;/ul>
&lt;h2 id="weekly">Weekly&lt;/h2>
&lt;ul>
&lt;li>Conduct interviews&lt;/li>
&lt;li>Continued iterative work on identifying opportunities, weighing possible solutions, building, and measuring&lt;/li>
&lt;li>Triage potential side-loaded opportunities&lt;/li>
&lt;/ul></description></item><item><title>Contribute: Product Trio</title><link>https://docs.communityhealthtoolkit.org/contribute/medic/product-development-process/product-trio/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://docs.communityhealthtoolkit.org/contribute/medic/product-development-process/product-trio/</guid><description>
&lt;p>A Product Trio refers to a product manager, a product designer and a software engineer working together to develop digital products in the scope of a Focused Working Group. Some Focused Working Groups have multiple software engineers contributing to the work. Additionally, other roles contribute to the Trio, such as UX Researcher and Quality Assuarance Engineer. In that sense, Product Trios are often a quartet or a quintet.&lt;/p></description></item><item><title>Contribute: UX Research Repository</title><link>https://docs.communityhealthtoolkit.org/contribute/medic/product-development-process/ux-research-repo/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://docs.communityhealthtoolkit.org/contribute/medic/product-development-process/ux-research-repo/</guid><description>
&lt;p>The Medic Product team uses &lt;a href="http://baserow.io">baserow.io&lt;/a> as a place to keep product research. Baserow is very similar to &lt;a href="http://airtable.com">airtable.com&lt;/a>, &lt;a href="http://getgrist.com">getgrist.com&lt;/a>, and Google Sheets.&lt;/p>
&lt;p>The &lt;em>UX Research Repository&lt;/em> is based off of concepts from WeWork’s &lt;a href="https://tsharon.medium.com/democratizing-ux-670b95fbc07f">Polaris&lt;/a> project. You can see an example of the Polaris (which uses Airtable) &lt;a href="https://www.airtable.com/universe/expShuhNMi0Oc0xpb/polaris-ux-nuggets">here&lt;/a>.&lt;/p>
&lt;p>The Baserow interface can be seen below. The items in the list on the left are “tables” that we have created. On the right is the “Grid”. It looks just like a spreadsheet and you can have multiple views of the same grid.&lt;/p>
&lt;p>&lt;img src="images/baserow.png" alt="The Baserow interface 👆🏼">&lt;/p>
&lt;p>To gain access to the UX Research Repo, please reach out in the #product-owner-chatter Slack channel. The access to the repository is currently restricted to the Medic team.&lt;/p></description></item><item><title>Contribute: Quality Assistance</title><link>https://docs.communityhealthtoolkit.org/contribute/medic/product-development-process/quality-assistance/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://docs.communityhealthtoolkit.org/contribute/medic/product-development-process/quality-assistance/</guid><description>
&lt;h2 id="goals">Goals&lt;/h2>
&lt;ol>
&lt;li>Software developers should have full ownership of what they are building, including quality.&lt;/li>
&lt;li>The team still benefits from having the QA engineering mindset of QA engineers.&lt;/li>
&lt;li>QA engineers automate more tests and processes.&lt;/li>
&lt;/ol>
&lt;h2 id="in-short">In Short&lt;/h2>
&lt;p>A software developer writes code and performs testing on that code where a QA engineer assists by recommending tests to perform and adding additional end-to-end tests.&lt;/p>
&lt;h2 id="in-detail">In Detail&lt;/h2>
&lt;p>A developer should be able to write code and release it when done. Doing that without testing would be reckless and it is expected that the developer also tests their code. The team wants both speed and quality where the former should not be done without the latter. This means slowing down a bit to make sure it’s right and checking your work when developing before it is done/reviewed/merged.&lt;/p>
&lt;p>It isn’t always easy to test your own code though and it is common for a developer to have a happy-path mindset, more suited for thinking about what to build rather than how something might break. Fortunately there are QA engineers on the team who have the skills to think about the solution from the perspective of what might break.&lt;/p>
&lt;p>It’s worth noting that the team also requires code reviews via GitHub pull requests. The intention of code reviews is not for the reviewer to test the code. The reviewer may optionally also do that, but it is expected that the author of the code has tested it fully before requesting a code review.&lt;/p>
&lt;p>Once code is done, tested (by the developer) and reviewed, it is ready to merge and the developer can do so&amp;hellip; almost (see &lt;a href="#getting-there-in-milestones">Getting There in Milestones&lt;/a>).&lt;/p>
&lt;h2 id="getting-there-in-milestones">Getting There in Milestones&lt;/h2>
&lt;p>The aim is to get to a place where the developer of a change can do everything and merge without needing any extra permission. To make the process safer in getting to the final step, several parts will be followed. A process similar to what’s described &lt;a href="#in-detail">In Detail&lt;/a> is followed, while retaining an “AT” step similar to what the current process.&lt;/p>
&lt;p>The big difference to that AT step though will be the depth in which it is performed. Rather than being a single exhaustive step where all testing is performed, it will be more like a smoke test where a QA engineer gets a little extra creative in testing.&lt;/p>
&lt;p>There may still be cases of a ticket getting coded up totally unrelated to Focused Working Group work, perhaps even unannounced to anyone. For work like this the traditional AT step is still appropriate for now. Still though, it is preferred for the software developer to get a QA engineer involved as early as possible; it helps us get the best contributions from everyone.&lt;/p>
&lt;h2 id="an-example-of-qa-assistance-in-practice">An Example of QA Assistance in Practice&lt;/h2>
&lt;p>Imagine a scenario where a Focused Working Group is going to change the display of the targets screen. The group would discuss the needs of the users and work out solutions, where the selected solution was to make this change. This discussion would involve a PM/PO, designer, developer, and QA engineer. The developer would be thinking about how to code the proposed solution and the QA engineer would be considering that as well as what might go wrong.&lt;/p>
&lt;p>In the case where a UI change is being made, a design will be created. At this point the group can see what is to be built. When meeting and discussing the user interactions with the designer the QA engineer can get some early ideas around test scenarios.&lt;/p>
&lt;p>As code is written and pushed to a branch the QA engineer and developer talk about what is changing. Any misconceptions are cleared up and the QA engineer can start to assist the developer by pointing out areas that may be important or non-obvious to test. This could be as simple as noting challenges of different screen sizes or as complex as specific configurations that may need extra attention for how targets work.&lt;/p>
&lt;p>That conversation (ideally multiple of these) is the “assistance”. It’s where the value of the QA engineering mindset is achieved. The developer still owns and tests their work; they just have a QA engineer to talk to so they can feel confident in their own testing.&lt;/p>
&lt;p>Depending on the change the developer may work with the QA engineer where the QA engineer can contribute some automated end-to-end testing to the branch. Things should feel collaborative and not a division of labor or handing things off.&lt;/p>
&lt;p>Once the developer has finished writing the code they test it a bit more and open a PR for a code review. The reviewer should be able to review the code with an assumption that it is well-tested already and the focus of the review can be around the code and implementation choices.&lt;/p>
&lt;p>If any changes need to be made during the review process, the developer makes those changes and re-executes any relevant testing.&lt;/p>
&lt;p>At this point the ideal action to take would be that the developer merges the finished code and no AT step happens, as the quality is already baked in from the start and throughout. This is the ideal setup yet to be achieved. Here the ticket still goes to AT, but for a smaller last bit of smoke testing. Notice that it is not an exhaustive set of tests, it is a small bit of extra poking around by a QA engineer. This limited testing is possible because the developer said it is done, and they said that because they tested it, and they had a QA engineer assist them to reach that level of confidence in their own testing.&lt;/p>
&lt;p>The last part here is to merge it. That extra poking around should be quick, so the developer should be ready to click the green button soon!&lt;/p>
&lt;h2 id="but-but-but-some-questions-you-might-have">But, but, but!!! (some questions you might have)&lt;/h2>
&lt;ul>
&lt;li>Who checks if the right thing got built? – The Focused Working Group members should be aware of what’s being built, why, and if it’s coming together as expected. That’s not to be solely delegated to a QA engineer to do. Developers should be working with their teammates and showing their work (demos, screenshots, etc). This should feel like a team collaborating to build useful working software, not an assembly line of disassociated parts.&lt;/li>
&lt;li>What if a developer is bad at testing? – That’s something to improve, not outsource to someone else. Even still, the QA engineer isn’t disappearing and they will still offer deeper advice on what tests the developer should perform.&lt;/li>
&lt;li>What will QA engineers do if not doing manual acceptance testing? – Automating more. That can be in more end-to-end tests for better regression testing, automating mobile device testing, adding better structures to enable the whole team to automate better, improving CI pipeline, etc.&lt;/li>
&lt;/ul></description></item><item><title>Contribute: Code Health</title><link>https://docs.communityhealthtoolkit.org/contribute/medic/product-development-process/code-health/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://docs.communityhealthtoolkit.org/contribute/medic/product-development-process/code-health/</guid><description>
&lt;p>Healthy code is code that is easy to understand and update. Over time all code becomes less healthy as dependencies become out of date, new language features or code style rules are introduced, and changes are made that add complexity. This is sometimes referred to as technical debt as it makes it progressively harder to make new code changes. No project is ever completely healthy, so we need an ongoing process to improve the least healthy parts of the code so the CHT can be sustainable long term.&lt;/p>
&lt;p>A good way to differentiate code health improvements from other changes is if it&amp;rsquo;s something that a user won&amp;rsquo;t notice, then it&amp;rsquo;s code health. Because no user will ever ask for the change to be made they need to be managed outside of the usual prioritisation process.&lt;/p>
&lt;p>A good guideline is to spend 25% of your time improving code health, which can be split up into three distinct categories: Tidying, Cards, and Projects.&lt;/p>
&lt;h3 id="tidying">Tidying&lt;/h3>
&lt;p>These are the smallest improvements and should be part of your work every week. Engineers can decide what tidying they want to prioritize and don&amp;rsquo;t need any approval to do the work, but it will need to go through &lt;a href="https://docs.communityhealthtoolkit.org/contribute/code/workflow/#code-reviews">Code Review&lt;/a> to ensure a teammate agrees it&amp;rsquo;s an improvement.&lt;/p>
&lt;p>If the tidying is unrelated to other issues you&amp;rsquo;re working on then to make the review easy you should create a new issue, branch, and PR for the tidying work. However if the tidying will conflict or block development of your other work, then use your best judgement about how to proceed in whatever way is easiest for you and your reviewer. Some options are: a) in the same commit if the change is small, b) a separate commit in the same branch if the changes are codependent, c) two branches with one referencing the other.&lt;/p>
&lt;p>Examples of appropriate tidying are increasing code reuse, improving readability, reducing complexity, updating a dependency, removing deprecated calls, and increasing test coverage.&lt;/p>
&lt;p>Tidying should take around 10% of your time, or 4 hours a week.&lt;/p>
&lt;h3 id="cards">Cards&lt;/h3>
&lt;p>These are mid-sized improvements and are worked on every quarter. Focused Groups and Product Leadership work together to decide which cards to prioritise and include in the FGs OKRs. The FG is then responsible for ensuring the improvements get scheduled and delivered just like other work.&lt;/p>
&lt;p>Cards should take around 10% of your time, or 6 days per quarter.&lt;/p>
&lt;h4 id="how-cards-work-in-practice">How Cards work in practice&lt;/h4>
&lt;p>A Focused Working Group is building a feature aligned with a quarterly OKR. When the feature is shipped, you may need to wait a week to see results from CHWs. The PM/PO goes through a list of tickets for code health and reviews them with the team. After aligning with the PM/PO, software developers and QA engineers start working on those tickets, tracking progress on the &lt;a href="https://github.com/orgs/medic/projects/134/views/1">GitHub board&lt;/a>.&lt;/p>
&lt;p>During this time almost all attention, from all engineers in the Focused Working Group, is on heads-down coding on code health tasks. There may still be some other tasks going on like user interviews or initial measurements of the newly deployed feature.&lt;/p>
&lt;p>At the end of the week, the team realigns around work towards the chosen outcome. Code health work should be merged and the full focus of the team is together with the PM/PO on delivering improvements for users. It may be the case that a code health task cannot yet be merged. If that is the case, other developers on the Focused Working Group should assist to get it complete so everyone can stay together in what is being worked on.&lt;/p>
&lt;h3 id="projects">Projects&lt;/h3>
&lt;p>Projects are large refactors that are therefore expensive and risky to undertake. These need to be discussed with Product and Medic leadership and will likely require deep analysis and prototyping to verify the approach.&lt;/p>
&lt;p>Examples of projects are upgrading from AngularJS to Angular, rewriting couch2pg as cht-sync, and switching from medic-os to containerized deployment.&lt;/p>
&lt;p>Projects should take around 5% of your time, or one project every few years.&lt;/p>
&lt;h2 id="more-info">More info&lt;/h2>
&lt;p>This policy was inspired by a blog post about &lt;a href="https://shopify.engineering/technical-debt-25-percent-rule">technical debt at Shopify&lt;/a>.&lt;/p></description></item></channel></rss>