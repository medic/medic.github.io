<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>Contributing Code on Community Health Toolkit</title><link>https://docs.communityhealthtoolkit.org/contribute/code/</link><description>Recent content in Contributing Code on Community Health Toolkit</description><generator>Hugo -- gohugo.io</generator><language>en</language><atom:link href="https://docs.communityhealthtoolkit.org/contribute/code/index.xml" rel="self" type="application/rss+xml"/><item><title>Development Workflow</title><link>https://docs.communityhealthtoolkit.org/contribute/code/workflow/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://docs.communityhealthtoolkit.org/contribute/code/workflow/</guid><description>CodeWritingWhere possible, follow our coding style guide.
Aim for self-documenting code. Where code cannot be made self-documenting add commenting. Usually comments are useful when they explain why some code exists, and should not be explaining what some code is doing.
Pushing Code &amp;amp; Opening Pull RequestsNever push commits directly to the main branch (main or master). Always use a pull request.
If your code is in a regular pull request, it is assumed to be done and only needing a review and testing as checks before merging.</description></item><item><title>CHT Product Repository Checklist</title><link>https://docs.communityhealthtoolkit.org/contribute/code/repository-checklist/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://docs.communityhealthtoolkit.org/contribute/code/repository-checklist/</guid><description>Repository Creation ChecklistWhen creating a new CHT Product repository under Medic&amp;rsquo;s GitHub organization, the contributor(s) should use the cht-repo-template repository containing the following configurations:
Source Control The main branch is locked via branch protection rules. Merges are done through PRs. Automatically delete head branches. Issue templates exist. PR template exists. PRs reference related issues. Commit formats follow the guidelines. Secrets are not part of the commit history or made public. The following files exist: LICENSE specifying AGPL-3.</description></item><item><title>Coding Style Guide</title><link>https://docs.communityhealthtoolkit.org/contribute/code/style-guide/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://docs.communityhealthtoolkit.org/contribute/code/style-guide/</guid><description>LanguagePrefer JavaScript or TypeScript wherever possible, including in webapps, on the server, and for scripting. This is because:
every developer on the team knows it already, so we can all maintain it together, it makes it easy to write cross-platform code and we have developers on all major operating systems, it has a vast number of libraries that are easy to include, and it&amp;rsquo;s easy to unit test Exceptions to this can be made on a case-by-case basis, but the decision must be made collectively before coding has begun to avoid having to rewrite.</description></item><item><title>CHT App Configurer</title><link>https://docs.communityhealthtoolkit.org/contribute/code/cht-conf/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://docs.communityhealthtoolkit.org/contribute/code/cht-conf/</guid><description>Requirements nodejs 18 or later python 3 Docker(optional) InstallationOperating System Specific Linux (Ubuntu) macOS Windows (WSL2) npm install -g cht-conf sudo python -m pip install git+https://github.com/medic/pyxform.git@medic-conf-1.17#egg=pyxform-medic npm install -g cht-conf pip install git+https://github.com/medic/pyxform.git@medic-conf-1.17#egg=pyxform-medic # As Administrator: npm install -g cht-conf python -m pip install git+https://github.com/medic/pyxform.git@medic-conf-1.17#egg=pyxform-medic --upgrade Using DockerCHT Conf can also be run from within a Docker container. This is useful if you are already familiar with Docker and do not wish to configure the various dependencies required for developing CHT apps on your local machine.</description></item><item><title>Using NPM</title><link>https://docs.communityhealthtoolkit.org/contribute/code/using-npm/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://docs.communityhealthtoolkit.org/contribute/code/using-npm/</guid><description>npm OrgsWe use npm Orgs to organize our npm packages. It provides a centralized way to manage a team&amp;rsquo;s published npm packages and permissions. Here are some guidelines when using this service.
See npm&amp;rsquo;s Orgs docs for more information.
Our organization is medic or using npm&amp;rsquo;s notation, @medic.
We also created @medicmobile but it&amp;rsquo;s not currently in use, it was created to reserve the namespace.
Adding a PackageWhen you publish an npm module on npmjs.</description></item><item><title>Static Analysis</title><link>https://docs.communityhealthtoolkit.org/contribute/code/static-analysis/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://docs.communityhealthtoolkit.org/contribute/code/static-analysis/</guid><description>eslintAll code must pass an eslint check which runs early in the CI cycle and uses the standard medic eslint configuration.
SonarSonar static analysis supports development by providing feedback on code quality and security issues. Sonar analysis must pass on all new code.
SonarCloud can be enabled on any public repo in the medic organization.
WorkflowDuring developmentWhile writing code, the SonarLint plugin can be used to get real-time code analysis in your IDE.</description></item><item><title>Design Documents Guide</title><link>https://docs.communityhealthtoolkit.org/contribute/code/design-docs/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://docs.communityhealthtoolkit.org/contribute/code/design-docs/</guid><description>What are design docs?Software development is not just about writing code, but rather about solving problems and building the right solutions. Before diving into an initiative or feature and starting coding, itâ€™s essential that the developers (and other team members) have a high-level understanding of what a solution might look like.
Design docs are informal documents that the leading developer of a certain piece of software creates before they start the actual coding of a solution.</description></item><item><title>Contributor Hall of Fame</title><link>https://docs.communityhealthtoolkit.org/contribute/code/hall-of-fame/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://docs.communityhealthtoolkit.org/contribute/code/hall-of-fame/</guid><description>CodeThank you to everyone who has contributed to the CHT codebase over the years! To see the full list, visit each repo on GitHub.
CHT Android CHT Conf CHT Core CHT Docs CHT Interoperability CHT Pipeline CHT Sync CHT Watchdog SecurityKudos to everyone who has disclosed security vulnerabilities.
Alex Anderson with 4 disclosures
#9122, #9121, #9120, #9108</description></item></channel></rss>