<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>Community Health Toolkit â€“ Contributing Code</title><link>https://docs.communityhealthtoolkit.org/contribute/code/</link><description>Recent content in Contributing Code on Community Health Toolkit</description><generator>Hugo -- gohugo.io</generator><atom:link href="https://docs.communityhealthtoolkit.org/contribute/code/index.xml" rel="self" type="application/rss+xml"/><item><title>Contribute: CHT Product Repository Checklist</title><link>https://docs.communityhealthtoolkit.org/contribute/code/repository-checklist/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://docs.communityhealthtoolkit.org/contribute/code/repository-checklist/</guid><description>
&lt;h2 id="repository-creation-checklist">Repository Creation Checklist&lt;/h2>
&lt;p>When creating a new CHT Product repository under &lt;a href="https://github.com/medic">Medic&amp;rsquo;s GitHub organization&lt;/a>, the contributor(s) should use the &lt;a href="https://github.com/medic/cht-repo-template">cht-repo-template&lt;/a> repository containing the following configurations:&lt;/p>
&lt;h3 id="source-control">Source Control&lt;/h3>
&lt;ul>
&lt;li>&lt;input disabled="" type="checkbox"> The &lt;code>main&lt;/code> branch is locked via &lt;a href="https://docs.github.com/en/repositories/configuring-branches-and-merges-in-your-repository/managing-protected-branches/managing-a-branch-protection-rule">branch protection rules&lt;/a>.&lt;/li>
&lt;li>&lt;input disabled="" type="checkbox"> Merges are done through PRs.&lt;/li>
&lt;li>&lt;input disabled="" type="checkbox"> Automatically delete head branches.&lt;/li>
&lt;li>&lt;input disabled="" type="checkbox"> Issue templates exist.&lt;/li>
&lt;li>&lt;input disabled="" type="checkbox"> PR template exists.&lt;/li>
&lt;li>&lt;input disabled="" type="checkbox"> PRs reference related issues.&lt;/li>
&lt;li>&lt;input disabled="" type="checkbox"> Commit formats follow the &lt;a href="https://docs.communityhealthtoolkit.org/contribute/code/workflow/#commits">guidelines&lt;/a>.&lt;/li>
&lt;li>&lt;input disabled="" type="checkbox"> Secrets are not part of the commit history or made public.&lt;/li>
&lt;li>&lt;input disabled="" type="checkbox"> The following files exist:
&lt;ul>
&lt;li>&lt;code>LICENSE&lt;/code> specifying AGPL-3.0 (&lt;a href="https://github.com/medic/cht-core/blob/master/LICENSE">example&lt;/a>)&lt;/li>
&lt;li>&lt;code>README.md&lt;/code>.&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>&lt;input disabled="" type="checkbox"> &lt;code>main&lt;/code> branch is always shippable.&lt;/li>
&lt;/ul>
&lt;h3 id="code-reviews">Code Reviews&lt;/h3>
&lt;ul>
&lt;li>&lt;input disabled="" type="checkbox"> The PR template contains a code review checklist.&lt;/li>
&lt;li>&lt;input disabled="" type="checkbox"> A reviewer for a PR merge is enforced by policy.&lt;/li>
&lt;li>&lt;input disabled="" type="checkbox"> A &lt;a href="https://github.com/medic/eslint-config">linter&lt;/a> is set up.&lt;/li>
&lt;/ul>
&lt;p>The PR and issue template content can be adjusted according to the product&amp;rsquo;s purpose.&lt;/p>
&lt;p>Additionally, the person who creates the repository might need to share repository access with appropriate teams (this may require admin access).&lt;/p>
&lt;h2 id="items-to-consider-when-developing-the-cht-product">Items to consider when developing the CHT Product&lt;/h2>
&lt;p>To ensure quality, the CHT Products should also follow the guidelines below:&lt;/p>
&lt;h3 id="cicd">CI/CD&lt;/h3>
&lt;ul>
&lt;li>&lt;input disabled="" type="checkbox"> Repository runs GitHub Actions CI with automated build and test on each PR.&lt;/li>
&lt;/ul>
&lt;h3 id="testing">Testing&lt;/h3>
&lt;ul>
&lt;li>&lt;input disabled="" type="checkbox"> Unit tests and successful builds for PR merges are set up.&lt;/li>
&lt;li>&lt;input disabled="" type="checkbox"> Unit tests cover the majority of the code.&lt;/li>
&lt;li>&lt;input disabled="" type="checkbox"> If applicable, integration tests run to test the solution e2e.&lt;/li>
&lt;/ul>
&lt;h3 id="observability">Observability&lt;/h3>
&lt;ul>
&lt;li>&lt;input disabled="" type="checkbox"> Application faults and errors are logged.&lt;/li>
&lt;li>&lt;input disabled="" type="checkbox"> Logging configuration can be modified without code changes (eg: verbose mode).&lt;/li>
&lt;/ul>
&lt;h2 id="medic-github-repository-faq">Medic GitHub repository FAQ&lt;/h2>
&lt;h3 id="q-who-can-create-a-repository">Q: Who can create a repository?&lt;/h3>
&lt;p>A: Anyone under Medic GitHub organization.&lt;/p>
&lt;h3 id="q-is-it-ok-to-create-a-chtmedic-related-work-repository-under-a-personal-github-account">Q: Is it OK to create a CHT/Medic-related work repository under a personal GitHub account?&lt;/h3>
&lt;p>A: If what you are working on is temporary and just for you then it is fine to create a repository under your personal account (it is the equivalent of having a script on your local machine), as long as it contains an Open-Source Software License. However, default to the Medic account so the other team members can collaborate on it.&lt;/p>
&lt;h3 id="q-when-to-make-a-repo-public-vs-private">Q: When to make a repo public vs private?&lt;/h3>
&lt;p>A: Repositories should be public unless there is very good reason to make it private (e.g. the repository contains partner details that cannot be disclosed to public). Always keep in mind that it is much easier to start public than change to public later.&lt;/p>
&lt;h3 id="q-when-to-create-a-new-repository-vs-adding-a-directory-in-existing-monolithic">Q: When to create a new repository vs adding a directory in existing (monolithic)?&lt;/h3>
&lt;p>A: It depends on the nature of the code. Some things to consider are: is the new code and the old code dependant, don&amp;rsquo;t make sense on their own, must be versioned together, etc. If not, default to a new repo to reduce complexity.&lt;/p>
&lt;h2 id="more-info">More info&lt;/h2>
&lt;p>This policy was inspired by &lt;a href="https://microsoft.github.io/code-with-engineering-playbook/ENG-FUNDAMENTALS-CHECKLIST/">Microsoft&amp;rsquo;s Engineering Fundamentals Checklist&lt;/a>.&lt;/p></description></item><item><title>Contribute: Development Workflow</title><link>https://docs.communityhealthtoolkit.org/contribute/code/workflow/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://docs.communityhealthtoolkit.org/contribute/code/workflow/</guid><description>
&lt;h2 id="code">Code&lt;/h2>
&lt;h3 id="writing">Writing&lt;/h3>
&lt;p>Where possible, follow our &lt;a href="https://docs.communityhealthtoolkit.org/contribute/code/style-guide/">coding style guide&lt;/a>.&lt;/p>
&lt;p>Aim for self-documenting code. Where code cannot be made self-documenting add commenting. Usually comments are useful when they explain why some code exists, and should not be explaining what some code is doing.&lt;/p>
&lt;h3 id="pushing-code--opening-pull-requests">Pushing Code &amp;amp; Opening Pull Requests&lt;/h3>
&lt;ul>
&lt;li>If your code is in a regular pull request, it is assumed to be done and only needing a review and testing as checks before merging. It is best to request a reviewer, but otherwise anyone may freely review your PR.&lt;/li>
&lt;li>If your code is in a draft PR, it is assumed to be a work-in-progress where collaboration is welcome, but best to communicate about specifics before assuming anything is complete.&lt;/li>
&lt;li>If you have pushed code to a remote branch without a pull request, it is assumed to be a work-in-progress where collaboration is unexpected.&lt;/li>
&lt;/ul>
&lt;p>A good workflow would be to work locally, pushing to a remote branch as you make progress, possibly open a draft PR for some initial collaboration on tricky parts, and once everything is done, convert the draft PR to a regular PR to be reviewed.&lt;/p>
&lt;h3 id="code-reviews">Code reviews&lt;/h3>
&lt;h4 id="guidelines">Guidelines&lt;/h4>
&lt;p>The author and reviewer should use this &lt;a href="https://google.github.io/eng-practices/review/developer/">guide to code reviewing&lt;/a>.&lt;/p>
&lt;h4 id="suggestions">Suggestions&lt;/h4>
&lt;p>When doing a code review aim to be extremely clear. This helps things move quickly and avoids lost time in misunderstandings. One especially useful GitHub feature for doing this is suggesting a change. Consider the following example code:&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="background-color:#f8f8f8;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-javascript" data-lang="javascript">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#000">contacts&lt;/span>&lt;span style="color:#000;font-weight:bold">.&lt;/span>&lt;span style="color:#000">map&lt;/span>&lt;span style="color:#000;font-weight:bold">(&lt;/span> &lt;span style="color:#000;font-weight:bold">(&lt;/span>&lt;span style="color:#000">c&lt;/span>&lt;span style="color:#000;font-weight:bold">)&lt;/span> &lt;span style="color:#000;font-weight:bold">=&amp;gt;&lt;/span> &lt;span style="color:#000;font-weight:bold">{&lt;/span> &lt;span style="color:#204a87;font-weight:bold">return&lt;/span> &lt;span style="color:#000">c&lt;/span>&lt;span style="color:#000;font-weight:bold">.&lt;/span>&lt;span style="color:#000">id&lt;/span> &lt;span style="color:#000;font-weight:bold">});&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>The function body can be abbreviated. In a review you can leave a comment asking for the change, which would likely involve writing up a comment trying to have the author change it to the following:&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="background-color:#f8f8f8;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-javascript" data-lang="javascript">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#000">contacts&lt;/span>&lt;span style="color:#000;font-weight:bold">.&lt;/span>&lt;span style="color:#000">map&lt;/span>&lt;span style="color:#000;font-weight:bold">(&lt;/span> &lt;span style="color:#000">c&lt;/span> &lt;span style="color:#000;font-weight:bold">=&amp;gt;&lt;/span> &lt;span style="color:#000">c&lt;/span>&lt;span style="color:#000;font-weight:bold">.&lt;/span>&lt;span style="color:#000">id&lt;/span>&lt;span style="color:#000;font-weight:bold">);&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>That means leaving a comment, having the author read and understand it, and then making and pushing up a change, hopefully matching your review expectations.&lt;/p>
&lt;p>To be clear and save all that back-and-forth though, you can make a code suggestion directly in your review, which will let the author simply click a button to accept the change (and have it automatically applied as a commit by GitHub).&lt;/p>
&lt;p>&lt;img src="gh-review-suggestion.png" alt="GitHub review suggest change">&lt;/p>
&lt;h4 id="timeliness">Timeliness&lt;/h4>
&lt;p>Timely code reviews are important to getting improvements into the hands of users faster and allowing developers to stay focused on the task at hand and see it through to production.&lt;/p>
&lt;p>Code reviews should be completed within 24 hours of assignment (excluding weekends and holidays). In some cases, a code review may not be possible if a larger discussion needs to be had for design choices or solution objectives, but even in cases like those, some feedback is still to be expected within 24 hours.&lt;/p>
&lt;h3 id="updating-the-issue-with-what-you-actually-did">Updating The Issue With What You Actually Did&lt;/h3>
&lt;p>Add &lt;a href="https://github.com/medic/cht-core/labels">labels&lt;/a> to the GitHub issue as needed. At this stage, the two to look out for are:&lt;/p>
&lt;ul>
&lt;li>&lt;code>Breaking change&lt;/code>&lt;/li>
&lt;li>&lt;code>UI/UX&lt;/code>&lt;/li>
&lt;/ul>
&lt;p>Add a comment to the GitHub issue with what the final change actually was. This is important for multiple cases including:&lt;/p>
&lt;ul>
&lt;li>Non-technical people may not understand the conversation thread on the issue. GitHub is a place that developers work, but it is also common to send non-technical people links to issues in GitHub.&lt;/li>
&lt;li>The QA team should have a quick way to know where to start testing.&lt;/li>
&lt;li>Issues with a lot of discussion of alternative solutions need a clear resolution and indication of which route was taken.&lt;/li>
&lt;/ul>
&lt;p>Options for doing this:&lt;/p>
&lt;ul>
&lt;li>Attach a short video - these are usually very well received and can often help people understand what happened much more clearly than a text description.&lt;/li>
&lt;li>Screenshots - pictures with big arrows on them can quickly convey important things to look at. If you start to need multiple screenshots consider the video option instead.&lt;/li>
&lt;li>Write up a few sentences - be sure to consider a non-technical audience when writing this.&lt;/li>
&lt;/ul>
&lt;p>An example of a good thorough comment/template is as follows:&lt;/p>
&lt;pre tabindex="0">&lt;code>### Testing
1. Install branch `81-do-great-things`
2. [a specific thing to be sure it has been set up correctly]
3. ...
### What was actually built
[video|screenshots|text]
### Documentation
- [link](url)
&lt;/code>&lt;/pre>&lt;h3 id="testing">Testing&lt;/h3>
&lt;p>Reach out to the Quality Assurance Engineers with the work to be done as early as possible in the development process to ensure they are informed and can guide development (see more in the &lt;a href="https://docs.communityhealthtoolkit.org/contribute/medic/product-development-process/quality-assistance/">Quality Assistance&lt;/a> dedicated page).&lt;/p>
&lt;p>Before asking for testing support from the QA Engineers, you should test your work after performing it. Correcting a small code error, such as a typo, or addding a missing step in the testing instructions could save QA Engineers hours of work. Also, by testing your code, you may get a better sense of why you make certain common mistakes, and learn to avoid repeating them in the future.&lt;/p>
&lt;p>All features and bug fixes must have at least one unit test. All features must have at least one end-to-end test.&lt;/p>
&lt;p>The CHT has a &lt;a href="https://github.com/medic/cht-core/tree/master/tests/e2e">fully automated end-to-end testing suite&lt;/a> which is executed in CI and must pass before any change is merged. This means you can have reasonable confidence that all code merged to the main branch is safe and ready for release without further regression testing. The suite isn&amp;rsquo;t fully comprehensive but it is being constantly improved and expanded.&lt;/p>
&lt;p>From time to time QA Engineers will perform smoke tests, scalability tests, performance tests, and penetration tests to pick up on gradual regressions that may have crept in. The ultimate goal is that these tests will eventually be automated and added to the CI suite as well.&lt;/p>
&lt;h3 id="migrating">Migrating&lt;/h3>
&lt;p>When the schema is changed you must also provide a migration so when instances are upgraded existing data is compatible with the new code.&lt;/p>
&lt;h2 id="commits">Commits&lt;/h2>
&lt;p>The main branch is &lt;code>main&lt;/code> (or &lt;code>master&lt;/code>) which must be kept stable so as not to impact other developers and so a release branch can be created as needed. To achieve this (almost) all development should be done in a branch and submitted via a PR for code review. This means the CI runs and another developer has signed off on the change before it hits the &lt;code>main&lt;/code> branch.&lt;/p>
&lt;h3 id="commit-message-format">Commit message format&lt;/h3>
&lt;p>The commit format should follow this &lt;a href="https://github.com/conventional-changelog/conventional-changelog/tree/master/packages/conventional-changelog-angular">conventional-changelog angular preset&lt;/a>. This means that some of the release process can be automated. See the list of commit types and examples below:&lt;/p>
&lt;table>
&lt;thead>
&lt;tr>
&lt;th>Type&lt;/th>
&lt;th>Description&lt;/th>
&lt;th>Example commit message&lt;/th>
&lt;th>Release type&lt;/th>
&lt;/tr>
&lt;/thead>
&lt;tbody>
&lt;tr>
&lt;td>Bug fixes&lt;/td>
&lt;td>Change code that wasn&amp;rsquo;t working as intended.&lt;/td>
&lt;td>fix(#123): infinite spinner when clicking contacts tab twice&lt;/td>
&lt;td>patch&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>Performance&lt;/td>
&lt;td>A code change that improves performance. Measure the performance improvement to inform the community.&lt;/td>
&lt;td>perf(#789): lazily loaded angular modules&lt;/td>
&lt;td>patch&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>Features&lt;/td>
&lt;td>A new feature or improvement that users will notice.&lt;/td>
&lt;td>feat(#456): add home tab&lt;/td>
&lt;td>minor&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>Non-code&lt;/td>
&lt;td>A change that user won&amp;rsquo;t notice, like a change in a README file, adding e2e tests, updating dependencies, removing unused code, etc.&lt;/td>
&lt;td>chore(#123): update README&lt;/td>
&lt;td>none&lt;/td>
&lt;/tr>
&lt;/tbody>
&lt;/table>
&lt;div class="alert alert-primary" role="alert">
&lt;h4 class="alert-heading">Note&lt;/h4>
&lt;p>Breaking changes should be explained under the commit type (feat, fix and perf) using the prefix &lt;code>BREAKING CHANGE&lt;/code>.
Consider the following example:&lt;/p>
&lt;pre tabindex="0">&lt;code> perf(#2): remove reporting rates feature
BREAKING CHANGE: reporting rates no longer supported
&lt;/code>&lt;/pre>&lt;p>Any other further information should be provided in the second line of the commit message, respecting 79 character line widths. Using &lt;code>git commit -v&lt;/code> is recommended to review your diff while you write your commit message.&lt;/p>
&lt;/div>
&lt;p>See tips on &lt;a href="https://chris.beams.io/posts/git-commit/">How to Write a Git Commit Message&lt;/a> and add your favorites here.&lt;/p>
&lt;p>Never force push remote. Prefer rebasing over merging as it makes for a cleaner history.&lt;/p>
&lt;p>Commit reformats and refactors separately from actual code changes to make reviewing easier.&lt;/p>
&lt;p>Read more about &lt;a href="https://git-scm.com/doc/ext">using git&lt;/a>.&lt;/p>
&lt;h2 id="branches">Branches&lt;/h2>
&lt;ul>
&lt;li>The main branch is &lt;code>main&lt;/code> or &lt;code>master&lt;/code> and is the github default branch and contains the latest code.&lt;/li>
&lt;li>Release branches have the form &lt;code>&amp;lt;major&amp;gt;.&amp;lt;minor&amp;gt;.x&lt;/code> and should be stable.&lt;/li>
&lt;li>Feature branches have the form &lt;code>&amp;lt;issue-number&amp;gt;-&amp;lt;issue-description&amp;gt;&lt;/code> and are work in progress.&lt;/li>
&lt;/ul>
&lt;div class="alert alert-primary" role="alert">
&lt;h4 class="alert-heading">Note&lt;/h4>
When backporting changes to an earlier release branch you should &lt;code>git cherry-pick&lt;/code> the appropriate commit(s) from the main branch into the release branch. Then use a pull request to make sure tests pass on CI before merging (you do not need to get the pull request approved if there were no conflicts when cherry-picking).
&lt;/div>
&lt;h2 id="issues">Issues&lt;/h2>
&lt;p>Issues are managed in Github. Issues should be created in the repository where the changes need to be made. If it is not clear in which repo to open an issue the default should be the &lt;code>cht-core&lt;/code> repository. If it is a security or sensitive issue it should be opened in the private &lt;code>medic-projects&lt;/code> repository.&lt;/p>
&lt;p>When creating issues add the appropriate &lt;a href="https://github.com/medic/medic/labels?utf8=%E2%9C%93&amp;amp;q=Priority%3A+">Priority&lt;/a> and &lt;a href="https://github.com/medic/medic/labels?utf8=%E2%9C%93&amp;amp;q=Type%3A+">Type&lt;/a> labels.&lt;/p>
&lt;h3 id="regressions">Regressions&lt;/h3>
&lt;p>When a bug is found that impacts functionality that worked in a previous version, it&amp;rsquo;s important that these are labelled properly so someone who is planning to upgrade can find it. To flag this, add the &amp;ldquo;Regression&amp;rdquo; label, and a labels in the form &amp;ldquo;Affects: {{version}}&amp;rdquo; (e.g.: &amp;ldquo;Affects: 3.14.0&amp;rdquo;) for each version where this bug exists. It&amp;rsquo;s likely that the label for this specific version doesn&amp;rsquo;t exist so you may have to create it. This ensures that issue is listed as a Known Issue in the Release Notes for that version.&lt;/p>
&lt;h2 id="project-states">Project States&lt;/h2>
&lt;p>When the issue is scheduled for development it will be added to the &lt;a href="https://github.com/orgs/medic/projects/134">Product Team Activities project&lt;/a>. Each column in the project represents the state the issue is in.&lt;/p>
&lt;h3 id="todo">Todo&lt;/h3>
&lt;p>Issues in this column have been prioritised and are ready for development. The issue has all the detail needed to begin development and it is free for anyone to start work on. If you start work on an issue, assign it to yourself and move it to &amp;ldquo;In progress&amp;rdquo;.&lt;/p>
&lt;h3 id="in-progress">In progress&lt;/h3>
&lt;p>Issues in this column are being actively worked on, which includes development, design, code reviews, and testing.&lt;/p>
&lt;p>Any code should be in a branch in each of the repositories you update. The name of the branch should be in the form &lt;code>&amp;lt;issue-number&amp;gt;-&amp;lt;readable-name&amp;gt;&lt;/code>, for example &lt;code>1104-inclusive-export&lt;/code>. Follow the &lt;a href="https://docs.communityhealthtoolkit.org/contribute/medic/product-development-process/quality-assistance/">Quality Assistance&lt;/a> process to take full ownership of what you are building.&lt;/p>
&lt;p>Use the following template for QA feedback throughout the development.&lt;/p>
&lt;ul class="nav nav-tabs" id="tabs-5" role="tablist">
&lt;li class="nav-item">
&lt;a class="nav-link active"
id="tabs-05-00-tab" data-toggle="tab" href="#tabs-05-00" role="tab"
aria-controls="tabs-05-00" aria-selected="false">
Test passed
&lt;/a>
&lt;/li>&lt;li class="nav-item">
&lt;a class="nav-link"
id="tabs-05-01-tab" data-toggle="tab" href="#tabs-05-01" role="tab"
aria-controls="tabs-05-01" aria-selected="false">
Test failed
&lt;/a>
&lt;/li>
&lt;/ul>
&lt;div class="tab-content" id="tabs-5-content">
&lt;div class="tab-pane fade show active"
id="tabs-05-00" role="tabpanel" aria-labelled-by="tabs-05-00-tab">
&lt;div class="highlight">&lt;pre tabindex="0" style="background-color:#f8f8f8;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-markdown" data-lang="markdown">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#800080;font-weight:bold">### Test details
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#800080;font-weight:bold">&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#000;font-weight:bold">**Config:**&lt;/span> &lt;span style="color:#000;font-weight:bold">&amp;lt;&lt;/span>&lt;span style="color:#204a87;font-weight:bold">Default&lt;/span>&lt;span style="color:#a40000">/&lt;/span>&lt;span style="color:#c4a000">standard&lt;/span>&lt;span style="color:#000;font-weight:bold">&amp;gt;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#000;font-weight:bold">**Environment:**&lt;/span> &lt;span style="color:#000;font-weight:bold">&amp;lt;&lt;/span>&lt;span style="color:#204a87;font-weight:bold">Local&lt;/span>&lt;span style="color:#000;font-weight:bold">&amp;gt;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#000;font-weight:bold">**Platform:**&lt;/span> &lt;span style="color:#000;font-weight:bold">&amp;lt;&lt;/span>&lt;span style="color:#204a87;font-weight:bold">WebApp&lt;/span>&lt;span style="color:#000;font-weight:bold">&amp;gt;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#000;font-weight:bold">**Browser:**&lt;/span> &lt;span style="color:#000;font-weight:bold">&amp;lt;&lt;/span>&lt;span style="color:#204a87;font-weight:bold">Chrome&lt;/span>&lt;span style="color:#000;font-weight:bold">&amp;gt;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>---
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#800080;font-weight:bold">### Test scenario:
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#800080;font-weight:bold">&lt;/span>Description of the scenario - This is not required for all the tests
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#800080;font-weight:bold">### Reproducible on `master`
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#800080;font-weight:bold">&lt;/span>A small description of how it was reproduced, and images or videos that support the comment.
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#000;font-weight:bold">&amp;lt;&lt;/span>&lt;span style="color:#204a87;font-weight:bold">details&lt;/span>&lt;span style="color:#000;font-weight:bold">&amp;gt;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#000;font-weight:bold">&amp;lt;&lt;/span>&lt;span style="color:#204a87;font-weight:bold">summary&lt;/span>&lt;span style="color:#000;font-weight:bold">&amp;gt;&lt;/span>Image/video attached&lt;span style="color:#000;font-weight:bold">&amp;lt;/&lt;/span>&lt;span style="color:#204a87;font-weight:bold">sumamry&lt;/span>&lt;span style="color:#000;font-weight:bold">&amp;gt;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#000;font-weight:bold">&amp;lt;/&lt;/span>&lt;span style="color:#204a87;font-weight:bold">details&lt;/span>&lt;span style="color:#000;font-weight:bold">&amp;gt;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#800080;font-weight:bold">### Fixed on `####-branch-name`
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#800080;font-weight:bold">&lt;/span>A small description, and images or videos that support the comment.
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#000;font-weight:bold">&amp;lt;&lt;/span>&lt;span style="color:#204a87;font-weight:bold">details&lt;/span>&lt;span style="color:#000;font-weight:bold">&amp;gt;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#000;font-weight:bold">&amp;lt;&lt;/span>&lt;span style="color:#204a87;font-weight:bold">summary&lt;/span>&lt;span style="color:#000;font-weight:bold">&amp;gt;&lt;/span>Image/video attached&lt;span style="color:#000;font-weight:bold">&amp;lt;/&lt;/span>&lt;span style="color:#204a87;font-weight:bold">sumamry&lt;/span>&lt;span style="color:#000;font-weight:bold">&amp;gt;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#000;font-weight:bold">&amp;lt;/&lt;/span>&lt;span style="color:#204a87;font-weight:bold">details&lt;/span>&lt;span style="color:#000;font-weight:bold">&amp;gt;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>---
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>Test passed successfully. :white_check_mark:
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>The ticket is ready to merge.
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>@&lt;span style="color:#000;font-weight:bold">&amp;lt;&lt;/span>&lt;span style="color:#204a87;font-weight:bold">developer&lt;/span>&lt;span style="color:#a40000">&amp;#39;&lt;/span>&lt;span style="color:#c4a000">s&lt;/span> &lt;span style="color:#c4a000">name&lt;/span>&lt;span style="color:#000;font-weight:bold">&amp;gt;&lt;/span>&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>
&lt;/div>
&lt;div class="tab-pane fade"
id="tabs-05-01" role="tabpanel" aria-labelled-by="tabs-05-01-tab">
&lt;div class="highlight">&lt;pre tabindex="0" style="background-color:#f8f8f8;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-markdown" data-lang="markdown">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#800080;font-weight:bold">### Test details
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#800080;font-weight:bold">&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#000;font-weight:bold">**Config:**&lt;/span> &lt;span style="color:#000;font-weight:bold">&amp;lt;&lt;/span>&lt;span style="color:#204a87;font-weight:bold">Default&lt;/span>&lt;span style="color:#a40000">/&lt;/span>&lt;span style="color:#c4a000">standard&lt;/span>&lt;span style="color:#000;font-weight:bold">&amp;gt;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#000;font-weight:bold">**Environment:**&lt;/span> &lt;span style="color:#000;font-weight:bold">&amp;lt;&lt;/span>&lt;span style="color:#204a87;font-weight:bold">Local&lt;/span>&lt;span style="color:#000;font-weight:bold">&amp;gt;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#000;font-weight:bold">**Platform:**&lt;/span> &lt;span style="color:#000;font-weight:bold">&amp;lt;&lt;/span>&lt;span style="color:#204a87;font-weight:bold">WebApp&lt;/span>&lt;span style="color:#000;font-weight:bold">&amp;gt;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#000;font-weight:bold">**Browser:**&lt;/span> &lt;span style="color:#000;font-weight:bold">&amp;lt;&lt;/span>&lt;span style="color:#204a87;font-weight:bold">Chrome&lt;/span>&lt;span style="color:#000;font-weight:bold">&amp;gt;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>---
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#800080;font-weight:bold">### Test scenario:
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#800080;font-weight:bold">&lt;/span>Description of the scenario - This is not required for all the tests
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#800080;font-weight:bold">### Reproducible on `master`
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#800080;font-weight:bold">&lt;/span>A small description of how it was reproduced, and images or videos that support the comment.
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#000;font-weight:bold">&amp;lt;&lt;/span>&lt;span style="color:#204a87;font-weight:bold">details&lt;/span>&lt;span style="color:#000;font-weight:bold">&amp;gt;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#000;font-weight:bold">&amp;lt;&lt;/span>&lt;span style="color:#204a87;font-weight:bold">summary&lt;/span>&lt;span style="color:#000;font-weight:bold">&amp;gt;&lt;/span>Image/video attached&lt;span style="color:#000;font-weight:bold">&amp;lt;/&lt;/span>&lt;span style="color:#204a87;font-weight:bold">sumamry&lt;/span>&lt;span style="color:#000;font-weight:bold">&amp;gt;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#000;font-weight:bold">&amp;lt;/&lt;/span>&lt;span style="color:#204a87;font-weight:bold">details&lt;/span>&lt;span style="color:#000;font-weight:bold">&amp;gt;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#800080;font-weight:bold">### Not working on `####-branch-name`
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#800080;font-weight:bold">&lt;/span>A small description, and images or videos that support the comment.
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#000;font-weight:bold">&amp;lt;&lt;/span>&lt;span style="color:#204a87;font-weight:bold">details&lt;/span>&lt;span style="color:#000;font-weight:bold">&amp;gt;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#000;font-weight:bold">&amp;lt;&lt;/span>&lt;span style="color:#204a87;font-weight:bold">summary&lt;/span>&lt;span style="color:#000;font-weight:bold">&amp;gt;&lt;/span>Image/video attached&lt;span style="color:#000;font-weight:bold">&amp;lt;/&lt;/span>&lt;span style="color:#204a87;font-weight:bold">sumamry&lt;/span>&lt;span style="color:#000;font-weight:bold">&amp;gt;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#000;font-weight:bold">&amp;lt;/&lt;/span>&lt;span style="color:#204a87;font-weight:bold">details&lt;/span>&lt;span style="color:#000;font-weight:bold">&amp;gt;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>---
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>Test failed :x:
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>The ticket needs further development.
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>@&lt;span style="color:#000;font-weight:bold">&amp;lt;&lt;/span>&lt;span style="color:#204a87;font-weight:bold">developer&lt;/span>&lt;span style="color:#a40000">&amp;#39;&lt;/span>&lt;span style="color:#c4a000">s&lt;/span> &lt;span style="color:#c4a000">name&lt;/span>&lt;span style="color:#000;font-weight:bold">&amp;gt;&lt;/span>&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>
&lt;/div>
&lt;/div>
&lt;p>A great way to facilitate discussion and collaboration is with a Draft PR.&lt;/p>
&lt;p>Once you&amp;rsquo;re confident that the change is complete and ready to be merged:&lt;/p>
&lt;ol>
&lt;li>Submit a PR for each of the repositories. Each PR message and description will become the commit message and description so keep the message concise, describe what and why rather than how, and link to the issue in the description (eg: &amp;ldquo;medic/cht-core#123&amp;rdquo;).&lt;/li>
&lt;li>Wait for the builds to succeed and ensure there are no conflicts with the the main branch so the PR can be merged.&lt;/li>
&lt;li>Pick one Reviewer for the PR and work with them until the code passes review. In some special cases more than one Reviewer may be necessary, but be specific about additional Reviewers and ensure you really need each of their additional reviews for a good reason. Remember, anyone can collaborate on PRs even if they aren&amp;rsquo;t an official Reviewer. If you add a QA Engineer as a Reviewer, briefly comment in the ticket about what kind of testing review you expect from that engineer.&lt;/li>
&lt;/ol>
&lt;p>Once all PRs have been approved:&lt;/p>
&lt;ol>
&lt;li>Write a useful commit message in the PR using the &lt;a href="#commit-message-format">commit message format&lt;/a>.&lt;/li>
&lt;li>Click the button to &amp;ldquo;Squash and Merge&amp;rdquo; the PR.&lt;/li>
&lt;li>If a backport is required cherry-pick the merged commit back to the release branches it&amp;rsquo;s required in.&lt;/li>
&lt;li>Close the issue. This will automatically move it to &amp;ldquo;Done&amp;rdquo;.&lt;/li>
&lt;/ol>
&lt;p>Once all PRs has been approved merge them to the main branch and close the issue.&lt;/p>
&lt;h3 id="done">Done&lt;/h3>
&lt;p>Issues in this column are complete, all code has been merged into the main branch and/or release branches, and are ready for release.&lt;/p></description></item><item><title>Contribute: Releasing</title><link>https://docs.communityhealthtoolkit.org/contribute/code/releasing/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://docs.communityhealthtoolkit.org/contribute/code/releasing/</guid><description>
&lt;h2 id="cht-core">CHT Core&lt;/h2>
&lt;p>A release is a set of code changes bundled together, ideally with at least one deployment of CHT apps ready to make use of it.&lt;/p>
&lt;h3 id="building--releasing-cht-core-changes">Building &amp;amp; Releasing CHT Core Changes&lt;/h3>
&lt;p>The high-level steps for a release are as follows:&lt;/p>
&lt;ul>
&lt;li>The &lt;a href="https://docs.communityhealthtoolkit.org/contribute/medic/product-development-process/focused-groups/">Focused Working Group&lt;/a> sees an opportunity they want to go after. The opportunity addresses a need of at least one CHT app deployment and will be used by that deployment after the release.&lt;/li>
&lt;li>The Focused Working Group agrees on a solution for it.&lt;/li>
&lt;li>Tickets are added to the &lt;a href="https://github.com/orgs/medic/projects/134/views/3">Product Team Activities board&lt;/a> for what&amp;rsquo;s being built.&lt;/li>
&lt;li>A &lt;a href="#release-manager">release manager&lt;/a> is assigned from the team.&lt;/li>
&lt;li>The release manager &lt;a href="https://github.com/medic/cht-core/issues/new/choose">creates an issue&lt;/a> for either a &lt;a href="#majorminorpatch-release">Major/Minor or Patch&lt;/a> release and follows the process outlined in the issue template.&lt;/li>
&lt;li>Code is built by a developer together with &lt;a href="https://docs.communityhealthtoolkit.org/contribute/medic/product-development-process/quality-assistance/">quality assistance&lt;/a>.&lt;/li>
&lt;li>&lt;a href="https://docs.communityhealthtoolkit.org/contribute/code/workflow/#code-reviews">Code is reviewed&lt;/a>.&lt;/li>
&lt;li>Code is merged.&lt;/li>
&lt;li>Code is released.&lt;/li>
&lt;/ul>
&lt;h3 id="release-manager">Release Manager&lt;/h3>
&lt;p>The overall coordination and operation of the release process are the responsibility of the release manager.&lt;/p>
&lt;p>The release manager must perform several tasks for a new release, such as coordinating with team members and following all the steps in the &lt;a href="https://github.com/medic/cht-core/issues/new/choose">release issue process&lt;/a>, some of them being manual. The release manager must have adequate permissions to the repositories where the release is made.&lt;/p>
&lt;h3 id="majorminorpatch-release">Major/Minor/Patch Release&lt;/h3>
&lt;div class="alert alert-primary" role="alert">
&lt;h4 class="alert-heading">Note&lt;/h4>
The following classification is defined by the &lt;a href="https://semver.org">Semantic Versioning 2.0.0&lt;/a>.
&lt;/div>
&lt;p>Given a version number &lt;code>MAJOR.MINOR.PATCH&lt;/code>, increment the:&lt;/p>
&lt;ul>
&lt;li>&lt;code>MAJOR&lt;/code> version when the release adds incompatible changes, e.g. when the apps built on top of the CHT require manual intervention to work as expected.&lt;/li>
&lt;li>&lt;code>MINOR&lt;/code> version when the release adds functionality in a backward-compatible manner.&lt;/li>
&lt;li>&lt;code>PATCH&lt;/code> version when the release adds backward-compatible bug fixes.&lt;/li>
&lt;/ul>
&lt;p>&lt;code>MAJOR&lt;/code> releases represent the biggest scale of code change and their roll out effort is high, as they likely require time and effort to set up or configure. As a consequence, they are the least frequent of the three release types.&lt;/p>
&lt;div class="alert alert-primary" role="alert">
&lt;h4 class="alert-heading">Info&lt;/h4>
You can find the versions currently supported, dependencies, and release notes for the CHT Core
&lt;a href="https://docs.communityhealthtoolkit.org/core/releases/">on the Releases page&lt;/a>.
&lt;/div>
&lt;h2 id="cht-conf">CHT Conf&lt;/h2>
&lt;p>Follow the &lt;a href="https://github.com/medic/cht-conf/#user-content-releasing">instructions in the readme&lt;/a>.&lt;/p>
&lt;h2 id="android-apps">Android apps&lt;/h2>
&lt;p>Follow the instructions in the &lt;a href="https://docs.communityhealthtoolkit.org/contribute/code/android/releasing/">Android &amp;gt; Releasing&lt;/a> section.&lt;/p></description></item><item><title>Contribute: Static Analysis</title><link>https://docs.communityhealthtoolkit.org/contribute/code/static-analysis/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://docs.communityhealthtoolkit.org/contribute/code/static-analysis/</guid><description>
&lt;h2 id="eslint">eslint&lt;/h2>
&lt;p>All code must pass an eslint check which runs early in the CI cycle and uses the &lt;a href="https://github.com/medic/eslint-config">standard medic eslint configuration&lt;/a>.&lt;/p>
&lt;h2 id="sonar">Sonar&lt;/h2>
&lt;p>&lt;a href="https://www.sonarsource.com/">Sonar&lt;/a> static analysis supports development by providing feedback on code quality and security issues. Sonar analysis must pass on all &lt;em>new code&lt;/em>.&lt;/p>
&lt;p>&lt;a href="https://www.sonarsource.com/products/sonarcloud/">SonarCloud&lt;/a> can be enabled on any public repo in the &lt;code>medic&lt;/code> organization.&lt;/p>
&lt;h3 id="workflow">Workflow&lt;/h3>
&lt;h4 id="during-development">During development&lt;/h4>
&lt;p>While writing code, the &lt;a href="https://www.sonarsource.com/products/sonarlint/">SonarLint&lt;/a> plugin can be used to get real-time code analysis in your IDE. This is useful to avoid committing code with Sonar issues in the first place.&lt;/p>
&lt;h4 id="pr-analysis">PR Analysis&lt;/h4>
&lt;p>SonarCloud is integrated with the CHT GitHub repositories and runs on every pull request. The results are posted as a comment on the pull request. If the Sonar analysis fails the quality check, the pull request will be blocked from merging.&lt;/p>
&lt;h5 id="what-should-i-do-if-sonar-finds-an-issue">What should I do if Sonar finds an issue?&lt;/h5>
&lt;p>When Sonar flags an issue with the code in your pull request, use this decision tree to determine the proper mitigation:&lt;/p>
&lt;ol>
&lt;li>If the issue is a genuine concern that should be addressed:
&lt;ol>
&lt;li>Fix it and push the updated code to your PR. The PR will automatically be unblocked once the Sonar analysis succeeds.&lt;/li>
&lt;/ol>
&lt;/li>
&lt;li>If the issue is a &amp;ldquo;false-positive&amp;rdquo; (i.e. Sonar has flagged some particular code as violating a rule, but it does not make sense to apply the rule in that context):
&lt;ol>
&lt;li>If the rule is one that should not be applied to any CHT code:
&lt;ol>
&lt;li>&lt;a href="#removing-a-rule">Remove the rule&lt;/a> from the default Quality Profile.&lt;/li>
&lt;/ol>
&lt;/li>
&lt;li>If it does not make sense to apply the rule to this particular code, you can do one of the following:
&lt;ol>
&lt;li>Completely ignore Sonar issues &lt;a href="https://docs.sonarsource.com/sonarqube/latest/user-guide/issues/#technical-review">on that line of code&lt;/a> by adding the &lt;code>// NOSONAR&lt;/code> comment to the end of the line.&lt;/li>
&lt;li>Update the &lt;code>.sonarcloud.properties&lt;/code> to &lt;a href="#ignoring-a-specific-rule-for-a-file">ignore &lt;em>that rule&lt;/em> for that particular file&lt;/a>.&lt;/li>
&lt;li>Update the &lt;code>.sonarcloud.properties&lt;/code> to &lt;a href="#ignoring-all-rules-for-a-file">ignore &lt;em>all rules&lt;/em> for that particular file&lt;/a> (useful if the file has been copied from an external dependency).&lt;/li>
&lt;/ol>
&lt;/li>
&lt;/ol>
&lt;/li>
&lt;/ol>
&lt;h3 id="adding-a-new-repo-to-sonarcloud">Adding a new repo to SonarCloud&lt;/h3>
&lt;ol>
&lt;li>Add a &lt;code>.sonarcloud.properties&lt;/code> file to the repository with your desired &lt;a href="#ignoring-all-rules-for-a-file">repo-level configuration&lt;/a>.&lt;/li>
&lt;li>In the GitHub UI, navigate to the settings for the &lt;a href="https://github.com/organizations/medic/settings/installations">&lt;code>medic&lt;/code> org &amp;gt; Third-party Access &amp;gt; GitHub Apps&lt;/a>&lt;/li>
&lt;li>Find SonarCloud and click the &lt;code>Configure&lt;/code> button.&lt;/li>
&lt;li>In the Repository access section, select your desired repository from the drop-down and click &lt;code>Save&lt;/code>.&lt;/li>
&lt;li>You will be automatically redirected to the SonarCloud UI where you can configure the repo-level settings.&lt;/li>
&lt;li>Use the &lt;code>+&lt;/code> button and choose &lt;code>Analyze new project&lt;/code>.&lt;/li>
&lt;li>Select the repo from the list and click &lt;code>Set Up&lt;/code>.&lt;/li>
&lt;/ol>
&lt;h4 id="new-code-definition">New Code Definition&lt;/h4>
&lt;p>When setting up a new repository in SonarCloud, you will be asked to define what is considered to be &amp;ldquo;new code&amp;rdquo;. This is used to determine which code in the default branch is considered &amp;ldquo;new&amp;rdquo; (affects reporting of issues, etc).&lt;/p>
&lt;p>Consult &lt;a href="https://docs.sonarcloud.io/improving/new-code-definition/">the documentation&lt;/a> for more details on the options available. For projects that do not use Gradle or Maven for version management, the &lt;code>Number of days&lt;/code> option is recommended (since &lt;code>Previous version&lt;/code> would require maintaining a version number in the &lt;code>.sonarcloud.properties&lt;/code> file).&lt;/p>
&lt;h3 id="sonar-configuration">Sonar Configuration&lt;/h3>
&lt;p>Broadly speaking, Sonar configuration is separated into repo-level and org-level configuration.&lt;/p>
&lt;h4 id="repo-level-configuration">Repo-level configuration&lt;/h4>
&lt;p>Each repository can include a &lt;code>.sonarcloud.properties&lt;/code> file in the root directory.&lt;/p>
&lt;p>This file must specify the path to the source code in the repository as well as which source files should be considered to be test code. See &lt;a href="https://docs.sonarsource.com/sonarqube/latest/project-administration/analysis-scope/">the documentation&lt;/a> for more details.&lt;/p>
&lt;pre tabindex="0">&lt;code class="language-properties" data-lang="properties"># Path to sources
sonar.sources=.
# Can have multiple comma-separated entries
sonar.exclusions=**/test*/**/*
# Path to tests
sonar.tests=.
# Can have multiple comma-separated entries
sonar.test.inclusions=**/test*/**/*
&lt;/code>&lt;/pre>&lt;p>Additionally, the &lt;code>.sonarcloud.properties&lt;/code> file can contain configuration regarding ignoring certain rules.&lt;/p>
&lt;h5 id="ignoring-all-rules-for-a-file">Ignoring all rules for a file&lt;/h5>
&lt;p>Use the following properties to completely ignore all rules for one or more files:&lt;/p>
&lt;pre tabindex="0">&lt;code class="language-properties" data-lang="properties">sonar.issue.ignore.allfile=r1
sonar.issue.ignore.allfile.r1.fileRegexp=**/openrosa2html5form.xsl
&lt;/code>&lt;/pre>&lt;h5 id="ignoring-a-specific-rule-for-a-file">Ignoring a specific rule for a file&lt;/h5>
&lt;p>Use the following properties to ignore a specific rule for one or more files:&lt;/p>
&lt;pre tabindex="0">&lt;code class="language-properties" data-lang="properties">sonar.issue.ignore.multicriteria=e1,e2
sonar.issue.ignore.multicriteria.e1.ruleKey=javascript:S6582
sonar.issue.ignore.multicriteria.e1.resourceKey=**/auth.js
sonar.issue.ignore.multicriteria.e2.ruleKey=javascript:S2699
sonar.issue.ignore.multicriteria.e2.resourceKey=**/config.js
&lt;/code>&lt;/pre>&lt;h4 id="org-level-configuration">Org-level configuration&lt;/h4>
&lt;p>Organization-level configuration must be made by an authorized user in the &lt;a href="https://sonarcloud.io/projects">SonarCloud UI&lt;/a>.&lt;/p>
&lt;h5 id="quality-gates">Quality Gates&lt;/h5>
&lt;p>Quality gates are used to define the criteria that must be met for a Sonar analysis to be considered &amp;ldquo;passing&amp;rdquo;. The &lt;a href="https://docs.sonarcloud.io/improving/quality-gates/#how-quality-gates-are-defined">&lt;code>Sonar way&lt;/code> quality gate&lt;/a> provides an example of a useful configuration. However, this gate config is not ideal for CHT code. Instead, the default quality gate for the &lt;code>Medic&lt;/code> organization is the &lt;code>CHT Way&lt;/code>. It has the following &lt;a href="https://docs.sonarsource.com/sonarqube/latest/user-guide/metric-definitions/">metrics&lt;/a>:&lt;/p>
&lt;table>
&lt;thead>
&lt;tr>
&lt;th>Metric&lt;/th>
&lt;th>Operator&lt;/th>
&lt;th>Value&lt;/th>
&lt;/tr>
&lt;/thead>
&lt;tbody>
&lt;tr>
&lt;td>Duplicated Lines (%)&lt;/td>
&lt;td>is greater than&lt;/td>
&lt;td>3.0%&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>Issues&lt;/td>
&lt;td>is greater than&lt;/td>
&lt;td>0&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>Reliability Rating&lt;/td>
&lt;td>is worse than&lt;/td>
&lt;td>A&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>Security Hotspots Reviewed&lt;/td>
&lt;td>is less than&lt;/td>
&lt;td>100%&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>Security Rating&lt;/td>
&lt;td>is worse than&lt;/td>
&lt;td>A&lt;/td>
&lt;/tr>
&lt;/tbody>
&lt;/table>
&lt;h5 id="quality-profiles">Quality Profiles&lt;/h5>
&lt;p>The quality profiles are the lists of rules that will be applied for the various supported languages. By default, we use the &lt;code>Sonar Way&lt;/code> quality profile for each language as it provides sensible defaults and is actively maintained receiving updates with new rules and bug fixes as they are added to Sonar.&lt;/p>
&lt;h6 id="modifying-rule-parameters">Modifying rule parameters&lt;/h6>
&lt;p>To modify a rule parameter (e.g. change the allowed level of complexity for a function &lt;a href="https://rules.sonarsource.com/javascript/RSPEC-3776/">according to &lt;code>javascript:S3776&lt;/code>&lt;/a>):&lt;/p>
&lt;ol>
&lt;li>Open a cht-docs PR to record your rule modification in the list below. This allows us to track the history of rule changes and record for posterity the discussions about them.&lt;/li>
&lt;li>If not already using a custom quality profile, use the SonarCloud UI to create one that &lt;em>extends&lt;/em> the &lt;code>Sonar Way&lt;/code> profile.
&lt;ol>
&lt;li>Make sure to set the new quality profile as the default for that language, if desired.&lt;/li>
&lt;/ol>
&lt;/li>
&lt;li>Open the rule in question in the SonarCloud UI and use the &lt;code>Change&lt;/code> button associated with your quality profile to set your custom parameter value for the rule.&lt;/li>
&lt;/ol>
&lt;h6 id="adding-a-rule">Adding a rule&lt;/h6>
&lt;p>To include a new rule in the code analysis, add it to the quality profile:&lt;/p>
&lt;ol>
&lt;li>Open a cht-docs PR to record your rule addition in the list below. This allows us to track the history of rule changes and record for posterity the discussions about them.&lt;/li>
&lt;li>If not already using a custom quality profile, use the SonarCloud UI to create one that &lt;em>extends&lt;/em> the &lt;code>Sonar Way&lt;/code> profile.
&lt;ol>
&lt;li>Make sure to set the new quality profile as the default for that language, if desired.&lt;/li>
&lt;/ol>
&lt;/li>
&lt;li>Open the rule in question in the SonarCloud UI and use the &lt;code>Activate&lt;/code> button to activate the rule in your quality profile&lt;/li>
&lt;/ol>
&lt;h6 id="removing-a-rule">Removing a rule&lt;/h6>
&lt;p>Removing a rule should only be done as a last resort. It is not possible to remove a rule inherited from the &lt;code>Sonar Way&lt;/code> profile while at the same time still &lt;em>extending&lt;/em> that profile. So, future updates to the &lt;code>Sonar Way&lt;/code> profile will not be applied to your custom profile after a rule has been removed.&lt;/p>
&lt;ol>
&lt;li>Open a cht-docs PR to record your rule removal in the list below. This allows us to track the history of rule changes and record for posterity the discussions about them.&lt;/li>
&lt;li>If not already using a custom quality profile, use the SonarCloud UI to &lt;em>copy&lt;/em> (not extend) the &lt;code>Sonar Way&lt;/code> profile into a new profile.
&lt;ol>
&lt;li>Make sure to set the new quality profile as the default for that language, if desired.&lt;/li>
&lt;/ol>
&lt;/li>
&lt;li>Open the rule in question in the SonarCloud UI and use the &lt;code>Activate&lt;/code> button to activate the rule in your quality profile&lt;/li>
&lt;/ol>
&lt;h6 id="custom-cht-quality-profiles">Custom CHT Quality Profiles&lt;/h6>
&lt;p>Java:&lt;/p>
&lt;ul>
&lt;li>&lt;strong>CHT Way&lt;/strong> &lt;em>(default)&lt;/em> extends &lt;strong>Sonar Way&lt;/strong>
&lt;ul>
&lt;li>Modified:
&lt;ul>
&lt;li>&lt;a href="https://rules.sonarsource.com/javascript/RSPEC-107/">&lt;code>S107&lt;/code>&lt;/a> - Functions should not have too many parameters
&lt;ul>
&lt;li>&lt;code>threshold&lt;/code> 7 -&amp;gt; 4&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>&lt;a href="https://rules.sonarsource.com/javascript/RSPEC-3776/">&lt;code>S3776&lt;/code>&lt;/a> - Cognitive Complexity of functions should not be too high
&lt;ul>
&lt;li>&lt;code>threshold&lt;/code> 15 -&amp;gt; 5&lt;/li>
&lt;/ul>
&lt;/li>
&lt;/ul>
&lt;/li>
&lt;/ul>
&lt;/li>
&lt;/ul>
&lt;p>JavaScript:&lt;/p>
&lt;ul>
&lt;li>&lt;strong>CHT Way&lt;/strong> &lt;em>(default)&lt;/em> extends &lt;strong>Sonar Way&lt;/strong>
&lt;ul>
&lt;li>Modified:
&lt;ul>
&lt;li>&lt;a href="https://rules.sonarsource.com/javascript/RSPEC-107/">&lt;code>S107&lt;/code>&lt;/a> - Functions should not have too many parameters
&lt;ul>
&lt;li>&lt;code>threshold&lt;/code> 7 -&amp;gt; 4&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>&lt;a href="https://rules.sonarsource.com/javascript/RSPEC-3776/">&lt;code>S3776&lt;/code>&lt;/a> - Cognitive Complexity of functions should not be too high
&lt;ul>
&lt;li>&lt;code>threshold&lt;/code> 15 -&amp;gt; 5&lt;/li>
&lt;/ul>
&lt;/li>
&lt;/ul>
&lt;/li>
&lt;/ul>
&lt;/li>
&lt;/ul>
&lt;p>Python:&lt;/p>
&lt;ul>
&lt;li>&lt;strong>CHT Way&lt;/strong> &lt;em>(default)&lt;/em> extends &lt;strong>Sonar Way&lt;/strong>
&lt;ul>
&lt;li>Modified:
&lt;ul>
&lt;li>&lt;a href="https://rules.sonarsource.com/javascript/RSPEC-107/">&lt;code>S107&lt;/code>&lt;/a> - Functions should not have too many parameters
&lt;ul>
&lt;li>&lt;code>threshold&lt;/code> 7 -&amp;gt; 4&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>&lt;a href="https://rules.sonarsource.com/javascript/RSPEC-3776/">&lt;code>S3776&lt;/code>&lt;/a> - Cognitive Complexity of functions should not be too high
&lt;ul>
&lt;li>&lt;code>threshold&lt;/code> 15 -&amp;gt; 5&lt;/li>
&lt;/ul>
&lt;/li>
&lt;/ul>
&lt;/li>
&lt;/ul>
&lt;/li>
&lt;/ul>
&lt;p>TypeScript:&lt;/p>
&lt;ul>
&lt;li>&lt;strong>CHT Way&lt;/strong> &lt;em>(default)&lt;/em> extends &lt;strong>Sonar Way&lt;/strong>
&lt;ul>
&lt;li>Modified:
&lt;ul>
&lt;li>&lt;a href="https://rules.sonarsource.com/javascript/RSPEC-107/">&lt;code>S107&lt;/code>&lt;/a> - Functions should not have too many parameters
&lt;ul>
&lt;li>&lt;code>threshold&lt;/code> 7 -&amp;gt; 4&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>&lt;a href="https://rules.sonarsource.com/javascript/RSPEC-3776/">&lt;code>S3776&lt;/code>&lt;/a> - Cognitive Complexity of functions should not be too high
&lt;ul>
&lt;li>&lt;code>threshold&lt;/code> 15 -&amp;gt; 5&lt;/li>
&lt;/ul>
&lt;/li>
&lt;/ul>
&lt;/li>
&lt;/ul>
&lt;/li>
&lt;/ul></description></item><item><title>Contribute: Coding Style Guide</title><link>https://docs.communityhealthtoolkit.org/contribute/code/style-guide/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://docs.communityhealthtoolkit.org/contribute/code/style-guide/</guid><description>
&lt;h2 id="language">Language&lt;/h2>
&lt;p>Prefer JavaScript or TypeScript wherever possible, including in webapps, on the server, and for scripting. This is because:&lt;/p>
&lt;ul>
&lt;li>every developer on the team knows it already, so we can all maintain it together,&lt;/li>
&lt;li>it makes it easy to write cross-platform code and we have developers on all major operating systems,&lt;/li>
&lt;li>it has a vast number of libraries that are easy to include, and&lt;/li>
&lt;li>it&amp;rsquo;s easy to unit test&lt;/li>
&lt;/ul>
&lt;p>Exceptions to this can be made on a case-by-case basis, but the decision must be made collectively before coding has begun to avoid having to rewrite.&lt;/p>
&lt;h2 id="styles">Styles&lt;/h2>
&lt;p>This is a guide, not a law - use your discretion. Mostly based on &lt;a href="https://github.com/felixge/node-style-guide">Felix GeisendÃ¶rfer&amp;rsquo;s&lt;/a> guide with our own tweaks.&lt;/p>
&lt;h3 id="indention">Indention&lt;/h3>
&lt;p>Use 2 spaces for indenting your code and swear an oath to never mix tabs and
spaces - a special kind of hell is awaiting you otherwise.&lt;/p>
&lt;h3 id="newlines">Newlines&lt;/h3>
&lt;p>Use UNIX-style newlines (&lt;code>\n&lt;/code>), and a newline character as the last character
of a file. Windows-style newlines (&lt;code>\r\n&lt;/code>) are forbidden inside any repository.&lt;/p>
&lt;h3 id="no-trailing-whitespace">No trailing whitespace&lt;/h3>
&lt;p>Just like you brush your teeth after every meal, you clean up any trailing
whitespace in your JS files before committing. Otherwise the rotten smell of
careless neglect will eventually drive away contributors and/or co-workers.&lt;/p>
&lt;h3 id="use-semicolons">Use Semicolons&lt;/h3>
&lt;p>According to &lt;a href="http://news.ycombinator.com/item?id=1547647">scientific research&lt;/a>, the usage of semicolons is
a core value of our community. Consider the points of &lt;a href="http://blog.izs.me/post/2353458699/an-open-letter-to-javascript-leaders-regarding">the opposition&lt;/a>, but
be a traditionalist when it comes to abusing error correction mechanisms for
cheap syntactic pleasures.&lt;/p>
&lt;h3 id="use-single-quotes">Use single quotes&lt;/h3>
&lt;p>Use single quotes, unless you are writing JSON.&lt;/p>
&lt;p>&lt;em>Right:&lt;/em>&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="background-color:#f8f8f8;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-js" data-lang="js">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#204a87;font-weight:bold">const&lt;/span> &lt;span style="color:#000">foo&lt;/span> &lt;span style="color:#ce5c00;font-weight:bold">=&lt;/span> &lt;span style="color:#4e9a06">&amp;#39;bar&amp;#39;&lt;/span>&lt;span style="color:#000;font-weight:bold">;&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>&lt;em>Wrong:&lt;/em>&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="background-color:#f8f8f8;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-js" data-lang="js">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#204a87;font-weight:bold">const&lt;/span> &lt;span style="color:#000">foo&lt;/span> &lt;span style="color:#ce5c00;font-weight:bold">=&lt;/span> &lt;span style="color:#4e9a06">&amp;#34;bar&amp;#34;&lt;/span>&lt;span style="color:#000;font-weight:bold">;&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;h3 id="opening-braces-go-on-the-same-line">Opening braces go on the same line&lt;/h3>
&lt;p>Your opening braces go on the same line as the statement, with whitespace before and after the condition, followed by a new line.&lt;/p>
&lt;p>&lt;em>Right:&lt;/em>&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="background-color:#f8f8f8;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-js" data-lang="js">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#204a87;font-weight:bold">if&lt;/span> &lt;span style="color:#000;font-weight:bold">(&lt;/span>&lt;span style="color:#204a87;font-weight:bold">true&lt;/span>&lt;span style="color:#000;font-weight:bold">)&lt;/span> &lt;span style="color:#000;font-weight:bold">{&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#000">console&lt;/span>&lt;span style="color:#000;font-weight:bold">.&lt;/span>&lt;span style="color:#000">log&lt;/span>&lt;span style="color:#000;font-weight:bold">(&lt;/span>&lt;span style="color:#4e9a06">&amp;#39;winning&amp;#39;&lt;/span>&lt;span style="color:#000;font-weight:bold">);&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#000;font-weight:bold">}&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>&lt;em>Wrong:&lt;/em>&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="background-color:#f8f8f8;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-js" data-lang="js">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#204a87;font-weight:bold">if&lt;/span> &lt;span style="color:#000;font-weight:bold">(&lt;/span>&lt;span style="color:#204a87;font-weight:bold">true&lt;/span>&lt;span style="color:#000;font-weight:bold">)&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#000;font-weight:bold">{&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#000">console&lt;/span>&lt;span style="color:#000;font-weight:bold">.&lt;/span>&lt;span style="color:#000">log&lt;/span>&lt;span style="color:#000;font-weight:bold">(&lt;/span>&lt;span style="color:#4e9a06">&amp;#39;losing&amp;#39;&lt;/span>&lt;span style="color:#000;font-weight:bold">);&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#000;font-weight:bold">}&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#204a87;font-weight:bold">if&lt;/span> &lt;span style="color:#000;font-weight:bold">(&lt;/span>&lt;span style="color:#204a87;font-weight:bold">true&lt;/span>&lt;span style="color:#000;font-weight:bold">)&lt;/span> &lt;span style="color:#000;font-weight:bold">{&lt;/span> &lt;span style="color:#000">console&lt;/span>&lt;span style="color:#000;font-weight:bold">.&lt;/span>&lt;span style="color:#000">log&lt;/span>&lt;span style="color:#000;font-weight:bold">(&lt;/span>&lt;span style="color:#4e9a06">&amp;#39;losing&amp;#39;&lt;/span>&lt;span style="color:#000;font-weight:bold">);&lt;/span> &lt;span style="color:#000;font-weight:bold">}&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#204a87;font-weight:bold">if&lt;/span>&lt;span style="color:#000;font-weight:bold">(&lt;/span>&lt;span style="color:#204a87;font-weight:bold">true&lt;/span>&lt;span style="color:#000;font-weight:bold">){&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#000">console&lt;/span>&lt;span style="color:#000;font-weight:bold">.&lt;/span>&lt;span style="color:#000">log&lt;/span>&lt;span style="color:#000;font-weight:bold">(&lt;/span>&lt;span style="color:#4e9a06">&amp;#39;winning&amp;#39;&lt;/span>&lt;span style="color:#000;font-weight:bold">);&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#000;font-weight:bold">}&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;h3 id="method-chaining">Method chaining&lt;/h3>
&lt;p>One method per line should be used if you want to chain methods.&lt;/p>
&lt;p>You should also indent these methods so it&amp;rsquo;s easier to tell they are part of the same chain.&lt;/p>
&lt;p>&lt;em>Right:&lt;/em>&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="background-color:#f8f8f8;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-js" data-lang="js">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#000">User&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#000;font-weight:bold">.&lt;/span>&lt;span style="color:#000">findOne&lt;/span>&lt;span style="color:#000;font-weight:bold">({&lt;/span> &lt;span style="color:#000">name&lt;/span>&lt;span style="color:#ce5c00;font-weight:bold">:&lt;/span> &lt;span style="color:#4e9a06">&amp;#39;foo&amp;#39;&lt;/span> &lt;span style="color:#000;font-weight:bold">})&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#000;font-weight:bold">.&lt;/span>&lt;span style="color:#000">populate&lt;/span>&lt;span style="color:#000;font-weight:bold">(&lt;/span>&lt;span style="color:#4e9a06">&amp;#39;bar&amp;#39;&lt;/span>&lt;span style="color:#000;font-weight:bold">)&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#000;font-weight:bold">.&lt;/span>&lt;span style="color:#000">exec&lt;/span>&lt;span style="color:#000;font-weight:bold">(()&lt;/span> &lt;span style="color:#000;font-weight:bold">=&amp;gt;&lt;/span> &lt;span style="color:#204a87;font-weight:bold">true&lt;/span>&lt;span style="color:#000;font-weight:bold">);&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>&lt;em>Wrong:&lt;/em>&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="background-color:#f8f8f8;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-js" data-lang="js">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#000">User&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#000;font-weight:bold">.&lt;/span>&lt;span style="color:#000">findOne&lt;/span>&lt;span style="color:#000;font-weight:bold">({&lt;/span> &lt;span style="color:#000">name&lt;/span>&lt;span style="color:#ce5c00;font-weight:bold">:&lt;/span> &lt;span style="color:#4e9a06">&amp;#39;foo&amp;#39;&lt;/span> &lt;span style="color:#000;font-weight:bold">})&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#000;font-weight:bold">.&lt;/span>&lt;span style="color:#000">populate&lt;/span>&lt;span style="color:#000;font-weight:bold">(&lt;/span>&lt;span style="color:#4e9a06">&amp;#39;bar&amp;#39;&lt;/span>&lt;span style="color:#000;font-weight:bold">)&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#000;font-weight:bold">.&lt;/span>&lt;span style="color:#000">exec&lt;/span>&lt;span style="color:#000;font-weight:bold">(()&lt;/span> &lt;span style="color:#000;font-weight:bold">=&amp;gt;&lt;/span> &lt;span style="color:#204a87;font-weight:bold">true&lt;/span>&lt;span style="color:#000;font-weight:bold">);&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#000">User&lt;/span>&lt;span style="color:#000;font-weight:bold">.&lt;/span>&lt;span style="color:#000">findOne&lt;/span>&lt;span style="color:#000;font-weight:bold">({&lt;/span> &lt;span style="color:#000">name&lt;/span>&lt;span style="color:#ce5c00;font-weight:bold">:&lt;/span> &lt;span style="color:#4e9a06">&amp;#39;foo&amp;#39;&lt;/span> &lt;span style="color:#000;font-weight:bold">})&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#000;font-weight:bold">.&lt;/span>&lt;span style="color:#000">populate&lt;/span>&lt;span style="color:#000;font-weight:bold">(&lt;/span>&lt;span style="color:#4e9a06">&amp;#39;bar&amp;#39;&lt;/span>&lt;span style="color:#000;font-weight:bold">)&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#000;font-weight:bold">.&lt;/span>&lt;span style="color:#000">exec&lt;/span>&lt;span style="color:#000;font-weight:bold">(()&lt;/span> &lt;span style="color:#000;font-weight:bold">=&amp;gt;&lt;/span> &lt;span style="color:#204a87;font-weight:bold">true&lt;/span>&lt;span style="color:#000;font-weight:bold">);&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#000">User&lt;/span>&lt;span style="color:#000;font-weight:bold">.&lt;/span>&lt;span style="color:#000">findOne&lt;/span>&lt;span style="color:#000;font-weight:bold">({&lt;/span> &lt;span style="color:#000">name&lt;/span>&lt;span style="color:#ce5c00;font-weight:bold">:&lt;/span> &lt;span style="color:#4e9a06">&amp;#39;foo&amp;#39;&lt;/span> &lt;span style="color:#000;font-weight:bold">}).&lt;/span>&lt;span style="color:#000">populate&lt;/span>&lt;span style="color:#000;font-weight:bold">(&lt;/span>&lt;span style="color:#4e9a06">&amp;#39;bar&amp;#39;&lt;/span>&lt;span style="color:#000;font-weight:bold">)&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#000;font-weight:bold">.&lt;/span>&lt;span style="color:#000">exec&lt;/span>&lt;span style="color:#000;font-weight:bold">(()&lt;/span> &lt;span style="color:#000;font-weight:bold">=&amp;gt;&lt;/span> &lt;span style="color:#204a87;font-weight:bold">true&lt;/span>&lt;span style="color:#000;font-weight:bold">);&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#000">User&lt;/span>&lt;span style="color:#000;font-weight:bold">.&lt;/span>&lt;span style="color:#000">findOne&lt;/span>&lt;span style="color:#000;font-weight:bold">({&lt;/span> &lt;span style="color:#000">name&lt;/span>&lt;span style="color:#ce5c00;font-weight:bold">:&lt;/span> &lt;span style="color:#4e9a06">&amp;#39;foo&amp;#39;&lt;/span> &lt;span style="color:#000;font-weight:bold">}).&lt;/span>&lt;span style="color:#000">populate&lt;/span>&lt;span style="color:#000;font-weight:bold">(&lt;/span>&lt;span style="color:#4e9a06">&amp;#39;bar&amp;#39;&lt;/span>&lt;span style="color:#000;font-weight:bold">)&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#000;font-weight:bold">.&lt;/span>&lt;span style="color:#000">exec&lt;/span>&lt;span style="color:#000;font-weight:bold">(()&lt;/span> &lt;span style="color:#000;font-weight:bold">=&amp;gt;&lt;/span> &lt;span style="color:#204a87;font-weight:bold">true&lt;/span>&lt;span style="color:#000;font-weight:bold">);&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;h3 id="use-lowercamelcase-for-variables-properties-and-function-names">Use lowerCamelCase for variables, properties, and function names&lt;/h3>
&lt;p>Variables, properties and function names should use &lt;code>lowerCamelCase&lt;/code>. They
should also be descriptive. Single character variables and uncommon
abbreviations should generally be avoided.&lt;/p>
&lt;p>&lt;em>Right:&lt;/em>&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="background-color:#f8f8f8;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-js" data-lang="js">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#204a87;font-weight:bold">const&lt;/span> &lt;span style="color:#000">adminUser&lt;/span> &lt;span style="color:#ce5c00;font-weight:bold">=&lt;/span> &lt;span style="color:#000">db&lt;/span>&lt;span style="color:#000;font-weight:bold">.&lt;/span>&lt;span style="color:#000">query&lt;/span>&lt;span style="color:#000;font-weight:bold">();&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>&lt;em>Wrong:&lt;/em>&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="background-color:#f8f8f8;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-js" data-lang="js">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#204a87;font-weight:bold">const&lt;/span> &lt;span style="color:#000">admin_user&lt;/span> &lt;span style="color:#ce5c00;font-weight:bold">=&lt;/span> &lt;span style="color:#000">db&lt;/span>&lt;span style="color:#000;font-weight:bold">.&lt;/span>&lt;span style="color:#000">query&lt;/span>&lt;span style="color:#000;font-weight:bold">();&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;h3 id="use-uppercamelcase-for-class-names">Use UpperCamelCase for class names&lt;/h3>
&lt;p>Class names should be capitalized using &lt;code>UpperCamelCase&lt;/code>.&lt;/p>
&lt;p>&lt;em>Right:&lt;/em>&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="background-color:#f8f8f8;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-js" data-lang="js">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#204a87;font-weight:bold">function&lt;/span> &lt;span style="color:#000">BankAccount&lt;/span>&lt;span style="color:#000;font-weight:bold">()&lt;/span> &lt;span style="color:#000;font-weight:bold">{&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#000;font-weight:bold">}&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>&lt;em>Wrong:&lt;/em>&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="background-color:#f8f8f8;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-js" data-lang="js">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#204a87;font-weight:bold">function&lt;/span> &lt;span style="color:#000">bank_Account&lt;/span>&lt;span style="color:#000;font-weight:bold">()&lt;/span> &lt;span style="color:#000;font-weight:bold">{&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#000;font-weight:bold">}&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;h3 id="use-snake_case-for-couchdb-document-property-names">Use snake_case for CouchDB document property names&lt;/h3>
&lt;p>All property names in CouchDB documents use lowercase underscore-separated formatting.&lt;/p>
&lt;p>&lt;em>Right:&lt;/em>&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="background-color:#f8f8f8;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-json" data-lang="json">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#000;font-weight:bold">{&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#204a87;font-weight:bold">&amp;#34;word&amp;#34;&lt;/span>&lt;span style="color:#000;font-weight:bold">:&lt;/span> &lt;span style="color:#4e9a06">&amp;#34;values can have spaces and CAPS&amp;#34;&lt;/span>&lt;span style="color:#000;font-weight:bold">,&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#204a87;font-weight:bold">&amp;#34;multiple_words&amp;#34;&lt;/span>&lt;span style="color:#000;font-weight:bold">:&lt;/span> &lt;span style="color:#204a87;font-weight:bold">true&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#000;font-weight:bold">}&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>&lt;em>Wrong:&lt;/em>&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="background-color:#f8f8f8;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-js" data-lang="js">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#000;font-weight:bold">{&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#4e9a06">&amp;#34;UPPER_CASE_NAME&amp;#34;&lt;/span>&lt;span style="color:#ce5c00;font-weight:bold">:&lt;/span> &lt;span style="color:#204a87;font-weight:bold">false&lt;/span>&lt;span style="color:#000;font-weight:bold">,&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#4e9a06">&amp;#34;lowercasename&amp;#34;&lt;/span>&lt;span style="color:#ce5c00;font-weight:bold">:&lt;/span> &lt;span style="color:#204a87;font-weight:bold">false&lt;/span>&lt;span style="color:#000;font-weight:bold">,&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#4e9a06">&amp;#34;camelCaseName&amp;#34;&lt;/span>&lt;span style="color:#ce5c00;font-weight:bold">:&lt;/span> &lt;span style="color:#204a87;font-weight:bold">false&lt;/span>&lt;span style="color:#000;font-weight:bold">,&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#4e9a06">&amp;#34;kebab-case-name&amp;#34;&lt;/span>&lt;span style="color:#ce5c00;font-weight:bold">:&lt;/span> &lt;span style="color:#204a87;font-weight:bold">false&lt;/span>&lt;span style="color:#000;font-weight:bold">,&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#4e9a06">&amp;#34;Title_case_name&amp;#34;&lt;/span>&lt;span style="color:#ce5c00;font-weight:bold">:&lt;/span> &lt;span style="color:#204a87;font-weight:bold">false&lt;/span>&lt;span style="color:#000;font-weight:bold">,&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#4e9a06">&amp;#34;sTuDlYcAsEnAmE&amp;#34;&lt;/span>&lt;span style="color:#ce5c00;font-weight:bold">:&lt;/span> &lt;span style="color:#204a87;font-weight:bold">false&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#000;font-weight:bold">}&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;h3 id="use-const-and-let">Use &lt;code>const&lt;/code> and &lt;code>let&lt;/code>&lt;/h3>
&lt;p>There is no longer a good reason to use &lt;code>var&lt;/code>. Use &lt;code>const&lt;/code> whenever you can,
and &lt;code>let&lt;/code> when you must. Hardcoded constants should be named in all UPPERCASE.&lt;/p>
&lt;p>&lt;em>Right:&lt;/em>&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="background-color:#f8f8f8;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-js" data-lang="js">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#204a87;font-weight:bold">const&lt;/span> &lt;span style="color:#000">DELAY&lt;/span> &lt;span style="color:#ce5c00;font-weight:bold">=&lt;/span> &lt;span style="color:#0000cf;font-weight:bold">10&lt;/span> &lt;span style="color:#ce5c00;font-weight:bold">*&lt;/span> &lt;span style="color:#0000cf;font-weight:bold">1000&lt;/span>&lt;span style="color:#000;font-weight:bold">;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#204a87;font-weight:bold">const&lt;/span> &lt;span style="color:#000">output&lt;/span> &lt;span style="color:#ce5c00;font-weight:bold">=&lt;/span> &lt;span style="color:#000">input&lt;/span> &lt;span style="color:#ce5c00;font-weight:bold">*&lt;/span> &lt;span style="color:#0000cf;font-weight:bold">10&lt;/span>&lt;span style="color:#000;font-weight:bold">;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#204a87;font-weight:bold">let&lt;/span> &lt;span style="color:#000">temp&lt;/span> &lt;span style="color:#ce5c00;font-weight:bold">=&lt;/span> &lt;span style="color:#0000cf;font-weight:bold">50&lt;/span>&lt;span style="color:#000;font-weight:bold">;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#204a87;font-weight:bold">let&lt;/span> &lt;span style="color:#000">unknown&lt;/span>&lt;span style="color:#000;font-weight:bold">;&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>&lt;em>Wrong:&lt;/em>&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="background-color:#f8f8f8;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-js" data-lang="js">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#204a87;font-weight:bold">var&lt;/span> &lt;span style="color:#000">DELAY&lt;/span> &lt;span style="color:#ce5c00;font-weight:bold">=&lt;/span> &lt;span style="color:#0000cf;font-weight:bold">10&lt;/span> &lt;span style="color:#ce5c00;font-weight:bold">*&lt;/span> &lt;span style="color:#0000cf;font-weight:bold">1000&lt;/span>&lt;span style="color:#000;font-weight:bold">;&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;h3 id="use-arrow-functions">Use arrow functions&lt;/h3>
&lt;p>Use arrow functions as much as possible for cleaner code and better scoping. Omit the
return keyword when the entire function definition fits on one line. Omit the parens
when taking a single parameter.&lt;/p>
&lt;p>There are exceptions to this rule including when you want to access &lt;code>arguments&lt;/code> or
&lt;code>this&lt;/code>, or when you want to be able to debug browserified code.&lt;/p>
&lt;p>&lt;em>Right:&lt;/em>&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="background-color:#f8f8f8;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-js" data-lang="js">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#204a87;font-weight:bold">let&lt;/span> &lt;span style="color:#000">result&lt;/span> &lt;span style="color:#ce5c00;font-weight:bold">=&lt;/span> &lt;span style="color:#4e9a06">&amp;#39;&amp;#39;&lt;/span>&lt;span style="color:#000;font-weight:bold">;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#204a87;font-weight:bold">const&lt;/span> &lt;span style="color:#000">append&lt;/span> &lt;span style="color:#ce5c00;font-weight:bold">=&lt;/span> &lt;span style="color:#000">a&lt;/span> &lt;span style="color:#000;font-weight:bold">=&amp;gt;&lt;/span> &lt;span style="color:#000;font-weight:bold">{&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#000">result&lt;/span> &lt;span style="color:#ce5c00;font-weight:bold">+=&lt;/span> &lt;span style="color:#000">a&lt;/span>&lt;span style="color:#000;font-weight:bold">;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#000;font-weight:bold">};&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#204a87;font-weight:bold">const&lt;/span> &lt;span style="color:#000">combine&lt;/span> &lt;span style="color:#ce5c00;font-weight:bold">=&lt;/span> &lt;span style="color:#000;font-weight:bold">(&lt;/span>&lt;span style="color:#000">a&lt;/span>&lt;span style="color:#000;font-weight:bold">,&lt;/span> &lt;span style="color:#000">b&lt;/span>&lt;span style="color:#000;font-weight:bold">)&lt;/span> &lt;span style="color:#000;font-weight:bold">=&amp;gt;&lt;/span> &lt;span style="color:#000;font-weight:bold">{&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#000">result&lt;/span> &lt;span style="color:#ce5c00;font-weight:bold">=&lt;/span> &lt;span style="color:#000">a&lt;/span> &lt;span style="color:#ce5c00;font-weight:bold">+&lt;/span> &lt;span style="color:#000">b&lt;/span>&lt;span style="color:#000;font-weight:bold">;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#000;font-weight:bold">};&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#204a87;font-weight:bold">const&lt;/span> &lt;span style="color:#000">getResult&lt;/span> &lt;span style="color:#ce5c00;font-weight:bold">=&lt;/span> &lt;span style="color:#000;font-weight:bold">()&lt;/span> &lt;span style="color:#000;font-weight:bold">=&amp;gt;&lt;/span> &lt;span style="color:#000">result&lt;/span>&lt;span style="color:#000;font-weight:bold">;&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>&lt;em>Wrong:&lt;/em>&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="background-color:#f8f8f8;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-js" data-lang="js">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#204a87;font-weight:bold">let&lt;/span> &lt;span style="color:#000">result&lt;/span> &lt;span style="color:#ce5c00;font-weight:bold">=&lt;/span> &lt;span style="color:#4e9a06">&amp;#39;&amp;#39;&lt;/span>&lt;span style="color:#000;font-weight:bold">;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#204a87;font-weight:bold">const&lt;/span> &lt;span style="color:#000">append&lt;/span> &lt;span style="color:#ce5c00;font-weight:bold">=&lt;/span> &lt;span style="color:#000;font-weight:bold">(&lt;/span>&lt;span style="color:#000">a&lt;/span>&lt;span style="color:#000;font-weight:bold">)&lt;/span> &lt;span style="color:#000;font-weight:bold">=&amp;gt;&lt;/span> &lt;span style="color:#000;font-weight:bold">{&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#000">result&lt;/span> &lt;span style="color:#ce5c00;font-weight:bold">+=&lt;/span> &lt;span style="color:#000">a&lt;/span>&lt;span style="color:#000;font-weight:bold">;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#000;font-weight:bold">};&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#204a87;font-weight:bold">const&lt;/span> &lt;span style="color:#000">combine&lt;/span> &lt;span style="color:#ce5c00;font-weight:bold">=&lt;/span> &lt;span style="color:#204a87;font-weight:bold">function&lt;/span>&lt;span style="color:#000;font-weight:bold">(&lt;/span>&lt;span style="color:#000">a&lt;/span>&lt;span style="color:#000;font-weight:bold">,&lt;/span> &lt;span style="color:#000">b&lt;/span>&lt;span style="color:#000;font-weight:bold">)&lt;/span> &lt;span style="color:#000;font-weight:bold">{&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#000">result&lt;/span> &lt;span style="color:#ce5c00;font-weight:bold">=&lt;/span> &lt;span style="color:#000">a&lt;/span> &lt;span style="color:#ce5c00;font-weight:bold">+&lt;/span> &lt;span style="color:#000">b&lt;/span>&lt;span style="color:#000;font-weight:bold">;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#000;font-weight:bold">};&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#204a87;font-weight:bold">const&lt;/span> &lt;span style="color:#000">getResult&lt;/span> &lt;span style="color:#ce5c00;font-weight:bold">=&lt;/span> &lt;span style="color:#000;font-weight:bold">()&lt;/span> &lt;span style="color:#000;font-weight:bold">=&amp;gt;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#000">result&lt;/span>&lt;span style="color:#000;font-weight:bold">;&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;h3 id="implicit-returns">Implicit Returns&lt;/h3>
&lt;p>As &lt;a href="#use-arrow-functions">noted above&lt;/a>, implicit returns should be used for one-line arrow functions. However, for the sake of readability, they should not be used when returning a multi-line value.&lt;/p>
&lt;p>&lt;em>Right:&lt;/em>&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="background-color:#f8f8f8;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-js" data-lang="js">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#204a87;font-weight:bold">const&lt;/span> &lt;span style="color:#000">oneLineString&lt;/span> &lt;span style="color:#ce5c00;font-weight:bold">=&lt;/span> &lt;span style="color:#000;font-weight:bold">()&lt;/span> &lt;span style="color:#000;font-weight:bold">=&amp;gt;&lt;/span> &lt;span style="color:#4e9a06">&amp;#39;World&amp;#39;&lt;/span>&lt;span style="color:#000;font-weight:bold">;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#204a87;font-weight:bold">const&lt;/span> &lt;span style="color:#000">oneLineObject&lt;/span> &lt;span style="color:#ce5c00;font-weight:bold">=&lt;/span> &lt;span style="color:#000;font-weight:bold">()&lt;/span> &lt;span style="color:#000;font-weight:bold">=&amp;gt;&lt;/span> &lt;span style="color:#000;font-weight:bold">({&lt;/span> &lt;span style="color:#000">hello&lt;/span>&lt;span style="color:#ce5c00;font-weight:bold">:&lt;/span> &lt;span style="color:#4e9a06">&amp;#39;World&amp;#39;&lt;/span> &lt;span style="color:#000;font-weight:bold">});&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#8f5902;font-style:italic">// Not using implicit return for multi-line value
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#8f5902;font-style:italic">&lt;/span>&lt;span style="color:#204a87;font-weight:bold">const&lt;/span> &lt;span style="color:#000">multiLineObject&lt;/span> &lt;span style="color:#ce5c00;font-weight:bold">=&lt;/span> &lt;span style="color:#000;font-weight:bold">()&lt;/span> &lt;span style="color:#000;font-weight:bold">=&amp;gt;&lt;/span> &lt;span style="color:#000;font-weight:bold">{&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#204a87;font-weight:bold">return&lt;/span> &lt;span style="color:#000;font-weight:bold">{&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#000">hello&lt;/span>&lt;span style="color:#ce5c00;font-weight:bold">:&lt;/span> &lt;span style="color:#4e9a06">&amp;#39;World&amp;#39;&lt;/span>&lt;span style="color:#000;font-weight:bold">,&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#000">foo&lt;/span>&lt;span style="color:#ce5c00;font-weight:bold">:&lt;/span> &lt;span style="color:#4e9a06">&amp;#39;bar&amp;#39;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#000;font-weight:bold">}&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#000;font-weight:bold">};&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>&lt;em>Wrong:&lt;/em>&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="background-color:#f8f8f8;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-js" data-lang="js">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#204a87;font-weight:bold">const&lt;/span> &lt;span style="color:#000">multiLineString&lt;/span> &lt;span style="color:#ce5c00;font-weight:bold">=&lt;/span> &lt;span style="color:#000;font-weight:bold">()&lt;/span> &lt;span style="color:#000;font-weight:bold">=&amp;gt;&lt;/span> &lt;span style="color:#4e9a06">&amp;#39;This is a really long string that is &amp;#39;&lt;/span> &lt;span style="color:#ce5c00;font-weight:bold">+&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#4e9a06">&amp;#39;on multiple lines&amp;#39;&lt;/span>&lt;span style="color:#000;font-weight:bold">;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#204a87;font-weight:bold">const&lt;/span> &lt;span style="color:#000">differentLineString&lt;/span> &lt;span style="color:#ce5c00;font-weight:bold">=&lt;/span> &lt;span style="color:#000;font-weight:bold">()&lt;/span> &lt;span style="color:#000;font-weight:bold">=&amp;gt;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#4e9a06">&amp;#39;This is a string that does not fit on the same line as the arrow&amp;#39;&lt;/span>&lt;span style="color:#000;font-weight:bold">;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#204a87;font-weight:bold">const&lt;/span> &lt;span style="color:#000">multiLineObject&lt;/span> &lt;span style="color:#ce5c00;font-weight:bold">=&lt;/span> &lt;span style="color:#000;font-weight:bold">()&lt;/span> &lt;span style="color:#000;font-weight:bold">=&amp;gt;&lt;/span> &lt;span style="color:#000;font-weight:bold">({&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#000">hello&lt;/span>&lt;span style="color:#ce5c00;font-weight:bold">:&lt;/span> &lt;span style="color:#4e9a06">&amp;#39;World&amp;#39;&lt;/span>&lt;span style="color:#000;font-weight:bold">,&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#000">foo&lt;/span>&lt;span style="color:#ce5c00;font-weight:bold">:&lt;/span> &lt;span style="color:#4e9a06">&amp;#39;bar&amp;#39;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#000;font-weight:bold">});&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;h3 id="object--array-creation">Object / Array creation&lt;/h3>
&lt;p>Put short declarations on a single line. For long declarations put a line
break after each comma.&lt;/p>
&lt;p>&lt;em>Right:&lt;/em>&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="background-color:#f8f8f8;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-js" data-lang="js">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#204a87;font-weight:bold">const&lt;/span> &lt;span style="color:#000">a&lt;/span> &lt;span style="color:#ce5c00;font-weight:bold">=&lt;/span> &lt;span style="color:#000;font-weight:bold">[&lt;/span>&lt;span style="color:#4e9a06">&amp;#39;hello&amp;#39;&lt;/span>&lt;span style="color:#000;font-weight:bold">,&lt;/span> &lt;span style="color:#4e9a06">&amp;#39;world&amp;#39;&lt;/span>&lt;span style="color:#000;font-weight:bold">];&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#204a87;font-weight:bold">const&lt;/span> &lt;span style="color:#000">b&lt;/span> &lt;span style="color:#ce5c00;font-weight:bold">=&lt;/span> &lt;span style="color:#000;font-weight:bold">{&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#000">good&lt;/span>&lt;span style="color:#ce5c00;font-weight:bold">:&lt;/span> &lt;span style="color:#4e9a06">&amp;#39;code&amp;#39;&lt;/span>&lt;span style="color:#000;font-weight:bold">,&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#4e9a06">&amp;#39;is generally&amp;#39;&lt;/span>&lt;span style="color:#ce5c00;font-weight:bold">:&lt;/span> &lt;span style="color:#4e9a06">&amp;#39;pretty&amp;#39;&lt;/span>&lt;span style="color:#000;font-weight:bold">,&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#000;font-weight:bold">};&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>&lt;em>Wrong:&lt;/em>&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="background-color:#f8f8f8;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-js" data-lang="js">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#204a87;font-weight:bold">const&lt;/span> &lt;span style="color:#000">a&lt;/span> &lt;span style="color:#ce5c00;font-weight:bold">=&lt;/span> &lt;span style="color:#000;font-weight:bold">[&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#4e9a06">&amp;#39;hello&amp;#39;&lt;/span>&lt;span style="color:#000;font-weight:bold">,&lt;/span> &lt;span style="color:#4e9a06">&amp;#39;world&amp;#39;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#000;font-weight:bold">];&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#204a87;font-weight:bold">const&lt;/span> &lt;span style="color:#000">b&lt;/span> &lt;span style="color:#ce5c00;font-weight:bold">=&lt;/span> &lt;span style="color:#000;font-weight:bold">{&lt;/span>&lt;span style="color:#4e9a06">&amp;#34;good&amp;#34;&lt;/span>&lt;span style="color:#ce5c00;font-weight:bold">:&lt;/span> &lt;span style="color:#4e9a06">&amp;#39;code&amp;#39;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#000;font-weight:bold">,&lt;/span> &lt;span style="color:#000">is&lt;/span> &lt;span style="color:#000">generally&lt;/span>&lt;span style="color:#ce5c00;font-weight:bold">:&lt;/span> &lt;span style="color:#4e9a06">&amp;#39;pretty&amp;#39;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#000;font-weight:bold">};&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#204a87;font-weight:bold">const&lt;/span> &lt;span style="color:#000">c&lt;/span> &lt;span style="color:#ce5c00;font-weight:bold">=&lt;/span> &lt;span style="color:#000;font-weight:bold">[&lt;/span>&lt;span style="color:#4e9a06">&amp;#39;one&amp;#39;&lt;/span>&lt;span style="color:#000;font-weight:bold">,&lt;/span> &lt;span style="color:#4e9a06">&amp;#39;two&amp;#39;&lt;/span>&lt;span style="color:#000;font-weight:bold">,&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#4e9a06">&amp;#39;three&amp;#39;&lt;/span>&lt;span style="color:#000;font-weight:bold">,&lt;/span> &lt;span style="color:#4e9a06">&amp;#39;four&amp;#39;&lt;/span>&lt;span style="color:#000;font-weight:bold">];&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;h3 id="use-the--operator">Use the === operator&lt;/h3>
&lt;p>Programming is not about remembering &lt;a href="https://developer.mozilla.org/en/JavaScript/Reference/Operators/Comparison_Operators">stupid rules&lt;/a>. Use
the triple equality operator as it will work just as expected.&lt;/p>
&lt;p>&lt;em>Right:&lt;/em>&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="background-color:#f8f8f8;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-js" data-lang="js">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#204a87;font-weight:bold">if&lt;/span> &lt;span style="color:#000;font-weight:bold">(&lt;/span>&lt;span style="color:#000">a&lt;/span> &lt;span style="color:#ce5c00;font-weight:bold">!==&lt;/span> &lt;span style="color:#4e9a06">&amp;#39;&amp;#39;&lt;/span>&lt;span style="color:#000;font-weight:bold">)&lt;/span> &lt;span style="color:#000;font-weight:bold">{&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#000">console&lt;/span>&lt;span style="color:#000;font-weight:bold">.&lt;/span>&lt;span style="color:#000">log&lt;/span>&lt;span style="color:#000;font-weight:bold">(&lt;/span>&lt;span style="color:#4e9a06">&amp;#39;winning&amp;#39;&lt;/span>&lt;span style="color:#000;font-weight:bold">);&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#000;font-weight:bold">}&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>&lt;em>Wrong:&lt;/em>&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="background-color:#f8f8f8;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-js" data-lang="js">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#204a87;font-weight:bold">if&lt;/span> &lt;span style="color:#000;font-weight:bold">(&lt;/span>&lt;span style="color:#000">a&lt;/span> &lt;span style="color:#ce5c00;font-weight:bold">==&lt;/span> &lt;span style="color:#4e9a06">&amp;#39;&amp;#39;&lt;/span>&lt;span style="color:#000;font-weight:bold">)&lt;/span> &lt;span style="color:#000;font-weight:bold">{&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#000">console&lt;/span>&lt;span style="color:#000;font-weight:bold">.&lt;/span>&lt;span style="color:#000">log&lt;/span>&lt;span style="color:#000;font-weight:bold">(&lt;/span>&lt;span style="color:#4e9a06">&amp;#39;losing&amp;#39;&lt;/span>&lt;span style="color:#000;font-weight:bold">);&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#000;font-weight:bold">}&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;h3 id="do-not-extend-built-in-prototypes">Do not extend built-in prototypes&lt;/h3>
&lt;p>Do not extend the prototype of native JavaScript objects. Your future self will be forever grateful.&lt;/p>
&lt;p>&lt;em>Right:&lt;/em>&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="background-color:#f8f8f8;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-js" data-lang="js">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#204a87;font-weight:bold">const&lt;/span> &lt;span style="color:#000">a&lt;/span> &lt;span style="color:#ce5c00;font-weight:bold">=&lt;/span> &lt;span style="color:#000;font-weight:bold">[];&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#204a87;font-weight:bold">if&lt;/span> &lt;span style="color:#000;font-weight:bold">(&lt;/span>&lt;span style="color:#ce5c00;font-weight:bold">!&lt;/span>&lt;span style="color:#000">a&lt;/span>&lt;span style="color:#000;font-weight:bold">.&lt;/span>&lt;span style="color:#000">length&lt;/span>&lt;span style="color:#000;font-weight:bold">)&lt;/span> &lt;span style="color:#000;font-weight:bold">{&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#000">console&lt;/span>&lt;span style="color:#000;font-weight:bold">.&lt;/span>&lt;span style="color:#000">log&lt;/span>&lt;span style="color:#000;font-weight:bold">(&lt;/span>&lt;span style="color:#4e9a06">&amp;#39;winning&amp;#39;&lt;/span>&lt;span style="color:#000;font-weight:bold">);&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#000;font-weight:bold">}&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>&lt;em>Wrong:&lt;/em>&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="background-color:#f8f8f8;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-js" data-lang="js">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#204a87">Array&lt;/span>&lt;span style="color:#000;font-weight:bold">.&lt;/span>&lt;span style="color:#000">prototype&lt;/span>&lt;span style="color:#000;font-weight:bold">.&lt;/span>&lt;span style="color:#000">empty&lt;/span> &lt;span style="color:#ce5c00;font-weight:bold">=&lt;/span> &lt;span style="color:#204a87;font-weight:bold">function&lt;/span>&lt;span style="color:#000;font-weight:bold">()&lt;/span> &lt;span style="color:#000;font-weight:bold">{&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#204a87;font-weight:bold">return&lt;/span> &lt;span style="color:#ce5c00;font-weight:bold">!&lt;/span>&lt;span style="color:#204a87;font-weight:bold">this&lt;/span>&lt;span style="color:#000;font-weight:bold">.&lt;/span>&lt;span style="color:#000">length&lt;/span>&lt;span style="color:#000;font-weight:bold">;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#000;font-weight:bold">}&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#204a87;font-weight:bold">const&lt;/span> &lt;span style="color:#000">a&lt;/span> &lt;span style="color:#ce5c00;font-weight:bold">=&lt;/span> &lt;span style="color:#000;font-weight:bold">[];&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#204a87;font-weight:bold">if&lt;/span> &lt;span style="color:#000;font-weight:bold">(&lt;/span>&lt;span style="color:#000">a&lt;/span>&lt;span style="color:#000;font-weight:bold">.&lt;/span>&lt;span style="color:#000">empty&lt;/span>&lt;span style="color:#000;font-weight:bold">())&lt;/span> &lt;span style="color:#000;font-weight:bold">{&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#000">console&lt;/span>&lt;span style="color:#000;font-weight:bold">.&lt;/span>&lt;span style="color:#000">log&lt;/span>&lt;span style="color:#000;font-weight:bold">(&lt;/span>&lt;span style="color:#4e9a06">&amp;#39;losing&amp;#39;&lt;/span>&lt;span style="color:#000;font-weight:bold">);&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#000;font-weight:bold">}&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;h3 id="use-descriptive-conditions">Use descriptive conditions&lt;/h3>
&lt;p>Any non-trivial conditions should be assigned to a descriptively named variable or function:&lt;/p>
&lt;p>&lt;em>Right:&lt;/em>&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="background-color:#f8f8f8;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-js" data-lang="js">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#204a87;font-weight:bold">const&lt;/span> &lt;span style="color:#000">isValidPassword&lt;/span> &lt;span style="color:#ce5c00;font-weight:bold">=&lt;/span> &lt;span style="color:#000">password&lt;/span>&lt;span style="color:#000;font-weight:bold">.&lt;/span>&lt;span style="color:#000">length&lt;/span> &lt;span style="color:#ce5c00;font-weight:bold">&amp;gt;=&lt;/span> &lt;span style="color:#0000cf;font-weight:bold">4&lt;/span> &lt;span style="color:#ce5c00;font-weight:bold">&amp;amp;&amp;amp;&lt;/span> &lt;span style="color:#4e9a06">/^(?=.*\d).{4,}$/&lt;/span>&lt;span style="color:#000;font-weight:bold">.&lt;/span>&lt;span style="color:#000">test&lt;/span>&lt;span style="color:#000;font-weight:bold">(&lt;/span>&lt;span style="color:#000">password&lt;/span>&lt;span style="color:#000;font-weight:bold">);&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#204a87;font-weight:bold">if&lt;/span> &lt;span style="color:#000;font-weight:bold">(&lt;/span>&lt;span style="color:#000">isValidPassword&lt;/span>&lt;span style="color:#000;font-weight:bold">)&lt;/span> &lt;span style="color:#000;font-weight:bold">{&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#000">console&lt;/span>&lt;span style="color:#000;font-weight:bold">.&lt;/span>&lt;span style="color:#000">log&lt;/span>&lt;span style="color:#000;font-weight:bold">(&lt;/span>&lt;span style="color:#4e9a06">&amp;#39;winning&amp;#39;&lt;/span>&lt;span style="color:#000;font-weight:bold">);&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#000;font-weight:bold">}&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>&lt;em>Wrong:&lt;/em>&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="background-color:#f8f8f8;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-js" data-lang="js">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#204a87;font-weight:bold">if&lt;/span> &lt;span style="color:#000;font-weight:bold">(&lt;/span>&lt;span style="color:#000">password&lt;/span>&lt;span style="color:#000;font-weight:bold">.&lt;/span>&lt;span style="color:#000">length&lt;/span> &lt;span style="color:#ce5c00;font-weight:bold">&amp;gt;=&lt;/span> &lt;span style="color:#0000cf;font-weight:bold">4&lt;/span> &lt;span style="color:#ce5c00;font-weight:bold">&amp;amp;&amp;amp;&lt;/span> &lt;span style="color:#4e9a06">/^(?=.*\d).{4,}$/&lt;/span>&lt;span style="color:#000;font-weight:bold">.&lt;/span>&lt;span style="color:#000">test&lt;/span>&lt;span style="color:#000;font-weight:bold">(&lt;/span>&lt;span style="color:#000">password&lt;/span>&lt;span style="color:#000;font-weight:bold">))&lt;/span> &lt;span style="color:#000;font-weight:bold">{&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#000">console&lt;/span>&lt;span style="color:#000;font-weight:bold">.&lt;/span>&lt;span style="color:#000">log&lt;/span>&lt;span style="color:#000;font-weight:bold">(&lt;/span>&lt;span style="color:#4e9a06">&amp;#39;losing&amp;#39;&lt;/span>&lt;span style="color:#000;font-weight:bold">);&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#000;font-weight:bold">}&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;h3 id="write-small-functions">Write small functions&lt;/h3>
&lt;p>Keep your functions short. A good function fits on a slide that the people in
the last row of a big room can comfortably read. So don&amp;rsquo;t count on them having
perfect vision and limit yourself to ~15 lines of code per function.&lt;/p>
&lt;h3 id="return-early-from-functions">Return early from functions&lt;/h3>
&lt;p>To avoid deep nesting of if-statements, always return a function&amp;rsquo;s value as early
as possible.&lt;/p>
&lt;p>&lt;em>Right:&lt;/em>&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="background-color:#f8f8f8;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-js" data-lang="js">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#204a87;font-weight:bold">function&lt;/span> &lt;span style="color:#000">isPercentage&lt;/span>&lt;span style="color:#000;font-weight:bold">(&lt;/span>&lt;span style="color:#000">val&lt;/span>&lt;span style="color:#000;font-weight:bold">)&lt;/span> &lt;span style="color:#000;font-weight:bold">{&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#204a87;font-weight:bold">if&lt;/span> &lt;span style="color:#000;font-weight:bold">(&lt;/span>&lt;span style="color:#000">val&lt;/span> &lt;span style="color:#ce5c00;font-weight:bold">&amp;lt;&lt;/span> &lt;span style="color:#0000cf;font-weight:bold">0&lt;/span>&lt;span style="color:#000;font-weight:bold">)&lt;/span> &lt;span style="color:#000;font-weight:bold">{&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#204a87;font-weight:bold">return&lt;/span> &lt;span style="color:#204a87;font-weight:bold">false&lt;/span>&lt;span style="color:#000;font-weight:bold">;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#000;font-weight:bold">}&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#204a87;font-weight:bold">if&lt;/span> &lt;span style="color:#000;font-weight:bold">(&lt;/span>&lt;span style="color:#000">val&lt;/span> &lt;span style="color:#ce5c00;font-weight:bold">&amp;gt;&lt;/span> &lt;span style="color:#0000cf;font-weight:bold">100&lt;/span>&lt;span style="color:#000;font-weight:bold">)&lt;/span> &lt;span style="color:#000;font-weight:bold">{&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#204a87;font-weight:bold">return&lt;/span> &lt;span style="color:#204a87;font-weight:bold">false&lt;/span>&lt;span style="color:#000;font-weight:bold">;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#000;font-weight:bold">}&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#204a87;font-weight:bold">return&lt;/span> &lt;span style="color:#204a87;font-weight:bold">true&lt;/span>&lt;span style="color:#000;font-weight:bold">;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#000;font-weight:bold">}&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>&lt;em>Wrong:&lt;/em>&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="background-color:#f8f8f8;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-js" data-lang="js">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#204a87;font-weight:bold">function&lt;/span> &lt;span style="color:#000">isPercentage&lt;/span>&lt;span style="color:#000;font-weight:bold">(&lt;/span>&lt;span style="color:#000">val&lt;/span>&lt;span style="color:#000;font-weight:bold">)&lt;/span> &lt;span style="color:#000;font-weight:bold">{&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#204a87;font-weight:bold">if&lt;/span> &lt;span style="color:#000;font-weight:bold">(&lt;/span>&lt;span style="color:#000">val&lt;/span> &lt;span style="color:#ce5c00;font-weight:bold">&amp;gt;=&lt;/span> &lt;span style="color:#0000cf;font-weight:bold">0&lt;/span>&lt;span style="color:#000;font-weight:bold">)&lt;/span> &lt;span style="color:#000;font-weight:bold">{&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#204a87;font-weight:bold">if&lt;/span> &lt;span style="color:#000;font-weight:bold">(&lt;/span>&lt;span style="color:#000">val&lt;/span> &lt;span style="color:#ce5c00;font-weight:bold">&amp;lt;&lt;/span> &lt;span style="color:#0000cf;font-weight:bold">100&lt;/span>&lt;span style="color:#000;font-weight:bold">)&lt;/span> &lt;span style="color:#000;font-weight:bold">{&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#204a87;font-weight:bold">return&lt;/span> &lt;span style="color:#204a87;font-weight:bold">true&lt;/span>&lt;span style="color:#000;font-weight:bold">;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#000;font-weight:bold">}&lt;/span> &lt;span style="color:#204a87;font-weight:bold">else&lt;/span> &lt;span style="color:#000;font-weight:bold">{&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#204a87;font-weight:bold">return&lt;/span> &lt;span style="color:#204a87;font-weight:bold">false&lt;/span>&lt;span style="color:#000;font-weight:bold">;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#000;font-weight:bold">}&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#000;font-weight:bold">}&lt;/span> &lt;span style="color:#204a87;font-weight:bold">else&lt;/span> &lt;span style="color:#000;font-weight:bold">{&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#204a87;font-weight:bold">return&lt;/span> &lt;span style="color:#204a87;font-weight:bold">false&lt;/span>&lt;span style="color:#000;font-weight:bold">;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#000;font-weight:bold">}&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#000;font-weight:bold">}&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>Or for this particular example it may also be fine to shorten things even
further:&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="background-color:#f8f8f8;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-js" data-lang="js">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#204a87;font-weight:bold">function&lt;/span> &lt;span style="color:#000">isPercentage&lt;/span>&lt;span style="color:#000;font-weight:bold">(&lt;/span>&lt;span style="color:#000">val&lt;/span>&lt;span style="color:#000;font-weight:bold">)&lt;/span> &lt;span style="color:#000;font-weight:bold">{&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#204a87;font-weight:bold">var&lt;/span> &lt;span style="color:#000">isInRange&lt;/span> &lt;span style="color:#ce5c00;font-weight:bold">=&lt;/span> &lt;span style="color:#000;font-weight:bold">(&lt;/span>&lt;span style="color:#000">val&lt;/span> &lt;span style="color:#ce5c00;font-weight:bold">&amp;gt;=&lt;/span> &lt;span style="color:#0000cf;font-weight:bold">0&lt;/span> &lt;span style="color:#ce5c00;font-weight:bold">&amp;amp;&amp;amp;&lt;/span> &lt;span style="color:#000">val&lt;/span> &lt;span style="color:#ce5c00;font-weight:bold">&amp;lt;=&lt;/span> &lt;span style="color:#0000cf;font-weight:bold">100&lt;/span>&lt;span style="color:#000;font-weight:bold">);&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#204a87;font-weight:bold">return&lt;/span> &lt;span style="color:#000">isInRange&lt;/span>&lt;span style="color:#000;font-weight:bold">;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#000;font-weight:bold">}&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;h3 id="asynchronous-code">Asynchronous code&lt;/h3>
&lt;p>Where possible, use the async/await pattern for asynchronous code as it&amp;rsquo;s generally easy to read as the statements line up down the screen. This may not be possible for legacy browser or Node version support, where promises should be used instead. Occasionally promises are better, for example, for executing multiple async methods in parallel. Avoid callbacks at all costs.&lt;/p>
&lt;p>&lt;em>Right:&lt;/em>&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="background-color:#f8f8f8;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-js" data-lang="js">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#204a87;font-weight:bold">async&lt;/span> &lt;span style="color:#204a87;font-weight:bold">function&lt;/span> &lt;span style="color:#000">fetch&lt;/span>&lt;span style="color:#000;font-weight:bold">()&lt;/span> &lt;span style="color:#000;font-weight:bold">{&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#204a87;font-weight:bold">try&lt;/span> &lt;span style="color:#000;font-weight:bold">{&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#204a87;font-weight:bold">const&lt;/span> &lt;span style="color:#000">response&lt;/span> &lt;span style="color:#ce5c00;font-weight:bold">=&lt;/span> &lt;span style="color:#204a87;font-weight:bold">await&lt;/span> &lt;span style="color:#000">request&lt;/span>&lt;span style="color:#000;font-weight:bold">.&lt;/span>&lt;span style="color:#000">get&lt;/span>&lt;span style="color:#000;font-weight:bold">();&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#204a87;font-weight:bold">return&lt;/span> &lt;span style="color:#000">response&lt;/span>&lt;span style="color:#000;font-weight:bold">.&lt;/span>&lt;span style="color:#000">data&lt;/span>&lt;span style="color:#000;font-weight:bold">;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#000;font-weight:bold">}&lt;/span> &lt;span style="color:#204a87;font-weight:bold">catch&lt;/span>&lt;span style="color:#000;font-weight:bold">(&lt;/span>&lt;span style="color:#000">e&lt;/span>&lt;span style="color:#000;font-weight:bold">)&lt;/span> &lt;span style="color:#000;font-weight:bold">{&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#8f5902;font-style:italic">// handle error
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#8f5902;font-style:italic">&lt;/span> &lt;span style="color:#000;font-weight:bold">}&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#000;font-weight:bold">}&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>&lt;em>Wrong:&lt;/em>&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="background-color:#f8f8f8;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-js" data-lang="js">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#204a87;font-weight:bold">function&lt;/span> &lt;span style="color:#000">fetch&lt;/span>&lt;span style="color:#000;font-weight:bold">()&lt;/span> &lt;span style="color:#000;font-weight:bold">{&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#204a87;font-weight:bold">return&lt;/span> &lt;span style="color:#000">request&lt;/span>&lt;span style="color:#000;font-weight:bold">.&lt;/span>&lt;span style="color:#000">get&lt;/span>&lt;span style="color:#000;font-weight:bold">()&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#000;font-weight:bold">.&lt;/span>&lt;span style="color:#000">then&lt;/span>&lt;span style="color:#000;font-weight:bold">(&lt;/span>&lt;span style="color:#000">response&lt;/span> &lt;span style="color:#000;font-weight:bold">=&amp;gt;&lt;/span> &lt;span style="color:#000">response&lt;/span>&lt;span style="color:#000;font-weight:bold">.&lt;/span>&lt;span style="color:#000">data&lt;/span>&lt;span style="color:#000;font-weight:bold">)&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#000;font-weight:bold">.&lt;/span>&lt;span style="color:#204a87;font-weight:bold">catch&lt;/span>&lt;span style="color:#000;font-weight:bold">(&lt;/span>&lt;span style="color:#000">err&lt;/span> &lt;span style="color:#000;font-weight:bold">=&amp;gt;&lt;/span> &lt;span style="color:#8f5902;font-style:italic">/* handle error */&lt;/span>&lt;span style="color:#000;font-weight:bold">);&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#000;font-weight:bold">}&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>&lt;em>Wronger:&lt;/em>&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="background-color:#f8f8f8;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-js" data-lang="js">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#204a87;font-weight:bold">function&lt;/span> &lt;span style="color:#000">fetch&lt;/span>&lt;span style="color:#000;font-weight:bold">(&lt;/span>&lt;span style="color:#000">callback&lt;/span>&lt;span style="color:#000;font-weight:bold">)&lt;/span> &lt;span style="color:#000;font-weight:bold">{&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#204a87;font-weight:bold">return&lt;/span> &lt;span style="color:#000">request&lt;/span>&lt;span style="color:#000;font-weight:bold">.&lt;/span>&lt;span style="color:#000">get&lt;/span>&lt;span style="color:#000;font-weight:bold">((&lt;/span>&lt;span style="color:#000">err&lt;/span>&lt;span style="color:#000;font-weight:bold">,&lt;/span> &lt;span style="color:#000">response&lt;/span>&lt;span style="color:#000;font-weight:bold">)&lt;/span> &lt;span style="color:#000;font-weight:bold">=&amp;gt;&lt;/span> &lt;span style="color:#000;font-weight:bold">{&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#204a87;font-weight:bold">if&lt;/span> &lt;span style="color:#000;font-weight:bold">(&lt;/span>&lt;span style="color:#000">err&lt;/span>&lt;span style="color:#000;font-weight:bold">)&lt;/span> &lt;span style="color:#000;font-weight:bold">{&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#8f5902;font-style:italic">// handle error
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#8f5902;font-style:italic">&lt;/span> &lt;span style="color:#204a87;font-weight:bold">return&lt;/span>&lt;span style="color:#000;font-weight:bold">;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#000;font-weight:bold">}&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#000">callback&lt;/span>&lt;span style="color:#000;font-weight:bold">(&lt;/span>&lt;span style="color:#204a87;font-weight:bold">null&lt;/span>&lt;span style="color:#000;font-weight:bold">,&lt;/span> &lt;span style="color:#000">response&lt;/span>&lt;span style="color:#000;font-weight:bold">.&lt;/span>&lt;span style="color:#000">data&lt;/span>&lt;span style="color:#000;font-weight:bold">);&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#000;font-weight:bold">});&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#000;font-weight:bold">}&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;h3 id="avoid-reduce">Avoid reduce&lt;/h3>
&lt;p>Most uses of reduce have more readable alternatives.&lt;/p>
&lt;p>When supporting older browsers and node versions where some features aren&amp;rsquo;t available &lt;code>reduce&lt;/code> can still be useful but its use should be hidden behind a utility function or polyfill to help readability and make it easier to replace later.&lt;/p>
&lt;p>&lt;em>Right:&lt;/em>&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="background-color:#f8f8f8;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-js" data-lang="js">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#204a87;font-weight:bold">const&lt;/span> &lt;span style="color:#000">properties&lt;/span> &lt;span style="color:#ce5c00;font-weight:bold">=&lt;/span> &lt;span style="color:#000;font-weight:bold">[];&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#000">elements&lt;/span>&lt;span style="color:#000;font-weight:bold">.&lt;/span>&lt;span style="color:#000">forEach&lt;/span>&lt;span style="color:#000;font-weight:bold">(&lt;/span>&lt;span style="color:#000">elem&lt;/span> &lt;span style="color:#000;font-weight:bold">=&amp;gt;&lt;/span> &lt;span style="color:#000;font-weight:bold">{&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#000">properties&lt;/span>&lt;span style="color:#000;font-weight:bold">.&lt;/span>&lt;span style="color:#000">push&lt;/span>&lt;span style="color:#000;font-weight:bold">(&lt;/span>&lt;span style="color:#000">elem&lt;/span>&lt;span style="color:#000;font-weight:bold">.&lt;/span>&lt;span style="color:#000">a&lt;/span>&lt;span style="color:#000;font-weight:bold">,&lt;/span> &lt;span style="color:#000">elem&lt;/span>&lt;span style="color:#000;font-weight:bold">.&lt;/span>&lt;span style="color:#000">b&lt;/span>&lt;span style="color:#000;font-weight:bold">);&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#000;font-weight:bold">});&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>&lt;em>Wrong:&lt;/em>&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="background-color:#f8f8f8;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-js" data-lang="js">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#204a87;font-weight:bold">const&lt;/span> &lt;span style="color:#000">properties&lt;/span> &lt;span style="color:#ce5c00;font-weight:bold">=&lt;/span> &lt;span style="color:#000">elements&lt;/span>&lt;span style="color:#000;font-weight:bold">.&lt;/span>&lt;span style="color:#000">reduce&lt;/span>&lt;span style="color:#000;font-weight:bold">((&lt;/span>&lt;span style="color:#000">properties&lt;/span>&lt;span style="color:#000;font-weight:bold">,&lt;/span> &lt;span style="color:#000">elem&lt;/span>&lt;span style="color:#000;font-weight:bold">)&lt;/span> &lt;span style="color:#000;font-weight:bold">=&amp;gt;&lt;/span> &lt;span style="color:#000;font-weight:bold">{&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#204a87;font-weight:bold">return&lt;/span> &lt;span style="color:#000">properties&lt;/span>&lt;span style="color:#000;font-weight:bold">.&lt;/span>&lt;span style="color:#000">concat&lt;/span>&lt;span style="color:#000;font-weight:bold">(&lt;/span>&lt;span style="color:#000">elem&lt;/span>&lt;span style="color:#000;font-weight:bold">.&lt;/span>&lt;span style="color:#000">a&lt;/span>&lt;span style="color:#000;font-weight:bold">,&lt;/span> &lt;span style="color:#000">elem&lt;/span>&lt;span style="color:#000;font-weight:bold">.&lt;/span>&lt;span style="color:#000">b&lt;/span>&lt;span style="color:#000;font-weight:bold">);&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#000;font-weight:bold">},&lt;/span> &lt;span style="color:#000;font-weight:bold">[]);&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>Refer to &lt;a href="https://youtu.be/qaGjS7-qWzg">this YouTube video&lt;/a> for more examples.&lt;/p>
&lt;h3 id="adding-documentation-comments">Adding documentation comments&lt;/h3>
&lt;p>To add documentation comments that will be built using jsdocs, use
&lt;a href="https://jsdoc.app/">jsdoc block tags&lt;/a>. For angular code use the
&lt;a href="https://www.npmjs.com/package/angular-jsdoc#tags-available">angular tags&lt;/a>, see
&lt;a href="https://www.npmjs.com/package/angular-jsdoc#example">examples&lt;/a>.&lt;/p>
&lt;p>Try to write comments that explain higher level mechanisms or clarify
difficult segments of your code. Don&amp;rsquo;t use comments to restate trivial
things.&lt;/p>
&lt;p>&lt;em>Right:&lt;/em>&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="background-color:#f8f8f8;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-js" data-lang="js">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#8f5902;font-style:italic">/**
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#8f5902;font-style:italic"> * &amp;#39;ID_SOMETHING=VALUE&amp;#39; -&amp;gt; [&amp;#39;ID_SOMETHING=VALUE&amp;#39;, &amp;#39;SOMETHING&amp;#39;, &amp;#39;VALUE&amp;#39;]
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#8f5902;font-style:italic"> * @type {boolean}
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#8f5902;font-style:italic"> */&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#204a87;font-weight:bold">const&lt;/span> &lt;span style="color:#000">matches&lt;/span> &lt;span style="color:#ce5c00;font-weight:bold">=&lt;/span> &lt;span style="color:#000">item&lt;/span>&lt;span style="color:#000;font-weight:bold">.&lt;/span>&lt;span style="color:#000">match&lt;/span>&lt;span style="color:#000;font-weight:bold">(&lt;/span>&lt;span style="color:#4e9a06">/ID_([^\n]+)=([^\n]+)/&lt;/span>&lt;span style="color:#000;font-weight:bold">));&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#8f5902;font-style:italic">/**
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#8f5902;font-style:italic"> * Loads a user. This function has a nasty side effect where a failure to increment a
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#8f5902;font-style:italic"> * redis counter used for statistics will cause an exception. This needs
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#8f5902;font-style:italic"> * to be fixed in a later iteration.
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#8f5902;font-style:italic"> * @param {string} id the user id
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#8f5902;font-style:italic"> * @param {function} cb a callback function that applied to the user
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#8f5902;font-style:italic"> */&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#204a87;font-weight:bold">function&lt;/span> &lt;span style="color:#000">loadUser&lt;/span>&lt;span style="color:#000;font-weight:bold">(&lt;/span>&lt;span style="color:#000">id&lt;/span>&lt;span style="color:#000;font-weight:bold">,&lt;/span> &lt;span style="color:#000">cb&lt;/span>&lt;span style="color:#000;font-weight:bold">)&lt;/span> &lt;span style="color:#000;font-weight:bold">{&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#000;font-weight:bold">...&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#000;font-weight:bold">}&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>&lt;em>Wrong:&lt;/em>&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="background-color:#f8f8f8;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-js" data-lang="js">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#8f5902;font-style:italic">/**
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#8f5902;font-style:italic"> * Execute a regex
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#8f5902;font-style:italic"> */&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#204a87;font-weight:bold">const&lt;/span> &lt;span style="color:#000">matches&lt;/span> &lt;span style="color:#ce5c00;font-weight:bold">=&lt;/span> &lt;span style="color:#000">item&lt;/span>&lt;span style="color:#000;font-weight:bold">.&lt;/span>&lt;span style="color:#000">match&lt;/span>&lt;span style="color:#000;font-weight:bold">(&lt;/span>&lt;span style="color:#4e9a06">/ID_([^\n]+)=([^\n]+)/&lt;/span>&lt;span style="color:#000;font-weight:bold">);&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#8f5902;font-style:italic">/**
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#8f5902;font-style:italic"> * Usage: loadUser(5, function() { ... })
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#8f5902;font-style:italic"> */&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#204a87;font-weight:bold">function&lt;/span> &lt;span style="color:#000">loadUser&lt;/span>&lt;span style="color:#000;font-weight:bold">(&lt;/span>&lt;span style="color:#000">id&lt;/span>&lt;span style="color:#000;font-weight:bold">,&lt;/span> &lt;span style="color:#000">cb&lt;/span>&lt;span style="color:#000;font-weight:bold">)&lt;/span> &lt;span style="color:#000;font-weight:bold">{&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#000;font-weight:bold">...&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#000;font-weight:bold">}&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#8f5902;font-style:italic">/**
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#8f5902;font-style:italic"> * Check if the session is valid
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#8f5902;font-style:italic"> */&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#204a87;font-weight:bold">const&lt;/span> &lt;span style="color:#000">isSessionValid&lt;/span> &lt;span style="color:#ce5c00;font-weight:bold">=&lt;/span> &lt;span style="color:#000;font-weight:bold">(&lt;/span>&lt;span style="color:#000">session&lt;/span>&lt;span style="color:#000;font-weight:bold">.&lt;/span>&lt;span style="color:#000">expires&lt;/span> &lt;span style="color:#ce5c00;font-weight:bold">&amp;lt;&lt;/span> &lt;span style="color:#204a87">Date&lt;/span>&lt;span style="color:#000;font-weight:bold">.&lt;/span>&lt;span style="color:#000">now&lt;/span>&lt;span style="color:#000;font-weight:bold">());&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#8f5902;font-style:italic">/** If the session is valid */&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#204a87;font-weight:bold">if&lt;/span> &lt;span style="color:#000;font-weight:bold">(&lt;/span>&lt;span style="color:#000">isSessionValid&lt;/span>&lt;span style="color:#000;font-weight:bold">)&lt;/span> &lt;span style="color:#000;font-weight:bold">{&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#000;font-weight:bold">...&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#000;font-weight:bold">}&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;h3 id="objectfreeze-objectpreventextensions-objectseal-with-eval">Object.freeze, Object.preventExtensions, Object.seal, with, eval&lt;/h3>
&lt;p>Crazy stuff that you will probably never need. Stay away from it.&lt;/p>
&lt;h3 id="getters-and-setters">Getters and setters&lt;/h3>
&lt;p>Do not use setters, they cause more problems for people who try to use your
software than they can solve.&lt;/p>
&lt;p>Feel free to use getters that are free from &lt;a href="http://en.wikipedia.org/wiki/Side_effect_(computer_science)">side effects&lt;/a>, like
providing a length property for a collection class.&lt;/p>
&lt;h3 id="npm-dependencies">NPM Dependencies&lt;/h3>
&lt;p>When picking version ranges we set an exact minimum version and an upper limit of the next major. This makes it easy to update dependencies without hitting breaking changes. In NPM this is done by using the &lt;code>^&lt;/code> character which is the default setting for NPM.&lt;/p>
&lt;p>Occasionally it is required to set an exact version to avoid an undeclared breaking change or some other issue, in this case the dependency can be specified exactly.&lt;/p>
&lt;p>&lt;em>Right:&lt;/em>&lt;/p>
&lt;ul>
&lt;li>&lt;code>&amp;quot;^6.5.3&amp;quot;&lt;/code> - preferred&lt;/li>
&lt;li>&lt;code>&amp;quot;6.5.3&amp;quot;&lt;/code> - if required&lt;/li>
&lt;/ul>
&lt;p>&lt;em>Wrong:&lt;/em>&lt;/p>
&lt;ul>
&lt;li>&lt;code>&amp;quot;&amp;gt;6.5.3&amp;quot;&lt;/code> - risks picking up breaking changes in the next major&lt;/li>
&lt;li>&lt;code>&amp;quot;*&amp;quot;&lt;/code> - as above but also doesn&amp;rsquo;t specify a minimum&lt;/li>
&lt;li>&lt;code>&amp;quot;~6.5.3&amp;quot;&lt;/code> - too restrictive on the upper limit&lt;/li>
&lt;/ul>
&lt;h3 id="github-actions">Github Actions&lt;/h3>
&lt;h4 id="managing-secrets">Managing Secrets&lt;/h4>
&lt;p>Secrets are encrypted for use for things like passwords or API keys and can be added at the org or repository level. They must be added by an admin.&lt;/p>
&lt;p>To access a secret you can use this format in your yml.&lt;/p>
&lt;pre tabindex="0">&lt;code>steps:
- name: My first action
env:
GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
FIRST_NAME: Mona
LAST_NAME: Octocat
&lt;/code>&lt;/pre>&lt;p>See the full &lt;a href="https://docs.github.com/en/actions/reference/encrypted-secrets">documentation&lt;/a> on Github&amp;rsquo;s site.&lt;/p>
&lt;h4 id="third-party-actions">Third Party Actions&lt;/h4>
&lt;p>Actions allow us to leverage code written by others to do tasks at build time. The concept is similar to NPM and packages.&lt;/p>
&lt;p>Follow the github actions best practices for security purposes. The main points in the security best &lt;a href="https://docs.github.com/en/actions/learn-github-actions/security-hardening-for-github-actions#using-third-party-actions">practices documents&lt;/a> are&lt;/p>
&lt;ol>
&lt;li>Pin actions to a full length commit SHA so any malicious or buggy updates are not silently included&lt;/li>
&lt;li>Audit the source code of the action&lt;/li>
&lt;li>Pin actions to a tag only if you trust the creator&lt;/li>
&lt;/ol></description></item><item><title>Contribute: Using NPM</title><link>https://docs.communityhealthtoolkit.org/contribute/code/using-npm/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://docs.communityhealthtoolkit.org/contribute/code/using-npm/</guid><description>
&lt;h2 id="npm-orgs">npm Orgs&lt;/h2>
&lt;p>We use npm Orgs to organize our npm packages. It provides a centralized way
to manage a team&amp;rsquo;s published npm packages and permissions. Here are some
guidelines when using this service.&lt;/p>
&lt;p>See npm&amp;rsquo;s &lt;a href="https://docs.npmjs.com/orgs/">Orgs docs&lt;/a> for more information.&lt;/p>
&lt;p>Our organization is &lt;code>medic&lt;/code> or using npm&amp;rsquo;s notation, &lt;code>@medic&lt;/code>.&lt;/p>
&lt;p>We also created &lt;code>@medicmobile&lt;/code> but it&amp;rsquo;s not currently in use, it was created to
reserve the namespace.&lt;/p>
&lt;h3 id="adding-a-package">Adding a Package&lt;/h3>
&lt;p>When you publish an npm module on npmjs.com, add it to the developers team
under the &lt;code>@medic&lt;/code> org.&lt;/p>
&lt;p>This can be done using the web interface:&lt;/p>
&lt;ul>
&lt;li>Login to npmjs.com then Navigate to &lt;a href="https://www.npmjs.com/org/medic/team/developers">Medic Developer&amp;rsquo;s Team&lt;/a>
and add your package there.&lt;/li>
&lt;/ul>
&lt;p>Or command line:&lt;/p>
&lt;ul>
&lt;li>Change your directory to where the package&amp;rsquo;s &lt;code>package.json&lt;/code> lives, then run:&lt;/li>
&lt;/ul>
&lt;pre tabindex="0">&lt;code>npm access grant read-write medic:developers
&lt;/code>&lt;/pre>&lt;ul>
&lt;li>Then &lt;code>npm access&lt;/code> should show the updated permissions for the team members.&lt;/li>
&lt;/ul>
&lt;pre tabindex="0">&lt;code>npm access ls-collaborators
{
&amp;#34;mandric&amp;#34;: &amp;#34;read-write&amp;#34;,
&amp;#34;estellecomment&amp;#34;: &amp;#34;read-write&amp;#34;,
&amp;#34;garethbowen&amp;#34;: &amp;#34;read-write&amp;#34;,
&amp;#34;scdf&amp;#34;: &amp;#34;read-write&amp;#34;,
&amp;#34;alxndrsn&amp;#34;: &amp;#34;read-write&amp;#34;,
}
&lt;/code>&lt;/pre>&lt;h3 id="using-an-org-scoped-package">Using an Org Scoped Package&lt;/h3>
&lt;p>A scope should be specified when a published package is a fork of an existing
package, but otherwise scope is not needed since there is no conflict with the
registry.&lt;/p>
&lt;p>For example if you fork &lt;code>moment&lt;/code> and you can&amp;rsquo;t get your changes merged upstream
and need to publish a new package then modify the package name (in
package.json) to specify a organizational scope, like &lt;code>@medic/moment&lt;/code> and publish it.&lt;/p>
&lt;p>For more info see &lt;a href="https://docs.npmjs.com/creating-and-publishing-an-org-scoped-package">Publishing an Org Scoped Package&lt;/a>.&lt;/p></description></item><item><title>Contribute: Contributing CHT Core Code</title><link>https://docs.communityhealthtoolkit.org/contribute/code/core/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://docs.communityhealthtoolkit.org/contribute/code/core/</guid><description/></item><item><title>Contribute: Contributing Android Code</title><link>https://docs.communityhealthtoolkit.org/contribute/code/android/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://docs.communityhealthtoolkit.org/contribute/code/android/</guid><description/></item></channel></rss>