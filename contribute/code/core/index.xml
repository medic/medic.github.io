<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>Contributing CHT Core Code on Community Health Toolkit</title><link>https://docs.communityhealthtoolkit.org/contribute/code/core/</link><description>Recent content in Contributing CHT Core Code on Community Health Toolkit</description><generator>Hugo -- gohugo.io</generator><language>en</language><atom:link href="https://docs.communityhealthtoolkit.org/contribute/code/core/index.xml" rel="self" type="application/rss+xml"/><item><title>CHT Core dev environment setup</title><link>https://docs.communityhealthtoolkit.org/contribute/code/core/dev-environment/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://docs.communityhealthtoolkit.org/contribute/code/core/dev-environment/</guid><description>Note This guide assumes you are a CHT Core developer wanting to run the CHT Core from source code to make commits to the public GitHub repository. To set up your environment for developing apps, see the app guide.
To deploy the CHT in production, see either AWS hosting or Self hosting
Note These steps apply to both 3.x and 4.x CHT core development, unless stated otherwise. The Happy Path InstallationCHT Core development can be done on Linux, macOS, or Windows (using the Windows Subsystem for Linux (WSL2)).</description></item><item><title>Build commands</title><link>https://docs.communityhealthtoolkit.org/contribute/code/core/build-commands/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://docs.communityhealthtoolkit.org/contribute/code/core/build-commands/</guid><description>CHT Core build commandsThese commands are defined in the package.json and can be executed with npm run &amp;lt;command&amp;gt; from the cht-core repository directory.
Development build commandsFor developers (humans) to execute to build cht-core.
Command Description build-ddocs Compiles all the DDocs and outputs them into /api/build/ddocs ready for deployment. build-dev Updates dependencies and builds all the applications. build-dev-watch Same as build-dev, but keeps watching for any code changes and automatically deploys on change.</description></item><item><title>Updating Dependencies</title><link>https://docs.communityhealthtoolkit.org/contribute/code/core/update-dependencies/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://docs.communityhealthtoolkit.org/contribute/code/core/update-dependencies/</guid><description>Every minor release we update dependencies to get the latest fixes and improvements. We do this early in the release cycle so that we have some more time to find regressions and issues. This is done on all folders with a package.json, including:
cht-core / (root) /admin /api /sentinel /shared-libs/* /webapp cht-conf Steps Checkout and pull the latest default branch - get the latest code Make a branch: git checkout -b &amp;quot;&amp;lt;issue&amp;gt;-update-dependencies&amp;quot; Take a look at the current list of dependencies related issues, where you can find the latest conversations and information.</description></item><item><title>Automated Tests</title><link>https://docs.communityhealthtoolkit.org/contribute/code/core/automated-tests/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://docs.communityhealthtoolkit.org/contribute/code/core/automated-tests/</guid><description>The goal of automated testingDevelopers should be able to make changes in the codebase quickly and confidently. A big part of this means knowing that new changes have not impacted other functionality in the system and everything continues to work as expected.
Of course any new functionality itself may or may not work as expected and it is up to the developer to write the appropriate tests to ensure it works correctly in both expected and unexpected scenarios.</description></item><item><title>Style guide for automated tests</title><link>https://docs.communityhealthtoolkit.org/contribute/code/core/style-guide-automated-e2e-tests/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://docs.communityhealthtoolkit.org/contribute/code/core/style-guide-automated-e2e-tests/</guid><description>There are three files that are the base of every new automated test case, the most important one is the spec file, which contains the actual test that will be executed.
Automated tests cover different CHT Configs, consider the following setups when writing a new test:
default Config file: ../tests/e2e/default/wdio.conf.js Name convention for the spec file: ../tests/e2e/default/*/&amp;lt;name&amp;gt;.wdio-spec.js Command to execute the tests that belong to this config: npm run wdio-local Important: Make sure the spec file follows the name convention, otherwise the file won&amp;rsquo;t be executed.</description></item><item><title>Apdex Automation Tests</title><link>https://docs.communityhealthtoolkit.org/contribute/code/core/apdex-automation-tests/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://docs.communityhealthtoolkit.org/contribute/code/core/apdex-automation-tests/</guid><description>ConfigurationThis documentation will guide you on how to setup and configure automation to run performance tests for your CHT Applications.
PrerequisitesBefore continuing with the steps below, ensure:
You have a cht instance deployed and running either locally or globally.
You have some pre-existing users and data already loaded on the app. Use the test-data-generator tool to achieve this.
If you already have the CHT Android app installed, set the appPath value (in the capabilities section of the settings file) to an empty string.</description></item><item><title>Developing on Windows</title><link>https://docs.communityhealthtoolkit.org/contribute/code/core/using-windows/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://docs.communityhealthtoolkit.org/contribute/code/core/using-windows/</guid><description>We don&amp;rsquo;t actively support development on Windows, instead preferring MacOS or Linux.
However, Microsoft has recently been stabilizing their Windows Subsystem for Linux, which appears to work reasonably well for development.
Installation instructions are mostly the same as they written in the README with a couple of caveats as of time of writing (2019-07-25), noted below.
Note Both the Windows Subsystem for Linux and Medic&amp;rsquo;s support for developing in it is very much in beta.</description></item><item><title>Running multiple Chrome versions</title><link>https://docs.communityhealthtoolkit.org/contribute/code/core/run-multiple-chrome-versions/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://docs.communityhealthtoolkit.org/contribute/code/core/run-multiple-chrome-versions/</guid><description>Note These steps are suitable for Mac. It was tested in a Mac Intel. It can be adapted to any Chrome version. Follow these steps on a Mac to run Chrome version 90 while having another Chrome app on a different version.
Download Chrome 90.0.4430.72 from slimjet Do not install the Google Chrome.app in your Application folder. Install it in your Desktop folder for example. Change the name of the app to Google Chrome 90.</description></item></channel></rss>