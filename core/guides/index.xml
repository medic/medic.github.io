<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>Community Health Toolkit â€“ Guides</title><link>https://docs.communityhealthtoolkit.org/core/guides/</link><description>Recent content in Guides on Community Health Toolkit</description><generator>Hugo -- gohugo.io</generator><atom:link href="https://docs.communityhealthtoolkit.org/core/guides/index.xml" rel="self" type="application/rss+xml"/><item><title>Core: Releasing</title><link>https://docs.communityhealthtoolkit.org/core/guides/releasing/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://docs.communityhealthtoolkit.org/core/guides/releasing/</guid><description>
&lt;h2 id="cht-core">CHT core&lt;/h2>
&lt;p>&lt;a href="https://github.com/medic/cht-core/issues/new/choose">Create an issue&lt;/a> for either a Major/Minor or Patch release issue template and assign it to the release manager to follow the process.&lt;/p>
&lt;h2 id="cht-conf">cht-conf&lt;/h2>
&lt;p>Follow the &lt;a href="https://github.com/medic/cht-conf/#user-content-releasing">instructions in the readme&lt;/a>.&lt;/p>
&lt;h2 id="android-apps">Android apps&lt;/h2>
&lt;p>Follow the instructions in the &lt;a href="https://docs.communityhealthtoolkit.org/core/guides/android/releasing/">Android &amp;gt; Releasing&lt;/a> section.&lt;/p></description></item><item><title>Core: Updating Dependencies</title><link>https://docs.communityhealthtoolkit.org/core/guides/update-dependencies/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://docs.communityhealthtoolkit.org/core/guides/update-dependencies/</guid><description>
&lt;p>Every minor release we update dependencies to get the latest fixes and improvements. We do this early in the release cycle so that we have some more time to find regressions and issues. This is done on all folders with a package.json, including:&lt;/p>
&lt;ul>
&lt;li>cht-core
&lt;ul>
&lt;li>/ (root)&lt;/li>
&lt;li>/admin&lt;/li>
&lt;li>/api&lt;/li>
&lt;li>/sentinel&lt;/li>
&lt;li>/shared-libs/*&lt;/li>
&lt;li>/webapp&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>cht-conf&lt;/li>
&lt;/ul>
&lt;h2 id="steps">Steps&lt;/h2>
&lt;ol>
&lt;li>Checkout and pull the latest default branch - get the latest code&lt;/li>
&lt;li>&lt;code>git checkout -b &amp;quot;&amp;lt;issue&amp;gt;-update-dendencies&amp;quot;&lt;/code> - make a branch&lt;/li>
&lt;/ol>
&lt;p>Then for each folder go through these steps.&lt;/p>
&lt;ol>
&lt;li>&lt;code>npm ci&lt;/code> - update your local node_modules to match expected&lt;/li>
&lt;li>&lt;code>npm outdated&lt;/code> - report on any dependencies which aren&amp;rsquo;t at the latest&lt;/li>
&lt;li>&lt;code>npm install --save[-dev] package@version&lt;/code> - install the latest version (be careful and read the release notes if the new version is a major change from the current)&lt;/li>
&lt;li>&lt;code>npm dedupe&lt;/code> - remove duplicated dependencies&lt;/li>
&lt;li>&lt;code>npm audit fix&lt;/code> - automatically fix any nested dependencies with vulnerabilities&lt;/li>
&lt;li>&lt;code>npm audit&lt;/code> - get a report on any remaining vulnerabilities and manually scan it to see if there&amp;rsquo;s anything else you can do&lt;/li>
&lt;/ol>
&lt;h2 id="problems">Problems&lt;/h2>
&lt;ul>
&lt;li>
&lt;p>Don&amp;rsquo;t update &lt;code>bootstrap&lt;/code> to 4+ as it has many breaking changes. One day we will either raise an issue to upgrade it or migrate off it, but that is outside the scope of this change.&lt;/p>
&lt;/li>
&lt;li>
&lt;p>Don&amp;rsquo;t update &lt;code>bootstrap-daterangepicker&lt;/code>.&lt;/p>
&lt;/li>
&lt;li>
&lt;p>Don&amp;rsquo;t update &lt;code>select2&lt;/code> as the latest patch always seems to fail.&lt;/p>
&lt;/li>
&lt;li>
&lt;p>Don&amp;rsquo;t update &lt;code>jquery&lt;/code> to 3.6.0+ as the &lt;code>select2&lt;/code> search input looses focus on click event, this is an &lt;a href="https://github.com/select2/select2/issues/5993">open issue&lt;/a> in their repository.&lt;/p>
&lt;/li>
&lt;li>
&lt;p>CHT-Core&amp;rsquo;s webapp is using Enketo and jQuery library, at the same time Enketo internally uses a specific version of jQuery. Make sure webapp installs the same jQuery version than the one Enketo uses internally: &lt;code>3.2.x&lt;/code>.&lt;/p>
&lt;p>Do this by checking the jquery entry in &lt;code>./webapp/package.json&lt;/code> matches &lt;code>./webapp/node_modules/enketo-core/package.json&lt;/code>:&lt;/p>
&lt;pre tabindex="0">&lt;code>$ grep &amp;#39;&amp;#34;jquery&amp;#34;&amp;#39; ./webapp/package.json
&amp;#34;jquery&amp;#34;: &amp;#34;3.2.x&amp;#34;,
$ grep &amp;#39;&amp;#34;jquery&amp;#34;&amp;#39; ./webapp/node_modules/enketo-core/package.json
&amp;#34;jquery&amp;#34;: &amp;#34;3.2.x&amp;#34;,
&lt;/code>&lt;/pre>&lt;/li>
&lt;li>
&lt;p>Make sure the version of &lt;code>api/enketo-xslt&lt;/code> is the same as &lt;code>webapp/enketo-core/enketo-transformer/enketo-xslt&lt;/code>.&lt;/p>
&lt;/li>
&lt;li>
&lt;p>Don&amp;rsquo;t update &lt;code>lodash/core&lt;/code> since 4.17.21 is failing, this is an &lt;a href="https://github.com/lodash/lodash/issues/4904">open issue&lt;/a> in their repository.&lt;/p>
&lt;/li>
&lt;li>
&lt;p>Don&amp;rsquo;t update &lt;code>helmet&lt;/code> since it is not supporting NodeJS 8 anymore. Its minimum is NodeJS 10+.&lt;/p>
&lt;/li>
&lt;li>
&lt;p>If you have trouble upgrading any other dependency and you think it&amp;rsquo;ll be challenging to fix it then raise a new issue to upgrade just that dependency. Don&amp;rsquo;t hold up all the other upgrades you&amp;rsquo;ve made.&lt;/p>
&lt;/li>
&lt;/ul>
&lt;h2 id="troubleshooting">Troubleshooting&lt;/h2>
&lt;h3 id="npm-errno--17">npm errno -17&lt;/h3>
&lt;p>If &lt;code>npm ci&lt;/code> errors with &amp;ldquo;errno -17&amp;rdquo; in shared-libs you may need to manually remove the nested dependencies from the package-lock.json. This needs move investigation to work out why this is happening.&lt;/p>
&lt;h3 id="select2-is-not-a-function">select2 is not a function&lt;/h3>
&lt;p>If you get &lt;code>TypeError: &amp;quot;$(...).select2 is not a function&amp;quot;&lt;/code> then either:&lt;/p>
&lt;ol>
&lt;li>You bumped select2. For some reason this breaks it.&lt;/li>
&lt;li>You have multiple jquery libraries and select2 is getting attached to one but not the other. Make sure the jquery versions in enketo-core and webapp match and you&amp;rsquo;ve &lt;code>run dedupe&lt;/code> to remove the enketo-core copy.&lt;/li>
&lt;/ol></description></item><item><title>Core: Fixing E2E Tests</title><link>https://docs.communityhealthtoolkit.org/core/guides/fixing-e2e-tests/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://docs.communityhealthtoolkit.org/core/guides/fixing-e2e-tests/</guid><description>
&lt;h1 id="how-to-fix-e2e-tests">How to fix e2e tests&lt;/h1>
&lt;p>End to end (e2e) tests can be really difficult to debug - sometimes they fail seemingly at random, and sometimes they only fail on certain environments (eg: ci but not locally). This can make reproducing and reliably fixing the issue challenging, so here are some tips to help!&lt;/p>
&lt;h2 id="read-the-protractor-logs">Read the protractor logs&lt;/h2>
&lt;p>Read the failure carefully - it often has really good info but sometimes it&amp;rsquo;s just hard to find. Most importantly it tells you exactly the line in the test that failed and you can look that up in the source to see what protractor was trying to do. The error message itself is also really useful. Also sometimes one error causes the next, so always start with the first test failure before looking at the others.&lt;/p>
&lt;h3 id="known-failure-patterns">Known failure patterns&lt;/h3>
&lt;ul>
&lt;li>Can&amp;rsquo;t click on an element because another element would get the click. This usually means a modal dialog was being shown. 90% of the time this is the update notification modal which means some settings change has been detected after the test started execution.&lt;/li>
&lt;li>Stale element. This means the DOM element has been removed after protractor found it on the page but before you tried to do something with it. I generally try to get protractor to find the element just before I need it to reduce the chance of this happening.&lt;/li>
&lt;/ul>
&lt;h2 id="other-logs">Other logs&lt;/h2>
&lt;p>The API and Sentinel logs are sometimes useful, particularly if API has crashed. These are available locally under &lt;code>/tests/logs/&lt;/code> and for CI builds &lt;a href="https://s3.console.aws.amazon.com/s3/buckets/medic-e2e/">on AWS&lt;/a>.&lt;/p>
&lt;h2 id="screenshots">Screenshots&lt;/h2>
&lt;p>We automatically take screenshots when a test fails and store it locally in &lt;code>/tests/results/&lt;/code> and for CI builds &lt;a href="https://s3.console.aws.amazon.com/s3/buckets/medic-e2e/">on AWS&lt;/a>. These can be particularly useful if a dialog was blocking a click.&lt;/p>
&lt;h2 id="running-just-the-failing-test">Running just the failing test&lt;/h2>
&lt;h3 id="option-1">Option 1&lt;/h3>
&lt;p>Running e2e tests can be quite slow so to save time modify the &lt;code>specs&lt;/code> property of &lt;code>/tests/base.conf.js&lt;/code> so it only finds your test. You can also change &lt;code>describe&lt;/code> and &lt;code>it&lt;/code> to &lt;code>xdescribe&lt;/code> and &lt;code>xit&lt;/code> to skip specific tests.&lt;/p>
&lt;h3 id="option-2">Option 2&lt;/h3>
&lt;p>Alternatively you can run API in test mode using:&lt;/p>
&lt;pre tabindex="0">&lt;code>API_PORT=4988 COUCH_URL=http://admin:pass@localhost:5984/medic-test node server.js
&lt;/code>&lt;/pre>&lt;p>Then grep for just the tests you want to run:&lt;/p>
&lt;pre tabindex="0">&lt;code>protractor /home/kenn/webapp/tests/e2e.tests.conf.js --specs=&amp;#39;/home/kenn/webapp/tests/e2e/api/controllers/_changes.spec.js&amp;#39; --grep=&amp;#34;should allow DB admins to POST to _changes&amp;#34;
&lt;/code>&lt;/pre>&lt;h3 id="option-3">Option 3&lt;/h3>
&lt;p>Use the &amp;ldquo;Protractor test runner&amp;rdquo; extension for VSCode.&lt;/p>
&lt;h2 id="watching-the-test-run">Watching the test run&lt;/h2>
&lt;p>Running the tests locally with &lt;code>grunt e2e-debug&lt;/code> will allow you to watch it run but if you interact with the page the test will fail in unexpected ways. Furthermore the browser will close after a short timeout so you won&amp;rsquo;t be able to inspect the console or DOM. To do this, force quit the process running the test before it tears down and you will be able to navigate around the app, use Chrome dev tools, and inspect the docs in the database to (hopefully) work out what&amp;rsquo;s going wrong.&lt;/p></description></item><item><title>Core: Android</title><link>https://docs.communityhealthtoolkit.org/core/guides/android/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://docs.communityhealthtoolkit.org/core/guides/android/</guid><description>
&lt;p>The Community Health Toolkit includes 2 apps that are currently supported: the &lt;strong>&lt;a href="https://github.com/medic/cht-android">CHT Android&lt;/a>&lt;/strong> and the &lt;strong>&lt;a href="https://github.com/medic/cht-gateway">CHT Gateway&lt;/a>&lt;/strong>. The following guides will help you setup a development environment in your local computer to improve, release, and brand the apps (branding only applies to CHT Android).&lt;/p>
&lt;p>&lt;strong>&lt;a href="https://github.com/medic/medic-collect">Medic Collect&lt;/a>&lt;/strong> is currently in maintenance mode, although some of the guides here may apply if you need to work with it.&lt;/p></description></item><item><title>Core: Using NPM</title><link>https://docs.communityhealthtoolkit.org/core/guides/using-npm/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://docs.communityhealthtoolkit.org/core/guides/using-npm/</guid><description>
&lt;h2 id="npm-orgs">npm Orgs&lt;/h2>
&lt;p>We use npm Orgs to organize our npm packages. It provides a centralized way
to manage a team&amp;rsquo;s published npm packages and permissions. Here are some
guidelines when using this service.&lt;/p>
&lt;p>See npm&amp;rsquo;s &lt;a href="https://docs.npmjs.com/orgs/">Orgs docs&lt;/a> for more information.&lt;/p>
&lt;p>Our organization is &lt;code>medic&lt;/code> or using npm&amp;rsquo;s notation, &lt;code>@medic&lt;/code>.&lt;/p>
&lt;p>We also created &lt;code>@medicmobile&lt;/code> but it&amp;rsquo;s not currently in use, it was created to
reserve the namespace.&lt;/p>
&lt;h3 id="adding-a-package">Adding a Package&lt;/h3>
&lt;p>When you publish an npm module on npmjs.com, add it to the developers team
under the &lt;code>@medic&lt;/code> org.&lt;/p>
&lt;p>This can be done using the web interface:&lt;/p>
&lt;ul>
&lt;li>Login to npmjs.com then Navigate to &lt;a href="https://www.npmjs.com/org/medic/team/developers">Medic Developer&amp;rsquo;s Team&lt;/a>
and add your package there.&lt;/li>
&lt;/ul>
&lt;p>Or command line:&lt;/p>
&lt;ul>
&lt;li>Change your directory to where the package&amp;rsquo;s &lt;code>package.json&lt;/code> lives, then run:&lt;/li>
&lt;/ul>
&lt;pre tabindex="0">&lt;code>npm access grant read-write medic:developers
&lt;/code>&lt;/pre>&lt;ul>
&lt;li>Then &lt;code>npm access&lt;/code> should show the updated permissions for the team members.&lt;/li>
&lt;/ul>
&lt;pre tabindex="0">&lt;code>$ npm access ls-collaborators
{
&amp;#34;mandric&amp;#34;: &amp;#34;read-write&amp;#34;,
&amp;#34;estellecomment&amp;#34;: &amp;#34;read-write&amp;#34;,
&amp;#34;garethbowen&amp;#34;: &amp;#34;read-write&amp;#34;,
&amp;#34;scdf&amp;#34;: &amp;#34;read-write&amp;#34;,
&amp;#34;alxndrsn&amp;#34;: &amp;#34;read-write&amp;#34;,
}
&lt;/code>&lt;/pre>&lt;h3 id="using-an-org-scoped-package">Using an Org Scoped Package&lt;/h3>
&lt;p>A scope should be specified when a published package is a fork of an existing
package, but otherwise scope is not needed since there is no conflict with the
registry.&lt;/p>
&lt;p>For example if you fork &lt;code>moment&lt;/code> and you can&amp;rsquo;t get your changes merged upstream
and need to publish a new package then modify the package name (in
package.json) to specify a organizational scope, like &lt;code>@medic/moment&lt;/code> and publish it.&lt;/p>
&lt;p>For more info see &lt;a href="https://docs.npmjs.com/creating-and-publishing-an-org-scoped-package">Publishing an Org Scoped Package&lt;/a>.&lt;/p></description></item><item><title>Core: Developing on Windows</title><link>https://docs.communityhealthtoolkit.org/core/guides/using-windows/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://docs.communityhealthtoolkit.org/core/guides/using-windows/</guid><description>
&lt;p>We don&amp;rsquo;t actively support development on Windows, instead preferring MacOS or Linux.&lt;/p>
&lt;p>However, Microsoft has recently been stabilizing their &lt;a href="https://docs.microsoft.com/en-us/windows/wsl/about">Windows Subsystem for Linux&lt;/a>, which appears to work reasonably well for development.&lt;/p>
&lt;p>Installation instructions are mostly the same as they written in &lt;a href="https://github.com/medic/cht-core/blob/master/README.md">the README&lt;/a> with a couple of caveats as of time of writing (2019-07-25), noted below.&lt;/p>
&lt;div class="alert alert-primary" role="alert">
&lt;h4 class="alert-heading">Note&lt;/h4>
Both the Windows Subsystem for Linux and Medic&amp;rsquo;s support for developing in it is very much in beta. These are advanced instructions, expect some understanding of linux and may not always work. Be patient and raise bugs as you find them!
&lt;/div>
&lt;h2 id="installing-ubuntu-in-the-windows-subsystem-for-linux">Installing Ubuntu in the Windows Subsystem for Linux.&lt;/h2>
&lt;p>For the rest of this document we&amp;rsquo;re going to presume that you&amp;rsquo;re using Ubuntu (18.04) in WSL. Medic probably works on all distributions, but Ubuntu is likely the best supported.&lt;/p>
&lt;p>First, follow Microsoft&amp;rsquo;s &lt;a href="https://docs.microsoft.com/en-us/windows/wsl/install-win10">instructions on enabling and installing linux&lt;/a>. At the end of this process you should have a linux terminal.&lt;/p>
&lt;div class="alert alert-primary" role="alert">
&lt;h4 class="alert-heading">Note&lt;/h4>
For the rest of this tutorial &lt;strong>in linux&lt;/strong> means code executing or performing actions in the WSL, while &lt;strong>in Windows&lt;/strong> means code executing or performing actions in Windows natively.
&lt;/div>
&lt;h2 id="couchdb">CouchDB&lt;/h2>
&lt;p>As of writing CouchDB wouldn&amp;rsquo;t autostart (due to systemd not existing?), and wasn&amp;rsquo;t manually starting due to erlang errors.&lt;/p>
&lt;p>Luckily, there is a perfectly working CouchDB installation for Windows:&lt;/p>
&lt;ul>
&lt;li>Download from &lt;a href="https://couchdb.apache.org/#download">CouchDB&lt;/a> and install the Windows version. This will create a Windows service.&lt;/li>
&lt;li>Run it either by directly executing &lt;code>C:\CouchDB\bin\couchdb.cmd&lt;/code> or by starting the service&lt;/li>
&lt;/ul>
&lt;p>Then go to &lt;code>http://localhost:5984/_utils/#/setup&lt;/code> in Windows and do the single node setup. Once done head back to linux and confirm it works:&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="background-color:#f8f8f8;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-bash" data-lang="bash">&lt;span style="display:flex;">&lt;span>$: curl http://localhost:5984/
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#ce5c00;font-weight:bold">{&lt;/span>&lt;span style="color:#4e9a06">&amp;#34;couchdb&amp;#34;&lt;/span>:&lt;span style="color:#4e9a06">&amp;#34;Welcome&amp;#34;&lt;/span>,&lt;span style="color:#4e9a06">&amp;#34;version&amp;#34;&lt;/span>:&lt;span style="color:#4e9a06">&amp;#34;2.3.1&amp;#34;&lt;/span>,&lt;span style="color:#4e9a06">&amp;#34;git_sha&amp;#34;&lt;/span>:&lt;span style="color:#4e9a06">&amp;#34;c298091a4&amp;#34;&lt;/span>,&lt;span style="color:#4e9a06">&amp;#34;uuid&amp;#34;&lt;/span>:&lt;span style="color:#4e9a06">&amp;#34;5f60350abaaa11c0131a5630e83ae979&amp;#34;&lt;/span>,&lt;span style="color:#4e9a06">&amp;#34;features&amp;#34;&lt;/span>:&lt;span style="color:#ce5c00;font-weight:bold">[&lt;/span>&lt;span style="color:#4e9a06">&amp;#34;pluggable-storage-engines&amp;#34;&lt;/span>,&lt;span style="color:#4e9a06">&amp;#34;scheduler&amp;#34;&lt;/span>&lt;span style="color:#ce5c00;font-weight:bold">]&lt;/span>,&lt;span style="color:#4e9a06">&amp;#34;vendor&amp;#34;&lt;/span>:&lt;span style="color:#ce5c00;font-weight:bold">{&lt;/span>&lt;span style="color:#4e9a06">&amp;#34;name&amp;#34;&lt;/span>:&lt;span style="color:#4e9a06">&amp;#34;The Apache Software Foundation&amp;#34;&lt;/span>&lt;span style="color:#ce5c00;font-weight:bold">}}&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;h2 id="installing-npm">Installing NPM&lt;/h2>
&lt;p>Start your WSL instance (Ubuntu), not WSL as they take you to two different default directories.&lt;/p>
&lt;p>The default &lt;code>npm&lt;/code> in linux is really old and doesn&amp;rsquo;t have &lt;code>npm ci&lt;/code>, which we need.&lt;/p>
&lt;p>Instead use &lt;a href="https://github.com/nvm-sh/nvm">nvm&lt;/a> to install &lt;code>nvm install 11.3&lt;/code> .&lt;/p>
&lt;h2 id="checking-out-the-code">Checking out the code&lt;/h2>
&lt;p>We used git that&amp;rsquo;s preinstalled with Ubuntu to check out the code.&lt;/p>
&lt;p>You can checkout cht code inside WSL itself. You can checkout anywhere you have write access. We&amp;rsquo;ll checkout inside /home/username/medic directory.&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="background-color:#f8f8f8;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-bash" data-lang="bash">&lt;span style="display:flex;">&lt;span>$: mkdir ~/medic &lt;span style="color:#ce5c00;font-weight:bold">&amp;amp;&amp;amp;&lt;/span> &lt;span style="color:#204a87">cd&lt;/span> ~/medic
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>$: git clone https://github.com/medic/cht-core.git
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;h2 id="setup-environment-variables">Setup Environment Variables&lt;/h2>
&lt;p>Using &lt;code>.bashrc&lt;/code> works as expected, and so is a good place to put exports:&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="background-color:#f8f8f8;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-bash" data-lang="bash">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#8f5902;font-style:italic"># Medic stuff&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#204a87">export&lt;/span> &lt;span style="color:#000">COUCH_URL&lt;/span>&lt;span style="color:#ce5c00;font-weight:bold">=&lt;/span>http://admin:pass@localhost:5984/medic
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#204a87">export&lt;/span> &lt;span style="color:#000">COUCH_NODE_NAME&lt;/span>&lt;span style="color:#ce5c00;font-weight:bold">=&lt;/span>couchdb@localhost
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;h2 id="everything-else">Everything else&lt;/h2>
&lt;p>&lt;code>npm ci&lt;/code> should just work once you&amp;rsquo;ve installed a latest version of node via nvm as noted above.&lt;/p>
&lt;p>You won&amp;rsquo;t have grunt already installed, so install it by executing following command:&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="background-color:#f8f8f8;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-bash" data-lang="bash">&lt;span style="display:flex;">&lt;span>$: npm i -g grunt-cli
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>Also install xstproc in your WSL:&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="background-color:#f8f8f8;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-bash" data-lang="bash">&lt;span style="display:flex;">&lt;span>$: sudo apt-get update
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>$: sudo apt-get install xsltproc
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>Now you can build the web app.&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="background-color:#f8f8f8;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-bash" data-lang="bash">&lt;span style="display:flex;">&lt;span>$: &lt;span style="color:#204a87">cd&lt;/span> ~/medic/cht-core/
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>$: npm ci
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>$: grunt
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>From this point, follow the &lt;code>harden couch&lt;/code> section in &lt;a href="https://docs.communityhealthtoolkit.org/apps/guides/hosting/core-developer/#cht-core-cloning-and-setup">Core Developer Setup&lt;/a>.&lt;/p>
&lt;p>To get multiple linux terminals (so you can run &lt;code>grunt&lt;/code>, &lt;code>api&lt;/code> and &lt;code>sentinel&lt;/code> at the same time) either install and use something like Tmux, or if you click &lt;code>Ubuntu&lt;/code> in the Windows start menu again it will open up a new terminal in the same linux instance.&lt;/p>
&lt;p>Once you&amp;rsquo;re done with the default instructions and have api running, check if it works by going to http://localhost:5988 in Chrome or Firefox.&lt;/p>
&lt;h2 id="editing-code">Editing Code&lt;/h2>
&lt;p>If you want to make changes to your code or contribute to our community health toolkit, you can do so by editing code from your favorite editor. If you editor supports UNC path, you can access and edit files inside WSL from &lt;code>\\wsl$\Ubuntu\&amp;lt;cht-core-location&amp;gt;&lt;/code>. If you use Visual Studio Code, it&amp;rsquo;s even easier to edit your code. Just navigate to where you have checked out cht-core and type &lt;code>code .&lt;/code> This will download VS Code Server for Ubuntu and open the project in Visual Studio Code in windows.&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="background-color:#f8f8f8;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-bash" data-lang="bash">&lt;span style="display:flex;">&lt;span>$: &lt;span style="color:#204a87">cd&lt;/span> ~/medic/cht-core
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>$: code .
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;h2 id="problems">Problems?&lt;/h2>
&lt;p>As none of our code developers use Windows as a development environment daily this solution may not be as stable as directly using MacOS or Linux. If you encounter issues please let a developer know&lt;/p></description></item><item><title>Core: Docker Image Setup</title><link>https://docs.communityhealthtoolkit.org/core/guides/docker-setup/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://docs.communityhealthtoolkit.org/core/guides/docker-setup/</guid><description>
&lt;p>This document helps to download and run the public docker image for CHT applications.&lt;/p>
&lt;h2 id="install-docker">Install Docker&lt;/h2>
&lt;p>Please be sure &lt;code>docker&lt;/code> and &lt;code>docker-compose&lt;/code> are &lt;a href="https://docs.communityhealthtoolkit.org/apps/guides/hosting/requirements/#docker">installed&lt;/a>.&lt;/p>
&lt;h2 id="use-docker-compose">Use Docker-Compose:&lt;/h2>
&lt;p>In the location you would like to host your configuration files, create a file &lt;code>docker-compose.yml&lt;/code>:&lt;/p>
&lt;ol>
&lt;li>
&lt;p>Use the &lt;code>curl&lt;/code> command line tool:&lt;/p>
&lt;pre tabindex="0">&lt;code>curl https://raw.githubusercontent.com/medic/cht-core/master/docker-compose.yml
&lt;/code>&lt;/pre>&lt;/li>
&lt;li>
&lt;p>Alternately, if you do not have &lt;code>curl&lt;/code>, you can &lt;a href="https://raw.githubusercontent.com/medic/cht-core/master/docker-compose.yml">right click this link&lt;/a> and choose &amp;ldquo;Save link as&amp;hellip;&amp;rdquo; and specify the correct location to save.&lt;/p>
&lt;/li>
&lt;/ol>
&lt;p>Export a password for admin user named &lt;code>medic&lt;/code>:&lt;/p>
&lt;pre tabindex="0">&lt;code>export DOCKER_COUCHDB_ADMIN_PASSWORD=&amp;lt;random_pw&amp;gt;
&lt;/code>&lt;/pre>&lt;h3 id="launch-docker-compose-containers">Launch docker-compose containers&lt;/h3>
&lt;p>Inside the directory that you saved the above &lt;code>docker-compose.yml&lt;/code>, run:&lt;/p>
&lt;pre tabindex="0">&lt;code>$ docker-compose up
&lt;/code>&lt;/pre>
&lt;div class="alert alert-primary" role="alert">
&lt;h4 class="alert-heading">Note&lt;/h4>
In certain shells, docker-compose may not interpolate the admin password that was exported above. In that case, your admin user had a password automatically generated. Note the &lt;code>New CouchDB Administrative User&lt;/code> and &lt;code>New CouchDB Administrative Password&lt;/code> in the output terminal. You can retrieve these via running &lt;code>docker logs medic-os&lt;/code> and searching the terminal.
&lt;/div>
&lt;p>Once containers are setup, please run the following command from your host terminal:&lt;/p>
&lt;pre tabindex="0">&lt;code>$ docker exec -it medic-os /bin/bash -c &amp;#34;sed -i &amp;#39;s/--install=3.9.0/--complete-install/g&amp;#39; /srv/scripts/horticulturalist/postrun/horticulturalist&amp;#34;
$ docker exec -it medic-os /bin/bash -c &amp;#34;/boot/svc-stop medic-core openssh &amp;amp;&amp;amp; /boot/svc-stop medic-rdbms &amp;amp;&amp;amp; /boot/svc-stop medic-couch2pg&amp;#34;
&lt;/code>&lt;/pre>&lt;p>The first command fixes a postrun script for horticulturalist to prevent unique scenarios of re-install.
The second command stops extra services that you will not need.&lt;/p>
&lt;h3 id="visit-your-project">Visit your project&lt;/h3>
&lt;p>Open a browser to: &lt;a href="https://localhost">https://localhost&lt;/a>&lt;/p>
&lt;p>You will have to click to through the SSL Security warning. Click Advanced -&amp;gt; Continue to site.&lt;/p>
&lt;p>Read about &lt;a href="https://docs.communityhealthtoolkit.org/apps/">CHT Applications&lt;/a> to build and deploy your app.&lt;/p>
&lt;h3 id="delete--re-install">Delete &amp;amp; Re-Install&lt;/h3>
&lt;p>Stop containers:&lt;/p>
&lt;ul>
&lt;li>&lt;code>docker-compose down&lt;/code> or &lt;code>docker stop medic-os &amp;amp;&amp;amp; docker stop haproxy&lt;/code>&lt;/li>
&lt;/ul>
&lt;p>Remove containers:&lt;/p>
&lt;ul>
&lt;li>&lt;code>docker-compose rm&lt;/code> or &lt;code>docker rm medic-os &amp;amp;&amp;amp; docker rm haproxy&lt;/code>&lt;/li>
&lt;/ul>
&lt;p>Clean data volume:&lt;/p>
&lt;ul>
&lt;li>&lt;code>docker volume rm medic-data&lt;/code>&lt;/li>
&lt;/ul>
&lt;p>After following the above three commands, you can re-run &lt;code>docker-compose up&lt;/code> and create a fresh install (no previous data present)&lt;/p>
&lt;h2 id="port-conflicts">Port Conflicts&lt;/h2>
&lt;p>In case you are already running services on HTTP(80) and HTTPS(443), you will have to map new ports to the &lt;code>medic-os&lt;/code> container.&lt;/p>
&lt;p>Turn down and remove all existing containers that were started:&lt;/p>
&lt;ul>
&lt;li>&lt;code>docker-compose down &amp;amp;&amp;amp; docker-compose rm&lt;/code>&lt;/li>
&lt;/ul>
&lt;p>To find out which service is using a conflicting port:
On Linux:&lt;/p>
&lt;pre tabindex="0">&lt;code>sudo netstat -plnt | grep &amp;#39;:&amp;lt;port&amp;gt;&amp;#39;
&lt;/code>&lt;/pre>&lt;p>On Mac (10.10 and above):&lt;/p>
&lt;pre tabindex="0">&lt;code>sudo lsof -iTCP -sTCP:LISTEN -n -P | grep &amp;#39;:&amp;lt;port&amp;gt;&amp;#39;
&lt;/code>&lt;/pre>&lt;p>You can either kill the service which is occupying HTTP/HTTPS ports, or run the container with forwarded ports that are free.
Stop your containers and relaunch with different ports. Here it&amp;rsquo;s shown launching them with ports &lt;code>8080&lt;/code> and &lt;code>8443&lt;/code>:&lt;/p>
&lt;pre tabindex="0">&lt;code>CHT_HTTP=8080 CHT_HTTPS=8443 docker-compose up
&lt;/code>&lt;/pre>
&lt;div class="alert alert-primary" role="alert">
&lt;h4 class="alert-heading">Note&lt;/h4>
You can substitute 8080, 444 with whichever ports are free on your host. You would now visit https://localhost:444 to visit your project.
&lt;/div>
&lt;h2 id="helpful-docker-commands">Helpful Docker commands&lt;/h2>
&lt;h3 id="restart-services">Restart services&lt;/h3>
&lt;p>&lt;code>/boot/svc-&amp;lt;start/stop/restart&amp;gt; &amp;lt;service-name/medic-api/medic-sentinel/medic-core couchdb/medic-core nginx&amp;gt;&lt;/code>&lt;/p>
&lt;p>See &lt;a href="https://github.com/medic/medic-os#user-content-service-management-scripts">medic-os docs&lt;/a> for more.&lt;/p>
&lt;h3 id="viewing-logs-inside-medic-os">Viewing logs inside &lt;code>medic-os&lt;/code>&lt;/h3>
&lt;p>To view logs, first run this to access a shell in the &lt;code>medic-os&lt;/code> container:&lt;/p>
&lt;ul>
&lt;li>&lt;code>docker exec -it medic-os /bin/bash&lt;/code>&lt;/li>
&lt;/ul>
&lt;p>View CouchDB logs:&lt;/p>
&lt;ul>
&lt;li>&lt;code>less /srv/storage/medic-core/couchdb/logs/startup.log&lt;/code>&lt;/li>
&lt;/ul>
&lt;p>View &lt;code>medic-api&lt;/code> logs:&lt;/p>
&lt;ul>
&lt;li>&lt;code>less /srv/storage/medic-api/logs/medic-api.log&lt;/code>&lt;/li>
&lt;/ul>
&lt;p>View &lt;code>medic-sentinel&lt;/code> logs:&lt;/p>
&lt;ul>
&lt;li>&lt;code>less /srv/storage/medic-sentinel/logs/medic-sentinel.log&lt;/code>&lt;/li>
&lt;/ul>
&lt;h3 id="viewing-default-stderrstdout-logs">Viewing default stderr/stdout logs&lt;/h3>
&lt;ul>
&lt;li>&lt;code>sudo docker logs medic-os&lt;/code>&lt;/li>
&lt;li>&lt;code>sudo docker logs haproxy&lt;/code>&lt;/li>
&lt;/ul>
&lt;h3 id="clean-up">Clean Up&lt;/h3>
&lt;p>List running containers:&lt;/p>
&lt;ul>
&lt;li>&lt;code>sudo docker ps&lt;/code>&lt;/li>
&lt;/ul>
&lt;p>List all available docker containers with their status&lt;/p>
&lt;ul>
&lt;li>&lt;code>sudo docker ps -a&lt;/code>&lt;/li>
&lt;/ul>
&lt;p>Stop container&lt;/p>
&lt;ul>
&lt;li>&lt;code>sudo docker stop &amp;lt;container_id&amp;gt;/&amp;lt;container_name&amp;gt;&lt;/code>&lt;/li>
&lt;/ul>
&lt;p>Start container&lt;/p>
&lt;ul>
&lt;li>&lt;code>sudo docker start &amp;lt;container_id&amp;gt;&lt;/code>&lt;/li>
&lt;/ul>
&lt;p>List all stopped containers&lt;/p>
&lt;ul>
&lt;li>&lt;code>sudo docker ps -f &amp;quot;status=exited&amp;quot;&lt;/code>&lt;/li>
&lt;/ul>
&lt;h3 id="prune-entire-docker-system">Prune entire Docker system&lt;/h3>
&lt;p>Use this &lt;code>prune&lt;/code> command when unable to launch the containers and need to restart from a clean slate. &lt;strong>WARNING:&lt;/strong> This will delete all your unused images, containers, networks and volumes &lt;strong>including those not related to CHT&lt;/strong>.&lt;/p>
&lt;p>&lt;code>docker system prune -a --volumes&lt;/code>&lt;/p></description></item></channel></rss>