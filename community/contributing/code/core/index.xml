<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>Community Health Toolkit â€“ Contributing CHT Core Code</title><link>https://docs.communityhealthtoolkit.org/community/contributing/code/core/</link><description>Recent content in Contributing CHT Core Code on Community Health Toolkit</description><generator>Hugo -- gohugo.io</generator><language>en</language><atom:link href="https://docs.communityhealthtoolkit.org/community/contributing/code/core/index.xml" rel="self" type="application/rss+xml"/><item><title>CHT Core dev environment setup</title><link>https://docs.communityhealthtoolkit.org/community/contributing/code/core/dev-environment/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://docs.communityhealthtoolkit.org/community/contributing/code/core/dev-environment/</guid><description>
&lt;div class="hx:overflow-x-auto hx:mt-6 hx:flex hx:rounded-lg hx:border hx:py-2 hx:ltr:pr-4 hx:rtl:pl-4 hx:contrast-more:border-current hx:contrast-more:dark:border-current hx:border-green-200 hx:bg-green-100 hx:text-green-900 hx:dark:border-green-200/30 hx:dark:bg-green-900/30 hx:dark:text-green-200"&gt;
&lt;div class="hx:ltr:pl-3 hx:ltr:pr-2 hx:rtl:pr-3 hx:rtl:pl-2"&gt;&lt;svg height=1.2em class="hx:inline-block hx:align-middle" xmlns="http://www.w3.org/2000/svg" fill="none" viewBox="0 0 24 24" stroke-width="2" stroke="currentColor" aria-hidden="true"&gt;&lt;path stroke-linecap="round" stroke-linejoin="round" d="M9.663 17h4.673M12 3v1m6.364 1.636l-.707.707M21 12h-1M4 12H3m3.343-5.657l-.707-.707m2.828 9.9a5 5 0 117.072 0l-.548.547A3.374 3.374 0 0014 18.469V19a2 2 0 11-4 0v-.531c0-.895-.356-1.754-.988-2.386l-.548-.547z"/&gt;&lt;/svg&gt;&lt;/div&gt;
&lt;div class="hx:w-full hx:min-w-0 hx:leading-7"&gt;
&lt;div class="hx:mt-6 hx:leading-7 hx:first:mt-0"&gt;&lt;p&gt;This guide assumes you are a CHT Core developer wanting to run the CHT Core from source code to make commits to the &lt;a href="https://github.com/medic/cht-core"target="_blank" rel="noopener"&gt;public GitHub repository&lt;/a&gt;. To set up your environment for developing apps, see the &lt;a href="https://docs.communityhealthtoolkit.org/hosting/cht/app-developer/"&gt;app guide&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;To deploy the CHT in production, see either &lt;a href="https://docs.communityhealthtoolkit.org/hosting/cht/"&gt;hosting section&lt;/a&gt;.&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;h2&gt;The Happy Path Installation&lt;span class="hx:absolute hx:-mt-20" id="the-happy-path-installation"&gt;&lt;/span&gt;
&lt;a href="#the-happy-path-installation" class="subheading-anchor" aria-label="Permalink for this section"&gt;&lt;/a&gt;&lt;/h2&gt;&lt;p&gt;CHT Core development can be done on Linux, macOS, or Windows (using the &lt;a href="https://learn.microsoft.com/en-us/windows/wsl/install"target="_blank" rel="noopener"&gt;Windows Subsystem for Linux (WSL2)&lt;/a&gt;). This CHT Core developer guide will have you install NodeJS, npm, and CouchDB (via Docker) on your local workstation.&lt;/p&gt;
&lt;div class="hx:overflow-x-auto hx:mt-6 hx:flex hx:flex-col hx:rounded-lg hx:border hx:py-4 hx:px-4 hx:border-gray-200 hx:contrast-more:border-current hx:contrast-more:dark:border-current hx:border-green-200 hx:bg-green-100 hx:text-green-900 hx:dark:border-green-200/30 hx:dark:bg-green-900/30 hx:dark:text-green-200"&gt;
&lt;p class="hx:flex hx:items-center hx:font-medium"&gt;&lt;svg height=16px class="hx:inline-block hx:align-middle hx:mr-2" xmlns="http://www.w3.org/2000/svg" fill="none" viewBox="0 0 24 24" stroke-width="2" stroke="currentColor" aria-hidden="true"&gt;&lt;path stroke-linecap="round" stroke-linejoin="round" d="M9.663 17h4.673M12 3v1m6.364 1.636l-.707.707M21 12h-1M4 12H3m3.343-5.657l-.707-.707m2.828 9.9a5 5 0 117.072 0l-.548.547A3.374 3.374 0 0014 18.469V19a2 2 0 11-4 0v-.531c0-.895-.356-1.754-.988-2.386l-.548-.547z"/&gt;&lt;/svg&gt;Tip&lt;/p&gt;
&lt;div class="hx:w-full hx:min-w-0 hx:leading-7"&gt;
&lt;div class="hx:mt-6 hx:leading-7 hx:first:mt-0"&gt;&lt;p&gt;Ensure you have at least 8GB RAM, 50GB Free disk and 4 cores. However, more is for sure better here - you&amp;rsquo;ll see real speed improvements with more RAM and more cores.&lt;/p&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;h3&gt;Install NodeJS, npm, and Docker&lt;span class="hx:absolute hx:-mt-20" id="install-nodejs-npm-and-docker"&gt;&lt;/span&gt;
&lt;a href="#install-nodejs-npm-and-docker" class="subheading-anchor" aria-label="Permalink for this section"&gt;&lt;/a&gt;&lt;/h3&gt;&lt;p&gt;First, update your current packages and install some supporting tools:&lt;/p&gt;
&lt;p&gt;&lt;em&gt;(Node 22 is the environment used to run the CHT server in production, so this is the recommended version of Node to use for development.)&lt;/em&gt;&lt;/p&gt;
&lt;div class="hextra-scrollbar hx:overflow-x-auto hx:overflow-y-hidden hx:overscroll-x-contain"&gt;
&lt;div class="hx:mt-4 hx:flex hx:w-max hx:min-w-full hx:border-b hx:border-gray-200 hx:pb-px hx:dark:border-neutral-800"&gt;&lt;button
class="hextra-tabs-toggle hx:cursor-pointer hx:data-[state=selected]:border-primary-500 hx:data-[state=selected]:text-primary-600 hx:data-[state=selected]:dark:border-primary-500 hx:data-[state=selected]:dark:text-primary-600 hx:mr-2 hx:rounded-t hx:p-2 hx:font-medium hx:leading-5 hx:transition-colors hx:-mb-0.5 hx:select-none hx:border-b-2 hx:border-transparent hx:text-gray-600 hx:hover:border-gray-200 hx:hover:text-black hx:dark:text-gray-200 hx:dark:hover:border-neutral-800 hx:dark:hover:text-white"
role="tab"
type="button"
aria-controls="tabs-panel-0" aria-selected="true" tabindex="0" data-state="selected"&gt;Linux (Ubuntu)&lt;/button&gt;&lt;button
class="hextra-tabs-toggle hx:cursor-pointer hx:data-[state=selected]:border-primary-500 hx:data-[state=selected]:text-primary-600 hx:data-[state=selected]:dark:border-primary-500 hx:data-[state=selected]:dark:text-primary-600 hx:mr-2 hx:rounded-t hx:p-2 hx:font-medium hx:leading-5 hx:transition-colors hx:-mb-0.5 hx:select-none hx:border-b-2 hx:border-transparent hx:text-gray-600 hx:hover:border-gray-200 hx:hover:text-black hx:dark:text-gray-200 hx:dark:hover:border-neutral-800 hx:dark:hover:text-white"
role="tab"
type="button"
aria-controls="tabs-panel-1"&gt;macOS&lt;/button&gt;&lt;button
class="hextra-tabs-toggle hx:cursor-pointer hx:data-[state=selected]:border-primary-500 hx:data-[state=selected]:text-primary-600 hx:data-[state=selected]:dark:border-primary-500 hx:data-[state=selected]:dark:text-primary-600 hx:mr-2 hx:rounded-t hx:p-2 hx:font-medium hx:leading-5 hx:transition-colors hx:-mb-0.5 hx:select-none hx:border-b-2 hx:border-transparent hx:text-gray-600 hx:hover:border-gray-200 hx:hover:text-black hx:dark:text-gray-200 hx:dark:hover:border-neutral-800 hx:dark:hover:text-white"
role="tab"
type="button"
aria-controls="tabs-panel-2"&gt;Windows (WSL2)&lt;/button&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;div&gt;
&lt;div
class="hextra-tabs-panel hx:rounded-sm hx:pt-6 hx:hidden hx:data-[state=selected]:block"
id="tabs-panel-0"
role="tabpanel" tabindex="0" data-state="selected" &gt;&lt;div class="hextra-code-block hx:relative hx:mt-6 hx:first:mt-0 hx:group/code"&gt;
&lt;div&gt;&lt;div class="highlight"&gt;&lt;pre tabindex="0" class="chroma"&gt;&lt;code class="language-shell" data-lang="shell"&gt;&lt;span class="line"&gt;&lt;span class="cl"&gt;sudo apt update &lt;span class="o"&gt;&amp;amp;&amp;amp;&lt;/span&gt; sudo apt -y dist-upgrade
&lt;/span&gt;&lt;/span&gt;&lt;span class="line"&gt;&lt;span class="cl"&gt;sudo apt -y install xsltproc curl uidmap jq python3 git make g++
&lt;/span&gt;&lt;/span&gt;&lt;span class="line"&gt;&lt;span class="cl"&gt;&lt;span class="c1"&gt;# Use NVM to install NodeJS:&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class="line"&gt;&lt;span class="cl"&gt;&lt;span class="nb"&gt;export&lt;/span&gt; &lt;span class="nv"&gt;nvm_version&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="sb"&gt;`&lt;/span&gt;curl -s https://api.github.com/repos/nvm-sh/nvm/releases/latest &lt;span class="p"&gt;|&lt;/span&gt; jq -r .name&lt;span class="sb"&gt;`&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class="line"&gt;&lt;span class="cl"&gt;curl -o- https://raw.githubusercontent.com/nvm-sh/nvm/&lt;span class="nv"&gt;$nvm_version&lt;/span&gt;/install.sh &lt;span class="p"&gt;|&lt;/span&gt; &lt;span class="nv"&gt;$SHELL&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class="line"&gt;&lt;span class="cl"&gt;. ~/.&lt;span class="k"&gt;$(&lt;/span&gt;basename &lt;span class="nv"&gt;$SHELL&lt;/span&gt;&lt;span class="k"&gt;)&lt;/span&gt;rc
&lt;/span&gt;&lt;/span&gt;&lt;span class="line"&gt;&lt;span class="cl"&gt;nvm install &lt;span class="m"&gt;22&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;&lt;div class="hextra-code-copy-btn-container hx:opacity-0 hx:transition hx:group-hover/code:opacity-100 hx:flex hx:gap-1 hx:absolute hx:m-[11px] hx:right-0 hx:top-0"&gt;
&lt;button
class="hextra-code-copy-btn hx:group/copybtn hx:cursor-pointer hx:transition-all hx:active:opacity-50 hx:bg-primary-700/5 hx:border hx:border-black/5 hx:text-gray-600 hx:hover:text-gray-900 hx:rounded-md hx:p-1.5 hx:dark:bg-primary-300/10 hx:dark:border-white/10 hx:dark:text-gray-400 hx:dark:hover:text-gray-50"
title="Copy code"
&gt;
&lt;div class="hextra-copy-icon hx:group-[.copied]/copybtn:hidden hx:pointer-events-none hx:h-4 hx:w-4"&gt;&lt;/div&gt;
&lt;div class="hextra-success-icon hx:hidden hx:group-[.copied]/copybtn:block hx:pointer-events-none hx:h-4 hx:w-4"&gt;&lt;/div&gt;
&lt;/button&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div
class="hextra-tabs-panel hx:rounded-sm hx:pt-6 hx:hidden hx:data-[state=selected]:block"
id="tabs-panel-1"
role="tabpanel"&gt;&lt;div class="hextra-code-block hx:relative hx:mt-6 hx:first:mt-0 hx:group/code"&gt;
&lt;div&gt;&lt;div class="highlight"&gt;&lt;pre tabindex="0" class="chroma"&gt;&lt;code class="language-shell" data-lang="shell"&gt;&lt;span class="line"&gt;&lt;span class="cl"&gt;&lt;span class="c1"&gt;# Uses Homebrew: https://brew.sh/&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class="line"&gt;&lt;span class="cl"&gt;brew update
&lt;/span&gt;&lt;/span&gt;&lt;span class="line"&gt;&lt;span class="cl"&gt;brew install curl jq pyenv git make node@22 gcc
&lt;/span&gt;&lt;/span&gt;&lt;span class="line"&gt;&lt;span class="cl"&gt;&lt;span class="c1"&gt;# Python no longer included by default in macOS &amp;gt;12.3 &lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class="line"&gt;&lt;span class="cl"&gt;pyenv install 2.7.18
&lt;/span&gt;&lt;/span&gt;&lt;span class="line"&gt;&lt;span class="cl"&gt;pyenv global 2.7.18
&lt;/span&gt;&lt;/span&gt;&lt;span class="line"&gt;&lt;span class="cl"&gt;&lt;span class="nb"&gt;echo&lt;/span&gt; &lt;span class="s2"&gt;&amp;#34;eval \&amp;#34;\$(pyenv init --path)\&amp;#34;&amp;#34;&lt;/span&gt; &amp;gt;&amp;gt; ~/.&lt;span class="k"&gt;$(&lt;/span&gt;basename &lt;span class="nv"&gt;$SHELL&lt;/span&gt;&lt;span class="k"&gt;)&lt;/span&gt;rc
&lt;/span&gt;&lt;/span&gt;&lt;span class="line"&gt;&lt;span class="cl"&gt;. ~/.&lt;span class="k"&gt;$(&lt;/span&gt;basename &lt;span class="nv"&gt;$SHELL&lt;/span&gt;&lt;span class="k"&gt;)&lt;/span&gt;rc&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;&lt;div class="hextra-code-copy-btn-container hx:opacity-0 hx:transition hx:group-hover/code:opacity-100 hx:flex hx:gap-1 hx:absolute hx:m-[11px] hx:right-0 hx:top-0"&gt;
&lt;button
class="hextra-code-copy-btn hx:group/copybtn hx:cursor-pointer hx:transition-all hx:active:opacity-50 hx:bg-primary-700/5 hx:border hx:border-black/5 hx:text-gray-600 hx:hover:text-gray-900 hx:rounded-md hx:p-1.5 hx:dark:bg-primary-300/10 hx:dark:border-white/10 hx:dark:text-gray-400 hx:dark:hover:text-gray-50"
title="Copy code"
&gt;
&lt;div class="hextra-copy-icon hx:group-[.copied]/copybtn:hidden hx:pointer-events-none hx:h-4 hx:w-4"&gt;&lt;/div&gt;
&lt;div class="hextra-success-icon hx:hidden hx:group-[.copied]/copybtn:block hx:pointer-events-none hx:h-4 hx:w-4"&gt;&lt;/div&gt;
&lt;/button&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div
class="hextra-tabs-panel hx:rounded-sm hx:pt-6 hx:hidden hx:data-[state=selected]:block"
id="tabs-panel-2"
role="tabpanel"&gt;&lt;div class="hextra-code-block hx:relative hx:mt-6 hx:first:mt-0 hx:group/code"&gt;
&lt;div&gt;&lt;div class="highlight"&gt;&lt;pre tabindex="0" class="chroma"&gt;&lt;code class="language-shell" data-lang="shell"&gt;&lt;span class="line"&gt;&lt;span class="cl"&gt;sudo apt update &lt;span class="o"&gt;&amp;amp;&amp;amp;&lt;/span&gt; sudo apt -y dist-upgrade
&lt;/span&gt;&lt;/span&gt;&lt;span class="line"&gt;&lt;span class="cl"&gt;sudo apt -y install xsltproc curl uidmap jq python2 git make g++
&lt;/span&gt;&lt;/span&gt;&lt;span class="line"&gt;&lt;span class="cl"&gt;&lt;span class="c1"&gt;# Use NVM to install NodeJS:&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class="line"&gt;&lt;span class="cl"&gt;&lt;span class="nb"&gt;export&lt;/span&gt; &lt;span class="nv"&gt;nvm_version&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="sb"&gt;`&lt;/span&gt;curl -s https://api.github.com/repos/nvm-sh/nvm/releases/latest &lt;span class="p"&gt;|&lt;/span&gt; jq -r .name&lt;span class="sb"&gt;`&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class="line"&gt;&lt;span class="cl"&gt;curl -o- https://raw.githubusercontent.com/nvm-sh/nvm/&lt;span class="nv"&gt;$nvm_version&lt;/span&gt;/install.sh &lt;span class="p"&gt;|&lt;/span&gt; &lt;span class="nv"&gt;$SHELL&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class="line"&gt;&lt;span class="cl"&gt;. ~/.&lt;span class="k"&gt;$(&lt;/span&gt;basename &lt;span class="nv"&gt;$SHELL&lt;/span&gt;&lt;span class="k"&gt;)&lt;/span&gt;rc
&lt;/span&gt;&lt;/span&gt;&lt;span class="line"&gt;&lt;span class="cl"&gt;nvm install &lt;span class="m"&gt;22&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;&lt;div class="hextra-code-copy-btn-container hx:opacity-0 hx:transition hx:group-hover/code:opacity-100 hx:flex hx:gap-1 hx:absolute hx:m-[11px] hx:right-0 hx:top-0"&gt;
&lt;button
class="hextra-code-copy-btn hx:group/copybtn hx:cursor-pointer hx:transition-all hx:active:opacity-50 hx:bg-primary-700/5 hx:border hx:border-black/5 hx:text-gray-600 hx:hover:text-gray-900 hx:rounded-md hx:p-1.5 hx:dark:bg-primary-300/10 hx:dark:border-white/10 hx:dark:text-gray-400 hx:dark:hover:text-gray-50"
title="Copy code"
&gt;
&lt;div class="hextra-copy-icon hx:group-[.copied]/copybtn:hidden hx:pointer-events-none hx:h-4 hx:w-4"&gt;&lt;/div&gt;
&lt;div class="hextra-success-icon hx:hidden hx:group-[.copied]/copybtn:block hx:pointer-events-none hx:h-4 hx:w-4"&gt;&lt;/div&gt;
&lt;/button&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;p&gt;Now let&amp;rsquo;s ensure NodeJS 22 and npm 10 were installed. This should output version 22.x.x for NodeJS and 10.x.x for &lt;code&gt;npm&lt;/code&gt;:&lt;/p&gt;
&lt;div class="hextra-code-block hx:relative hx:mt-6 hx:first:mt-0 hx:group/code"&gt;
&lt;div&gt;&lt;div class="highlight"&gt;&lt;pre tabindex="0" class="chroma"&gt;&lt;code class="language-shell" data-lang="shell"&gt;&lt;span class="line"&gt;&lt;span class="cl"&gt;node -v &lt;span class="o"&gt;&amp;amp;&amp;amp;&lt;/span&gt; npm -v&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;&lt;div class="hextra-code-copy-btn-container hx:opacity-0 hx:transition hx:group-hover/code:opacity-100 hx:flex hx:gap-1 hx:absolute hx:m-[11px] hx:right-0 hx:top-0"&gt;
&lt;button
class="hextra-code-copy-btn hx:group/copybtn hx:cursor-pointer hx:transition-all hx:active:opacity-50 hx:bg-primary-700/5 hx:border hx:border-black/5 hx:text-gray-600 hx:hover:text-gray-900 hx:rounded-md hx:p-1.5 hx:dark:bg-primary-300/10 hx:dark:border-white/10 hx:dark:text-gray-400 hx:dark:hover:text-gray-50"
title="Copy code"
&gt;
&lt;div class="hextra-copy-icon hx:group-[.copied]/copybtn:hidden hx:pointer-events-none hx:h-4 hx:w-4"&gt;&lt;/div&gt;
&lt;div class="hextra-success-icon hx:hidden hx:group-[.copied]/copybtn:block hx:pointer-events-none hx:h-4 hx:w-4"&gt;&lt;/div&gt;
&lt;/button&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;p&gt;Install Docker:&lt;/p&gt;
&lt;div class="hextra-scrollbar hx:overflow-x-auto hx:overflow-y-hidden hx:overscroll-x-contain"&gt;
&lt;div class="hx:mt-4 hx:flex hx:w-max hx:min-w-full hx:border-b hx:border-gray-200 hx:pb-px hx:dark:border-neutral-800"&gt;&lt;button
class="hextra-tabs-toggle hx:cursor-pointer hx:data-[state=selected]:border-primary-500 hx:data-[state=selected]:text-primary-600 hx:data-[state=selected]:dark:border-primary-500 hx:data-[state=selected]:dark:text-primary-600 hx:mr-2 hx:rounded-t hx:p-2 hx:font-medium hx:leading-5 hx:transition-colors hx:-mb-0.5 hx:select-none hx:border-b-2 hx:border-transparent hx:text-gray-600 hx:hover:border-gray-200 hx:hover:text-black hx:dark:text-gray-200 hx:dark:hover:border-neutral-800 hx:dark:hover:text-white"
role="tab"
type="button"
aria-controls="tabs-panel-0" aria-selected="true" tabindex="0" data-state="selected"&gt;Linux (Ubuntu)&lt;/button&gt;&lt;button
class="hextra-tabs-toggle hx:cursor-pointer hx:data-[state=selected]:border-primary-500 hx:data-[state=selected]:text-primary-600 hx:data-[state=selected]:dark:border-primary-500 hx:data-[state=selected]:dark:text-primary-600 hx:mr-2 hx:rounded-t hx:p-2 hx:font-medium hx:leading-5 hx:transition-colors hx:-mb-0.5 hx:select-none hx:border-b-2 hx:border-transparent hx:text-gray-600 hx:hover:border-gray-200 hx:hover:text-black hx:dark:text-gray-200 hx:dark:hover:border-neutral-800 hx:dark:hover:text-white"
role="tab"
type="button"
aria-controls="tabs-panel-1"&gt;macOS&lt;/button&gt;&lt;button
class="hextra-tabs-toggle hx:cursor-pointer hx:data-[state=selected]:border-primary-500 hx:data-[state=selected]:text-primary-600 hx:data-[state=selected]:dark:border-primary-500 hx:data-[state=selected]:dark:text-primary-600 hx:mr-2 hx:rounded-t hx:p-2 hx:font-medium hx:leading-5 hx:transition-colors hx:-mb-0.5 hx:select-none hx:border-b-2 hx:border-transparent hx:text-gray-600 hx:hover:border-gray-200 hx:hover:text-black hx:dark:text-gray-200 hx:dark:hover:border-neutral-800 hx:dark:hover:text-white"
role="tab"
type="button"
aria-controls="tabs-panel-2"&gt;Windows (WSL2)&lt;/button&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;div&gt;
&lt;div
class="hextra-tabs-panel hx:rounded-sm hx:pt-6 hx:hidden hx:data-[state=selected]:block"
id="tabs-panel-0"
role="tabpanel" tabindex="0" data-state="selected" &gt;&lt;p&gt;Download and install &lt;a href="https://www.docker.com/products/docker-desktop"target="_blank" rel="noopener"&gt;Docker Desktop&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;Alternatively, on Linux you can use the following commands to install &lt;a href="https://docs.docker.com/engine/"target="_blank" rel="noopener"&gt;Docker Engine&lt;/a&gt;. (This will reduce the layers of technical abstraction for running containers, but will not include a GUI application for managing your Docker resources.)&lt;/p&gt;
&lt;div class="hextra-code-block hx:relative hx:mt-6 hx:first:mt-0 hx:group/code"&gt;
&lt;div&gt;&lt;div class="highlight"&gt;&lt;pre tabindex="0" class="chroma"&gt;&lt;code class="language-shell" data-lang="shell"&gt;&lt;span class="line"&gt;&lt;span class="cl"&gt;curl -fsSL get.docker.com -o get-docker.sh &lt;span class="o"&gt;&amp;amp;&amp;amp;&lt;/span&gt; sh get-docker.sh
&lt;/span&gt;&lt;/span&gt;&lt;span class="line"&gt;&lt;span class="cl"&gt;&lt;span class="c1"&gt;# OPTIONAL: Allow user to run Docker without sudo&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class="line"&gt;&lt;span class="cl"&gt;dockerd-rootless-setuptool.sh install
&lt;/span&gt;&lt;/span&gt;&lt;span class="line"&gt;&lt;span class="cl"&gt;&lt;span class="nb"&gt;echo&lt;/span&gt; &lt;span class="s2"&gt;&amp;#34;export PATH=/usr/bin:&lt;/span&gt;&lt;span class="nv"&gt;$PATH&lt;/span&gt;&lt;span class="s2"&gt;&amp;#34;&lt;/span&gt; &amp;gt;&amp;gt; ~/.&lt;span class="k"&gt;$(&lt;/span&gt;basename &lt;span class="nv"&gt;$SHELL&lt;/span&gt;&lt;span class="k"&gt;)&lt;/span&gt;rc
&lt;/span&gt;&lt;/span&gt;&lt;span class="line"&gt;&lt;span class="cl"&gt;&lt;span class="nb"&gt;echo&lt;/span&gt; &lt;span class="s2"&gt;&amp;#34;export DOCKER_HOST=unix:///run/user/1000/docker.sock&amp;#34;&lt;/span&gt; &amp;gt;&amp;gt; ~/.&lt;span class="k"&gt;$(&lt;/span&gt;basename &lt;span class="nv"&gt;$SHELL&lt;/span&gt;&lt;span class="k"&gt;)&lt;/span&gt;rc
&lt;/span&gt;&lt;/span&gt;&lt;span class="line"&gt;&lt;span class="cl"&gt;. ~/.&lt;span class="k"&gt;$(&lt;/span&gt;basename &lt;span class="nv"&gt;$SHELL&lt;/span&gt;&lt;span class="k"&gt;)&lt;/span&gt;rc&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;&lt;div class="hextra-code-copy-btn-container hx:opacity-0 hx:transition hx:group-hover/code:opacity-100 hx:flex hx:gap-1 hx:absolute hx:m-[11px] hx:right-0 hx:top-0"&gt;
&lt;button
class="hextra-code-copy-btn hx:group/copybtn hx:cursor-pointer hx:transition-all hx:active:opacity-50 hx:bg-primary-700/5 hx:border hx:border-black/5 hx:text-gray-600 hx:hover:text-gray-900 hx:rounded-md hx:p-1.5 hx:dark:bg-primary-300/10 hx:dark:border-white/10 hx:dark:text-gray-400 hx:dark:hover:text-gray-50"
title="Copy code"
&gt;
&lt;div class="hextra-copy-icon hx:group-[.copied]/copybtn:hidden hx:pointer-events-none hx:h-4 hx:w-4"&gt;&lt;/div&gt;
&lt;div class="hextra-success-icon hx:hidden hx:group-[.copied]/copybtn:block hx:pointer-events-none hx:h-4 hx:w-4"&gt;&lt;/div&gt;
&lt;/button&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;p&gt;Restart your entire machine to finish initializing Docker.&lt;/p&gt;
&lt;/div&gt;
&lt;div
class="hextra-tabs-panel hx:rounded-sm hx:pt-6 hx:hidden hx:data-[state=selected]:block"
id="tabs-panel-1"
role="tabpanel"&gt;&lt;p&gt;Download and install &lt;a href="https://www.docker.com/products/docker-desktop"target="_blank" rel="noopener"&gt;Docker Desktop&lt;/a&gt; or &lt;a href="https://github.com/abiosoft/colima#readme"target="_blank" rel="noopener"&gt;Colima&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;Restart your entire machine to finish initializing Docker.&lt;/p&gt;
&lt;/div&gt;
&lt;div
class="hextra-tabs-panel hx:rounded-sm hx:pt-6 hx:hidden hx:data-[state=selected]:block"
id="tabs-panel-2"
role="tabpanel"&gt;&lt;p&gt;Download and install &lt;a href="https://www.docker.com/products/docker-desktop"target="_blank" rel="noopener"&gt;Docker Desktop&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;Restart your entire machine to finish initializing Docker.&lt;/p&gt;
&lt;p&gt;After you have restarted, ensure that &amp;ldquo;Enable integration with my default WSL distro&amp;rdquo; is checked in Docker Desktop along with intgration to other distros:&lt;/p&gt;
&lt;p&gt;&lt;img src="https://docs.communityhealthtoolkit.org/building/tutorials/_partial_docker_setup/windows.docker.desktop.png" alt="windows.docker.desktop.png" loading="lazy" /&gt;&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;p&gt;After restarting, verify Docker is running as expected. Run the simple &lt;code&gt;hello-world&lt;/code&gt; Docker container. This should output &amp;ldquo;Hello from Docker!&amp;rdquo; as well as some other intro text:&lt;/p&gt;
&lt;div class="hextra-code-block hx:relative hx:mt-6 hx:first:mt-0 hx:group/code"&gt;
&lt;div&gt;&lt;div class="highlight"&gt;&lt;pre tabindex="0" class="chroma"&gt;&lt;code class="language-shell" data-lang="shell"&gt;&lt;span class="line"&gt;&lt;span class="cl"&gt;docker run hello-world&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;&lt;div class="hextra-code-copy-btn-container hx:opacity-0 hx:transition hx:group-hover/code:opacity-100 hx:flex hx:gap-1 hx:absolute hx:m-[11px] hx:right-0 hx:top-0"&gt;
&lt;button
class="hextra-code-copy-btn hx:group/copybtn hx:cursor-pointer hx:transition-all hx:active:opacity-50 hx:bg-primary-700/5 hx:border hx:border-black/5 hx:text-gray-600 hx:hover:text-gray-900 hx:rounded-md hx:p-1.5 hx:dark:bg-primary-300/10 hx:dark:border-white/10 hx:dark:text-gray-400 hx:dark:hover:text-gray-50"
title="Copy code"
&gt;
&lt;div class="hextra-copy-icon hx:group-[.copied]/copybtn:hidden hx:pointer-events-none hx:h-4 hx:w-4"&gt;&lt;/div&gt;
&lt;div class="hextra-success-icon hx:hidden hx:group-[.copied]/copybtn:block hx:pointer-events-none hx:h-4 hx:w-4"&gt;&lt;/div&gt;
&lt;/button&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;h3&gt;CHT Core Cloning and Setup&lt;span class="hx:absolute hx:-mt-20" id="cht-core-cloning-and-setup"&gt;&lt;/span&gt;
&lt;a href="#cht-core-cloning-and-setup" class="subheading-anchor" aria-label="Permalink for this section"&gt;&lt;/a&gt;&lt;/h3&gt;&lt;p&gt;Clone the main CHT Core repo from GitHub and change directories into it:&lt;/p&gt;
&lt;div class="hextra-code-block hx:relative hx:mt-6 hx:first:mt-0 hx:group/code"&gt;
&lt;div&gt;&lt;div class="highlight"&gt;&lt;pre tabindex="0" class="chroma"&gt;&lt;code class="language-shell" data-lang="shell"&gt;&lt;span class="line"&gt;&lt;span class="cl"&gt;git clone https://github.com/medic/cht-core ~/cht-core
&lt;/span&gt;&lt;/span&gt;&lt;span class="line"&gt;&lt;span class="cl"&gt;&lt;span class="nb"&gt;cd&lt;/span&gt; ~/cht-core&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;&lt;div class="hextra-code-copy-btn-container hx:opacity-0 hx:transition hx:group-hover/code:opacity-100 hx:flex hx:gap-1 hx:absolute hx:m-[11px] hx:right-0 hx:top-0"&gt;
&lt;button
class="hextra-code-copy-btn hx:group/copybtn hx:cursor-pointer hx:transition-all hx:active:opacity-50 hx:bg-primary-700/5 hx:border hx:border-black/5 hx:text-gray-600 hx:hover:text-gray-900 hx:rounded-md hx:p-1.5 hx:dark:bg-primary-300/10 hx:dark:border-white/10 hx:dark:text-gray-400 hx:dark:hover:text-gray-50"
title="Copy code"
&gt;
&lt;div class="hextra-copy-icon hx:group-[.copied]/copybtn:hidden hx:pointer-events-none hx:h-4 hx:w-4"&gt;&lt;/div&gt;
&lt;div class="hextra-success-icon hx:hidden hx:group-[.copied]/copybtn:block hx:pointer-events-none hx:h-4 hx:w-4"&gt;&lt;/div&gt;
&lt;/button&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;p&gt;Install dependencies and perform other setup tasks via an &lt;code&gt;npm&lt;/code&gt; command. Note this command may take many minutes. Be patient!&lt;/p&gt;
&lt;div class="hextra-code-block hx:relative hx:mt-6 hx:first:mt-0 hx:group/code"&gt;
&lt;div&gt;&lt;div class="highlight"&gt;&lt;pre tabindex="0" class="chroma"&gt;&lt;code class="language-shell" data-lang="shell"&gt;&lt;span class="line"&gt;&lt;span class="cl"&gt;npm ci&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;&lt;div class="hextra-code-copy-btn-container hx:opacity-0 hx:transition hx:group-hover/code:opacity-100 hx:flex hx:gap-1 hx:absolute hx:m-[11px] hx:right-0 hx:top-0"&gt;
&lt;button
class="hextra-code-copy-btn hx:group/copybtn hx:cursor-pointer hx:transition-all hx:active:opacity-50 hx:bg-primary-700/5 hx:border hx:border-black/5 hx:text-gray-600 hx:hover:text-gray-900 hx:rounded-md hx:p-1.5 hx:dark:bg-primary-300/10 hx:dark:border-white/10 hx:dark:text-gray-400 hx:dark:hover:text-gray-50"
title="Copy code"
&gt;
&lt;div class="hextra-copy-icon hx:group-[.copied]/copybtn:hidden hx:pointer-events-none hx:h-4 hx:w-4"&gt;&lt;/div&gt;
&lt;div class="hextra-success-icon hx:hidden hx:group-[.copied]/copybtn:block hx:pointer-events-none hx:h-4 hx:w-4"&gt;&lt;/div&gt;
&lt;/button&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;p&gt;To finalise setting up any remaining dependencies build the project by running:&lt;/p&gt;
&lt;div class="hextra-code-block hx:relative hx:mt-6 hx:first:mt-0 hx:group/code"&gt;
&lt;div&gt;&lt;div class="highlight"&gt;&lt;pre tabindex="0" class="chroma"&gt;&lt;code class="language-shell" data-lang="shell"&gt;&lt;span class="line"&gt;&lt;span class="cl"&gt;npm run build-dev&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;&lt;div class="hextra-code-copy-btn-container hx:opacity-0 hx:transition hx:group-hover/code:opacity-100 hx:flex hx:gap-1 hx:absolute hx:m-[11px] hx:right-0 hx:top-0"&gt;
&lt;button
class="hextra-code-copy-btn hx:group/copybtn hx:cursor-pointer hx:transition-all hx:active:opacity-50 hx:bg-primary-700/5 hx:border hx:border-black/5 hx:text-gray-600 hx:hover:text-gray-900 hx:rounded-md hx:p-1.5 hx:dark:bg-primary-300/10 hx:dark:border-white/10 hx:dark:text-gray-400 hx:dark:hover:text-gray-50"
title="Copy code"
&gt;
&lt;div class="hextra-copy-icon hx:group-[.copied]/copybtn:hidden hx:pointer-events-none hx:h-4 hx:w-4"&gt;&lt;/div&gt;
&lt;div class="hextra-success-icon hx:hidden hx:group-[.copied]/copybtn:block hx:pointer-events-none hx:h-4 hx:w-4"&gt;&lt;/div&gt;
&lt;/button&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;p&gt;Every time you run any &lt;code&gt;npm&lt;/code&gt; or &lt;code&gt;node&lt;/code&gt; commands, it will expect &lt;code&gt;COUCH_NODE_NAME&lt;/code&gt; and &lt;code&gt;COUCH_URL&lt;/code&gt; environment variables to be set:&lt;/p&gt;
&lt;div class="hextra-code-block hx:relative hx:mt-6 hx:first:mt-0 hx:group/code"&gt;
&lt;div&gt;&lt;div class="highlight"&gt;&lt;pre tabindex="0" class="chroma"&gt;&lt;code class="language-shell" data-lang="shell"&gt;&lt;span class="line"&gt;&lt;span class="cl"&gt;&lt;span class="nb"&gt;echo&lt;/span&gt; &lt;span class="s2"&gt;&amp;#34;export COUCH_NODE_NAME=nonode@nohost&amp;#34;&lt;/span&gt;&amp;gt;&amp;gt; ~/.&lt;span class="k"&gt;$(&lt;/span&gt;basename &lt;span class="nv"&gt;$SHELL&lt;/span&gt;&lt;span class="k"&gt;)&lt;/span&gt;rc
&lt;/span&gt;&lt;/span&gt;&lt;span class="line"&gt;&lt;span class="cl"&gt;&lt;span class="nb"&gt;echo&lt;/span&gt; &lt;span class="s2"&gt;&amp;#34;export COUCH_URL=http://medic:password@localhost:5984/medic&amp;#34;&lt;/span&gt;&amp;gt;&amp;gt; ~/.&lt;span class="k"&gt;$(&lt;/span&gt;basename &lt;span class="nv"&gt;$SHELL&lt;/span&gt;&lt;span class="k"&gt;)&lt;/span&gt;rc
&lt;/span&gt;&lt;/span&gt;&lt;span class="line"&gt;&lt;span class="cl"&gt;. ~/.&lt;span class="k"&gt;$(&lt;/span&gt;basename &lt;span class="nv"&gt;$SHELL&lt;/span&gt;&lt;span class="k"&gt;)&lt;/span&gt;rc&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;&lt;div class="hextra-code-copy-btn-container hx:opacity-0 hx:transition hx:group-hover/code:opacity-100 hx:flex hx:gap-1 hx:absolute hx:m-[11px] hx:right-0 hx:top-0"&gt;
&lt;button
class="hextra-code-copy-btn hx:group/copybtn hx:cursor-pointer hx:transition-all hx:active:opacity-50 hx:bg-primary-700/5 hx:border hx:border-black/5 hx:text-gray-600 hx:hover:text-gray-900 hx:rounded-md hx:p-1.5 hx:dark:bg-primary-300/10 hx:dark:border-white/10 hx:dark:text-gray-400 hx:dark:hover:text-gray-50"
title="Copy code"
&gt;
&lt;div class="hextra-copy-icon hx:group-[.copied]/copybtn:hidden hx:pointer-events-none hx:h-4 hx:w-4"&gt;&lt;/div&gt;
&lt;div class="hextra-success-icon hx:hidden hx:group-[.copied]/copybtn:block hx:pointer-events-none hx:h-4 hx:w-4"&gt;&lt;/div&gt;
&lt;/button&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;p&gt;To ensure these to exports and sourcing your rc file worked, echo the values back out. You should see &lt;code&gt;nonode@nohost&lt;/code&gt; and &lt;code&gt;http://medic:password@localhost:5984/medic&lt;/code&gt;:&lt;/p&gt;
&lt;div class="hextra-code-block hx:relative hx:mt-6 hx:first:mt-0 hx:group/code"&gt;
&lt;div&gt;&lt;div class="highlight"&gt;&lt;pre tabindex="0" class="chroma"&gt;&lt;code class="language-shell" data-lang="shell"&gt;&lt;span class="line"&gt;&lt;span class="cl"&gt;&lt;span class="nb"&gt;echo&lt;/span&gt; &lt;span class="nv"&gt;$COUCH_NODE_NAME&lt;/span&gt; &lt;span class="o"&gt;&amp;amp;&amp;amp;&lt;/span&gt; &lt;span class="nb"&gt;echo&lt;/span&gt; &lt;span class="nv"&gt;$COUCH_URL&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;&lt;div class="hextra-code-copy-btn-container hx:opacity-0 hx:transition hx:group-hover/code:opacity-100 hx:flex hx:gap-1 hx:absolute hx:m-[11px] hx:right-0 hx:top-0"&gt;
&lt;button
class="hextra-code-copy-btn hx:group/copybtn hx:cursor-pointer hx:transition-all hx:active:opacity-50 hx:bg-primary-700/5 hx:border hx:border-black/5 hx:text-gray-600 hx:hover:text-gray-900 hx:rounded-md hx:p-1.5 hx:dark:bg-primary-300/10 hx:dark:border-white/10 hx:dark:text-gray-400 hx:dark:hover:text-gray-50"
title="Copy code"
&gt;
&lt;div class="hextra-copy-icon hx:group-[.copied]/copybtn:hidden hx:pointer-events-none hx:h-4 hx:w-4"&gt;&lt;/div&gt;
&lt;div class="hextra-success-icon hx:hidden hx:group-[.copied]/copybtn:block hx:pointer-events-none hx:h-4 hx:w-4"&gt;&lt;/div&gt;
&lt;/button&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;h3&gt;CouchDB&lt;span class="hx:absolute hx:-mt-20" id="couchdb"&gt;&lt;/span&gt;
&lt;a href="#couchdb" class="subheading-anchor" aria-label="Permalink for this section"&gt;&lt;/a&gt;&lt;/h3&gt;&lt;p&gt;Create a &lt;code&gt;docker-compose.yml&lt;/code&gt; and &lt;code&gt;couchdb-override.yml&lt;/code&gt; files under the &lt;code&gt;~/cht-docker&lt;/code&gt; folder with this code:&lt;/p&gt;
&lt;div class="hextra-code-block hx:relative hx:mt-6 hx:first:mt-0 hx:group/code"&gt;
&lt;div&gt;&lt;div class="highlight"&gt;&lt;pre tabindex="0" class="chroma"&gt;&lt;code class="language-shell" data-lang="shell"&gt;&lt;span class="line"&gt;&lt;span class="cl"&gt;mkdir -p ~/cht-docker
&lt;/span&gt;&lt;/span&gt;&lt;span class="line"&gt;&lt;span class="cl"&gt;curl -s -o ~/cht-docker/docker-compose.yml https://staging.dev.medicmobile.org/_couch/builds_4/medic:medic:master/docker-compose/cht-couchdb.yml
&lt;/span&gt;&lt;/span&gt;&lt;span class="line"&gt;&lt;span class="cl"&gt;cat &amp;gt; ~/cht-docker/couchdb-override.yml &lt;span class="s"&gt;&amp;lt;&amp;lt; EOF
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class="line"&gt;&lt;span class="cl"&gt;&lt;span class="s"&gt;services:
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class="line"&gt;&lt;span class="cl"&gt;&lt;span class="s"&gt; couchdb:
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class="line"&gt;&lt;span class="cl"&gt;&lt;span class="s"&gt; ports:
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class="line"&gt;&lt;span class="cl"&gt;&lt;span class="s"&gt; - &amp;#34;5984:5984&amp;#34;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class="line"&gt;&lt;span class="cl"&gt;&lt;span class="s"&gt; - &amp;#34;5986:5986&amp;#34;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class="line"&gt;&lt;span class="cl"&gt;&lt;span class="s"&gt;EOF&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;&lt;div class="hextra-code-copy-btn-container hx:opacity-0 hx:transition hx:group-hover/code:opacity-100 hx:flex hx:gap-1 hx:absolute hx:m-[11px] hx:right-0 hx:top-0"&gt;
&lt;button
class="hextra-code-copy-btn hx:group/copybtn hx:cursor-pointer hx:transition-all hx:active:opacity-50 hx:bg-primary-700/5 hx:border hx:border-black/5 hx:text-gray-600 hx:hover:text-gray-900 hx:rounded-md hx:p-1.5 hx:dark:bg-primary-300/10 hx:dark:border-white/10 hx:dark:text-gray-400 hx:dark:hover:text-gray-50"
title="Copy code"
&gt;
&lt;div class="hextra-copy-icon hx:group-[.copied]/copybtn:hidden hx:pointer-events-none hx:h-4 hx:w-4"&gt;&lt;/div&gt;
&lt;div class="hextra-success-icon hx:hidden hx:group-[.copied]/copybtn:block hx:pointer-events-none hx:h-4 hx:w-4"&gt;&lt;/div&gt;
&lt;/button&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;p&gt;Now you can start CouchDB. The login for your CHT instance will be &lt;code&gt;medic&lt;/code&gt; and the &lt;code&gt;password&lt;/code&gt; will be password:&lt;/p&gt;
&lt;div class="hextra-code-block hx:relative hx:mt-6 hx:first:mt-0 hx:group/code"&gt;
&lt;div&gt;&lt;div class="highlight"&gt;&lt;pre tabindex="0" class="chroma"&gt;&lt;code class="language-shell" data-lang="shell"&gt;&lt;span class="line"&gt;&lt;span class="cl"&gt;&lt;span class="nb"&gt;cd&lt;/span&gt; ~/cht-docker
&lt;/span&gt;&lt;/span&gt;&lt;span class="line"&gt;&lt;span class="cl"&gt;&lt;span class="nv"&gt;COUCHDB_USER&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;medic &lt;span class="nv"&gt;COUCHDB_PASSWORD&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;password docker compose -f docker-compose.yml -f couchdb-override.yml up -d&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;&lt;div class="hextra-code-copy-btn-container hx:opacity-0 hx:transition hx:group-hover/code:opacity-100 hx:flex hx:gap-1 hx:absolute hx:m-[11px] hx:right-0 hx:top-0"&gt;
&lt;button
class="hextra-code-copy-btn hx:group/copybtn hx:cursor-pointer hx:transition-all hx:active:opacity-50 hx:bg-primary-700/5 hx:border hx:border-black/5 hx:text-gray-600 hx:hover:text-gray-900 hx:rounded-md hx:p-1.5 hx:dark:bg-primary-300/10 hx:dark:border-white/10 hx:dark:text-gray-400 hx:dark:hover:text-gray-50"
title="Copy code"
&gt;
&lt;div class="hextra-copy-icon hx:group-[.copied]/copybtn:hidden hx:pointer-events-none hx:h-4 hx:w-4"&gt;&lt;/div&gt;
&lt;div class="hextra-success-icon hx:hidden hx:group-[.copied]/copybtn:block hx:pointer-events-none hx:h-4 hx:w-4"&gt;&lt;/div&gt;
&lt;/button&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;h3&gt;Developing&lt;span class="hx:absolute hx:-mt-20" id="developing"&gt;&lt;/span&gt;
&lt;a href="#developing" class="subheading-anchor" aria-label="Permalink for this section"&gt;&lt;/a&gt;&lt;/h3&gt;&lt;p&gt;Now you have everything installed and can begin development! You&amp;rsquo;ll need three separate terminals when doing development.&lt;/p&gt;
&lt;p&gt;In the first terminal we&amp;rsquo;ll compile and deploy the web application by running:&lt;/p&gt;
&lt;div class="hextra-code-block hx:relative hx:mt-6 hx:first:mt-0 hx:group/code"&gt;
&lt;div&gt;&lt;div class="highlight"&gt;&lt;pre tabindex="0" class="chroma"&gt;&lt;code class="language-shell" data-lang="shell"&gt;&lt;span class="line"&gt;&lt;span class="cl"&gt;&lt;span class="nb"&gt;cd&lt;/span&gt; ~/cht-core &lt;span class="o"&gt;&amp;amp;&amp;amp;&lt;/span&gt; npm run build-dev-watch&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;&lt;div class="hextra-code-copy-btn-container hx:opacity-0 hx:transition hx:group-hover/code:opacity-100 hx:flex hx:gap-1 hx:absolute hx:m-[11px] hx:right-0 hx:top-0"&gt;
&lt;button
class="hextra-code-copy-btn hx:group/copybtn hx:cursor-pointer hx:transition-all hx:active:opacity-50 hx:bg-primary-700/5 hx:border hx:border-black/5 hx:text-gray-600 hx:hover:text-gray-900 hx:rounded-md hx:p-1.5 hx:dark:bg-primary-300/10 hx:dark:border-white/10 hx:dark:text-gray-400 hx:dark:hover:text-gray-50"
title="Copy code"
&gt;
&lt;div class="hextra-copy-icon hx:group-[.copied]/copybtn:hidden hx:pointer-events-none hx:h-4 hx:w-4"&gt;&lt;/div&gt;
&lt;div class="hextra-success-icon hx:hidden hx:group-[.copied]/copybtn:block hx:pointer-events-none hx:h-4 hx:w-4"&gt;&lt;/div&gt;
&lt;/button&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;p&gt;Be &lt;strong&gt;very&lt;/strong&gt; patient until you see:&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;&amp;ldquo;Waiting&amp;hellip;&amp;rdquo;&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;In the second terminal we&amp;rsquo;ll start the API nodejs service by running:&lt;/p&gt;
&lt;div class="hextra-code-block hx:relative hx:mt-6 hx:first:mt-0 hx:group/code"&gt;
&lt;div&gt;&lt;div class="highlight"&gt;&lt;pre tabindex="0" class="chroma"&gt;&lt;code class="language-shell" data-lang="shell"&gt;&lt;span class="line"&gt;&lt;span class="cl"&gt;&lt;span class="nb"&gt;cd&lt;/span&gt; ~/cht-core &lt;span class="o"&gt;&amp;amp;&amp;amp;&lt;/span&gt; npm run dev-api&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;&lt;div class="hextra-code-copy-btn-container hx:opacity-0 hx:transition hx:group-hover/code:opacity-100 hx:flex hx:gap-1 hx:absolute hx:m-[11px] hx:right-0 hx:top-0"&gt;
&lt;button
class="hextra-code-copy-btn hx:group/copybtn hx:cursor-pointer hx:transition-all hx:active:opacity-50 hx:bg-primary-700/5 hx:border hx:border-black/5 hx:text-gray-600 hx:hover:text-gray-900 hx:rounded-md hx:p-1.5 hx:dark:bg-primary-300/10 hx:dark:border-white/10 hx:dark:text-gray-400 hx:dark:hover:text-gray-50"
title="Copy code"
&gt;
&lt;div class="hextra-copy-icon hx:group-[.copied]/copybtn:hidden hx:pointer-events-none hx:h-4 hx:w-4"&gt;&lt;/div&gt;
&lt;div class="hextra-success-icon hx:hidden hx:group-[.copied]/copybtn:block hx:pointer-events-none hx:h-4 hx:w-4"&gt;&lt;/div&gt;
&lt;/button&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;p&gt;Finally, in a 3rd terminal we&amp;rsquo;ll start the Sentinel nodejs service by running:&lt;/p&gt;
&lt;div class="hextra-code-block hx:relative hx:mt-6 hx:first:mt-0 hx:group/code"&gt;
&lt;div&gt;&lt;div class="highlight"&gt;&lt;pre tabindex="0" class="chroma"&gt;&lt;code class="language-shell" data-lang="shell"&gt;&lt;span class="line"&gt;&lt;span class="cl"&gt;&lt;span class="nb"&gt;cd&lt;/span&gt; ~/cht-core &lt;span class="o"&gt;&amp;amp;&amp;amp;&lt;/span&gt; npm run dev-sentinel&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;&lt;div class="hextra-code-copy-btn-container hx:opacity-0 hx:transition hx:group-hover/code:opacity-100 hx:flex hx:gap-1 hx:absolute hx:m-[11px] hx:right-0 hx:top-0"&gt;
&lt;button
class="hextra-code-copy-btn hx:group/copybtn hx:cursor-pointer hx:transition-all hx:active:opacity-50 hx:bg-primary-700/5 hx:border hx:border-black/5 hx:text-gray-600 hx:hover:text-gray-900 hx:rounded-md hx:p-1.5 hx:dark:bg-primary-300/10 hx:dark:border-white/10 hx:dark:text-gray-400 hx:dark:hover:text-gray-50"
title="Copy code"
&gt;
&lt;div class="hextra-copy-icon hx:group-[.copied]/copybtn:hidden hx:pointer-events-none hx:h-4 hx:w-4"&gt;&lt;/div&gt;
&lt;div class="hextra-success-icon hx:hidden hx:group-[.copied]/copybtn:block hx:pointer-events-none hx:h-4 hx:w-4"&gt;&lt;/div&gt;
&lt;/button&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;p&gt;That&amp;rsquo;s it! Now when you edit code in your IDE, it will automatically reload. You can see the CHT running locally here: &lt;a href="http://localhost:5988/"target="_blank" rel="noopener"&gt;http://localhost:5988/&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;When you&amp;rsquo;re done with development you can &lt;code&gt;ctrl + c&lt;/code&gt; in the three terminals and stop the CouchDB container with &lt;code&gt;docker stop medic-couchdb&lt;/code&gt;. When you want to resume development later, run &lt;code&gt;docker start medic-couchdb&lt;/code&gt; and re-run the three terminal commands.&lt;/p&gt;
&lt;h3&gt;Adding and accessing data&lt;span class="hx:absolute hx:-mt-20" id="adding-and-accessing-data"&gt;&lt;/span&gt;
&lt;a href="#adding-and-accessing-data" class="subheading-anchor" aria-label="Permalink for this section"&gt;&lt;/a&gt;&lt;/h3&gt;&lt;p&gt;When you first start your CHT instance, it has no data in it. If you would like to populate it with some sample data, you can check out the &lt;a href="https://github.com/medic/test-data-generator/"target="_blank" rel="noopener"&gt;Test Data Generator&lt;/a&gt; (TDG) which has a &amp;ldquo;&lt;a href="https://github.com/medic/test-data-generator/?tab=readme-ov-file#quick-start"target="_blank" rel="noopener"&gt;Quick Start&lt;/a&gt;&amp;rdquo; option to easily add data. After you have installed TDG, you can quickly add data with this call:&lt;/p&gt;
&lt;div class="hextra-code-block hx:relative hx:mt-6 hx:first:mt-0 hx:group/code"&gt;
&lt;div&gt;&lt;div class="highlight"&gt;&lt;pre tabindex="0" class="chroma"&gt;&lt;code class="language-shell" data-lang="shell"&gt;&lt;span class="line"&gt;&lt;span class="cl"&gt;&lt;span class="nv"&gt;COUCH_URL&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;http://medic:password@localhost:5984 tdg ./sample-designs/easy-mode.js&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;&lt;div class="hextra-code-copy-btn-container hx:opacity-0 hx:transition hx:group-hover/code:opacity-100 hx:flex hx:gap-1 hx:absolute hx:m-[11px] hx:right-0 hx:top-0"&gt;
&lt;button
class="hextra-code-copy-btn hx:group/copybtn hx:cursor-pointer hx:transition-all hx:active:opacity-50 hx:bg-primary-700/5 hx:border hx:border-black/5 hx:text-gray-600 hx:hover:text-gray-900 hx:rounded-md hx:p-1.5 hx:dark:bg-primary-300/10 hx:dark:border-white/10 hx:dark:text-gray-400 hx:dark:hover:text-gray-50"
title="Copy code"
&gt;
&lt;div class="hextra-copy-icon hx:group-[.copied]/copybtn:hidden hx:pointer-events-none hx:h-4 hx:w-4"&gt;&lt;/div&gt;
&lt;div class="hextra-success-icon hx:hidden hx:group-[.copied]/copybtn:block hx:pointer-events-none hx:h-4 hx:w-4"&gt;&lt;/div&gt;
&lt;/button&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;p&gt;When you log into the CHT web front end in a browser at &lt;a href="http://localhost:5988/"target="_blank" rel="noopener"&gt;http://localhost:5988/&lt;/a&gt;, you should now see newly added contacts and reports.&lt;/p&gt;
&lt;p&gt;If you would like to explore the raw data, be sure to check out &lt;a href="https://couchdb.apache.org/fauxton-visual-guide/"target="_blank" rel="noopener"&gt;Fauxton&lt;/a&gt;. This is a pre-installed NoSQL web client that allows you to browse all raw documents and indexes in CouchDB. It is accessed at &lt;code&gt;/_utils&lt;/code&gt;, so if you&amp;rsquo;ve just followed this guide you can go to &lt;a href="http://localhost:5984/_utils"target="_blank" rel="noopener"&gt;http://localhost:5984/_utils&lt;/a&gt; to use Fauxton. If you are prompted to log in, it is Username &lt;code&gt;medic&lt;/code&gt; and Password &lt;code&gt;password&lt;/code&gt;.&lt;/p&gt;
&lt;h2&gt;Other Path Troubleshooting&lt;span class="hx:absolute hx:-mt-20" id="other-path-troubleshooting"&gt;&lt;/span&gt;
&lt;a href="#other-path-troubleshooting" class="subheading-anchor" aria-label="Permalink for this section"&gt;&lt;/a&gt;&lt;/h2&gt;&lt;p&gt;If you weren&amp;rsquo;t able to follow &lt;a href="#the-happy-path-installation"&gt;the happy path above&lt;/a&gt;, here are some details about the developer install that may help you troubleshoot what went wrong.&lt;/p&gt;
&lt;h3&gt;Prerequisites&lt;span class="hx:absolute hx:-mt-20" id="prerequisites"&gt;&lt;/span&gt;
&lt;a href="#prerequisites" class="subheading-anchor" aria-label="Permalink for this section"&gt;&lt;/a&gt;&lt;/h3&gt;&lt;p&gt;If you had issues with following the above steps, check out these links for how to install the prerequisites on your specific platform:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="https://nodejs.org/"target="_blank" rel="noopener"&gt;Node.js 22.x&lt;/a&gt; &amp;amp; &lt;a href="https://npmjs.com/"target="_blank" rel="noopener"&gt;npm 10.x.x&lt;/a&gt; - Both of which we recommend installing &lt;a href="https://github.com/nvm-sh/nvm#installing-and-updating"target="_blank" rel="noopener"&gt;via &lt;code&gt;nvm&lt;/code&gt;&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/ilyar/xsltproc"target="_blank" rel="noopener"&gt;xsltproc&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://www.python.org/downloads/"target="_blank" rel="noopener"&gt;python 2.7&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://docs.docker.com/engine/install/"target="_blank" rel="noopener"&gt;Docker&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://docs.couchdb.org/en/stable/install/index.html"target="_blank" rel="noopener"&gt;CouchDB&lt;/a&gt; - OS package instead of in Docker - you &lt;strong&gt;MUST&lt;/strong&gt; use CouchDB 2.x for CHT &amp;lt; 4.4! We still strongly recommend using Docker.&lt;/li&gt;
&lt;li&gt;[bzip2])(&lt;a href="https://sourceware.org/bzip2/downloads.html"target="_blank" rel="noopener"&gt;https://sourceware.org/bzip2/downloads.html&lt;/a&gt;) - if you&amp;rsquo;re on Ubuntu call: &lt;code&gt;sudo apt install bzip2&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h3&gt;Windows WSL2&lt;span class="hx:absolute hx:-mt-20" id="windows-wsl2"&gt;&lt;/span&gt;
&lt;a href="#windows-wsl2" class="subheading-anchor" aria-label="Permalink for this section"&gt;&lt;/a&gt;&lt;/h3&gt;&lt;p&gt;While this document covers the happy path to set up your environment, there&amp;rsquo;s &lt;a href="https://forum.communityhealthtoolkit.org/t/help-needed-for-local-setup-of-the-project-using-docker/4900/18"target="_blank" rel="noopener"&gt;a great forum post&lt;/a&gt; which covers challenges developers running Windows with WSL2 may face. Be sure to read up on it if you&amp;rsquo;re having WSL2 issue like &lt;code&gt;bash: docker: command not found&lt;/code&gt; and others.&lt;/p&gt;
&lt;h3&gt;Ubuntu 18.04&lt;span class="hx:absolute hx:-mt-20" id="ubuntu-1804"&gt;&lt;/span&gt;
&lt;a href="#ubuntu-1804" class="subheading-anchor" aria-label="Permalink for this section"&gt;&lt;/a&gt;&lt;/h3&gt;&lt;p&gt;Ubuntu 18.04&amp;rsquo;s default &lt;code&gt;apt&lt;/code&gt; repositories do not know about &lt;code&gt;python2&lt;/code&gt;. This means when you go to install run the first &lt;code&gt;apt install&lt;/code&gt; command above, you see an error:&lt;/p&gt;
&lt;div class="hextra-code-block hx:relative hx:mt-6 hx:first:mt-0 hx:group/code"&gt;
&lt;div&gt;&lt;div class="highlight"&gt;&lt;pre tabindex="0" class="chroma"&gt;&lt;code class="language-shell" data-lang="shell"&gt;&lt;span class="line"&gt;&lt;span class="cl"&gt;E: Unable to locate package python2&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;&lt;div class="hextra-code-copy-btn-container hx:opacity-0 hx:transition hx:group-hover/code:opacity-100 hx:flex hx:gap-1 hx:absolute hx:m-[11px] hx:right-0 hx:top-0"&gt;
&lt;button
class="hextra-code-copy-btn hx:group/copybtn hx:cursor-pointer hx:transition-all hx:active:opacity-50 hx:bg-primary-700/5 hx:border hx:border-black/5 hx:text-gray-600 hx:hover:text-gray-900 hx:rounded-md hx:p-1.5 hx:dark:bg-primary-300/10 hx:dark:border-white/10 hx:dark:text-gray-400 hx:dark:hover:text-gray-50"
title="Copy code"
&gt;
&lt;div class="hextra-copy-icon hx:group-[.copied]/copybtn:hidden hx:pointer-events-none hx:h-4 hx:w-4"&gt;&lt;/div&gt;
&lt;div class="hextra-success-icon hx:hidden hx:group-[.copied]/copybtn:block hx:pointer-events-none hx:h-4 hx:w-4"&gt;&lt;/div&gt;
&lt;/button&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;p&gt;To fix this, change the &lt;code&gt;apt install&lt;/code&gt; call to this:&lt;/p&gt;
&lt;div class="hextra-code-block hx:relative hx:mt-6 hx:first:mt-0 hx:group/code"&gt;
&lt;div&gt;&lt;div class="highlight"&gt;&lt;pre tabindex="0" class="chroma"&gt;&lt;code class="language-shell" data-lang="shell"&gt;&lt;span class="line"&gt;&lt;span class="cl"&gt;sudo apt -y install xsltproc curl uidmap jq python git make g++&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;&lt;div class="hextra-code-copy-btn-container hx:opacity-0 hx:transition hx:group-hover/code:opacity-100 hx:flex hx:gap-1 hx:absolute hx:m-[11px] hx:right-0 hx:top-0"&gt;
&lt;button
class="hextra-code-copy-btn hx:group/copybtn hx:cursor-pointer hx:transition-all hx:active:opacity-50 hx:bg-primary-700/5 hx:border hx:border-black/5 hx:text-gray-600 hx:hover:text-gray-900 hx:rounded-md hx:p-1.5 hx:dark:bg-primary-300/10 hx:dark:border-white/10 hx:dark:text-gray-400 hx:dark:hover:text-gray-50"
title="Copy code"
&gt;
&lt;div class="hextra-copy-icon hx:group-[.copied]/copybtn:hidden hx:pointer-events-none hx:h-4 hx:w-4"&gt;&lt;/div&gt;
&lt;div class="hextra-success-icon hx:hidden hx:group-[.copied]/copybtn:block hx:pointer-events-none hx:h-4 hx:w-4"&gt;&lt;/div&gt;
&lt;/button&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;p&gt;As well, after you install docker, and go to run the rootless script &lt;code&gt;dockerd-rootless-setuptool.sh&lt;/code&gt;, you might see this error:&lt;/p&gt;
&lt;div class="hextra-code-block hx:relative hx:mt-6 hx:first:mt-0 hx:group/code"&gt;
&lt;div&gt;&lt;div class="highlight"&gt;&lt;pre tabindex="0" class="chroma"&gt;&lt;code class="language-shell" data-lang="shell"&gt;&lt;span class="line"&gt;&lt;span class="cl"&gt;&lt;span class="o"&gt;[&lt;/span&gt;ERROR&lt;span class="o"&gt;]&lt;/span&gt; Failed to start docker.service. Run &lt;span class="sb"&gt;`&lt;/span&gt;journalctl -n &lt;span class="m"&gt;20&lt;/span&gt; --no-pager --user --unit docker.service&lt;span class="sb"&gt;`&lt;/span&gt; to show the error log.&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;&lt;div class="hextra-code-copy-btn-container hx:opacity-0 hx:transition hx:group-hover/code:opacity-100 hx:flex hx:gap-1 hx:absolute hx:m-[11px] hx:right-0 hx:top-0"&gt;
&lt;button
class="hextra-code-copy-btn hx:group/copybtn hx:cursor-pointer hx:transition-all hx:active:opacity-50 hx:bg-primary-700/5 hx:border hx:border-black/5 hx:text-gray-600 hx:hover:text-gray-900 hx:rounded-md hx:p-1.5 hx:dark:bg-primary-300/10 hx:dark:border-white/10 hx:dark:text-gray-400 hx:dark:hover:text-gray-50"
title="Copy code"
&gt;
&lt;div class="hextra-copy-icon hx:group-[.copied]/copybtn:hidden hx:pointer-events-none hx:h-4 hx:w-4"&gt;&lt;/div&gt;
&lt;div class="hextra-success-icon hx:hidden hx:group-[.copied]/copybtn:block hx:pointer-events-none hx:h-4 hx:w-4"&gt;&lt;/div&gt;
&lt;/button&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;p&gt;The workaround, unfortunately, is to just start your CouchDB Docker container with sudo: &lt;code&gt;sudo docker run...&lt;/code&gt;.&lt;/p&gt;
&lt;h3&gt;Required environment variables&lt;span class="hx:absolute hx:-mt-20" id="required-environment-variables"&gt;&lt;/span&gt;
&lt;a href="#required-environment-variables" class="subheading-anchor" aria-label="Permalink for this section"&gt;&lt;/a&gt;&lt;/h3&gt;&lt;p&gt;Medic needs the following environment variables to be declared:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;COUCH_URL&lt;/code&gt;: the full authenticated url to the &lt;code&gt;medic&lt;/code&gt; DB. Locally this would be &lt;code&gt;http://medic:password@localhost:5984/medic&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;COUCH_NODE_NAME&lt;/code&gt;: the name of your CouchDB&amp;rsquo;s node. The Docker image default is &lt;code&gt;nonode@nohost&lt;/code&gt;. Other installations may use &lt;code&gt;couchdb@127.0.0.1&lt;/code&gt;. You can find out by querying &lt;a href="https://docs.couchdb.org/en/stable/api/server/common.html#membership"target="_blank" rel="noopener"&gt;CouchDB&amp;rsquo;s membership API&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;(optional) &lt;code&gt;COUCHDB_USER&lt;/code&gt;: the name of your CouchDB&amp;rsquo;s user. The Docker image default is &lt;code&gt;medic&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;(optional) &lt;code&gt;COUCHDB_PASSWORD&lt;/code&gt;: the credentials of your CouchDB user. The Docker image default is &lt;code&gt;password&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;(optional) &lt;code&gt;API_PORT&lt;/code&gt;: the port API will run on. If not defined, the port defaults to &lt;code&gt;5988&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;(optional) &lt;code&gt;CHROME_BIN&lt;/code&gt;: only required if tests complain that they can&amp;rsquo;t find Chrome or if you want to run a specific version of the Chrome webdriver.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;How to permanently define environment variables depends on your OS and shell (e.g. for bash you can put them &lt;code&gt;~/.bashrc&lt;/code&gt;). You can temporarily define them with &lt;code&gt;export&lt;/code&gt;:&lt;/p&gt;
&lt;div class="hextra-code-block hx:relative hx:mt-6 hx:first:mt-0 hx:group/code"&gt;
&lt;div&gt;&lt;div class="highlight"&gt;&lt;pre tabindex="0" class="chroma"&gt;&lt;code class="language-shell" data-lang="shell"&gt;&lt;span class="line"&gt;&lt;span class="cl"&gt;&lt;span class="nb"&gt;export&lt;/span&gt; &lt;span class="nv"&gt;COUCH_NODE_NAME&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;nonode@nohost
&lt;/span&gt;&lt;/span&gt;&lt;span class="line"&gt;&lt;span class="cl"&gt;&lt;span class="nb"&gt;export&lt;/span&gt; &lt;span class="nv"&gt;COUCH_URL&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;http://medic:password@localhost:5984/medic&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;&lt;div class="hextra-code-copy-btn-container hx:opacity-0 hx:transition hx:group-hover/code:opacity-100 hx:flex hx:gap-1 hx:absolute hx:m-[11px] hx:right-0 hx:top-0"&gt;
&lt;button
class="hextra-code-copy-btn hx:group/copybtn hx:cursor-pointer hx:transition-all hx:active:opacity-50 hx:bg-primary-700/5 hx:border hx:border-black/5 hx:text-gray-600 hx:hover:text-gray-900 hx:rounded-md hx:p-1.5 hx:dark:bg-primary-300/10 hx:dark:border-white/10 hx:dark:text-gray-400 hx:dark:hover:text-gray-50"
title="Copy code"
&gt;
&lt;div class="hextra-copy-icon hx:group-[.copied]/copybtn:hidden hx:pointer-events-none hx:h-4 hx:w-4"&gt;&lt;/div&gt;
&lt;div class="hextra-success-icon hx:hidden hx:group-[.copied]/copybtn:block hx:pointer-events-none hx:h-4 hx:w-4"&gt;&lt;/div&gt;
&lt;/button&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;h2&gt;Tests&lt;span class="hx:absolute hx:-mt-20" id="tests"&gt;&lt;/span&gt;
&lt;a href="#tests" class="subheading-anchor" aria-label="Permalink for this section"&gt;&lt;/a&gt;&lt;/h2&gt;&lt;p&gt;Refer to &lt;a href="https://github.com/medic/cht-core/blob/master/TESTING.md"target="_blank" rel="noopener"&gt;the testing doc&lt;/a&gt; in the GitHub repo.&lt;/p&gt;
&lt;h2&gt;nginx-local-ip&lt;span class="hx:absolute hx:-mt-20" id="nginx-local-ip"&gt;&lt;/span&gt;
&lt;a href="#nginx-local-ip" class="subheading-anchor" aria-label="Permalink for this section"&gt;&lt;/a&gt;&lt;/h2&gt;&lt;p&gt;&lt;a href="https://github.com/medic/nginx-local-ip"target="_blank" rel="noopener"&gt;&lt;code&gt;nginx-local-ip&lt;/code&gt;&lt;/a&gt; is a local proxy that keeps all traffic local, and runs without latency or throttling. If sharing your local CHT instance is not required, it is the recommended method to add a valid SSL certificate (rather than &lt;code&gt;ngrok&lt;/code&gt; or similar).&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;Clone the repo: &lt;code&gt;git clone https://github.com/medic/nginx-local-ip.git&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;cd&lt;/code&gt; into the new directory: &lt;code&gt;cd nginx-local-ip&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;Assuming your IP is &lt;code&gt;192.168.0.3&lt;/code&gt;, start &lt;code&gt;nginx-local-ip&lt;/code&gt; to connect to:
&lt;ul&gt;
&lt;li&gt;The CHT API running via &lt;code&gt;npm run&lt;/code&gt; or &lt;code&gt;horti&lt;/code&gt;, execute &lt;code&gt;APP_URL=http://192.168.0.3:5988 docker compose up&lt;/code&gt; and then access it at &lt;code&gt;https://192-168-0-3.local-ip.medicmobile.org/&lt;/code&gt;.&lt;/li&gt;
&lt;li&gt;The CHT API running via &lt;code&gt;docker&lt;/code&gt;, the ports are remapped, so execute &lt;code&gt;HTTP=8080 HTTPS=8443 APP_URL=https://192.168.0.3 docker compose up&lt;/code&gt; and then access it at &lt;code&gt;https://192-168-0-3.local-ip.medicmobile.org:8443/&lt;/code&gt;.&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;The HTTP/HTTPS ports (&lt;code&gt;80&lt;/code&gt;/&lt;code&gt;443&lt;/code&gt;) need to accept traffic from the IP address of your host machine and your local webapp port (e.g. &lt;code&gt;5988&lt;/code&gt;) needs to accept traffic from the IP address of the &lt;code&gt;nginx-local-ip&lt;/code&gt; container (on the Docker network). If you are using the UFW firewall (in a Linux environment) you can allow traffic on these ports with the following commands:&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;(Since local IP addresses can change over time, ranges are used in these rules so that the firewall configuration does not have to be updated each time a new address is assigned.)&lt;/p&gt;
&lt;div class="hextra-code-block hx:relative hx:mt-6 hx:first:mt-0 hx:group/code"&gt;
&lt;div&gt;&lt;div class="highlight"&gt;&lt;pre tabindex="0" class="chroma"&gt;&lt;code class="language-shell" data-lang="shell"&gt;&lt;span class="line"&gt;&lt;span class="cl"&gt;sudo ufw allow proto tcp from 192.168.0.0/16 to any port 80,443
&lt;/span&gt;&lt;/span&gt;&lt;span class="line"&gt;&lt;span class="cl"&gt;sudo ufw allow proto tcp from 172.16.0.0/16 to any port &lt;span class="m"&gt;5988&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;&lt;div class="hextra-code-copy-btn-container hx:opacity-0 hx:transition hx:group-hover/code:opacity-100 hx:flex hx:gap-1 hx:absolute hx:m-[11px] hx:right-0 hx:top-0"&gt;
&lt;button
class="hextra-code-copy-btn hx:group/copybtn hx:cursor-pointer hx:transition-all hx:active:opacity-50 hx:bg-primary-700/5 hx:border hx:border-black/5 hx:text-gray-600 hx:hover:text-gray-900 hx:rounded-md hx:p-1.5 hx:dark:bg-primary-300/10 hx:dark:border-white/10 hx:dark:text-gray-400 hx:dark:hover:text-gray-50"
title="Copy code"
&gt;
&lt;div class="hextra-copy-icon hx:group-[.copied]/copybtn:hidden hx:pointer-events-none hx:h-4 hx:w-4"&gt;&lt;/div&gt;
&lt;div class="hextra-success-icon hx:hidden hx:group-[.copied]/copybtn:block hx:pointer-events-none hx:h-4 hx:w-4"&gt;&lt;/div&gt;
&lt;/button&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;h2&gt;Remote Proxies&lt;span class="hx:absolute hx:-mt-20" id="remote-proxies"&gt;&lt;/span&gt;
&lt;a href="#remote-proxies" class="subheading-anchor" aria-label="Permalink for this section"&gt;&lt;/a&gt;&lt;/h2&gt;&lt;p&gt;&lt;code&gt;ngrok&lt;/code&gt; and &lt;code&gt;pagekite&lt;/code&gt; are remote proxies that route local traffic between your client and the CHT via a remote SSL terminator. While easy and handy, they introduce latency and are sometimes throttled. Always use &lt;code&gt;nginx-local-ip&lt;/code&gt; when you need a TLS certificate and only use these when you need to share your dev instance.&lt;/p&gt;
&lt;h3&gt;ngrok&lt;span class="hx:absolute hx:-mt-20" id="ngrok"&gt;&lt;/span&gt;
&lt;a href="#ngrok" class="subheading-anchor" aria-label="Permalink for this section"&gt;&lt;/a&gt;&lt;/h3&gt;&lt;ol&gt;
&lt;li&gt;Create an &lt;a href="https://ngrok.com/"target="_blank" rel="noopener"&gt;ngrok account&lt;/a&gt;, download and install the binary, then link your computer to your ngrok account.&lt;/li&gt;
&lt;li&gt;Start &lt;code&gt;ngrok&lt;/code&gt; to connect to:
&lt;ul&gt;
&lt;li&gt;The CHT API running via &lt;code&gt;npm run&lt;/code&gt; or &lt;code&gt;horti&lt;/code&gt;, execute &lt;code&gt;./ngrok http 5988&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;The CHT API running via &lt;code&gt;docker&lt;/code&gt;, execute &lt;code&gt;./ngrok http 443&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;Access the app using the https address shown (e.g. &lt;code&gt;https://YOUR-NGROK-NAME.ngrok.io&lt;/code&gt;, replacing &lt;code&gt;YOUR-NGROK-NAME&lt;/code&gt; with what you signed up with).&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;&lt;strong&gt;Note:&lt;/strong&gt; The service worker cache preload sometimes fails due to connection throttling (thereby causing an &lt;code&gt;ngrok&lt;/code&gt; failure at startup).&lt;/p&gt;
&lt;h3&gt;pagekite&lt;span class="hx:absolute hx:-mt-20" id="pagekite"&gt;&lt;/span&gt;
&lt;a href="#pagekite" class="subheading-anchor" aria-label="Permalink for this section"&gt;&lt;/a&gt;&lt;/h3&gt;&lt;ol&gt;
&lt;li&gt;Create a &lt;a href="https://pagekite.net/signup/"target="_blank" rel="noopener"&gt;pagekite account&lt;/a&gt;, download and install the python script.&lt;/li&gt;
&lt;li&gt;Start pagekite (be sure to replace &lt;code&gt;YOUR-PAGEKIT-NAME&lt;/code&gt; with the URL you signed up for) to connect to:&lt;/li&gt;
&lt;/ol&gt;
&lt;ul&gt;
&lt;li&gt;The CHT API running via &lt;code&gt;npm run&lt;/code&gt; or &lt;code&gt;horti&lt;/code&gt;, execute &lt;code&gt;python pagekite.py 5988 YOUR-PAGEKIT-NAME.pagekite.me&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;The CHT API running via &lt;code&gt;docker&lt;/code&gt;, execute &lt;code&gt;python pagekite.py 443 YOUR-PAGEKIT-NAME.pagekite.me&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;ol&gt;
&lt;li&gt;Access the app using the https address shown (e.g. &lt;code&gt;https://YOUR-PAGEKIT-NAME.pagekite.me&lt;/code&gt;).&lt;/li&gt;
&lt;/ol&gt;</description></item><item><title>Build commands</title><link>https://docs.communityhealthtoolkit.org/community/contributing/code/core/build-commands/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://docs.communityhealthtoolkit.org/community/contributing/code/core/build-commands/</guid><description>
&lt;h2&gt;CHT Core build commands&lt;span class="hx:absolute hx:-mt-20" id="cht-core-build-commands"&gt;&lt;/span&gt;
&lt;a href="#cht-core-build-commands" class="subheading-anchor" aria-label="Permalink for this section"&gt;&lt;/a&gt;&lt;/h2&gt;&lt;p&gt;These commands are defined in the &lt;code&gt;package.json&lt;/code&gt; and can be executed with &lt;code&gt;npm run &amp;lt;command&amp;gt;&lt;/code&gt; from the cht-core repository directory.&lt;/p&gt;
&lt;h3&gt;Development build commands&lt;span class="hx:absolute hx:-mt-20" id="development-build-commands"&gt;&lt;/span&gt;
&lt;a href="#development-build-commands" class="subheading-anchor" aria-label="Permalink for this section"&gt;&lt;/a&gt;&lt;/h3&gt;&lt;p&gt;For developers (humans) to execute to build &lt;code&gt;cht-core&lt;/code&gt;.&lt;/p&gt;
&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;Command&lt;/th&gt;
&lt;th&gt;Description&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;build-ddocs&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;Compiles all the DDocs and outputs them into &lt;code&gt;/api/build/ddocs&lt;/code&gt; ready for deployment.&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;build-dev&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;Updates dependencies and builds all the applications.&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;build-dev-watch&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;Same as &lt;code&gt;build-dev&lt;/code&gt;, but keeps watching for any code changes and automatically deploys on change.&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;build-documentation&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;Executes jsdoc on all the applications.&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;build-webapp-dev&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;Compiles the &lt;code&gt;/webapp&lt;/code&gt; application.&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;build-cht-form&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;Compiles the &lt;code&gt;cht-form&lt;/code&gt; web component.&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;copy-api-resources&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;Copies the static api files into the &lt;code&gt;api&lt;/code&gt; build directory ready for deployment.&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;dev-api&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;Sets up and runs the &lt;code&gt;api&lt;/code&gt; server, and automatically deploys source changes.&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;dev-sentinel&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;Sets up and runs the &lt;code&gt;sentinel&lt;/code&gt; server, and automatically deploys source changes.&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;local-images&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;Builds the docker images and updates the docker compose files.&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;update-service-worker&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;Updates the service worker file for deployment.&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;h3&gt;Development test commands&lt;span class="hx:absolute hx:-mt-20" id="development-test-commands"&gt;&lt;/span&gt;
&lt;a href="#development-test-commands" class="subheading-anchor" aria-label="Permalink for this section"&gt;&lt;/a&gt;&lt;/h3&gt;&lt;p&gt;For developers to execute to test &lt;code&gt;cht-core&lt;/code&gt;.&lt;/p&gt;
&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;Command&lt;/th&gt;
&lt;th&gt;Description&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;integration-all-local&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;Compiles the app and executes the integration test suite except for the sentinel tests.&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;integration-api&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;Compiles the app and executes the api integration test suite.&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;integration-sentinel-local&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;Compiles the app and executes the sentinel integration test suite.&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;lint&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;Performs static analysis checks on the codebase.&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;test&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;Same as running &lt;code&gt;lint&lt;/code&gt;, &lt;code&gt;unit&lt;/code&gt;, and &lt;code&gt;integration-api&lt;/code&gt;.&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;unit&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;Executes unit test suites for all applications.&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;unit-admin&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;Executes the unit test suite on &lt;code&gt;admin&lt;/code&gt;.&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;unit-api&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;Executes the unit test suite on &lt;code&gt;api&lt;/code&gt;.&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;unit-sentinel&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;Executes the unit test suite on &lt;code&gt;sentinel&lt;/code&gt;.&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;unit-shared-lib&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;Executes the unit test suite on all &lt;code&gt;shared-lib&lt;/code&gt; modules.&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;unit-webapp&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;Executes the unit test suite on &lt;code&gt;webapp&lt;/code&gt;.&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;unit-webapp-continuous&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;Executes the unit test suite on &lt;code&gt;webapp&lt;/code&gt;, and re-runs on code change.&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;wdio-default-mobile-local&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;Compiles the app and executes the mobile e2e test suite.&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;wdio-local&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;Compiles the app and executes the default e2e test suite.&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;wdio-standard-local&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;Compiles the app and executes the standard e2e test suite.&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;wdio-cht-form&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;Executes the default e2e test suite on code change.&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;h3&gt;CI commands&lt;span class="hx:absolute hx:-mt-20" id="ci-commands"&gt;&lt;/span&gt;
&lt;a href="#ci-commands" class="subheading-anchor" aria-label="Permalink for this section"&gt;&lt;/a&gt;&lt;/h3&gt;&lt;p&gt;For Continuous Integration (robots) to run to build and test &lt;code&gt;cht-core&lt;/code&gt;.&lt;/p&gt;
&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;Command&lt;/th&gt;
&lt;th&gt;Description&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;build&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;Compiles, minifies, bundles the code, and builds the DDocs for publishing.&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;ci-compile&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;Builds, does static analysis, and runs unit tests for all applications.&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;ci-e2e-integration&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;Executes the integration e2e test suite.&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;ci-webdriver-default&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;Executes the default e2e test suite.&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;ci-webdriver-default-mobile&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;Executes the mobile e2e test suite.&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;ci-webdriver-standard&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;Executes the standard e2e test suite.&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;publish-for-testing&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;Builds docker images and publishes to the staging server for use in e2e test builds.&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;test-config-default&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;Executes the default config test suite.&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;test-config-standard&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;Executes the standard config test suite.&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;upgrade-wdio&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;Executes the upgrade e2e test suite.&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;</description></item><item><title>Update Dependencies</title><link>https://docs.communityhealthtoolkit.org/community/contributing/code/core/update-dependencies/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://docs.communityhealthtoolkit.org/community/contributing/code/core/update-dependencies/</guid><description>
&lt;p&gt;Every minor release we update dependencies to get the latest fixes and improvements. We do this early in the release cycle so that we have some more time to find regressions and issues. This is done on all folders with a &lt;code&gt;package-lock.json&lt;/code&gt;, including:&lt;/p&gt;
&lt;div class="hextra-filetree hx:mt-6 hx:select-none hx:text-sm hx:text-gray-800 hx:dark:text-gray-300 not-prose"&gt;
&lt;div class="hx:inline-block hx:rounded-lg hx:px-4 hx:py-2 hx:border hx:border-gray-200 hx:dark:border-neutral-800"&gt;
&lt;li class="hx:group hx:flex hx:list-none hx:flex-col"&gt;
&lt;button class="hextra-filetree-folder hx:inline-flex hx:cursor-pointer hx:items-center hx:py-1 hx:hover:opacity-60"&gt;
&lt;span data-state="open" class="hx:data-[state=open]:hidden"&gt;&lt;svg width=1em xmlns="http://www.w3.org/2000/svg" fill="none" viewBox="0 0 24 24" stroke-width="2" stroke="currentColor" aria-hidden="true"&gt;&lt;path stroke-linecap="round" stroke-linejoin="round" d="M3 7v10a2 2 0 002 2h14a2 2 0 002-2V9a2 2 0 00-2-2h-6l-2-2H5a2 2 0 00-2 2z"/&gt;&lt;/svg&gt;&lt;/span&gt;
&lt;span data-state="open" class="hx:data-[state=closed]:hidden"&gt;&lt;svg width=1em xmlns="http://www.w3.org/2000/svg" fill="none" viewBox="0 0 24 24" stroke-width="2" stroke="currentColor" aria-hidden="true"&gt;&lt;path stroke-linecap="round" stroke-linejoin="round" d="M5 19a2 2 0 01-2-2V7a2 2 0 012-2h4l2 2h4a2 2 0 012 2v1M5 19h14a2 2 0 002-2v-5a2 2 0 00-2-2H9a2 2 0 00-2 2v5a2 2 0 01-2 2z"/&gt;&lt;/svg&gt;&lt;/span&gt;
&lt;span class="hx:ltr:ml-1 hx:rtl:mr-1"&gt;cht-core&lt;/span&gt;
&lt;/button&gt;
&lt;ul data-state="open" class="hx:ltr:pl-5 hx:rtl:pr-5 hx:data-[state=closed]:hidden"&gt;
&lt;li class="hx:flex hx:list-none"&gt;
&lt;span class="hx:inline-flex hx:cursor-default hx:items-center hx:py-1"&gt;&lt;svg width=1em xmlns="http://www.w3.org/2000/svg" fill="none" viewBox="0 0 24 24" stroke-width="2" stroke="currentColor" aria-hidden="true"&gt;&lt;path stroke-linecap="round" stroke-linejoin="round" d="M9 12h6m-6 4h6m2 5H7a2 2 0 01-2-2V5a2 2 0 012-2h5.586a1 1 0 01.707.293l5.414 5.414a1 1 0 01.293.707V19a2 2 0 01-2 2z"/&gt;&lt;/svg&gt;&lt;span class="hx:ltr:ml-1 hx:rtl:mr-1"&gt;/(root)&lt;/span&gt;
&lt;/span&gt;
&lt;/li&gt;
&lt;li class="hx:group hx:flex hx:list-none hx:flex-col"&gt;
&lt;button class="hextra-filetree-folder hx:inline-flex hx:cursor-pointer hx:items-center hx:py-1 hx:hover:opacity-60"&gt;
&lt;span data-state="open" class="hx:data-[state=open]:hidden"&gt;&lt;svg width=1em xmlns="http://www.w3.org/2000/svg" fill="none" viewBox="0 0 24 24" stroke-width="2" stroke="currentColor" aria-hidden="true"&gt;&lt;path stroke-linecap="round" stroke-linejoin="round" d="M3 7v10a2 2 0 002 2h14a2 2 0 002-2V9a2 2 0 00-2-2h-6l-2-2H5a2 2 0 00-2 2z"/&gt;&lt;/svg&gt;&lt;/span&gt;
&lt;span data-state="open" class="hx:data-[state=closed]:hidden"&gt;&lt;svg width=1em xmlns="http://www.w3.org/2000/svg" fill="none" viewBox="0 0 24 24" stroke-width="2" stroke="currentColor" aria-hidden="true"&gt;&lt;path stroke-linecap="round" stroke-linejoin="round" d="M5 19a2 2 0 01-2-2V7a2 2 0 012-2h4l2 2h4a2 2 0 012 2v1M5 19h14a2 2 0 002-2v-5a2 2 0 00-2-2H9a2 2 0 00-2 2v5a2 2 0 01-2 2z"/&gt;&lt;/svg&gt;&lt;/span&gt;
&lt;span class="hx:ltr:ml-1 hx:rtl:mr-1"&gt;admin&lt;/span&gt;
&lt;/button&gt;
&lt;ul data-state="open" class="hx:ltr:pl-5 hx:rtl:pr-5 hx:data-[state=closed]:hidden"&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li class="hx:group hx:flex hx:list-none hx:flex-col"&gt;
&lt;button class="hextra-filetree-folder hx:inline-flex hx:cursor-pointer hx:items-center hx:py-1 hx:hover:opacity-60"&gt;
&lt;span data-state="open" class="hx:data-[state=open]:hidden"&gt;&lt;svg width=1em xmlns="http://www.w3.org/2000/svg" fill="none" viewBox="0 0 24 24" stroke-width="2" stroke="currentColor" aria-hidden="true"&gt;&lt;path stroke-linecap="round" stroke-linejoin="round" d="M3 7v10a2 2 0 002 2h14a2 2 0 002-2V9a2 2 0 00-2-2h-6l-2-2H5a2 2 0 00-2 2z"/&gt;&lt;/svg&gt;&lt;/span&gt;
&lt;span data-state="open" class="hx:data-[state=closed]:hidden"&gt;&lt;svg width=1em xmlns="http://www.w3.org/2000/svg" fill="none" viewBox="0 0 24 24" stroke-width="2" stroke="currentColor" aria-hidden="true"&gt;&lt;path stroke-linecap="round" stroke-linejoin="round" d="M5 19a2 2 0 01-2-2V7a2 2 0 012-2h4l2 2h4a2 2 0 012 2v1M5 19h14a2 2 0 002-2v-5a2 2 0 00-2-2H9a2 2 0 00-2 2v5a2 2 0 01-2 2z"/&gt;&lt;/svg&gt;&lt;/span&gt;
&lt;span class="hx:ltr:ml-1 hx:rtl:mr-1"&gt;webapp&lt;/span&gt;
&lt;/button&gt;
&lt;ul data-state="open" class="hx:ltr:pl-5 hx:rtl:pr-5 hx:data-[state=closed]:hidden"&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;h2&gt;Steps&lt;span class="hx:absolute hx:-mt-20" id="steps"&gt;&lt;/span&gt;
&lt;a href="#steps" class="subheading-anchor" aria-label="Permalink for this section"&gt;&lt;/a&gt;&lt;/h2&gt;&lt;ol&gt;
&lt;li&gt;Checkout and pull the latest default branch - get the latest code&lt;/li&gt;
&lt;li&gt;Make a branch: &lt;code&gt;git checkout -b &amp;quot;&amp;lt;issue&amp;gt;-update-dependencies&amp;quot;&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;Take a look at the current &lt;a href="https://github.com/medic/cht-core/issues?q=is%3Aopen&amp;#43;is%3Aissue&amp;#43;label%3ADependencies"target="_blank" rel="noopener"&gt;list of dependencies related issues&lt;/a&gt;, where you can find the latest conversations and information.&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;Then for each folder go through these steps.&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;&lt;code&gt;npm ci&lt;/code&gt; - update your local node_modules to match expected&lt;/li&gt;
&lt;li&gt;&lt;code&gt;npm outdated&lt;/code&gt; - report on any dependencies which aren&amp;rsquo;t at the latest&lt;/li&gt;
&lt;li&gt;&lt;code&gt;npm install --save[-dev] package@version&lt;/code&gt; - install the latest version (be careful and read the release notes if the new version is a major change from the current)&lt;/li&gt;
&lt;li&gt;&lt;code&gt;npm dedupe&lt;/code&gt; - remove duplicated dependencies&lt;/li&gt;
&lt;li&gt;&lt;code&gt;npm audit fix&lt;/code&gt; - automatically fix any nested dependencies with vulnerabilities&lt;/li&gt;
&lt;li&gt;&lt;code&gt;npm audit&lt;/code&gt; - get a report on any remaining vulnerabilities and manually scan it to see if there&amp;rsquo;s anything else you can do&lt;/li&gt;
&lt;/ol&gt;
&lt;h2&gt;Problems&lt;span class="hx:absolute hx:-mt-20" id="problems"&gt;&lt;/span&gt;
&lt;a href="#problems" class="subheading-anchor" aria-label="Permalink for this section"&gt;&lt;/a&gt;&lt;/h2&gt;&lt;ul&gt;
&lt;li&gt;See &lt;a href="https://github.com/medic/cht-core/issues/9770"target="_blank" rel="noopener"&gt;issue #9770&lt;/a&gt; for a list of the known dependencies that cannot be upgraded further because their latest versions only support ES Modules.&lt;/li&gt;
&lt;li&gt;Don&amp;rsquo;t update &lt;code&gt;bootstrap&lt;/code&gt; to 4+ as it has many breaking changes. One day we will either raise an issue to upgrade it or migrate off it, but that is outside the scope of this change.&lt;/li&gt;
&lt;li&gt;Don&amp;rsquo;t update &lt;code&gt;bootstrap-daterangepicker&lt;/code&gt;.&lt;/li&gt;
&lt;li&gt;Don&amp;rsquo;t update the &lt;code&gt;webapp&lt;/code&gt; version of &lt;code&gt;jquery&lt;/code&gt; to 3.6.0+ as the &lt;code&gt;select2&lt;/code&gt; search input loses focus on click event, this is a &lt;a href="https://github.com/select2/select2/issues/5993"target="_blank" rel="noopener"&gt;known issue&lt;/a&gt; in their repository.
&lt;ul&gt;
&lt;li&gt;Note that the &lt;code&gt;webapp&lt;/code&gt; webpack config is aliasing the &lt;code&gt;jquery&lt;/code&gt; package to make sure we only bundle one version of jquery. Currently &lt;code&gt;enketo-core&lt;/code&gt; is targeting &lt;code&gt;3.6.3&lt;/code&gt;, but we cannot take that version because of this select2 issue.&lt;/li&gt;
&lt;li&gt;This select2 issue is actually resolved by upgrading to jquery &lt;code&gt;3.7+&lt;/code&gt;, but we cannot move to that version because it is not compatible with our current version of enketo-core (&lt;code&gt;7.2.5&lt;/code&gt;).&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;If you have trouble upgrading any other dependency and you think it&amp;rsquo;ll be challenging to fix it then raise a new issue with &lt;code&gt;Dependencies&lt;/code&gt; tag, to upgrade just that dependency. Don&amp;rsquo;t hold up all the other upgrades you&amp;rsquo;ve made.&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;Troubleshooting&lt;span class="hx:absolute hx:-mt-20" id="troubleshooting"&gt;&lt;/span&gt;
&lt;a href="#troubleshooting" class="subheading-anchor" aria-label="Permalink for this section"&gt;&lt;/a&gt;&lt;/h2&gt;&lt;details class="hx:last-of-type:mb-0 hx:rounded-lg hx:bg-neutral-50 hx:dark:bg-neutral-800 hx:p-2 hx:mt-4 hx:group" &gt;
&lt;summary class="hx:flex hx:items-center hx:cursor-pointer hx:select-none hx:list-none hx:p-1 hx:rounded-sm hx:transition-colors hx:hover:bg-gray-100 hx:dark:hover:bg-neutral-800 hx:before:mr-1 hx:before:inline-block hx:before:transition-transform hx:before:content-[''] hx:dark:before:invert hx:rtl:before:rotate-180 hx:group-open:before:rotate-90"&gt;
&lt;strong class="hx:text-lg"&gt;Angular exception&lt;/strong&gt;
&lt;/summary&gt;
&lt;div class="hx:p-2 hx:overflow-hidden"&gt;
&lt;p&gt;When upgrading Webapp&amp;rsquo;s Angular, you might get the following exception:&lt;/p&gt;
&lt;div class="hextra-code-block hx:relative hx:mt-6 hx:first:mt-0 hx:group/code"&gt;
&lt;div&gt;&lt;pre&gt;&lt;code&gt;Running &amp;#34;exec:build-webapp&amp;#34; (exec) task
________________________________________
An unhandled exception occurred: Class extends value undefined is not a constructor or null
see &amp;#34;/private/var/folders/tx/lskdwi/T/ng-23kdi/angular-errors.log&amp;#34; for further details.
&amp;gt;&amp;gt; Exited with code: 127&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;div class="hextra-code-copy-btn-container hx:opacity-0 hx:transition hx:group-hover/code:opacity-100 hx:flex hx:gap-1 hx:absolute hx:m-[11px] hx:right-0 hx:top-0"&gt;
&lt;button
class="hextra-code-copy-btn hx:group/copybtn hx:cursor-pointer hx:transition-all hx:active:opacity-50 hx:bg-primary-700/5 hx:border hx:border-black/5 hx:text-gray-600 hx:hover:text-gray-900 hx:rounded-md hx:p-1.5 hx:dark:bg-primary-300/10 hx:dark:border-white/10 hx:dark:text-gray-400 hx:dark:hover:text-gray-50"
title="Copy code"
&gt;
&lt;div class="hextra-copy-icon hx:group-[.copied]/copybtn:hidden hx:pointer-events-none hx:h-4 hx:w-4"&gt;&lt;/div&gt;
&lt;div class="hextra-success-icon hx:hidden hx:group-[.copied]/copybtn:block hx:pointer-events-none hx:h-4 hx:w-4"&gt;&lt;/div&gt;
&lt;/button&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;p&gt;This error is thrown by the Webpack&amp;rsquo;s subresource integrity. It&amp;rsquo;s likely that &lt;code&gt;@angular/compiler&lt;/code&gt;, &lt;code&gt;@angular-devkit/build-angular&lt;/code&gt; or &lt;code&gt;@angular-builders/custom-webpack&lt;/code&gt; aren&amp;rsquo;t resolved properly in the &lt;code&gt;package-lock.json&lt;/code&gt;.&lt;/p&gt;
&lt;p&gt;To fix it, uninstall these 3 dependencies and then install them again in this order:&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;&lt;code&gt;@angular/compiler&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;@angular-devkit/build-angular&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;@angular-builders/custom-webpack&lt;/code&gt;&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;If the error is still happening, try reinstalling &lt;code&gt;@angular/cli&lt;/code&gt;.&lt;/p&gt;
&lt;/div&gt;
&lt;/details&gt;
&lt;details class="hx:last-of-type:mb-0 hx:rounded-lg hx:bg-neutral-50 hx:dark:bg-neutral-800 hx:p-2 hx:mt-4 hx:group" &gt;
&lt;summary class="hx:flex hx:items-center hx:cursor-pointer hx:select-none hx:list-none hx:p-1 hx:rounded-sm hx:transition-colors hx:hover:bg-gray-100 hx:dark:hover:bg-neutral-800 hx:before:mr-1 hx:before:inline-block hx:before:transition-transform hx:before:content-[''] hx:dark:before:invert hx:rtl:before:rotate-180 hx:group-open:before:rotate-90"&gt;
&lt;strong class="hx:text-lg"&gt;npm errno -17&lt;/strong&gt;
&lt;/summary&gt;
&lt;div class="hx:p-2 hx:overflow-hidden"&gt;
If &lt;code&gt;npm ci&lt;/code&gt; errors with &amp;ldquo;errno -17&amp;rdquo; in shared-libs you may need to manually remove the nested dependencies from the package-lock.json. This needs move investigation to work out why this is happening.
&lt;/div&gt;
&lt;/details&gt;
&lt;details class="hx:last-of-type:mb-0 hx:rounded-lg hx:bg-neutral-50 hx:dark:bg-neutral-800 hx:p-2 hx:mt-4 hx:group" &gt;
&lt;summary class="hx:flex hx:items-center hx:cursor-pointer hx:select-none hx:list-none hx:p-1 hx:rounded-sm hx:transition-colors hx:hover:bg-gray-100 hx:dark:hover:bg-neutral-800 hx:before:mr-1 hx:before:inline-block hx:before:transition-transform hx:before:content-[''] hx:dark:before:invert hx:rtl:before:rotate-180 hx:group-open:before:rotate-90"&gt;
&lt;strong class="hx:text-lg"&gt;select2 is not a function&lt;/strong&gt;
&lt;/summary&gt;
&lt;div class="hx:p-2 hx:overflow-hidden"&gt;
&lt;p&gt;If you get &lt;code&gt;TypeError: &amp;quot;$(...).select2 is not a function&amp;quot;&lt;/code&gt; then either:&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;You bumped select2. For some reason this breaks it.&lt;/li&gt;
&lt;li&gt;You have multiple jquery libraries and select2 is getting attached to one but not the other. Make sure the jquery versions in enketo-core and webapp match and you&amp;rsquo;ve &lt;code&gt;run dedupe&lt;/code&gt; to remove the enketo-core copy.&lt;/li&gt;
&lt;/ol&gt;
&lt;/div&gt;
&lt;/details&gt;</description></item><item><title>Automated Tests</title><link>https://docs.communityhealthtoolkit.org/community/contributing/code/core/automated-tests/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://docs.communityhealthtoolkit.org/community/contributing/code/core/automated-tests/</guid><description>
&lt;h2&gt;The goal of automated testing&lt;span class="hx:absolute hx:-mt-20" id="the-goal-of-automated-testing"&gt;&lt;/span&gt;
&lt;a href="#the-goal-of-automated-testing" class="subheading-anchor" aria-label="Permalink for this section"&gt;&lt;/a&gt;&lt;/h2&gt;&lt;p&gt;Contributors from all backgrounds are welcome to make changes in the codebase. The CHT testing framework is designed to help you contribute with confidence, regardless of your experience level. This guide will help you understand the CHT testing approach and how you can contribute effectively.&lt;/p&gt;
&lt;p&gt;A key part of this confidence comes from knowing that new changes have not impacted other functionality in the system and everything continues to work as expected.
Automation of testing should speed up development in two significant areas:&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;While making changes, new automated tests can be run regularly to ensure (without lots of manual effort) that the changes continue to work as expected&lt;/li&gt;
&lt;li&gt;Avoid large amounts of time spent manually performing regression testing of the whole application to ensure existing functionality keeps working&lt;/li&gt;
&lt;/ol&gt;
&lt;h2&gt;Test types and expectations&lt;span class="hx:absolute hx:-mt-20" id="test-types-and-expectations"&gt;&lt;/span&gt;
&lt;a href="#test-types-and-expectations" class="subheading-anchor" aria-label="Permalink for this section"&gt;&lt;/a&gt;&lt;/h2&gt;&lt;p&gt;CHT Core contains three types of tests, each serving a specific purpose (ordered by levels low to high):&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;Unit tests&lt;/li&gt;
&lt;li&gt;Integration tests
&lt;ul&gt;
&lt;li&gt;Backend integration tests&lt;/li&gt;
&lt;li&gt;Frontend integration tests&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;End-to-end tests&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;&lt;strong&gt;Note:&lt;/strong&gt; All the commands to execute the different tests can be found in &lt;a href="https://github.com/medic/cht-core/blob/master/package.json"target="_blank" rel="noopener"&gt;package.json&lt;/a&gt; file.&lt;/p&gt;
&lt;h2&gt;Unit Tests&lt;span class="hx:absolute hx:-mt-20" id="unit-tests"&gt;&lt;/span&gt;
&lt;a href="#unit-tests" class="subheading-anchor" aria-label="Permalink for this section"&gt;&lt;/a&gt;&lt;/h2&gt;&lt;h3&gt;Description&lt;span class="hx:absolute hx:-mt-20" id="description"&gt;&lt;/span&gt;
&lt;a href="#description" class="subheading-anchor" aria-label="Permalink for this section"&gt;&lt;/a&gt;&lt;/h3&gt;&lt;p&gt;Small tests of specific behavior. Each unit test is only intended to validate an isolated piece (unit) of functionality separated from the rest of the system. Any dependencies are often mocked.
These are typically the easiest to write and are a great starting point for new contributors.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Write unit tests for:&lt;/strong&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Testing individual functions or methods&lt;/li&gt;
&lt;li&gt;Verifying component behavior&lt;/li&gt;
&lt;li&gt;Checking edge cases&lt;/li&gt;
&lt;/ul&gt;
&lt;h3&gt;Expectations&lt;span class="hx:absolute hx:-mt-20" id="expectations"&gt;&lt;/span&gt;
&lt;a href="#expectations" class="subheading-anchor" aria-label="Permalink for this section"&gt;&lt;/a&gt;&lt;/h3&gt;&lt;p&gt;High coverage of functionality. If measured in branch coverage percentage, aim for 100%. This is the place to guarantee confidence in the system. If a higher-level test spots and error and there&amp;rsquo;s no lower-level test failing, you should evaluate if a lower-level test should be written.&lt;/p&gt;
&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;Execution Speed&lt;/th&gt;
&lt;th&gt;Complexity&lt;/th&gt;
&lt;th&gt;Fragility&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;Extremely fast&lt;/td&gt;
&lt;td&gt;Extremely low&lt;/td&gt;
&lt;td&gt;Extremely stable&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;h3&gt;Implementation&lt;span class="hx:absolute hx:-mt-20" id="implementation"&gt;&lt;/span&gt;
&lt;a href="#implementation" class="subheading-anchor" aria-label="Permalink for this section"&gt;&lt;/a&gt;&lt;/h3&gt;&lt;p&gt;In cht-core unit tests are located in the &lt;code&gt;tests&lt;/code&gt; directories of each module/service (For example, in &lt;a href="https://github.com/medic/cht-core/tree/master/webapp/tests"target="_blank" rel="noopener"&gt;&lt;code&gt;webapp/tests&lt;/code&gt;&lt;/a&gt; you can find unit test for the webapp).&lt;/p&gt;
&lt;h3&gt;Running Unit Tests Locally&lt;span class="hx:absolute hx:-mt-20" id="running-unit-tests-locally"&gt;&lt;/span&gt;
&lt;a href="#running-unit-tests-locally" class="subheading-anchor" aria-label="Permalink for this section"&gt;&lt;/a&gt;&lt;/h3&gt;&lt;p&gt;Run the full unit test suite locally with:&lt;/p&gt;
&lt;div class="hextra-code-block hx:relative hx:mt-6 hx:first:mt-0 hx:group/code"&gt;
&lt;div&gt;&lt;div class="highlight"&gt;&lt;pre tabindex="0" class="chroma"&gt;&lt;code class="language-bash" data-lang="bash"&gt;&lt;span class="line"&gt;&lt;span class="cl"&gt;npm run unit&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;&lt;div class="hextra-code-copy-btn-container hx:opacity-0 hx:transition hx:group-hover/code:opacity-100 hx:flex hx:gap-1 hx:absolute hx:m-[11px] hx:right-0 hx:top-0"&gt;
&lt;button
class="hextra-code-copy-btn hx:group/copybtn hx:cursor-pointer hx:transition-all hx:active:opacity-50 hx:bg-primary-700/5 hx:border hx:border-black/5 hx:text-gray-600 hx:hover:text-gray-900 hx:rounded-md hx:p-1.5 hx:dark:bg-primary-300/10 hx:dark:border-white/10 hx:dark:text-gray-400 hx:dark:hover:text-gray-50"
title="Copy code"
&gt;
&lt;div class="hextra-copy-icon hx:group-[.copied]/copybtn:hidden hx:pointer-events-none hx:h-4 hx:w-4"&gt;&lt;/div&gt;
&lt;div class="hextra-success-icon hx:hidden hx:group-[.copied]/copybtn:block hx:pointer-events-none hx:h-4 hx:w-4"&gt;&lt;/div&gt;
&lt;/button&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;h4&gt;Running one module isolated&lt;span class="hx:absolute hx:-mt-20" id="running-one-module-isolated"&gt;&lt;/span&gt;
&lt;a href="#running-one-module-isolated" class="subheading-anchor" aria-label="Permalink for this section"&gt;&lt;/a&gt;&lt;/h4&gt;&lt;p&gt;To run unit tests for a specific module/service instead of the entire suite:&lt;/p&gt;
&lt;div class="hextra-code-block hx:relative hx:mt-6 hx:first:mt-0 hx:group/code"&gt;
&lt;div&gt;&lt;div class="highlight"&gt;&lt;pre tabindex="0" class="chroma"&gt;&lt;code class="language-bash" data-lang="bash"&gt;&lt;span class="line"&gt;&lt;span class="cl"&gt;&lt;span class="c1"&gt;# Example: Run unit tests for admin module&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class="line"&gt;&lt;span class="cl"&gt;npm run unit-admin&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;&lt;div class="hextra-code-copy-btn-container hx:opacity-0 hx:transition hx:group-hover/code:opacity-100 hx:flex hx:gap-1 hx:absolute hx:m-[11px] hx:right-0 hx:top-0"&gt;
&lt;button
class="hextra-code-copy-btn hx:group/copybtn hx:cursor-pointer hx:transition-all hx:active:opacity-50 hx:bg-primary-700/5 hx:border hx:border-black/5 hx:text-gray-600 hx:hover:text-gray-900 hx:rounded-md hx:p-1.5 hx:dark:bg-primary-300/10 hx:dark:border-white/10 hx:dark:text-gray-400 hx:dark:hover:text-gray-50"
title="Copy code"
&gt;
&lt;div class="hextra-copy-icon hx:group-[.copied]/copybtn:hidden hx:pointer-events-none hx:h-4 hx:w-4"&gt;&lt;/div&gt;
&lt;div class="hextra-success-icon hx:hidden hx:group-[.copied]/copybtn:block hx:pointer-events-none hx:h-4 hx:w-4"&gt;&lt;/div&gt;
&lt;/button&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;p&gt;To discover all available unit test commands, type &lt;code&gt;npm run unit&lt;/code&gt; and press Tab to see autocomplete options.
This will show all available unit test commands:&lt;/p&gt;
&lt;div class="hextra-code-block hx:relative hx:mt-6 hx:first:mt-0 hx:group/code"&gt;
&lt;div&gt;&lt;div class="highlight"&gt;&lt;pre tabindex="0" class="chroma"&gt;&lt;code class="language-bash" data-lang="bash"&gt;&lt;span class="line"&gt;&lt;span class="cl"&gt;unit unit-couchdb unit-sentinel
&lt;/span&gt;&lt;/span&gt;&lt;span class="line"&gt;&lt;span class="cl"&gt;unit-admin unit-haproxy unit-shared-lib
&lt;/span&gt;&lt;/span&gt;&lt;span class="line"&gt;&lt;span class="cl"&gt;unit-api unit-haproxy-healthcheck unit-webapp
&lt;/span&gt;&lt;/span&gt;&lt;span class="line"&gt;&lt;span class="cl"&gt;unit-cht-deploy unit-nginx unit-webapp-continuous&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;&lt;div class="hextra-code-copy-btn-container hx:opacity-0 hx:transition hx:group-hover/code:opacity-100 hx:flex hx:gap-1 hx:absolute hx:m-[11px] hx:right-0 hx:top-0"&gt;
&lt;button
class="hextra-code-copy-btn hx:group/copybtn hx:cursor-pointer hx:transition-all hx:active:opacity-50 hx:bg-primary-700/5 hx:border hx:border-black/5 hx:text-gray-600 hx:hover:text-gray-900 hx:rounded-md hx:p-1.5 hx:dark:bg-primary-300/10 hx:dark:border-white/10 hx:dark:text-gray-400 hx:dark:hover:text-gray-50"
title="Copy code"
&gt;
&lt;div class="hextra-copy-icon hx:group-[.copied]/copybtn:hidden hx:pointer-events-none hx:h-4 hx:w-4"&gt;&lt;/div&gt;
&lt;div class="hextra-success-icon hx:hidden hx:group-[.copied]/copybtn:block hx:pointer-events-none hx:h-4 hx:w-4"&gt;&lt;/div&gt;
&lt;/button&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;h4&gt;Running individual tests within a spec&lt;span class="hx:absolute hx:-mt-20" id="running-individual-tests-within-a-spec"&gt;&lt;/span&gt;
&lt;a href="#running-individual-tests-within-a-spec" class="subheading-anchor" aria-label="Permalink for this section"&gt;&lt;/a&gt;&lt;/h4&gt;&lt;p&gt;To run only specific test suites or individual tests within a module, you can use &lt;code&gt;describe.only&lt;/code&gt; or &lt;code&gt;it.only&lt;/code&gt; in your test files. See the &lt;a href="#isolating-specific-tests"&gt;Isolating specific tests&lt;/a&gt; section for examples.&lt;/p&gt;
&lt;h2&gt;Integration Tests&lt;span class="hx:absolute hx:-mt-20" id="integration-tests"&gt;&lt;/span&gt;
&lt;a href="#integration-tests" class="subheading-anchor" aria-label="Permalink for this section"&gt;&lt;/a&gt;&lt;/h2&gt;&lt;h3&gt;Description&lt;span class="hx:absolute hx:-mt-20" id="description-1"&gt;&lt;/span&gt;
&lt;a href="#description-1" class="subheading-anchor" aria-label="Permalink for this section"&gt;&lt;/a&gt;&lt;/h3&gt;&lt;p&gt;Tests to exercise how multiple components interact with each other. With a dynamic language like JavaScript these are especially important to verify expectations of interface points. These may mock some parts, but often use the &amp;ldquo;real&amp;rdquo; components since the point is to exercise those components together. As a result, these tests likely involve more setup, potentially involving data scenarios.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Write integration tests for:&lt;/strong&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Testing interactions between components&lt;/li&gt;
&lt;li&gt;Verifying API endpoints&lt;/li&gt;
&lt;li&gt;Checking database operations&lt;/li&gt;
&lt;/ul&gt;
&lt;h3&gt;Expectations&lt;span class="hx:absolute hx:-mt-20" id="expectations-1"&gt;&lt;/span&gt;
&lt;a href="#expectations-1" class="subheading-anchor" aria-label="Permalink for this section"&gt;&lt;/a&gt;&lt;/h3&gt;&lt;p&gt;Dramatically fewer than unit tests. The goal is not to verify all branches; it is to gain confidence in interface points.&lt;/p&gt;
&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;Execution Speed&lt;/th&gt;
&lt;th&gt;Complexity&lt;/th&gt;
&lt;th&gt;Fragility&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;Fast execution, but slower startup when working with a DB&lt;/td&gt;
&lt;td&gt;Mid-to-high. Things can get complex fast when combining parts!&lt;/td&gt;
&lt;td&gt;Mostly stable. Fragility risks tend to come from DB setup.&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;h3&gt;Implementation&lt;span class="hx:absolute hx:-mt-20" id="implementation-1"&gt;&lt;/span&gt;
&lt;a href="#implementation-1" class="subheading-anchor" aria-label="Permalink for this section"&gt;&lt;/a&gt;&lt;/h3&gt;&lt;p&gt;Backend integration testing means testing through the entire stack of the application connected to other applications within the system. In the image below, this involves testing each application (box) and its interaction with other applications within the system.
The tests are isolated from the webapp with necessary shortcuts to make testing more straightforward and faster. No part of the system is mocked.&lt;/p&gt;
&lt;h3&gt;Backend integration tests&lt;span class="hx:absolute hx:-mt-20" id="backend-integration-tests"&gt;&lt;/span&gt;
&lt;a href="#backend-integration-tests" class="subheading-anchor" aria-label="Permalink for this section"&gt;&lt;/a&gt;&lt;/h3&gt;&lt;p&gt;Backend integration tests are located in &lt;a href="https://github.com/medic/cht-core/tree/master/tests/integration"target="_blank" rel="noopener"&gt;&lt;code&gt;tests/integration&lt;/code&gt;&lt;/a&gt;.&lt;/p&gt;
&lt;pre class="mermaid hx:mt-6"&gt;
flowchart LR
subgraph cht-e2e [Docker: cht-e2e]
api
couchdb-1.local[(couchdb-1)]
couchdb-2.local[(couchdb-2)]
couchdb-3.local[(couchdb-3)]
haproxy
nginx
sentinel
nginx --&amp;gt; api
sentinel --&amp;gt; api
api --&amp;gt; haproxy
haproxy --&amp;gt; couchdb-1.local &amp;amp; couchdb-2.local &amp;amp; couchdb-3.local
end
integration-tests{Integration Tests}
integration-tests &amp;lt;--Pouch/HTTPS--&amp;gt; cht-e2e
&lt;/pre&gt;&lt;h3&gt;Running Backend Integration Tests Locally&lt;span class="hx:absolute hx:-mt-20" id="running-backend-integration-tests-locally"&gt;&lt;/span&gt;
&lt;a href="#running-backend-integration-tests-locally" class="subheading-anchor" aria-label="Permalink for this section"&gt;&lt;/a&gt;&lt;/h3&gt;&lt;p&gt;Run the full integration test suites locally with:&lt;/p&gt;
&lt;div class="hextra-code-block hx:relative hx:mt-6 hx:first:mt-0 hx:group/code"&gt;
&lt;div&gt;&lt;div class="highlight"&gt;&lt;pre tabindex="0" class="chroma"&gt;&lt;code class="language-bash" data-lang="bash"&gt;&lt;span class="line"&gt;&lt;span class="cl"&gt;&lt;span class="c1"&gt;# Example: Run all backend integration tests&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class="line"&gt;&lt;span class="cl"&gt;npm run integration-all-local&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;&lt;div class="hextra-code-copy-btn-container hx:opacity-0 hx:transition hx:group-hover/code:opacity-100 hx:flex hx:gap-1 hx:absolute hx:m-[11px] hx:right-0 hx:top-0"&gt;
&lt;button
class="hextra-code-copy-btn hx:group/copybtn hx:cursor-pointer hx:transition-all hx:active:opacity-50 hx:bg-primary-700/5 hx:border hx:border-black/5 hx:text-gray-600 hx:hover:text-gray-900 hx:rounded-md hx:p-1.5 hx:dark:bg-primary-300/10 hx:dark:border-white/10 hx:dark:text-gray-400 hx:dark:hover:text-gray-50"
title="Copy code"
&gt;
&lt;div class="hextra-copy-icon hx:group-[.copied]/copybtn:hidden hx:pointer-events-none hx:h-4 hx:w-4"&gt;&lt;/div&gt;
&lt;div class="hextra-success-icon hx:hidden hx:group-[.copied]/copybtn:block hx:pointer-events-none hx:h-4 hx:w-4"&gt;&lt;/div&gt;
&lt;/button&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;p&gt;To discover all available integration test commands, type &lt;code&gt;npm run integration-&lt;/code&gt; and press Tab to see autocomplete options.
This will show all available integration test commands:&lt;/p&gt;
&lt;div class="hextra-code-block hx:relative hx:mt-6 hx:first:mt-0 hx:group/code"&gt;
&lt;div&gt;&lt;div class="highlight"&gt;&lt;pre tabindex="0" class="chroma"&gt;&lt;code class="language-bash" data-lang="bash"&gt;&lt;span class="line"&gt;&lt;span class="cl"&gt;integration-all-k3d-local integration-cht-form
&lt;/span&gt;&lt;/span&gt;&lt;span class="line"&gt;&lt;span class="cl"&gt;integration-all-local integration-sentinel-k3d-local
&lt;/span&gt;&lt;/span&gt;&lt;span class="line"&gt;&lt;span class="cl"&gt;integration-api integration-sentinel-local&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;&lt;div class="hextra-code-copy-btn-container hx:opacity-0 hx:transition hx:group-hover/code:opacity-100 hx:flex hx:gap-1 hx:absolute hx:m-[11px] hx:right-0 hx:top-0"&gt;
&lt;button
class="hextra-code-copy-btn hx:group/copybtn hx:cursor-pointer hx:transition-all hx:active:opacity-50 hx:bg-primary-700/5 hx:border hx:border-black/5 hx:text-gray-600 hx:hover:text-gray-900 hx:rounded-md hx:p-1.5 hx:dark:bg-primary-300/10 hx:dark:border-white/10 hx:dark:text-gray-400 hx:dark:hover:text-gray-50"
title="Copy code"
&gt;
&lt;div class="hextra-copy-icon hx:group-[.copied]/copybtn:hidden hx:pointer-events-none hx:h-4 hx:w-4"&gt;&lt;/div&gt;
&lt;div class="hextra-success-icon hx:hidden hx:group-[.copied]/copybtn:block hx:pointer-events-none hx:h-4 hx:w-4"&gt;&lt;/div&gt;
&lt;/button&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;h4&gt;Running one spec isolated&lt;span class="hx:absolute hx:-mt-20" id="running-one-spec-isolated"&gt;&lt;/span&gt;
&lt;a href="#running-one-spec-isolated" class="subheading-anchor" aria-label="Permalink for this section"&gt;&lt;/a&gt;&lt;/h4&gt;&lt;p&gt;To run a specific integration test spec instead of the entire test suite:&lt;/p&gt;
&lt;div class="hextra-code-block hx:relative hx:mt-6 hx:first:mt-0 hx:group/code"&gt;
&lt;div&gt;&lt;div class="highlight"&gt;&lt;pre tabindex="0" class="chroma"&gt;&lt;code class="language-bash" data-lang="bash"&gt;&lt;span class="line"&gt;&lt;span class="cl"&gt;&lt;span class="c1"&gt;# Run only contact-edit tests &lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class="line"&gt;&lt;span class="cl"&gt;npx mocha --config tests/integration/.mocharc-base.js tests/integration/contacts/contact-edit.spec.js&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;&lt;div class="hextra-code-copy-btn-container hx:opacity-0 hx:transition hx:group-hover/code:opacity-100 hx:flex hx:gap-1 hx:absolute hx:m-[11px] hx:right-0 hx:top-0"&gt;
&lt;button
class="hextra-code-copy-btn hx:group/copybtn hx:cursor-pointer hx:transition-all hx:active:opacity-50 hx:bg-primary-700/5 hx:border hx:border-black/5 hx:text-gray-600 hx:hover:text-gray-900 hx:rounded-md hx:p-1.5 hx:dark:bg-primary-300/10 hx:dark:border-white/10 hx:dark:text-gray-400 hx:dark:hover:text-gray-50"
title="Copy code"
&gt;
&lt;div class="hextra-copy-icon hx:group-[.copied]/copybtn:hidden hx:pointer-events-none hx:h-4 hx:w-4"&gt;&lt;/div&gt;
&lt;div class="hextra-success-icon hx:hidden hx:group-[.copied]/copybtn:block hx:pointer-events-none hx:h-4 hx:w-4"&gt;&lt;/div&gt;
&lt;/button&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;h4&gt;Running individual tests within a spec&lt;span class="hx:absolute hx:-mt-20" id="running-individual-tests-within-a-spec-1"&gt;&lt;/span&gt;
&lt;a href="#running-individual-tests-within-a-spec-1" class="subheading-anchor" aria-label="Permalink for this section"&gt;&lt;/a&gt;&lt;/h4&gt;&lt;p&gt;To run only specific integration tests within a spec file, you can use &lt;code&gt;describe.only&lt;/code&gt; or &lt;code&gt;it.only&lt;/code&gt; in your test files. See the &lt;a href="#isolating-specific-tests"&gt;Isolating specific tests&lt;/a&gt; section for examples.&lt;/p&gt;
&lt;h3&gt;Frontend integration tests&lt;span class="hx:absolute hx:-mt-20" id="frontend-integration-tests"&gt;&lt;/span&gt;
&lt;a href="#frontend-integration-tests" class="subheading-anchor" aria-label="Permalink for this section"&gt;&lt;/a&gt;&lt;/h3&gt;&lt;p&gt;Frontend integration tests (or web component tests) are designed to validate form behavior (including page layout) without needing to run the whole CHT. The web component isolates the enketo form functionality from the CHT webapp. This only covers forms and not other parts of the webapp. It does not trace behavior though the whole system and the database is never involved. Instead, the whole idea of the web component is to abstract the UI functionality away from the underlying backend complexity.&lt;/p&gt;
&lt;p&gt;Frontend integration tests are located in &lt;a href="https://github.com/medic/cht-core/tree/master/tests/integration/cht-form"target="_blank" rel="noopener"&gt;&lt;code&gt;tests/integration/cht-form&lt;/code&gt;&lt;/a&gt;.&lt;/p&gt;
&lt;h3&gt;Running Frontend Integration Tests Locally&lt;span class="hx:absolute hx:-mt-20" id="running-frontend-integration-tests-locally"&gt;&lt;/span&gt;
&lt;a href="#running-frontend-integration-tests-locally" class="subheading-anchor" aria-label="Permalink for this section"&gt;&lt;/a&gt;&lt;/h3&gt;&lt;p&gt;To run them locally you need to &lt;em&gt;&lt;strong&gt;build&lt;/strong&gt;&lt;/em&gt; a cht-form Web Component with:&lt;/p&gt;
&lt;div class="hextra-code-block hx:relative hx:mt-6 hx:first:mt-0 hx:group/code"&gt;
&lt;div&gt;&lt;div class="highlight"&gt;&lt;pre tabindex="0" class="chroma"&gt;&lt;code class="language-bash" data-lang="bash"&gt;&lt;span class="line"&gt;&lt;span class="cl"&gt;npm run build-cht-form&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;&lt;div class="hextra-code-copy-btn-container hx:opacity-0 hx:transition hx:group-hover/code:opacity-100 hx:flex hx:gap-1 hx:absolute hx:m-[11px] hx:right-0 hx:top-0"&gt;
&lt;button
class="hextra-code-copy-btn hx:group/copybtn hx:cursor-pointer hx:transition-all hx:active:opacity-50 hx:bg-primary-700/5 hx:border hx:border-black/5 hx:text-gray-600 hx:hover:text-gray-900 hx:rounded-md hx:p-1.5 hx:dark:bg-primary-300/10 hx:dark:border-white/10 hx:dark:text-gray-400 hx:dark:hover:text-gray-50"
title="Copy code"
&gt;
&lt;div class="hextra-copy-icon hx:group-[.copied]/copybtn:hidden hx:pointer-events-none hx:h-4 hx:w-4"&gt;&lt;/div&gt;
&lt;div class="hextra-success-icon hx:hidden hx:group-[.copied]/copybtn:block hx:pointer-events-none hx:h-4 hx:w-4"&gt;&lt;/div&gt;
&lt;/button&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;p&gt;And after building you can run the tests with:&lt;/p&gt;
&lt;div class="hextra-code-block hx:relative hx:mt-6 hx:first:mt-0 hx:group/code"&gt;
&lt;div&gt;&lt;div class="highlight"&gt;&lt;pre tabindex="0" class="chroma"&gt;&lt;code class="language-bash" data-lang="bash"&gt;&lt;span class="line"&gt;&lt;span class="cl"&gt;npm run integration-cht-form&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;&lt;div class="hextra-code-copy-btn-container hx:opacity-0 hx:transition hx:group-hover/code:opacity-100 hx:flex hx:gap-1 hx:absolute hx:m-[11px] hx:right-0 hx:top-0"&gt;
&lt;button
class="hextra-code-copy-btn hx:group/copybtn hx:cursor-pointer hx:transition-all hx:active:opacity-50 hx:bg-primary-700/5 hx:border hx:border-black/5 hx:text-gray-600 hx:hover:text-gray-900 hx:rounded-md hx:p-1.5 hx:dark:bg-primary-300/10 hx:dark:border-white/10 hx:dark:text-gray-400 hx:dark:hover:text-gray-50"
title="Copy code"
&gt;
&lt;div class="hextra-copy-icon hx:group-[.copied]/copybtn:hidden hx:pointer-events-none hx:h-4 hx:w-4"&gt;&lt;/div&gt;
&lt;div class="hextra-success-icon hx:hidden hx:group-[.copied]/copybtn:block hx:pointer-events-none hx:h-4 hx:w-4"&gt;&lt;/div&gt;
&lt;/button&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;h2&gt;E2E Tests&lt;span class="hx:absolute hx:-mt-20" id="e2e-tests"&gt;&lt;/span&gt;
&lt;a href="#e2e-tests" class="subheading-anchor" aria-label="Permalink for this section"&gt;&lt;/a&gt;&lt;/h2&gt;&lt;h3&gt;Description&lt;span class="hx:absolute hx:-mt-20" id="description-2"&gt;&lt;/span&gt;
&lt;a href="#description-2" class="subheading-anchor" aria-label="Permalink for this section"&gt;&lt;/a&gt;&lt;/h3&gt;&lt;p&gt;Tests that simulate real user experiences to validate the complete system. You can think of e2e test as the user main workflows when using the system.
E2E tests verify the entire application works as expected from a user&amp;rsquo;s perspective.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Write E2E tests for:&lt;/strong&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Testing complete user workflows&lt;/li&gt;
&lt;li&gt;Verifying critical paths&lt;/li&gt;
&lt;li&gt;Checking cross-browser compatibility&lt;/li&gt;
&lt;/ul&gt;
&lt;h3&gt;Expectations&lt;span class="hx:absolute hx:-mt-20" id="expectations-2"&gt;&lt;/span&gt;
&lt;a href="#expectations-2" class="subheading-anchor" aria-label="Permalink for this section"&gt;&lt;/a&gt;&lt;/h3&gt;&lt;p&gt;E2e tests give the most confidence to decide if the feature is working, but must only check the parts of code that the lower-level tests can&amp;rsquo;t cover. The testing levels should be pushed as far down as possible.&lt;/p&gt;
&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;Execution Speed&lt;/th&gt;
&lt;th&gt;Complexity&lt;/th&gt;
&lt;th&gt;Fragility&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;Slow. So make sure to check existent tests and maybe just add extra assertions or minor changes instead of directly adding a specific e2e test for your new change. Also, make sure your code is performant.&lt;/td&gt;
&lt;td&gt;Low for the test itself (click tab, enter text into form, click submit, check text on screen. Extremely high for the setup.&lt;/td&gt;
&lt;td&gt;Painful fragility with high risk of race conditions and high maintenance burden. Ensure your code is clean, organized, and utilizes effective selectors.&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;h3&gt;Implementation&lt;span class="hx:absolute hx:-mt-20" id="implementation-2"&gt;&lt;/span&gt;
&lt;a href="#implementation-2" class="subheading-anchor" aria-label="Permalink for this section"&gt;&lt;/a&gt;&lt;/h3&gt;&lt;p&gt;Our end-to-end tests are designed to test the entire system as a whole. They interact with the webapp as a user would, using &lt;a href="https://webdriver.io/"target="_blank" rel="noopener"&gt;WebdriverIO&lt;/a&gt; to control a headless browser session. They are not isolated from the rest of the system, and they do not use mocking.&lt;/p&gt;
&lt;p&gt;End-to-end tests are located in &lt;a href="https://github.com/medic/cht-core/tree/master/tests/e2e"target="_blank" rel="noopener"&gt;&lt;code&gt;tests/e2e&lt;/code&gt;&lt;/a&gt;.&lt;/p&gt;
&lt;h3&gt;Running E2E Tests Locally&lt;span class="hx:absolute hx:-mt-20" id="running-e2e-tests-locally"&gt;&lt;/span&gt;
&lt;a href="#running-e2e-tests-locally" class="subheading-anchor" aria-label="Permalink for this section"&gt;&lt;/a&gt;&lt;/h3&gt;&lt;p&gt;Run the full E2E test suites locally with:&lt;/p&gt;
&lt;div class="hextra-code-block hx:relative hx:mt-6 hx:first:mt-0 hx:group/code"&gt;
&lt;div&gt;&lt;div class="highlight"&gt;&lt;pre tabindex="0" class="chroma"&gt;&lt;code class="language-bash" data-lang="bash"&gt;&lt;span class="line"&gt;&lt;span class="cl"&gt;&lt;span class="c1"&gt;# Run default E2E tests&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class="line"&gt;&lt;span class="cl"&gt;npm run wdio-local
&lt;/span&gt;&lt;/span&gt;&lt;span class="line"&gt;&lt;span class="cl"&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class="line"&gt;&lt;span class="cl"&gt;&lt;span class="c1"&gt;# Run mobile E2E tests&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class="line"&gt;&lt;span class="cl"&gt;npm run wdio-default-mobile-local
&lt;/span&gt;&lt;/span&gt;&lt;span class="line"&gt;&lt;span class="cl"&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class="line"&gt;&lt;span class="cl"&gt;&lt;span class="c1"&gt;# Run E2E tests without rebuilding Docker images (faster for repeated runs)&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class="line"&gt;&lt;span class="cl"&gt;npm run ci-webdriver-default&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;&lt;div class="hextra-code-copy-btn-container hx:opacity-0 hx:transition hx:group-hover/code:opacity-100 hx:flex hx:gap-1 hx:absolute hx:m-[11px] hx:right-0 hx:top-0"&gt;
&lt;button
class="hextra-code-copy-btn hx:group/copybtn hx:cursor-pointer hx:transition-all hx:active:opacity-50 hx:bg-primary-700/5 hx:border hx:border-black/5 hx:text-gray-600 hx:hover:text-gray-900 hx:rounded-md hx:p-1.5 hx:dark:bg-primary-300/10 hx:dark:border-white/10 hx:dark:text-gray-400 hx:dark:hover:text-gray-50"
title="Copy code"
&gt;
&lt;div class="hextra-copy-icon hx:group-[.copied]/copybtn:hidden hx:pointer-events-none hx:h-4 hx:w-4"&gt;&lt;/div&gt;
&lt;div class="hextra-success-icon hx:hidden hx:group-[.copied]/copybtn:block hx:pointer-events-none hx:h-4 hx:w-4"&gt;&lt;/div&gt;
&lt;/button&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;h4&gt;Running one spec isolated&lt;span class="hx:absolute hx:-mt-20" id="running-one-spec-isolated-1"&gt;&lt;/span&gt;
&lt;a href="#running-one-spec-isolated-1" class="subheading-anchor" aria-label="Permalink for this section"&gt;&lt;/a&gt;&lt;/h4&gt;&lt;p&gt;To run a specific E2E test spec instead of the entire test suite:&lt;/p&gt;
&lt;div class="hextra-code-block hx:relative hx:mt-6 hx:first:mt-0 hx:group/code"&gt;
&lt;div&gt;&lt;div class="highlight"&gt;&lt;pre tabindex="0" class="chroma"&gt;&lt;code class="language-bash" data-lang="bash"&gt;&lt;span class="line"&gt;&lt;span class="cl"&gt;&lt;span class="c1"&gt;# Example: Run only the tests inside the pregnancy spec&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class="line"&gt;&lt;span class="cl"&gt;npm run wdio-local -- --spec&lt;span class="o"&gt;=&lt;/span&gt;pregnancy.wdio-spec.js&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;&lt;div class="hextra-code-copy-btn-container hx:opacity-0 hx:transition hx:group-hover/code:opacity-100 hx:flex hx:gap-1 hx:absolute hx:m-[11px] hx:right-0 hx:top-0"&gt;
&lt;button
class="hextra-code-copy-btn hx:group/copybtn hx:cursor-pointer hx:transition-all hx:active:opacity-50 hx:bg-primary-700/5 hx:border hx:border-black/5 hx:text-gray-600 hx:hover:text-gray-900 hx:rounded-md hx:p-1.5 hx:dark:bg-primary-300/10 hx:dark:border-white/10 hx:dark:text-gray-400 hx:dark:hover:text-gray-50"
title="Copy code"
&gt;
&lt;div class="hextra-copy-icon hx:group-[.copied]/copybtn:hidden hx:pointer-events-none hx:h-4 hx:w-4"&gt;&lt;/div&gt;
&lt;div class="hextra-success-icon hx:hidden hx:group-[.copied]/copybtn:block hx:pointer-events-none hx:h-4 hx:w-4"&gt;&lt;/div&gt;
&lt;/button&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;p&gt;To discover all available E2E test specs, browse the &lt;a href="https://github.com/medic/cht-core/tree/master/tests/e2e"target="_blank" rel="noopener"&gt;&lt;code&gt;tests/e2e&lt;/code&gt;&lt;/a&gt; directory structure:&lt;/p&gt;
&lt;div class="hextra-code-block hx:relative hx:mt-6 hx:first:mt-0 hx:group/code"&gt;
&lt;div&gt;&lt;pre&gt;&lt;code&gt;tests/e2e/
â”œâ”€â”€ default/
| â””â”€â”€ enketo/
â”‚ â”œâ”€â”€ pregnancy.wdio-spec.js
â”‚ â”œâ”€â”€ repeat.wdio-spec.js
â”‚ â””â”€â”€ ...
â”‚ â””â”€â”€ ...
â”œâ”€â”€ mobile/
â”‚ â””â”€â”€ contacts/
â”‚ â”œâ”€â”€ delete.wdio-spec.js
â”‚ â””â”€â”€ ...
â””â”€â”€ ...&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;div class="hextra-code-copy-btn-container hx:opacity-0 hx:transition hx:group-hover/code:opacity-100 hx:flex hx:gap-1 hx:absolute hx:m-[11px] hx:right-0 hx:top-0"&gt;
&lt;button
class="hextra-code-copy-btn hx:group/copybtn hx:cursor-pointer hx:transition-all hx:active:opacity-50 hx:bg-primary-700/5 hx:border hx:border-black/5 hx:text-gray-600 hx:hover:text-gray-900 hx:rounded-md hx:p-1.5 hx:dark:bg-primary-300/10 hx:dark:border-white/10 hx:dark:text-gray-400 hx:dark:hover:text-gray-50"
title="Copy code"
&gt;
&lt;div class="hextra-copy-icon hx:group-[.copied]/copybtn:hidden hx:pointer-events-none hx:h-4 hx:w-4"&gt;&lt;/div&gt;
&lt;div class="hextra-success-icon hx:hidden hx:group-[.copied]/copybtn:block hx:pointer-events-none hx:h-4 hx:w-4"&gt;&lt;/div&gt;
&lt;/button&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;p&gt;You can specify any &lt;code&gt;.wdio-spec.js&lt;/code&gt; file from these directories in the &lt;code&gt;--spec&lt;/code&gt; parameter.&lt;/p&gt;
&lt;h4&gt;Running one suite isolated&lt;span class="hx:absolute hx:-mt-20" id="running-one-suite-isolated"&gt;&lt;/span&gt;
&lt;a href="#running-one-suite-isolated" class="subheading-anchor" aria-label="Permalink for this section"&gt;&lt;/a&gt;&lt;/h4&gt;&lt;p&gt;To run a specific E2E test suite:&lt;/p&gt;
&lt;div class="hextra-code-block hx:relative hx:mt-6 hx:first:mt-0 hx:group/code"&gt;
&lt;div&gt;&lt;div class="highlight"&gt;&lt;pre tabindex="0" class="chroma"&gt;&lt;code class="language-bash" data-lang="bash"&gt;&lt;span class="line"&gt;&lt;span class="cl"&gt;&lt;span class="c1"&gt;# Run all suites (default behavior)&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class="line"&gt;&lt;span class="cl"&gt;npm run wdio-local -- --suite&lt;span class="o"&gt;=&lt;/span&gt;all
&lt;/span&gt;&lt;/span&gt;&lt;span class="line"&gt;&lt;span class="cl"&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class="line"&gt;&lt;span class="cl"&gt;&lt;span class="c1"&gt;# Example: Run tests by suite name&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class="line"&gt;&lt;span class="cl"&gt;npm run wdio-local -- --suite&lt;span class="o"&gt;=&lt;/span&gt;lowLevel
&lt;/span&gt;&lt;/span&gt;&lt;span class="line"&gt;&lt;span class="cl"&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class="line"&gt;&lt;span class="cl"&gt;&lt;span class="c1"&gt;# Run multiple suites&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class="line"&gt;&lt;span class="cl"&gt;npm run wdio-local -- --suite&lt;span class="o"&gt;=&lt;/span&gt;core,workflows&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;&lt;div class="hextra-code-copy-btn-container hx:opacity-0 hx:transition hx:group-hover/code:opacity-100 hx:flex hx:gap-1 hx:absolute hx:m-[11px] hx:right-0 hx:top-0"&gt;
&lt;button
class="hextra-code-copy-btn hx:group/copybtn hx:cursor-pointer hx:transition-all hx:active:opacity-50 hx:bg-primary-700/5 hx:border hx:border-black/5 hx:text-gray-600 hx:hover:text-gray-900 hx:rounded-md hx:p-1.5 hx:dark:bg-primary-300/10 hx:dark:border-white/10 hx:dark:text-gray-400 hx:dark:hover:text-gray-50"
title="Copy code"
&gt;
&lt;div class="hextra-copy-icon hx:group-[.copied]/copybtn:hidden hx:pointer-events-none hx:h-4 hx:w-4"&gt;&lt;/div&gt;
&lt;div class="hextra-success-icon hx:hidden hx:group-[.copied]/copybtn:block hx:pointer-events-none hx:h-4 hx:w-4"&gt;&lt;/div&gt;
&lt;/button&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;p&gt;To discover all available suite names, check the WebdriverIO configuration files in the corresponding &lt;a href="https://github.com/medic/cht-core/tree/master/tests/e2e"target="_blank" rel="noopener"&gt;&lt;code&gt;tests/e2e&lt;/code&gt;&lt;/a&gt; directory. For example &lt;a href="https://github.com/medic/cht-core/blob/master/tests/e2e/default/suites.js"target="_blank" rel="noopener"&gt;&lt;code&gt;tests/e2e/default/suites.js&lt;/code&gt;&lt;/a&gt;&lt;/p&gt;
&lt;h4&gt;Running individual tests within a spec&lt;span class="hx:absolute hx:-mt-20" id="running-individual-tests-within-a-spec-2"&gt;&lt;/span&gt;
&lt;a href="#running-individual-tests-within-a-spec-2" class="subheading-anchor" aria-label="Permalink for this section"&gt;&lt;/a&gt;&lt;/h4&gt;&lt;p&gt;To run only specific E2E tests within a spec file, you can use &lt;code&gt;describe.only&lt;/code&gt; or &lt;code&gt;it.only&lt;/code&gt; in your test files. See the &lt;a href="#isolating-specific-tests"&gt;Isolating specific tests&lt;/a&gt; section for examples.&lt;/p&gt;
&lt;pre class="mermaid hx:mt-6"&gt;
flowchart LR
subgraph cht-e2e [Docker: cht-e2e]
api
couchdb-1.local[(couchdb-1)]
couchdb-2.local[(couchdb-2)]
couchdb-3.local[(couchdb-3)]
haproxy
nginx
sentinel
nginx --&amp;gt; api
sentinel --&amp;gt; api
api --&amp;gt; haproxy
haproxy --&amp;gt; couchdb-1.local &amp;amp; couchdb-2.local &amp;amp; couchdb-3.local
end
subgraph browser
webapp
end
e2e-tests{E2E Tests}
browser &amp;lt;--HTTPS--&amp;gt; cht-e2e
e2e-tests &amp;lt;--wdio--&amp;gt; browser
e2e-tests o--Pouch/HTTPS--o cht-e2e
&lt;/pre&gt;&lt;h2&gt;Isolating specific tests&lt;span class="hx:absolute hx:-mt-20" id="isolating-specific-tests"&gt;&lt;/span&gt;
&lt;a href="#isolating-specific-tests" class="subheading-anchor" aria-label="Permalink for this section"&gt;&lt;/a&gt;&lt;/h2&gt;&lt;p&gt;For all test types (unit, integration, and e2e), you can isolate specific tests using &lt;code&gt;describe.only&lt;/code&gt; or &lt;code&gt;it.only&lt;/code&gt; in your test files:&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Example (Unit Test):&lt;/strong&gt;&lt;/p&gt;
&lt;div class="hextra-code-block hx:relative hx:mt-6 hx:first:mt-0 hx:group/code"&gt;
&lt;div&gt;&lt;div class="highlight"&gt;&lt;pre tabindex="0" class="chroma"&gt;&lt;code class="language-javascript" data-lang="javascript"&gt;&lt;span class="line"&gt;&lt;span class="cl"&gt;&lt;span class="c1"&gt;// In your unit test file (e.g., /webapp/tests/mocha/unit/translator.spec.js)
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class="line"&gt;&lt;span class="cl"&gt;&lt;span class="c1"&gt;&lt;/span&gt;&lt;span class="nx"&gt;describe&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;Bootstrap Translator&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="p"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class="line"&gt;&lt;span class="cl"&gt; &lt;span class="nx"&gt;it&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;Translate LOAD_ASSETS to English&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="p"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class="line"&gt;&lt;span class="cl"&gt; &lt;span class="c1"&gt;// This test will be skipped
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class="line"&gt;&lt;span class="cl"&gt;&lt;span class="c1"&gt;&lt;/span&gt; &lt;span class="p"&gt;});&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class="line"&gt;&lt;span class="cl"&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class="line"&gt;&lt;span class="cl"&gt; &lt;span class="nx"&gt;it&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;Translate to Spanish&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="p"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class="line"&gt;&lt;span class="cl"&gt; &lt;span class="c1"&gt;// This test will be skipped
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class="line"&gt;&lt;span class="cl"&gt;&lt;span class="c1"&gt;&lt;/span&gt; &lt;span class="p"&gt;});&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class="line"&gt;&lt;span class="cl"&gt;&lt;span class="p"&gt;});&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class="line"&gt;&lt;span class="cl"&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class="line"&gt;&lt;span class="cl"&gt;&lt;span class="nx"&gt;describe&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;only&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;Error cases&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="p"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class="line"&gt;&lt;span class="cl"&gt; &lt;span class="nx"&gt;it&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;Non-existant key&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="p"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class="line"&gt;&lt;span class="cl"&gt; &lt;span class="c1"&gt;// This test will run (part of describe.only)
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class="line"&gt;&lt;span class="cl"&gt;&lt;span class="c1"&gt;&lt;/span&gt; &lt;span class="p"&gt;});&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class="line"&gt;&lt;span class="cl"&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class="line"&gt;&lt;span class="cl"&gt; &lt;span class="nx"&gt;it&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;Non-existant locale falls back to English&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="p"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class="line"&gt;&lt;span class="cl"&gt; &lt;span class="c1"&gt;// This test will run (part of describe.only)
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class="line"&gt;&lt;span class="cl"&gt;&lt;span class="c1"&gt;&lt;/span&gt; &lt;span class="p"&gt;});&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class="line"&gt;&lt;span class="cl"&gt;&lt;span class="p"&gt;});&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class="line"&gt;&lt;span class="cl"&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class="line"&gt;&lt;span class="cl"&gt;&lt;span class="nx"&gt;describe&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;Translation Validation&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="p"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class="line"&gt;&lt;span class="cl"&gt; &lt;span class="nx"&gt;it&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;only&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;All translations provided&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="p"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class="line"&gt;&lt;span class="cl"&gt; &lt;span class="c1"&gt;// Only this individual test will run
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class="line"&gt;&lt;span class="cl"&gt;&lt;span class="c1"&gt;&lt;/span&gt; &lt;span class="p"&gt;});&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class="line"&gt;&lt;span class="cl"&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class="line"&gt;&lt;span class="cl"&gt; &lt;span class="nx"&gt;it&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;Validate translation keys&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="p"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class="line"&gt;&lt;span class="cl"&gt; &lt;span class="c1"&gt;// This test will be skipped
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class="line"&gt;&lt;span class="cl"&gt;&lt;span class="c1"&gt;&lt;/span&gt; &lt;span class="p"&gt;});&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class="line"&gt;&lt;span class="cl"&gt;&lt;span class="p"&gt;});&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;&lt;div class="hextra-code-copy-btn-container hx:opacity-0 hx:transition hx:group-hover/code:opacity-100 hx:flex hx:gap-1 hx:absolute hx:m-[11px] hx:right-0 hx:top-0"&gt;
&lt;button
class="hextra-code-copy-btn hx:group/copybtn hx:cursor-pointer hx:transition-all hx:active:opacity-50 hx:bg-primary-700/5 hx:border hx:border-black/5 hx:text-gray-600 hx:hover:text-gray-900 hx:rounded-md hx:p-1.5 hx:dark:bg-primary-300/10 hx:dark:border-white/10 hx:dark:text-gray-400 hx:dark:hover:text-gray-50"
title="Copy code"
&gt;
&lt;div class="hextra-copy-icon hx:group-[.copied]/copybtn:hidden hx:pointer-events-none hx:h-4 hx:w-4"&gt;&lt;/div&gt;
&lt;div class="hextra-success-icon hx:hidden hx:group-[.copied]/copybtn:block hx:pointer-events-none hx:h-4 hx:w-4"&gt;&lt;/div&gt;
&lt;/button&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;p&gt;&lt;strong&gt;Note:&lt;/strong&gt; Remember to remove &lt;code&gt;.only&lt;/code&gt; before committing your code, as it will prevent other tests from running.&lt;/p&gt;
&lt;h2&gt;Contributing Section&lt;span class="hx:absolute hx:-mt-20" id="contributing-section"&gt;&lt;/span&gt;
&lt;a href="#contributing-section" class="subheading-anchor" aria-label="Permalink for this section"&gt;&lt;/a&gt;&lt;/h2&gt;&lt;h3&gt;Ways to Get Involved&lt;span class="hx:absolute hx:-mt-20" id="ways-to-get-involved"&gt;&lt;/span&gt;
&lt;a href="#ways-to-get-involved" class="subheading-anchor" aria-label="Permalink for this section"&gt;&lt;/a&gt;&lt;/h3&gt;&lt;p&gt;You can contribute to the CHT testing in various ways:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Writing new tests&lt;/li&gt;
&lt;li&gt;Improving existing tests&lt;/li&gt;
&lt;li&gt;Enhancing test documentation&lt;/li&gt;
&lt;li&gt;Reporting test failures&lt;/li&gt;
&lt;li&gt;Suggesting test scenarios&lt;/li&gt;
&lt;/ul&gt;
&lt;h3&gt;Getting Started&lt;span class="hx:absolute hx:-mt-20" id="getting-started"&gt;&lt;/span&gt;
&lt;a href="#getting-started" class="subheading-anchor" aria-label="Permalink for this section"&gt;&lt;/a&gt;&lt;/h3&gt;&lt;ol&gt;
&lt;li&gt;Set up your &lt;a href="https://docs.communityhealthtoolkit.org/contribute/code/core/dev-environment/"target="_blank" rel="noopener"&gt;development environment&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;Run existing tests to familiarize yourself&lt;/li&gt;
&lt;li&gt;Join the CHT community channels for support&lt;/li&gt;
&lt;li&gt;Start with small, manageable changes&lt;/li&gt;
&lt;/ol&gt;
&lt;h3&gt;How to write automated e2e tests&lt;span class="hx:absolute hx:-mt-20" id="how-to-write-automated-e2e-tests"&gt;&lt;/span&gt;
&lt;a href="#how-to-write-automated-e2e-tests" class="subheading-anchor" aria-label="Permalink for this section"&gt;&lt;/a&gt;&lt;/h3&gt;&lt;p&gt;Read the &lt;a href="https://docs.communityhealthtoolkit.org/community/contributing/code/core/style-guide-automated-e2e-tests/"&gt;style guide for automated tests&lt;/a&gt; for guidelines on how to create new automated test cases for CHT-Core.&lt;/p&gt;
&lt;h3&gt;Debugging E2E tests&lt;span class="hx:absolute hx:-mt-20" id="debugging-e2e-tests"&gt;&lt;/span&gt;
&lt;a href="#debugging-e2e-tests" class="subheading-anchor" aria-label="Permalink for this section"&gt;&lt;/a&gt;&lt;/h3&gt;&lt;p&gt;End to end (e2e) tests can be really difficult to debug - sometimes they fail seemingly at random, and sometimes they only fail on certain environments (eg: ci but not locally). This can make reproducing and reliably fixing the issue challenging, so here are some tips to help!&lt;/p&gt;
&lt;h4&gt;Set the &lt;code&gt;DEBUG&lt;/code&gt; flag&lt;span class="hx:absolute hx:-mt-20" id="set-the-debug-flag"&gt;&lt;/span&gt;
&lt;a href="#set-the-debug-flag" class="subheading-anchor" aria-label="Permalink for this section"&gt;&lt;/a&gt;&lt;/h4&gt;&lt;p&gt;Setting the &lt;code&gt;DEBUG&lt;/code&gt; environment variable (For example: &lt;a href="https://github.com/medic/cht-core/blob/master/tests/wdio.conf.js#L103"target="_blank" rel="noopener"&gt;&lt;code&gt;DEBUG=true npm run wdio-local&lt;/code&gt;&lt;/a&gt;) when running the tests locally will do the following:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Run the browser without the &lt;code&gt;headless&lt;/code&gt; flag (details in the &lt;a href="https://github.com/medic/cht-core/blob/master/tests/wdio.conf.js#L35"target="_blank" rel="noopener"&gt;&lt;code&gt;wdio.conf&lt;/code&gt;&lt;/a&gt; file), so the browser will be displayed when running the tests&lt;/li&gt;
&lt;li&gt;Increase the test timeout from 2 minutes to 10 minutes&lt;/li&gt;
&lt;li&gt;Prevent Mocha from automatically retrying tests that fail (by default a failing test is retried 5 times, details in the &lt;a href="https://github.com/medic/cht-core/blob/master/tests/wdio.conf.js#L198"target="_blank" rel="noopener"&gt;&lt;code&gt;wdio.conf&lt;/code&gt;&lt;/a&gt;file)&lt;/li&gt;
&lt;li&gt;Prevent the &lt;code&gt;cht-e2e&lt;/code&gt; Docker containers from being torn down after the test finishes&lt;/li&gt;
&lt;/ul&gt;
&lt;h4&gt;Run the e2e tests without re-building docker images&lt;span class="hx:absolute hx:-mt-20" id="run-the-e2e-tests-without-re-building-docker-images"&gt;&lt;/span&gt;
&lt;a href="#run-the-e2e-tests-without-re-building-docker-images" class="subheading-anchor" aria-label="Permalink for this section"&gt;&lt;/a&gt;&lt;/h4&gt;&lt;p&gt;After the tests are executed the first time using the command &lt;code&gt;npm run wdio-local&lt;/code&gt;, the docker images are built in your local environment using the checkout branch name. If it is needed to run the tests repeatedly and there is a certainty that the cht-core code didn&amp;rsquo;t change, you can use the command &lt;code&gt;npm run ci-webdriver-default&lt;/code&gt;. This command will execute the e2e tests as they are run with the &lt;code&gt;wdio-local&lt;/code&gt; command but without re-building the images. This command uses the images that were built previously, which makes the process faster.&lt;/p&gt;
&lt;h4&gt;Read the logs&lt;span class="hx:absolute hx:-mt-20" id="read-the-logs"&gt;&lt;/span&gt;
&lt;a href="#read-the-logs" class="subheading-anchor" aria-label="Permalink for this section"&gt;&lt;/a&gt;&lt;/h4&gt;&lt;p&gt;Read the failure carefully - it often has really good info but sometimes it&amp;rsquo;s just hard to find. Most importantly it tells you exactly the line in the test that failed and you can look that up in the source to see what it was trying to do. The error message itself is also really useful. Also sometimes one error causes the next, so always start with the first test failure before looking at the others.&lt;/p&gt;
&lt;h5&gt;Known failure patterns&lt;span class="hx:absolute hx:-mt-20" id="known-failure-patterns"&gt;&lt;/span&gt;
&lt;a href="#known-failure-patterns" class="subheading-anchor" aria-label="Permalink for this section"&gt;&lt;/a&gt;&lt;/h5&gt;&lt;ul&gt;
&lt;li&gt;Can&amp;rsquo;t click on an element because another element would get the click. This usually means a modal dialog was being shown. 90% of the time this is the update notification modal which means some settings change has been detected after the test started execution.&lt;/li&gt;
&lt;li&gt;Stale element. This means the DOM element has been removed after it was found on the page but before trying to do something with it. Generally try to find the element just before it needs it to reduce the chance of this happening&lt;/li&gt;
&lt;/ul&gt;
&lt;h4&gt;Other logs and screenshots&lt;span class="hx:absolute hx:-mt-20" id="other-logs-and-screenshots"&gt;&lt;/span&gt;
&lt;a href="#other-logs-and-screenshots" class="subheading-anchor" aria-label="Permalink for this section"&gt;&lt;/a&gt;&lt;/h4&gt;&lt;p&gt;GitHub actions will artifact all files in tests/logs. This is the directory any logs, results, images, etc&amp;hellip; should save to if you want to review them if a build fails.&lt;/p&gt;
&lt;h5&gt;View the CI report&lt;span class="hx:absolute hx:-mt-20" id="view-the-ci-report"&gt;&lt;/span&gt;
&lt;a href="#view-the-ci-report" class="subheading-anchor" aria-label="Permalink for this section"&gt;&lt;/a&gt;&lt;/h5&gt;&lt;p&gt;There are logs and screenshots stored in the allure reports when a job failed on the CI. To access to those logs follow these steps:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Download the CI run artifact zip file located in the failed build&amp;rsquo;s &lt;code&gt;Archive Results&lt;/code&gt; section.
&lt;figure class=" center col-12 col-lg-12"&gt;&lt;a href="archiveResultsSection.png"&gt;&lt;img src="https://docs.communityhealthtoolkit.org/community/contributing/code/core/automated-tests/archiveResultsSection.png"&gt;&lt;/a&gt;
&lt;/figure&gt;
&lt;/li&gt;
&lt;li&gt;Extract the &lt;code&gt;.zip&lt;/code&gt; file.&lt;/li&gt;
&lt;li&gt;From your cht-core directory, run &lt;code&gt;npx allure open &amp;lt;path&amp;gt;/allure-report/&lt;/code&gt;. Being &lt;code&gt;&amp;lt;path&amp;gt;&lt;/code&gt; the location where the zip file was extracted.&lt;/li&gt;
&lt;/ul&gt;
&lt;h5&gt;IntelliJ Based&lt;span class="hx:absolute hx:-mt-20" id="intellij-based"&gt;&lt;/span&gt;
&lt;a href="#intellij-based" class="subheading-anchor" aria-label="Permalink for this section"&gt;&lt;/a&gt;&lt;/h5&gt;&lt;ol&gt;
&lt;li&gt;In a terminal, run &lt;code&gt;npm run build-dev-watch&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;In Intellij, open the &lt;a href="https://github.com/medic/cht-core/blob/master/package.json"target="_blank" rel="noopener"&gt;package.json&lt;/a&gt; file&lt;/li&gt;
&lt;li&gt;Scroll to the scripts section and click the â–¶ button next to &lt;code&gt;wdio-local&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;Select &lt;code&gt;Debug 'wdio-local'&lt;/code&gt;&lt;/li&gt;
&lt;/ol&gt;
&lt;h4&gt;Watching the test run&lt;span class="hx:absolute hx:-mt-20" id="watching-the-test-run"&gt;&lt;/span&gt;
&lt;a href="#watching-the-test-run" class="subheading-anchor" aria-label="Permalink for this section"&gt;&lt;/a&gt;&lt;/h4&gt;&lt;p&gt;Running the tests locally (For example, with &lt;code&gt;npm run wdio-local&lt;/code&gt;) will allow you to watch it run but if you interact with the page the test will fail in unexpected ways. Furthermore the browser will close after a short timeout so you won&amp;rsquo;t be able to inspect the console or DOM. To do this, force quit the process running the test before it tears down and you will be able to navigate around the app, use Chrome dev tools, and inspect the docs in the database to (hopefully) work out what&amp;rsquo;s going wrong.&lt;/p&gt;
&lt;h4&gt;Running the upgrade e2e test locally&lt;span class="hx:absolute hx:-mt-20" id="running-the-upgrade-e2e-test-locally"&gt;&lt;/span&gt;
&lt;a href="#running-the-upgrade-e2e-test-locally" class="subheading-anchor" aria-label="Permalink for this section"&gt;&lt;/a&gt;&lt;/h4&gt;&lt;p&gt;To run the upgrade e2e tests in your local environment, follow these steps:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Make sure your branch has been published, and it&amp;rsquo;s available in the market:
&lt;ul&gt;
&lt;li&gt;A way to do this is by pushing the branch, let the GitHubActions to run, if all the other e2e are okay, then it will publish the branch.&lt;/li&gt;
&lt;li&gt;Check that your branch name is available &lt;a href="https://staging.dev.medicmobile.org/_couch/builds_4/_design/builds/_view/releases"target="_blank" rel="noopener"&gt;here&lt;/a&gt;.&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;Make sure to stop all existing containers&lt;/li&gt;
&lt;li&gt;Set these environment variables:
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;export MARKET_URL_READ=https://staging.dev.medicmobile.org&lt;/code&gt;.&lt;/li&gt;
&lt;li&gt;&lt;code&gt;export STAGING_SERVER=_couch/builds_4&lt;/code&gt;.&lt;/li&gt;
&lt;li&gt;&lt;code&gt;export BRANCH=&amp;lt;your branch name&amp;gt;&lt;/code&gt;.&lt;/li&gt;
&lt;li&gt;&lt;code&gt;export BASE_VERSION=&amp;lt;CHT base version&amp;gt;&lt;/code&gt;(it can be used &lt;code&gt;latest&lt;/code&gt; as the value).&lt;/li&gt;
&lt;li&gt;&lt;code&gt;export TAG=&amp;lt;CHT version&amp;gt;&lt;/code&gt;(Optional, For example: &lt;code&gt;4.8.1&lt;/code&gt;).&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;Run the upgrade e2e tests: &lt;code&gt;npm run upgrade-wdio&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;If you experience errors such as:&lt;/p&gt;
&lt;div class="hextra-code-block hx:relative hx:mt-6 hx:first:mt-0 hx:group/code"&gt;
&lt;div&gt;&lt;div class="highlight"&gt;&lt;pre tabindex="0" class="chroma"&gt;&lt;code class="language-shell" data-lang="shell"&gt;&lt;span class="line"&gt;&lt;span class="cl"&gt;Error in hook: StatusCodeError: &lt;span class="m"&gt;404&lt;/span&gt; - &lt;span class="s2"&gt;&amp;#34;{\&amp;#34;error\&amp;#34;:\&amp;#34;not_found\&amp;#34;,\&amp;#34;reason\&amp;#34;:\&amp;#34;Document is missing attachment\&amp;#34;}\n&amp;#34;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;&lt;div class="hextra-code-copy-btn-container hx:opacity-0 hx:transition hx:group-hover/code:opacity-100 hx:flex hx:gap-1 hx:absolute hx:m-[11px] hx:right-0 hx:top-0"&gt;
&lt;button
class="hextra-code-copy-btn hx:group/copybtn hx:cursor-pointer hx:transition-all hx:active:opacity-50 hx:bg-primary-700/5 hx:border hx:border-black/5 hx:text-gray-600 hx:hover:text-gray-900 hx:rounded-md hx:p-1.5 hx:dark:bg-primary-300/10 hx:dark:border-white/10 hx:dark:text-gray-400 hx:dark:hover:text-gray-50"
title="Copy code"
&gt;
&lt;div class="hextra-copy-icon hx:group-[.copied]/copybtn:hidden hx:pointer-events-none hx:h-4 hx:w-4"&gt;&lt;/div&gt;
&lt;div class="hextra-success-icon hx:hidden hx:group-[.copied]/copybtn:block hx:pointer-events-none hx:h-4 hx:w-4"&gt;&lt;/div&gt;
&lt;/button&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;p&gt;Try the following:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;It&amp;rsquo;s probably because it can&amp;rsquo;t find the latest released version of CHT, double check that &lt;code&gt;MARKET_URL_READ&lt;/code&gt; and &lt;code&gt;STAGING_SERVER&lt;/code&gt; environment variables are set.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;If you experience errors such as:&lt;/p&gt;
&lt;div class="hextra-code-block hx:relative hx:mt-6 hx:first:mt-0 hx:group/code"&gt;
&lt;div&gt;&lt;div class="highlight"&gt;&lt;pre tabindex="0" class="chroma"&gt;&lt;code class="language-shell" data-lang="shell"&gt;&lt;span class="line"&gt;&lt;span class="cl"&gt;If you are seeing this locally, it can mean that your internet is too slow to download all images in the allotted time.
&lt;/span&gt;&lt;/span&gt;&lt;span class="line"&gt;&lt;span class="cl"&gt;Either run the &lt;span class="nb"&gt;test&lt;/span&gt; multiple &lt;span class="nb"&gt;times&lt;/span&gt; &lt;span class="k"&gt;until&lt;/span&gt; you load all images, download images manually or increase this timeout.&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;&lt;div class="hextra-code-copy-btn-container hx:opacity-0 hx:transition hx:group-hover/code:opacity-100 hx:flex hx:gap-1 hx:absolute hx:m-[11px] hx:right-0 hx:top-0"&gt;
&lt;button
class="hextra-code-copy-btn hx:group/copybtn hx:cursor-pointer hx:transition-all hx:active:opacity-50 hx:bg-primary-700/5 hx:border hx:border-black/5 hx:text-gray-600 hx:hover:text-gray-900 hx:rounded-md hx:p-1.5 hx:dark:bg-primary-300/10 hx:dark:border-white/10 hx:dark:text-gray-400 hx:dark:hover:text-gray-50"
title="Copy code"
&gt;
&lt;div class="hextra-copy-icon hx:group-[.copied]/copybtn:hidden hx:pointer-events-none hx:h-4 hx:w-4"&gt;&lt;/div&gt;
&lt;div class="hextra-success-icon hx:hidden hx:group-[.copied]/copybtn:block hx:pointer-events-none hx:h-4 hx:w-4"&gt;&lt;/div&gt;
&lt;/button&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;p&gt;Try the following:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Manually downloaded the images. To download images manually, you can use either &lt;code&gt;docker compose&lt;/code&gt; or &lt;code&gt;docker&lt;/code&gt;:
&lt;ul&gt;
&lt;li&gt;With &lt;code&gt;docker&lt;/code&gt;, you&amp;rsquo;d do a docker pull &lt;image tag&gt; for every image you want to download.&lt;/li&gt;
&lt;li&gt;With &lt;code&gt;docker compose&lt;/code&gt;, you&amp;rsquo;d save all docker-compose files in a folder, do a &lt;code&gt;docker compose pull&lt;/code&gt;, and point to your files as a source. Read more on &lt;a href="https://docs.docker.com/engine/reference/commandline/compose_pull/"target="_blank" rel="noopener"&gt;docker compose pull&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;If you experience errors such as:&lt;/p&gt;
&lt;div class="hextra-code-block hx:relative hx:mt-6 hx:first:mt-0 hx:group/code"&gt;
&lt;div&gt;&lt;div class="highlight"&gt;&lt;pre tabindex="0" class="chroma"&gt;&lt;code class="language-shell" data-lang="shell"&gt;&lt;span class="line"&gt;&lt;span class="cl"&gt;A user session timing out &lt;span class="k"&gt;while&lt;/span&gt; running the test.&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;&lt;div class="hextra-code-copy-btn-container hx:opacity-0 hx:transition hx:group-hover/code:opacity-100 hx:flex hx:gap-1 hx:absolute hx:m-[11px] hx:right-0 hx:top-0"&gt;
&lt;button
class="hextra-code-copy-btn hx:group/copybtn hx:cursor-pointer hx:transition-all hx:active:opacity-50 hx:bg-primary-700/5 hx:border hx:border-black/5 hx:text-gray-600 hx:hover:text-gray-900 hx:rounded-md hx:p-1.5 hx:dark:bg-primary-300/10 hx:dark:border-white/10 hx:dark:text-gray-400 hx:dark:hover:text-gray-50"
title="Copy code"
&gt;
&lt;div class="hextra-copy-icon hx:group-[.copied]/copybtn:hidden hx:pointer-events-none hx:h-4 hx:w-4"&gt;&lt;/div&gt;
&lt;div class="hextra-success-icon hx:hidden hx:group-[.copied]/copybtn:block hx:pointer-events-none hx:h-4 hx:w-4"&gt;&lt;/div&gt;
&lt;/button&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;p&gt;This could be because there are some issues with data or there could be a large number of images and volumes that caused docker to crash.
To resolve this, it&amp;rsquo;s recommended to clean all docker data for a fresh start. Note that these commands will delete everything.
The e2e tests might take a little longer to run because all the images need to be downloaded again.&lt;/p&gt;
&lt;p&gt;Try running the following commands:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;docker system prune&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;docker image prune -a&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;docker volume prune -a&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;docker network prune&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Repeat the above steps until all data has been deleted.&lt;/p&gt;
&lt;h3&gt;Test Architecture&lt;span class="hx:absolute hx:-mt-20" id="test-architecture"&gt;&lt;/span&gt;
&lt;a href="#test-architecture" class="subheading-anchor" aria-label="Permalink for this section"&gt;&lt;/a&gt;&lt;/h3&gt;&lt;p&gt;CHT Core GitHub actions spin up an ubuntu-22.04 machine. They install software and then launch couchdb and horticulturalist in a docker container. This is needed to run the applications in the specific supported &lt;code&gt;node&lt;/code&gt; versions, while allowing the test code to run in versions of &lt;code&gt;node&lt;/code&gt; it supports. This creates a paradigm to keep in mind when writing tests. Tests run on the ubuntu machine.
Any test code that starts a server or runs an executable is running outside of the horti container. The ports are exposed for all the services and horti has access to the cht-core root via a volume. Horti can also talk to the host by getting the gateway of the docker network.&lt;/p&gt;
&lt;h3&gt;Support and Community Resources&lt;span class="hx:absolute hx:-mt-20" id="support-and-community-resources"&gt;&lt;/span&gt;
&lt;a href="#support-and-community-resources" class="subheading-anchor" aria-label="Permalink for this section"&gt;&lt;/a&gt;&lt;/h3&gt;&lt;p&gt;The CHT Community is here to help you succeed with testing:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Questions? Ask in the &lt;a href="https://forum.communityhealthtoolkit.org/"target="_blank" rel="noopener"&gt;Community Forum&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;Need help debugging? Check the &lt;a href="https://docs.communityhealthtoolkit.org/community/contributing/code/core/automated-tests/#debugging-e2e-tests"&gt;Troubleshooting Guide&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;Found a bug? &lt;a href="https://github.com/medic/cht-core/issues"target="_blank" rel="noopener"&gt;Open an issue&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;Want to contribute to testing? See the &lt;a href="https://docs.communityhealthtoolkit.org/community/contributing/code/core/automated-tests/#ways-to-get-involved"&gt;Contribution Guide&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Remember, every contributor was once new to the project. Don&amp;rsquo;t hesitate to ask for help!&lt;/p&gt;</description></item><item><title>Style guide for automated tests</title><link>https://docs.communityhealthtoolkit.org/community/contributing/code/core/style-guide-automated-e2e-tests/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://docs.communityhealthtoolkit.org/community/contributing/code/core/style-guide-automated-e2e-tests/</guid><description>
&lt;p&gt;There are three files that are the base of every new automated test case, the most important one is the &lt;code&gt;spec&lt;/code&gt; file, which contains the actual test that will be executed.&lt;/p&gt;
&lt;p&gt;Automated tests cover different &lt;a href="https://github.com/medic/cht-core/tree/master/config"target="_blank" rel="noopener"&gt;CHT Configs&lt;/a&gt;, consider the following setups when writing a new test:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;default&lt;/strong&gt;
&lt;ul&gt;
&lt;li&gt;Config file: &lt;a href="https://github.com/medic/cht-core/blob/master/tests/e2e/default/wdio.conf.js"target="_blank" rel="noopener"&gt;&lt;code&gt;../tests/e2e/default/wdio.conf.js&lt;/code&gt;&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;Name convention for the &lt;code&gt;spec&lt;/code&gt; file: &lt;code&gt;../tests/e2e/default/*/&amp;lt;name&amp;gt;.wdio-spec.js&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;Command to execute the tests that belong to this config: &lt;code&gt;npm run wdio-local&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;strong&gt;Important:&lt;/strong&gt; Make sure the &lt;code&gt;spec&lt;/code&gt; file follows the name convention, otherwise the file won&amp;rsquo;t be executed.&lt;/p&gt;
&lt;h2&gt;Base files to use&lt;span class="hx:absolute hx:-mt-20" id="base-files-to-use"&gt;&lt;/span&gt;
&lt;a href="#base-files-to-use" class="subheading-anchor" aria-label="Permalink for this section"&gt;&lt;/a&gt;&lt;/h2&gt;&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;Page-object file. (&lt;code&gt;../tests/page-objects/../enketo/&amp;lt;name&amp;gt;.wdio.page.js&lt;/code&gt;)
We are leveraging the &lt;a href="https://www.thoughtworks.com/insights/blog/using-page-objects-overcome-protractors-shortcomings"target="_blank" rel="noopener"&gt;page object model&lt;/a&gt; for structure. When identifying elements they should be added to a page object and not within a test file. Add functions that perform actions to the page within the page object. Keep expects outside of page objects. The tests should be self-documenting.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Data file.&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;Create test data using the &lt;a href="https://github.com/medic/cht-core/blob/master/tests/factories/cht/contacts/place.js"target="_blank" rel="noopener"&gt;&lt;code&gt;place factory&lt;/code&gt;&lt;/a&gt;, the &lt;a href="https://github.com/medic/cht-core/blob/master/tests/factories/cht/users/users.js"target="_blank" rel="noopener"&gt;&lt;code&gt;user factory&lt;/code&gt;&lt;/a&gt; or the &lt;a href="https://github.com/medic/cht-core/blob/master/tests/factories/cht/contacts/person.js"target="_blank" rel="noopener"&gt;&lt;code&gt;person factory&lt;/code&gt;&lt;/a&gt; files.&lt;/p&gt;
&lt;p&gt;Using the &amp;ldquo;factories&amp;rdquo; will allow you to create hierarchies, contacts and patients that are associated with specific places and with their specific attributes and information. It can create offline or online users that can be used to login with different roles. &lt;strong&gt;Everything can be customised depending on the test requirements&lt;/strong&gt;.&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;e2e testing file. Use the correct name convention when working with the following configs:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;default: (&lt;code&gt;../tests/e2e/default/*/&amp;lt;name&amp;gt;.wdio-spec.js&lt;/code&gt;)&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;This file should contain &lt;strong&gt;only&lt;/strong&gt; the scenario setup and assertions of the test that is going to be executed. All the DOM queries, logging, contact creation and data assignments should be delegated to the Page Object file and the Data file. This will increase test readability and code reusability. For a better understanding follow these files as examples:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;default config: &lt;a href="https://github.com/medic/cht-core/blob/master/tests/e2e/default/enketo/pregnancy-visit.wdio-spec.js"target="_blank" rel="noopener"&gt;&lt;code&gt;../tests/e2e/default/enketo/pregnancy-visit.wdio-spec.js&lt;/code&gt;&lt;/a&gt;.&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;Tips to write test cases&lt;span class="hx:absolute hx:-mt-20" id="tips-to-write-test-cases"&gt;&lt;/span&gt;
&lt;a href="#tips-to-write-test-cases" class="subheading-anchor" aria-label="Permalink for this section"&gt;&lt;/a&gt;&lt;/h2&gt;&lt;h3&gt;File Structure (spec files)&lt;span class="hx:absolute hx:-mt-20" id="file-structure-spec-files"&gt;&lt;/span&gt;
&lt;a href="#file-structure-spec-files" class="subheading-anchor" aria-label="Permalink for this section"&gt;&lt;/a&gt;&lt;/h3&gt;&lt;p&gt;Test files should represent a feature within the application. Use &lt;code&gt;describe&lt;/code&gt; to identify the feature and to group helper functions and test cases. Use &lt;code&gt;it&lt;/code&gt; to detail individual test cases covering the feature&amp;rsquo;s functionality.
It is important that the database is clean and settings are restored once the tests are complete; we re-try the tests if they fail, and we need to make sure that for every new try, the environment is as it was the first time. Additionally, each &lt;code&gt;it&lt;/code&gt; block should be independent of the others, ensuring that any single test case can be rerun on its own and still work as expected.&lt;/p&gt;
&lt;p&gt;Observe how the following example defines a &lt;code&gt;describe&lt;/code&gt; using the feature name &lt;code&gt;Immunization Visit&lt;/code&gt;. It contains constant definitions, helper functions, the &lt;code&gt;before&lt;/code&gt; and &lt;code&gt;after&lt;/code&gt; hooks to prepare the environment, and two test cases that detail the expected results &lt;code&gt;should add a new child under 2 years old&lt;/code&gt; and &lt;code&gt;should submit an immunization visit&lt;/code&gt;.&lt;/p&gt;
&lt;p&gt;Ex:&lt;/p&gt;
&lt;div class="hextra-code-block hx:relative hx:mt-6 hx:first:mt-0 hx:group/code"&gt;
&lt;div&gt;&lt;div class="highlight"&gt;&lt;pre tabindex="0" class="chroma"&gt;&lt;code class="language-js" data-lang="js"&gt;&lt;span class="line"&gt;&lt;span class="cl"&gt; &lt;span class="nx"&gt;describe&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;Immunization Visit&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="p"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class="line"&gt;&lt;span class="cl"&gt; &lt;span class="kr"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;firstConstant&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;SampleName&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class="line"&gt;&lt;span class="cl"&gt; &lt;span class="kr"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;secondConstant&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;SampleValue&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class="line"&gt;&lt;span class="cl"&gt; &lt;span class="kr"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;firstHelperFunction&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="p"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="p"&gt;....&lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class="line"&gt;&lt;span class="cl"&gt; &lt;span class="kr"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;secondHelperFunction&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="p"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="p"&gt;....&lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class="line"&gt;&lt;span class="cl"&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class="line"&gt;&lt;span class="cl"&gt; &lt;span class="nx"&gt;before&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="kr"&gt;async&lt;/span&gt; &lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="p"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="p"&gt;....&lt;/span&gt; &lt;span class="p"&gt;});&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class="line"&gt;&lt;span class="cl"&gt; &lt;span class="nx"&gt;beforeEach&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="kr"&gt;async&lt;/span&gt; &lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="p"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="p"&gt;....&lt;/span&gt; &lt;span class="p"&gt;});&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class="line"&gt;&lt;span class="cl"&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class="line"&gt;&lt;span class="cl"&gt; &lt;span class="nx"&gt;after&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="kr"&gt;async&lt;/span&gt; &lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="p"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="p"&gt;....&lt;/span&gt; &lt;span class="p"&gt;});&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class="line"&gt;&lt;span class="cl"&gt; &lt;span class="nx"&gt;afterEach&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="kr"&gt;async&lt;/span&gt; &lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="p"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="p"&gt;....&lt;/span&gt; &lt;span class="p"&gt;});&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class="line"&gt;&lt;span class="cl"&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class="line"&gt;&lt;span class="cl"&gt; &lt;span class="nx"&gt;it&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;should add a new child under 2 years old&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="p"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="p"&gt;....&lt;/span&gt; &lt;span class="p"&gt;});&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class="line"&gt;&lt;span class="cl"&gt; &lt;span class="nx"&gt;it&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;should submit an immunization visit&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="p"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="p"&gt;....&lt;/span&gt; &lt;span class="p"&gt;});&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class="line"&gt;&lt;span class="cl"&gt; &lt;span class="p"&gt;...&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class="line"&gt;&lt;span class="cl"&gt; &lt;span class="p"&gt;});&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;&lt;div class="hextra-code-copy-btn-container hx:opacity-0 hx:transition hx:group-hover/code:opacity-100 hx:flex hx:gap-1 hx:absolute hx:m-[11px] hx:right-0 hx:top-0"&gt;
&lt;button
class="hextra-code-copy-btn hx:group/copybtn hx:cursor-pointer hx:transition-all hx:active:opacity-50 hx:bg-primary-700/5 hx:border hx:border-black/5 hx:text-gray-600 hx:hover:text-gray-900 hx:rounded-md hx:p-1.5 hx:dark:bg-primary-300/10 hx:dark:border-white/10 hx:dark:text-gray-400 hx:dark:hover:text-gray-50"
title="Copy code"
&gt;
&lt;div class="hextra-copy-icon hx:group-[.copied]/copybtn:hidden hx:pointer-events-none hx:h-4 hx:w-4"&gt;&lt;/div&gt;
&lt;div class="hextra-success-icon hx:hidden hx:group-[.copied]/copybtn:block hx:pointer-events-none hx:h-4 hx:w-4"&gt;&lt;/div&gt;
&lt;/button&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;h3&gt;Name convention and file location&lt;span class="hx:absolute hx:-mt-20" id="name-convention-and-file-location"&gt;&lt;/span&gt;
&lt;a href="#name-convention-and-file-location" class="subheading-anchor" aria-label="Permalink for this section"&gt;&lt;/a&gt;&lt;/h3&gt;&lt;ul&gt;
&lt;li&gt;Since every test is created by &lt;em&gt;&amp;ldquo;selectors&amp;rdquo;&lt;/em&gt;, it makes sense to locate them into a folder that represents the page being tested and not the feature. Try to locate every test file in the correct folder.&lt;/li&gt;
&lt;li&gt;Every file name should use &lt;code&gt;dash-case&lt;/code&gt; (&lt;code&gt;-&lt;/code&gt;). Do not use &lt;code&gt;snake-case&lt;/code&gt; (&lt;code&gt;_&lt;/code&gt;) nor &lt;code&gt;camelCase&lt;/code&gt;. Consider the following examples:
&lt;ul&gt;
&lt;li&gt;Correct:
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;pregnancy-visit.wdio-spec.js&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;Incorrect:
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;pregnancy_visit.wdio-spec.js&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;pregnancyVisit.wdio-spec.js&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;PregnancyVisit.wdio-spec.js&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;Whenever possible avoid repeating the folder name in the file name. Consider the following examples where the file is located in the path &lt;code&gt;e2e/default/enketo&lt;/code&gt;:
&lt;ul&gt;
&lt;li&gt;Correct:
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;pregnancy-visit.wdio-spec.js&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;Incorrect:
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;pregnancy-visit-enketo.wdio-spec.js&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;pregnancy-visit-default.wdio-spec.js&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;pregnancy-visit-enketo-default.wdio-spec.js&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h3&gt;Adding identifiers&lt;span class="hx:absolute hx:-mt-20" id="adding-identifiers"&gt;&lt;/span&gt;
&lt;a href="#adding-identifiers" class="subheading-anchor" aria-label="Permalink for this section"&gt;&lt;/a&gt;&lt;/h3&gt;&lt;p&gt;In some cases, adding a unique identifier to an element may be necessary. This could be a piece of data related to the element, or a unique name (which can be done by adding a &lt;code&gt;test-&lt;/code&gt; attribute to the app code).&lt;/p&gt;
&lt;p&gt;Ex: &lt;code&gt;attr.test-id=&amp;quot;{{ msg.key }}&amp;quot; &lt;/code&gt; Will add a &lt;code&gt;test-id&lt;/code&gt; attribute with the data from the app.&lt;/p&gt;
&lt;p&gt;Then it can be consumed in the test by getting an element by css. EX: &lt;code&gt;element(by.css(`#message-list li[test-id=&amp;quot;${identifier}&amp;quot;]`)),&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;Adding a test identifier is a good option for cases where a CSS selector would otherwise be fragile such as selecting based on an assumed element structure or selecting on CSS classes intended for visual design that may change.&lt;/p&gt;
&lt;h3&gt;Test tags&lt;span class="hx:absolute hx:-mt-20" id="test-tags"&gt;&lt;/span&gt;
&lt;a href="#test-tags" class="subheading-anchor" aria-label="Permalink for this section"&gt;&lt;/a&gt;&lt;/h3&gt;&lt;p&gt;You can tag mocha tests and update suites to only include or exclude certain tags (&lt;a href="https://github.com/mochajs/mocha/wiki/Tagging"target="_blank" rel="noopener"&gt;Mocha Wiki&lt;/a&gt;).&lt;/p&gt;
&lt;p&gt;Existent tags:&lt;/p&gt;
&lt;h4&gt;@docker&lt;span class="hx:absolute hx:-mt-20" id="docker"&gt;&lt;/span&gt;
&lt;a href="#docker" class="subheading-anchor" aria-label="Permalink for this section"&gt;&lt;/a&gt;&lt;/h4&gt;&lt;p&gt;Tests that should run exclusively when running the suite over docker infrastructure. These tests will fail if run over k3d.&lt;/p&gt;
&lt;div class="hx:overflow-x-auto hx:mt-6 hx:flex hx:flex-col hx:rounded-lg hx:border hx:py-4 hx:px-4 hx:border-gray-200 hx:contrast-more:border-current hx:contrast-more:dark:border-current hx:border-blue-200 hx:bg-blue-100 hx:text-blue-900 hx:dark:border-blue-200/30 hx:dark:bg-blue-900/30 hx:dark:text-blue-200"&gt;
&lt;p class="hx:flex hx:items-center hx:font-medium"&gt;&lt;svg height=16px class="hx:inline-block hx:align-middle hx:mr-2" xmlns="http://www.w3.org/2000/svg" fill="none" viewBox="0 0 24 24" stroke-width="2" stroke="currentColor" aria-hidden="true"&gt;&lt;path stroke-linecap="round" stroke-linejoin="round" d="M13 16h-1v-4h-1m1-4h.01M21 12a9 9 0 11-18 0 9 9 0 0118 0z"/&gt;&lt;/svg&gt;Note&lt;/p&gt;
&lt;div class="hx:w-full hx:min-w-0 hx:leading-7"&gt;
&lt;div class="hx:mt-6 hx:leading-7 hx:first:mt-0"&gt;&lt;ul&gt;
&lt;li&gt;We decided to separate every functionality in files/folders because we want to make sure that we can reuse as much code as possible. If something new is implemented and might be used for another test, then isolate the code in a separate file, so it can be reused in future tests.&lt;/li&gt;
&lt;li&gt;If the new test is not associated to a specific configuration, locate the test inside the correct folder of the default config &lt;a href="https://github.com/medic/cht-core/tree/master/tests/e2e/default"target="_blank" rel="noopener"&gt;&lt;code&gt;e2e/default/*&lt;/code&gt;&lt;/a&gt;.&lt;/li&gt;
&lt;/ul&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;</description></item><item><title>Apdex Automated Tests</title><link>https://docs.communityhealthtoolkit.org/community/contributing/code/core/apdex-automation-tests/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://docs.communityhealthtoolkit.org/community/contributing/code/core/apdex-automation-tests/</guid><description>
&lt;p&gt;This documentation will guide you on how to setup and configure automation to run performance tests for your CHT Applications.&lt;/p&gt;
&lt;h2&gt;Prerequisites&lt;span class="hx:absolute hx:-mt-20" id="prerequisites"&gt;&lt;/span&gt;
&lt;a href="#prerequisites" class="subheading-anchor" aria-label="Permalink for this section"&gt;&lt;/a&gt;&lt;/h2&gt;&lt;p&gt;Before continuing with the steps below, ensure:&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;
&lt;p&gt;You have a &lt;a href="https://docs.communityhealthtoolkit.org/hosting/cht/app-developer"&gt;cht instance deployed&lt;/a&gt; and running either locally or globally.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;You have some pre-existing users and data already loaded on the app. Use the &lt;a href="https://github.com/medic/test-data-generator"target="_blank" rel="noopener"&gt;test-data-generator&lt;/a&gt; tool to achieve this.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;If you already have the CHT Android app installed, set the &lt;code&gt;appPath&lt;/code&gt; value (in the capabilities section of the settings file) to an empty string.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;If you do not have the CHT Android app installed on your mobile device, download the preferred &lt;a href="https://github.com/medic/cht-android/releases"target="_blank" rel="noopener"&gt;apk version&lt;/a&gt; and then set the &lt;code&gt;appPath&lt;/code&gt; value to the absolute path of the apk file.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Finally, ensure you have done the following installations on your machine:&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;ul&gt;
&lt;li&gt;Install &lt;a href="https://nodejs.org/en/download"target="_blank" rel="noopener"&gt;NodeJS&lt;/a&gt; and &lt;a href="https://www.oracle.com/java/technologies/downloads/"target="_blank" rel="noopener"&gt;Java JDK&lt;/a&gt; then ensure JAVA_HOME path is correctly set up.
&lt;div class="hextra-code-block hx:relative hx:mt-6 hx:first:mt-0 hx:group/code"&gt;
&lt;div&gt;&lt;div class="highlight"&gt;&lt;pre tabindex="0" class="chroma"&gt;&lt;code class="language-shell" data-lang="shell"&gt;&lt;span class="line"&gt;&lt;span class="cl"&gt;&lt;span class="nb"&gt;export&lt;/span&gt; &lt;span class="nv"&gt;JAVA_HOME&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="k"&gt;$(&lt;/span&gt;/usr/libexec/java_home&lt;span class="k"&gt;)&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;&lt;div class="hextra-code-copy-btn-container hx:opacity-0 hx:transition hx:group-hover/code:opacity-100 hx:flex hx:gap-1 hx:absolute hx:m-[11px] hx:right-0 hx:top-0"&gt;
&lt;button
class="hextra-code-copy-btn hx:group/copybtn hx:cursor-pointer hx:transition-all hx:active:opacity-50 hx:bg-primary-700/5 hx:border hx:border-black/5 hx:text-gray-600 hx:hover:text-gray-900 hx:rounded-md hx:p-1.5 hx:dark:bg-primary-300/10 hx:dark:border-white/10 hx:dark:text-gray-400 hx:dark:hover:text-gray-50"
title="Copy code"
&gt;
&lt;div class="hextra-copy-icon hx:group-[.copied]/copybtn:hidden hx:pointer-events-none hx:h-4 hx:w-4"&gt;&lt;/div&gt;
&lt;div class="hextra-success-icon hx:hidden hx:group-[.copied]/copybtn:block hx:pointer-events-none hx:h-4 hx:w-4"&gt;&lt;/div&gt;
&lt;/button&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/li&gt;
&lt;li&gt;Install and Set-up &lt;a href="https://developer.android.com/studio/install"target="_blank" rel="noopener"&gt;Android studio&lt;/a&gt; and the &lt;code&gt;adb tool&lt;/code&gt; to enable you run adb commands.
&lt;ul&gt;
&lt;li&gt;Add the Android SDK directory to your systemâ€™s ANDROID_HOME environment variable.&lt;/li&gt;
&lt;/ul&gt;
&lt;div class="hextra-code-block hx:relative hx:mt-6 hx:first:mt-0 hx:group/code"&gt;
&lt;div&gt;&lt;div class="highlight"&gt;&lt;pre tabindex="0" class="chroma"&gt;&lt;code class="language-shell" data-lang="shell"&gt;&lt;span class="line"&gt;&lt;span class="cl"&gt; &lt;span class="nb"&gt;export&lt;/span&gt; &lt;span class="nv"&gt;ANDROID_HOME&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s2"&gt;&amp;#34;/Users/yourpath/Library/Android/sdk/&amp;#34;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class="line"&gt;&lt;span class="cl"&gt; &lt;span class="nb"&gt;export&lt;/span&gt; &lt;span class="nv"&gt;PATH&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="nv"&gt;$ANDROID_HOME&lt;/span&gt;/platform-tools:&lt;span class="nv"&gt;$PATH&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class="line"&gt;&lt;span class="cl"&gt; &lt;span class="nb"&gt;export&lt;/span&gt; &lt;span class="nv"&gt;PATH&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="nv"&gt;$ANDROID_HOME&lt;/span&gt;/tools:&lt;span class="nv"&gt;$PATH&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;&lt;div class="hextra-code-copy-btn-container hx:opacity-0 hx:transition hx:group-hover/code:opacity-100 hx:flex hx:gap-1 hx:absolute hx:m-[11px] hx:right-0 hx:top-0"&gt;
&lt;button
class="hextra-code-copy-btn hx:group/copybtn hx:cursor-pointer hx:transition-all hx:active:opacity-50 hx:bg-primary-700/5 hx:border hx:border-black/5 hx:text-gray-600 hx:hover:text-gray-900 hx:rounded-md hx:p-1.5 hx:dark:bg-primary-300/10 hx:dark:border-white/10 hx:dark:text-gray-400 hx:dark:hover:text-gray-50"
title="Copy code"
&gt;
&lt;div class="hextra-copy-icon hx:group-[.copied]/copybtn:hidden hx:pointer-events-none hx:h-4 hx:w-4"&gt;&lt;/div&gt;
&lt;div class="hextra-success-icon hx:hidden hx:group-[.copied]/copybtn:block hx:pointer-events-none hx:h-4 hx:w-4"&gt;&lt;/div&gt;
&lt;/button&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;ul&gt;
&lt;li&gt;To set up an Android Virtual Device (AVD), open Android Studio, click on &lt;em&gt;More Actions&lt;/em&gt; &amp;gt; &lt;em&gt;Virtual Device Manager&lt;/em&gt;, and then proceed with the virtual device creation by selecting the hardware and system image.&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;Install appium and appium doctor.&lt;/li&gt;
&lt;/ul&gt;
&lt;div class="hextra-code-block hx:relative hx:mt-6 hx:first:mt-0 hx:group/code"&gt;
&lt;div&gt;&lt;div class="highlight"&gt;&lt;pre tabindex="0" class="chroma"&gt;&lt;code class="language-shell" data-lang="shell"&gt;&lt;span class="line"&gt;&lt;span class="cl"&gt;npm install -g appium@next
&lt;/span&gt;&lt;/span&gt;&lt;span class="line"&gt;&lt;span class="cl"&gt;npm install -g appium-doctor&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;&lt;div class="hextra-code-copy-btn-container hx:opacity-0 hx:transition hx:group-hover/code:opacity-100 hx:flex hx:gap-1 hx:absolute hx:m-[11px] hx:right-0 hx:top-0"&gt;
&lt;button
class="hextra-code-copy-btn hx:group/copybtn hx:cursor-pointer hx:transition-all hx:active:opacity-50 hx:bg-primary-700/5 hx:border hx:border-black/5 hx:text-gray-600 hx:hover:text-gray-900 hx:rounded-md hx:p-1.5 hx:dark:bg-primary-300/10 hx:dark:border-white/10 hx:dark:text-gray-400 hx:dark:hover:text-gray-50"
title="Copy code"
&gt;
&lt;div class="hextra-copy-icon hx:group-[.copied]/copybtn:hidden hx:pointer-events-none hx:h-4 hx:w-4"&gt;&lt;/div&gt;
&lt;div class="hextra-success-icon hx:hidden hx:group-[.copied]/copybtn:block hx:pointer-events-none hx:h-4 hx:w-4"&gt;&lt;/div&gt;
&lt;/button&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;ul&gt;
&lt;li&gt;Install appium driver - &lt;code&gt;appium driver install uiautomator2&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;Steps (running the tests)&lt;span class="hx:absolute hx:-mt-20" id="steps-running-the-tests"&gt;&lt;/span&gt;
&lt;a href="#steps-running-the-tests" class="subheading-anchor" aria-label="Permalink for this section"&gt;&lt;/a&gt;&lt;/h2&gt;&lt;ol&gt;
&lt;li&gt;
&lt;p&gt;Enable the developer mode in your phone and enable the USB Debugger mode.&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Ensure your device does not have a lock screen PIN/Passcode.&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Connect your phone to the computer using the appropriate device cable or you can follow &lt;a href="https://developer.android.com/studio/run/device#wireless"target="_blank" rel="noopener"&gt;these steps&lt;/a&gt; to connect your device using Wi-Fi.&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Run the &lt;code&gt;adb devices&lt;/code&gt; command to confirm that your device is listed among the attached devices.&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Create a settings file or reuse one of the provided &lt;a href="https://github.com/medic/cht-core/tree/master/tests/performance/apdex-score/sample-settings-files"target="_blank" rel="noopener"&gt;sample settings&lt;/a&gt; files.&lt;/p&gt;
&lt;details&gt; &lt;summary&gt;Expand to see settings file structure &lt;/summary&gt;
&lt;pre&gt;&lt;code&gt;```js
{
&amp;quot;iterations&amp;quot;: 1,
&amp;quot;instanceURL&amp;quot;: &amp;quot;&amp;lt;instance url&amp;gt;&amp;quot;,
&amp;quot;hasPrivacyPolicy&amp;quot;: false,
&amp;quot;capabilities&amp;quot;: [
{
&amp;quot;platformVersion&amp;quot;: &amp;quot;&amp;lt;android version&amp;gt;&amp;quot;,
&amp;quot;deviceName&amp;quot;: &amp;quot;&amp;lt;phone model&amp;gt;&amp;quot;,
&amp;quot;appPath&amp;quot;: &amp;quot;&amp;lt;path to cht android apk&amp;gt;&amp;quot;,
&amp;quot;noReset&amp;quot;: false
}
],
&amp;quot;skip&amp;quot;: {
&amp;quot;login&amp;quot;: false,
&amp;quot;loadContactList&amp;quot;: false,
&amp;quot;loadChwArea&amp;quot;: false,
&amp;quot;loadHousehold&amp;quot;: false,
&amp;quot;loadPatient&amp;quot;: false,
&amp;quot;loadMessageList&amp;quot;: false,
&amp;quot;loadTaskList&amp;quot;: false,
&amp;quot;loadAnalytics&amp;quot;: false,
&amp;quot;loadReportList&amp;quot;: false,
&amp;quot;searchContact&amp;quot;: false,
&amp;quot;searchReport&amp;quot;: false,
&amp;quot;submitTask&amp;quot;: true,
&amp;quot;createPatient&amp;quot;: true,
&amp;quot;submitPatientReport&amp;quot;: true
},
&amp;quot;users&amp;quot;: [
{
&amp;quot;type&amp;quot;: &amp;quot;offline&amp;quot;,
&amp;quot;role&amp;quot;: &amp;quot;chw&amp;quot;,
&amp;quot;username&amp;quot;: &amp;quot;&amp;lt;username&amp;gt;&amp;quot;,
&amp;quot;password&amp;quot;: &amp;quot;&amp;lt;password&amp;gt;&amp;quot;
}
],
&amp;quot;pages&amp;quot;: {
&amp;quot;contactList&amp;quot;: {
&amp;quot;navigation&amp;quot;: [
{ &amp;quot;selector&amp;quot;: &amp;quot;//*[@text=\&amp;quot;Reports\&amp;quot;]&amp;quot; },
{
&amp;quot;selector&amp;quot;: &amp;quot;//*[@text=\&amp;quot;People\&amp;quot;]&amp;quot;,
&amp;quot;asserts&amp;quot;: [ { &amp;quot;selector&amp;quot;: &amp;quot;//*[contains(@text, \&amp;quot;West Miltonside\&amp;quot;)]&amp;quot; } ]
}
],
&amp;quot;search&amp;quot;: {
&amp;quot;value&amp;quot;: &amp;quot;Rafael Windler&amp;quot;,
&amp;quot;asserts&amp;quot;: [
{ &amp;quot;selector&amp;quot;: &amp;quot;//*[@text=\&amp;quot;Rafael Windler\&amp;quot;]&amp;quot; },
{
&amp;quot;scrollDown&amp;quot;: 5,
&amp;quot;selector&amp;quot;: &amp;quot;//*[contains(@text, \&amp;quot;No more people\&amp;quot;)]&amp;quot;
}
],
&amp;quot;postTestPath&amp;quot;: [
{ &amp;quot;selector&amp;quot;: &amp;quot;//*[@text=\&amp;quot;Reports\&amp;quot;]&amp;quot; }
]
}
},
&amp;quot;chwArea&amp;quot;: {
&amp;quot;navigation&amp;quot;: [
{
&amp;quot;selector&amp;quot;: &amp;quot;//*[contains(@text, \&amp;quot;West Miltonside\&amp;quot;)]&amp;quot;,
&amp;quot;asserts&amp;quot;: [
{ &amp;quot;selector&amp;quot;: &amp;quot;//*[contains(@text, \&amp;quot;External ID\&amp;quot;)]&amp;quot; },
{ &amp;quot;selector&amp;quot;: &amp;quot;//*[contains(@text, \&amp;quot;Rafael Windler\&amp;quot;)]&amp;quot; },
{ &amp;quot;selector&amp;quot;: &amp;quot;//*[contains(@text, \&amp;quot;Households\&amp;quot;)]&amp;quot; },
{ &amp;quot;selector&amp;quot;: &amp;quot;//*[contains(@text, \&amp;quot;Abilene\&amp;quot;)]&amp;quot; }
]
}
],
&amp;quot;postTestPath&amp;quot;: [ { &amp;quot;selector&amp;quot;: &amp;quot;//*[@text=\&amp;quot;Back\&amp;quot;]&amp;quot; } ]
},
&amp;quot;household&amp;quot;: {
&amp;quot;navigation&amp;quot;: [
{ &amp;quot;selector&amp;quot;: &amp;quot;//*[contains(@text, \&amp;quot;West Miltonside\&amp;quot;)]&amp;quot; },
{
&amp;quot;selector&amp;quot;: &amp;quot;//*[contains(@text, \&amp;quot;Abilene\&amp;quot;)]&amp;quot;,
&amp;quot;asserts&amp;quot;: [
{ &amp;quot;selector&amp;quot;: &amp;quot;//*[contains(@text, \&amp;quot;Phone\&amp;quot;)]&amp;quot; },
{ &amp;quot;selector&amp;quot;: &amp;quot;//*[contains(@text, \&amp;quot;Bill Pouros\&amp;quot;)]&amp;quot; },
{
&amp;quot;scrollDown&amp;quot;: 2,
&amp;quot;selector&amp;quot;: &amp;quot;//*[text()[contains(.,\&amp;quot;Danger sign follow up\&amp;quot;)]&amp;quot;
},
{ &amp;quot;selector&amp;quot;: &amp;quot;//*[text()[contains(.,\&amp;quot;Due today\&amp;quot;)]&amp;quot; },
{ &amp;quot;selector&amp;quot;: &amp;quot;//*[text()[contains(.,\&amp;quot;Pregnancy danger sign\&amp;quot;)]&amp;quot; }
]
}
]
},
&amp;quot;patient&amp;quot;: {
&amp;quot;navigation&amp;quot;: [
{
&amp;quot;selector&amp;quot;: &amp;quot;//*[contains(@text, \&amp;quot;Irene Shields\&amp;quot;)]&amp;quot;,
&amp;quot;asserts&amp;quot;: [
{ &amp;quot;selector&amp;quot;: &amp;quot;//*[contains(@text, \&amp;quot;37 years\&amp;quot;)]&amp;quot; },
{
&amp;quot;scrollDown&amp;quot;: 1,
&amp;quot;selector&amp;quot;: &amp;quot;//*[contains(@text, \&amp;quot;Danger sign follow up\&amp;quot;)]&amp;quot; },
{ &amp;quot;selector&amp;quot;: &amp;quot;//*[contains(@text, \&amp;quot;Pregnancy danger sign\&amp;quot;)]&amp;quot; }
]
}
],
&amp;quot;postTestPath&amp;quot;: [ { &amp;quot;selector&amp;quot;: &amp;quot;//*[@text=\&amp;quot;Back\&amp;quot;]&amp;quot; } ]
},
&amp;quot;messageList&amp;quot;: {
&amp;quot;navigation&amp;quot;: [
{
&amp;quot;selector&amp;quot;: &amp;quot;//*[@text=\&amp;quot;Messages\&amp;quot;]&amp;quot;,
&amp;quot;asserts&amp;quot;: [ { &amp;quot;selector&amp;quot;: &amp;quot;//*[contains(@text, \&amp;quot;No messages found\&amp;quot;)]&amp;quot; } ]
}
]
},
&amp;quot;reportList&amp;quot;: {
&amp;quot;navigation&amp;quot;: [
{
&amp;quot;selector&amp;quot;: &amp;quot;//*[@text=\&amp;quot;Reports\&amp;quot;]&amp;quot;,
&amp;quot;asserts&amp;quot;: [ { &amp;quot;selector&amp;quot;: &amp;quot;//*[contains(@text, \&amp;quot;Pregnancy danger sign\&amp;quot;)]&amp;quot; } ]
}
],
&amp;quot;search&amp;quot;: {
&amp;quot;value&amp;quot;: &amp;quot;Alexandra Lemke&amp;quot;,
&amp;quot;asserts&amp;quot;: [
{
&amp;quot;selector&amp;quot;: &amp;quot;//*[contains(@text, \&amp;quot;No reports found\&amp;quot;)]&amp;quot;
}
],
&amp;quot;postTestPath&amp;quot;: [
{ &amp;quot;selector&amp;quot;: &amp;quot;//*[@text=\&amp;quot;Tasks\&amp;quot;]&amp;quot; }
]
}
},
&amp;quot;taskList&amp;quot;: {
&amp;quot;navigation&amp;quot;: [
{
&amp;quot;selector&amp;quot;: &amp;quot;//*[@text=\&amp;quot;Tasks\&amp;quot;]&amp;quot;,
&amp;quot;asserts&amp;quot;: [ { &amp;quot;selector&amp;quot;: &amp;quot;//*[contains(@text, \&amp;quot;Danger sign follow up\&amp;quot;)]&amp;quot; } ]
}
]
},
&amp;quot;targets&amp;quot;: {
&amp;quot;navigation&amp;quot;: [
{
&amp;quot;selector&amp;quot;: &amp;quot;//*[@text=\&amp;quot;Targets\&amp;quot;]&amp;quot;,
&amp;quot;asserts&amp;quot;: [ { &amp;quot;selector&amp;quot;: &amp;quot;//*[contains(@text, \&amp;quot;New pregnancies\&amp;quot;)]&amp;quot; } ]
}
]
}
},
&amp;quot;forms&amp;quot;: {
&amp;quot;patientReport&amp;quot;: {
&amp;quot;navigation&amp;quot;: [{
&amp;quot;scrollDown&amp;quot;: 3,
&amp;quot;selector&amp;quot;: &amp;quot;//*[@text=\&amp;quot;Pregnancy\&amp;quot;]&amp;quot;
}],
&amp;quot;pages&amp;quot;: [
{
&amp;quot;asserts&amp;quot;: [
{ &amp;quot;selector&amp;quot;: &amp;quot;//*[contains(@text, \&amp;quot;Select patient\&amp;quot;)]&amp;quot; } // Wait for form to load
],
&amp;quot;fields&amp;quot;: [
{
&amp;quot;selector&amp;quot;: &amp;quot;&amp;lt;Mandatory. XPath selector of radio buttons, text boxes (to open keyboard), etc.&amp;gt;&amp;quot;,
// Optional. Use this when you need to type in the phone's keyboard, find the keycodes here: https://developer.android.com/reference/android/view/KeyEvent
&amp;quot;keycodes&amp;quot;: &amp;quot;&amp;lt;Array of numbers (keycodes)&amp;gt;&amp;quot;,
// Optional. Use this when you want an equivalent of element.setValue(myValue)
&amp;quot;value&amp;quot;: &amp;quot;&amp;lt;String. Field value&amp;gt;&amp;quot;,
// Optional. Use this when you want to select an option from a dropdown. The dropdown will open with the &amp;quot;selector&amp;quot; property
&amp;quot;dropdownOption&amp;quot;: &amp;quot;&amp;lt;String. XPath selector to a dropdown option and clicks on it.&amp;gt;&amp;quot;,
// Optional. Number of scrolls to reach the field
&amp;quot;scrollDown&amp;quot;: 1,
&amp;quot;scrollUp&amp;quot;: 1
}
],
// Optional. Number of scrolls to reach the page's buttons
&amp;quot;scrollDown&amp;quot;: 2,
&amp;quot;scrollUp&amp;quot;: 1
},
{ // Add this to assert the form summary page.
&amp;quot;asserts&amp;quot;: [
{ &amp;quot;selector&amp;quot;: &amp;quot;//*[@text=\&amp;quot;Pregnancy in danger\&amp;quot;]&amp;quot; },
{ &amp;quot;selector&amp;quot;: &amp;quot;//*[contains(@text, \&amp;quot;Refer patient to clinic\&amp;quot;)]&amp;quot; }
],
// Optional. Number of scrolls to reach the page's buttons
&amp;quot;scrollDown&amp;quot;: 2,
&amp;quot;scrollUp&amp;quot;: 3
}
],
&amp;quot;postSubmitAsserts&amp;quot;: [ // Add to assert result after form is submitted.
{ &amp;quot;select&amp;quot;: &amp;quot;//android.widget.TextView[contains(@text, \&amp;quot;Submitted by Paula\&amp;quot;)]&amp;quot; }
],
&amp;quot;postTestPath&amp;quot;: [ { &amp;quot;selector&amp;quot;: &amp;quot;//*[@text=\&amp;quot;Back\&amp;quot;]&amp;quot; } ]
}
}
}
```
&lt;/code&gt;&lt;/pre&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;/details&gt;
&lt;ol start="4"&gt;
&lt;li&gt;Set the environment variable &lt;code&gt;APDEX_TEST_SETTINGS&lt;/code&gt; with the path of your settings file (apdex-settings.json).
For example, you can use the following command but make sure to replace the path with your actual settings file location:
&lt;div class="hextra-code-block hx:relative hx:mt-6 hx:first:mt-0 hx:group/code"&gt;
&lt;div&gt;&lt;div class="highlight"&gt;&lt;pre tabindex="0" class="chroma"&gt;&lt;code class="language-shell" data-lang="shell"&gt;&lt;span class="line"&gt;&lt;span class="cl"&gt;&lt;span class="nb"&gt;export&lt;/span&gt; &lt;span class="nv"&gt;APDEX_TEST_SETTINGS&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;/Users/pepe/Documents/apdex-settings.json&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;&lt;div class="hextra-code-copy-btn-container hx:opacity-0 hx:transition hx:group-hover/code:opacity-100 hx:flex hx:gap-1 hx:absolute hx:m-[11px] hx:right-0 hx:top-0"&gt;
&lt;button
class="hextra-code-copy-btn hx:group/copybtn hx:cursor-pointer hx:transition-all hx:active:opacity-50 hx:bg-primary-700/5 hx:border hx:border-black/5 hx:text-gray-600 hx:hover:text-gray-900 hx:rounded-md hx:p-1.5 hx:dark:bg-primary-300/10 hx:dark:border-white/10 hx:dark:text-gray-400 hx:dark:hover:text-gray-50"
title="Copy code"
&gt;
&lt;div class="hextra-copy-icon hx:group-[.copied]/copybtn:hidden hx:pointer-events-none hx:h-4 hx:w-4"&gt;&lt;/div&gt;
&lt;div class="hextra-success-icon hx:hidden hx:group-[.copied]/copybtn:block hx:pointer-events-none hx:h-4 hx:w-4"&gt;&lt;/div&gt;
&lt;/button&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;ul&gt;
&lt;li&gt;Ensure the &lt;code&gt;apdex-settings.json&lt;/code&gt; file has been updated with the correct instance url, login credentials and assertion texts (which correspond to the data in your cht instance) for page navigation, forms and other app interactions.&lt;/li&gt;
&lt;li&gt;Under the skip section of the settings file, set &lt;code&gt;true&lt;/code&gt; for the tests you want to skip and &lt;code&gt;false&lt;/code&gt; for those you want to execute.&lt;/li&gt;
&lt;li&gt;Update the fields for &lt;code&gt;platformVersion&lt;/code&gt; and &lt;code&gt;deviceName&lt;/code&gt; to match the value for your device.
&lt;ul&gt;
&lt;li&gt;Find the android version (&lt;code&gt;platformVersion&lt;/code&gt;) by running &lt;code&gt;adb shell getprop | grep ro.build.version.release&lt;/code&gt;.&lt;/li&gt;
&lt;li&gt;Find the device name (&lt;code&gt;deviceName&lt;/code&gt;) by running &lt;code&gt;adb shell getprop | grep ro.product.model&lt;/code&gt;.&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;Ensure all dependencies have been properly installed - run &lt;code&gt;npm ci&lt;/code&gt; from the root directory.&lt;/li&gt;
&lt;li&gt;Run &lt;code&gt;npm run apdex-test&lt;/code&gt; from the root directory to execute the selected tests.&lt;/li&gt;
&lt;/ol&gt;
&lt;h2&gt;Settings file&lt;span class="hx:absolute hx:-mt-20" id="settings-file"&gt;&lt;/span&gt;
&lt;a href="#settings-file" class="subheading-anchor" aria-label="Permalink for this section"&gt;&lt;/a&gt;&lt;/h2&gt;&lt;p&gt;The settings file enables the navigation and interaction between pages, forms, and components by providing the required selectors, commands and assertion texts in the appropriate fields to be used during test execution.&lt;/p&gt;
&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;Property&lt;/th&gt;
&lt;th&gt;Type&lt;/th&gt;
&lt;th&gt;Description&lt;/th&gt;
&lt;th&gt;Mandatory&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;iterations&lt;/td&gt;
&lt;td&gt;Number&lt;/td&gt;
&lt;td&gt;Times to run the test cases&lt;/td&gt;
&lt;td&gt;Yes&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;instanceURL&lt;/td&gt;
&lt;td&gt;String&lt;/td&gt;
&lt;td&gt;Instance url&lt;/td&gt;
&lt;td&gt;Yes&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;hasPrivacyPolicy&lt;/td&gt;
&lt;td&gt;Boolean&lt;/td&gt;
&lt;td&gt;Whether it has privacy policies to accept&lt;/td&gt;
&lt;td&gt;Yes&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;capabilities&lt;/td&gt;
&lt;td&gt;Object[]&lt;/td&gt;
&lt;td&gt;Configures Appium to use your device for testing&lt;/td&gt;
&lt;td&gt;Yes&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;capabilities.platformVersion&lt;/td&gt;
&lt;td&gt;String&lt;/td&gt;
&lt;td&gt;Android version. E.g. &amp;ldquo;13&amp;rdquo;. Find the android version by running &lt;code&gt;adb shell getprop grep ro.build.version.release&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;Yes&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;capabilities.deviceName&lt;/td&gt;
&lt;td&gt;String&lt;/td&gt;
&lt;td&gt;Device name. E.g. &amp;ldquo;Neon Ray Ultra S&amp;rdquo;. Find the device name by running &lt;code&gt;adb shell getprop grep ro.product.model&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;Yes&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;capabilities.appPath&lt;/td&gt;
&lt;td&gt;String&lt;/td&gt;
&lt;td&gt;Path to CHT Android APK. E.g. &amp;ldquo;/Users/john/Downloads/cht-android-v1.4.0-unbranded-armeabi-v7a-release.apk&amp;rdquo;&lt;/td&gt;
&lt;td&gt;Yes&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;capabilities.noReset&lt;/td&gt;
&lt;td&gt;Boolean&lt;/td&gt;
&lt;td&gt;Default false. When set false, it deletes the app cache and storage data. If set to true, the app will start again in the last page it was before, review your configuration to take that start point.&lt;/td&gt;
&lt;td&gt;No&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;skip.login&lt;/td&gt;
&lt;td&gt;Boolean&lt;/td&gt;
&lt;td&gt;Default false. Skip login, and it&amp;rsquo;s expected that the user has already login previous running the automation tests.&lt;/td&gt;
&lt;td&gt;No&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;skip.loadContactList&lt;/td&gt;
&lt;td&gt;Boolean&lt;/td&gt;
&lt;td&gt;Default false. Skip test for loading the contact list.&lt;/td&gt;
&lt;td&gt;No&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;skip.loadChwArea&lt;/td&gt;
&lt;td&gt;Boolean&lt;/td&gt;
&lt;td&gt;Default false. Skip test for loading the CHT Area.&lt;/td&gt;
&lt;td&gt;No&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;skip.loadHousehold&lt;/td&gt;
&lt;td&gt;Boolean&lt;/td&gt;
&lt;td&gt;Default false. Skip test for loading a household.&lt;/td&gt;
&lt;td&gt;No&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;skip.loadPatient&lt;/td&gt;
&lt;td&gt;Boolean&lt;/td&gt;
&lt;td&gt;Default false. Skip test for loading a patient.&lt;/td&gt;
&lt;td&gt;No&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;skip.searchContact&lt;/td&gt;
&lt;td&gt;Boolean&lt;/td&gt;
&lt;td&gt;Default false. Skip test for searching patient.&lt;/td&gt;
&lt;td&gt;No&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;skip.loadTaskList&lt;/td&gt;
&lt;td&gt;Boolean&lt;/td&gt;
&lt;td&gt;Default false. Skip test for loading the task list.&lt;/td&gt;
&lt;td&gt;No&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;skip.submitTask&lt;/td&gt;
&lt;td&gt;Boolean&lt;/td&gt;
&lt;td&gt;Default false. Skip test for submitting a task.&lt;/td&gt;
&lt;td&gt;No&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;skip.loadTargets&lt;/td&gt;
&lt;td&gt;Boolean&lt;/td&gt;
&lt;td&gt;Default false. Skip test for loading the targets page.&lt;/td&gt;
&lt;td&gt;No&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;skip.loadReportList&lt;/td&gt;
&lt;td&gt;Boolean&lt;/td&gt;
&lt;td&gt;Default false. Skip test for loading the report list.&lt;/td&gt;
&lt;td&gt;No&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;skip.searchReport&lt;/td&gt;
&lt;td&gt;Boolean&lt;/td&gt;
&lt;td&gt;Default false. Skip test for searching a report.&lt;/td&gt;
&lt;td&gt;No&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;skip.createPatient&lt;/td&gt;
&lt;td&gt;Boolean&lt;/td&gt;
&lt;td&gt;Default false. Skip test for creating a patient.&lt;/td&gt;
&lt;td&gt;No&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;skip.submitPatientReport&lt;/td&gt;
&lt;td&gt;Boolean&lt;/td&gt;
&lt;td&gt;Default false. Skip test for submiting a report for a patient.&lt;/td&gt;
&lt;td&gt;No&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;users&lt;/td&gt;
&lt;td&gt;Object[]&lt;/td&gt;
&lt;td&gt;User to login and use for testing&lt;/td&gt;
&lt;td&gt;Yes&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;users.type&lt;/td&gt;
&lt;td&gt;String&lt;/td&gt;
&lt;td&gt;Use: &amp;ldquo;offline&amp;rdquo; or &amp;ldquo;online&amp;rdquo;&lt;/td&gt;
&lt;td&gt;Yes&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;users.role&lt;/td&gt;
&lt;td&gt;String&lt;/td&gt;
&lt;td&gt;Use: &amp;ldquo;chw&amp;rdquo;&lt;/td&gt;
&lt;td&gt;Yes&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;users.username&lt;/td&gt;
&lt;td&gt;String&lt;/td&gt;
&lt;td&gt;Username&lt;/td&gt;
&lt;td&gt;Yes&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;users.password&lt;/td&gt;
&lt;td&gt;String&lt;/td&gt;
&lt;td&gt;Password&lt;/td&gt;
&lt;td&gt;Yes&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;commonElements&lt;/td&gt;
&lt;td&gt;Object&lt;/td&gt;
&lt;td&gt;Overrides selectors of system elements&lt;/td&gt;
&lt;td&gt;No&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;commonElements.fab&lt;/td&gt;
&lt;td&gt;String&lt;/td&gt;
&lt;td&gt;XPath selector to element&lt;/td&gt;
&lt;td&gt;No&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;commonElements.fabListTitle&lt;/td&gt;
&lt;td&gt;String&lt;/td&gt;
&lt;td&gt;XPath selector to element&lt;/td&gt;
&lt;td&gt;No&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;commonElements.formSubmit&lt;/td&gt;
&lt;td&gt;String&lt;/td&gt;
&lt;td&gt;Form&amp;rsquo;s submit button label&lt;/td&gt;
&lt;td&gt;No&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;commonElements.formNext&lt;/td&gt;
&lt;td&gt;String&lt;/td&gt;
&lt;td&gt;Form&amp;rsquo;s next button label&lt;/td&gt;
&lt;td&gt;No&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;commonElements.relaunchAppAssert&lt;/td&gt;
&lt;td&gt;String&lt;/td&gt;
&lt;td&gt;XPath selector to element&lt;/td&gt;
&lt;td&gt;No&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;commonElements.searchIcon&lt;/td&gt;
&lt;td&gt;String&lt;/td&gt;
&lt;td&gt;XPath selector to element&lt;/td&gt;
&lt;td&gt;No&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;pages&lt;/td&gt;
&lt;td&gt;Object&lt;/td&gt;
&lt;td&gt;Object containing the definition of the pages that the automation tests use. See Pages section below for more details.&lt;/td&gt;
&lt;td&gt;Yes&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;pages.contactList&lt;/td&gt;
&lt;td&gt;Object&lt;/td&gt;
&lt;td&gt;Definition for Contact List page. See Pages section below for more details.&lt;/td&gt;
&lt;td&gt;Yes&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;pages.chwArea&lt;/td&gt;
&lt;td&gt;Object&lt;/td&gt;
&lt;td&gt;Definition for Contact CHW Area page. See Pages section below for more details.&lt;/td&gt;
&lt;td&gt;Yes&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;pages.household&lt;/td&gt;
&lt;td&gt;Object&lt;/td&gt;
&lt;td&gt;Definition for Contact Household page. See Pages section below for more details.&lt;/td&gt;
&lt;td&gt;Yes&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;pages.patient&lt;/td&gt;
&lt;td&gt;Object&lt;/td&gt;
&lt;td&gt;Definition for Contact Patient page. See Pages section below for more details.&lt;/td&gt;
&lt;td&gt;Yes&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;pages.messageList&lt;/td&gt;
&lt;td&gt;Object&lt;/td&gt;
&lt;td&gt;Definition for Message List page. See Pages section below for more details.&lt;/td&gt;
&lt;td&gt;Yes&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;pages.reportList&lt;/td&gt;
&lt;td&gt;Object&lt;/td&gt;
&lt;td&gt;Definition for Report List page. See Pages section below for more details.&lt;/td&gt;
&lt;td&gt;Yes&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;pages.taskList&lt;/td&gt;
&lt;td&gt;Object&lt;/td&gt;
&lt;td&gt;Definition for Task List page. See Pages section below for more details.&lt;/td&gt;
&lt;td&gt;Yes&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;pages.targets&lt;/td&gt;
&lt;td&gt;Object&lt;/td&gt;
&lt;td&gt;Definition for Targets page. See Pages section below for more details.&lt;/td&gt;
&lt;td&gt;Yes&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;forms&lt;/td&gt;
&lt;td&gt;Object&lt;/td&gt;
&lt;td&gt;Definition for app forms or contact forms that the automation tests use. See Forms section below for more details.&lt;/td&gt;
&lt;td&gt;Yes&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;forms.patientReport&lt;/td&gt;
&lt;td&gt;Object&lt;/td&gt;
&lt;td&gt;Definition for an app form that is submitted on the Patient page. See Forms section below for more details.&lt;/td&gt;
&lt;td&gt;Yes&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;forms.patientContact&lt;/td&gt;
&lt;td&gt;Object&lt;/td&gt;
&lt;td&gt;Definition for a contact form that is used to create patients. Submitted from the Household page. See Forms section below for more details.&lt;/td&gt;
&lt;td&gt;Yes&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;h4&gt;Pages&lt;span class="hx:absolute hx:-mt-20" id="pages"&gt;&lt;/span&gt;
&lt;a href="#pages" class="subheading-anchor" aria-label="Permalink for this section"&gt;&lt;/a&gt;&lt;/h4&gt;&lt;p&gt;Object containing the definition of the pages to load and assert during these automation tests.&lt;/p&gt;
&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;Property&lt;/th&gt;
&lt;th&gt;Type&lt;/th&gt;
&lt;th&gt;Description&lt;/th&gt;
&lt;th&gt;Mandatory&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;navigation&lt;/td&gt;
&lt;td&gt;Object[]&lt;/td&gt;
&lt;td&gt;Click path to navigate to that page. See Navigation section below for more details.&lt;/td&gt;
&lt;td&gt;Yes&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;search&lt;/td&gt;
&lt;td&gt;Object&lt;/td&gt;
&lt;td&gt;Contains the configuration to filter data by using the search feature from the page&lt;/td&gt;
&lt;td&gt;No&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;search.value&lt;/td&gt;
&lt;td&gt;String&lt;/td&gt;
&lt;td&gt;Search term&lt;/td&gt;
&lt;td&gt;No&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;search.asserts&lt;/td&gt;
&lt;td&gt;Object[]&lt;/td&gt;
&lt;td&gt;Elements to assert once it has finished searching in the current page. Use to make sure all elements in the page have finished rendering. See Asserts section for more details.&lt;/td&gt;
&lt;td&gt;No&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;search.postTestPath&lt;/td&gt;
&lt;td&gt;Object[]&lt;/td&gt;
&lt;td&gt;Click path to navigate after the test has finished searching and the asserts has finished.&lt;/td&gt;
&lt;td&gt;No&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;postTestPath&lt;/td&gt;
&lt;td&gt;Object[]&lt;/td&gt;
&lt;td&gt;Click path to navigate after the test has finished. E.g. clicking on the back button to go back to the main list. It uses the same Navigation structure, see the Navigation section below for more details.&lt;/td&gt;
&lt;td&gt;No&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;relaunchApp&lt;/td&gt;
&lt;td&gt;Boolean&lt;/td&gt;
&lt;td&gt;Set true, to close and open the app before navigating to this page. This can make tests slower as the app needs to load the assets and data again.&lt;/td&gt;
&lt;td&gt;No&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;h4&gt;Forms&lt;span class="hx:absolute hx:-mt-20" id="forms"&gt;&lt;/span&gt;
&lt;a href="#forms" class="subheading-anchor" aria-label="Permalink for this section"&gt;&lt;/a&gt;&lt;/h4&gt;&lt;p&gt;Object containing the definition of forms to load, fill fields and asserts outcomes.&lt;/p&gt;
&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;Property&lt;/th&gt;
&lt;th&gt;Type&lt;/th&gt;
&lt;th&gt;Description&lt;/th&gt;
&lt;th&gt;Mandatory&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;navigation&lt;/td&gt;
&lt;td&gt;Object[]&lt;/td&gt;
&lt;td&gt;Click path to navigate to that page. See Navigation section below for more details.&lt;/td&gt;
&lt;td&gt;Yes&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;useFAB&lt;/td&gt;
&lt;td&gt;Boolean&lt;/td&gt;
&lt;td&gt;Whether to click on the floating action button to open the form before proceeding with the tests.&lt;/td&gt;
&lt;td&gt;Yes&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;pages.asserts&lt;/td&gt;
&lt;td&gt;Object[]&lt;/td&gt;
&lt;td&gt;Elements to assert once it has finished navigating to the current page. Use to make sure all elements in the page have finished rendering. See Asserts section for more details.&lt;/td&gt;
&lt;td&gt;Yes&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;pages.fields&lt;/td&gt;
&lt;td&gt;Object[]&lt;/td&gt;
&lt;td&gt;Fields to fill-up. See Fields section below for more details.&lt;/td&gt;
&lt;td&gt;Yes&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;pages.scrollDown&lt;/td&gt;
&lt;td&gt;Number&lt;/td&gt;
&lt;td&gt;Times to scroll down to reach to the page buttons.&lt;/td&gt;
&lt;td&gt;No&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;pages.scrollUp&lt;/td&gt;
&lt;td&gt;Number&lt;/td&gt;
&lt;td&gt;Times to scroll up in the page.&lt;/td&gt;
&lt;td&gt;No&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;postSubmitAsserts&lt;/td&gt;
&lt;td&gt;Object[]&lt;/td&gt;
&lt;td&gt;Elements to assert once it has finished submitting the form. Use to make sure the form was submitted correctly. Same as Asserts, see Asserts section for more details.&lt;/td&gt;
&lt;td&gt;Yes&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;postTestPath&lt;/td&gt;
&lt;td&gt;Object[]&lt;/td&gt;
&lt;td&gt;Click path to navigate after the test has finished. E.g. clicking on the back button to go back to the main list. It uses the same Navigation structure, see the Navigation section below for more details.&lt;/td&gt;
&lt;td&gt;No&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;h4&gt;Fields&lt;span class="hx:absolute hx:-mt-20" id="fields"&gt;&lt;/span&gt;
&lt;a href="#fields" class="subheading-anchor" aria-label="Permalink for this section"&gt;&lt;/a&gt;&lt;/h4&gt;&lt;p&gt;Object containing the information to fill up fields.&lt;/p&gt;
&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;Property&lt;/th&gt;
&lt;th&gt;Type&lt;/th&gt;
&lt;th&gt;Description&lt;/th&gt;
&lt;th&gt;Mandatory&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;selector&lt;/td&gt;
&lt;td&gt;String&lt;/td&gt;
&lt;td&gt;XPath selector to element and clicks on it. Use it to select radio buttons or checkboxes; to activate a input text to open a keyboard; or to open a dropdown.&lt;/td&gt;
&lt;td&gt;Yes&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;keycodes&lt;/td&gt;
&lt;td&gt;Number[]&lt;/td&gt;
&lt;td&gt;Array of keycodes. Use it when you need to type in the phone&amp;rsquo;s keyboard, find the keycodes here: &lt;a href="https://developer.android.com/reference/android/view/KeyEvent"target="_blank" rel="noopener"&gt;https://developer.android.com/reference/android/view/KeyEvent&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;No&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;dropdownOption&lt;/td&gt;
&lt;td&gt;String&lt;/td&gt;
&lt;td&gt;XPath selector to a dropdown option and clicks on it.&lt;/td&gt;
&lt;td&gt;No&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;value&lt;/td&gt;
&lt;td&gt;String or Number&lt;/td&gt;
&lt;td&gt;Use this to set the value directly in the input instead of using the keyboard. Like when using &lt;code&gt;element.setValue()&lt;/code&gt;.&lt;/td&gt;
&lt;td&gt;No&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;scrollDown&lt;/td&gt;
&lt;td&gt;Number&lt;/td&gt;
&lt;td&gt;Times to scroll down to reach to the element specified in the &amp;ldquo;selector&amp;rdquo;.&lt;/td&gt;
&lt;td&gt;No&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;scrollUp&lt;/td&gt;
&lt;td&gt;Number&lt;/td&gt;
&lt;td&gt;Times to scroll up to reach to the element specified in the &amp;ldquo;selector&amp;rdquo;.&lt;/td&gt;
&lt;td&gt;No&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;id&lt;/td&gt;
&lt;td&gt;String&lt;/td&gt;
&lt;td&gt;When having too many fields, use the id to label your fields and help you understand better the settings file.&lt;/td&gt;
&lt;td&gt;No&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;h4&gt;Navigation&lt;span class="hx:absolute hx:-mt-20" id="navigation"&gt;&lt;/span&gt;
&lt;a href="#navigation" class="subheading-anchor" aria-label="Permalink for this section"&gt;&lt;/a&gt;&lt;/h4&gt;&lt;p&gt;Object containing the click path to navigate to a page.&lt;/p&gt;
&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;Property&lt;/th&gt;
&lt;th&gt;Type&lt;/th&gt;
&lt;th&gt;Description&lt;/th&gt;
&lt;th&gt;Mandatory&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;selector&lt;/td&gt;
&lt;td&gt;String&lt;/td&gt;
&lt;td&gt;XPath selector to element and clicks on it.&lt;/td&gt;
&lt;td&gt;Yes&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;asserts&lt;/td&gt;
&lt;td&gt;Object[]&lt;/td&gt;
&lt;td&gt;Elements to assert once it has finished navigating. Use to make sure all elements in the page have finished rendering. See Asserts section for more details.&lt;/td&gt;
&lt;td&gt;Yes&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;scrollDown&lt;/td&gt;
&lt;td&gt;Number&lt;/td&gt;
&lt;td&gt;Times to scroll down to reach to the element specified in the &amp;ldquo;selector&amp;rdquo;.&lt;/td&gt;
&lt;td&gt;No&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;scrollUp&lt;/td&gt;
&lt;td&gt;Number&lt;/td&gt;
&lt;td&gt;Times to scroll up to reach to the element specified in the &amp;ldquo;selector&amp;rdquo;.&lt;/td&gt;
&lt;td&gt;No&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;h4&gt;Asserts&lt;span class="hx:absolute hx:-mt-20" id="asserts"&gt;&lt;/span&gt;
&lt;a href="#asserts" class="subheading-anchor" aria-label="Permalink for this section"&gt;&lt;/a&gt;&lt;/h4&gt;&lt;p&gt;Elements to assert that are displayed in the screen.&lt;/p&gt;
&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;Property&lt;/th&gt;
&lt;th&gt;Type&lt;/th&gt;
&lt;th&gt;Description&lt;/th&gt;
&lt;th&gt;Mandatory&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;selector&lt;/td&gt;
&lt;td&gt;String&lt;/td&gt;
&lt;td&gt;XPath selector to element and clicks on it.&lt;/td&gt;
&lt;td&gt;Yes&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;scrollDown&lt;/td&gt;
&lt;td&gt;Number&lt;/td&gt;
&lt;td&gt;Times to scroll down to reach to the element specified in the &amp;ldquo;selector&amp;rdquo;.&lt;/td&gt;
&lt;td&gt;No&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;scrollUp&lt;/td&gt;
&lt;td&gt;Number&lt;/td&gt;
&lt;td&gt;Times to scroll up to reach to the element specified in the &amp;ldquo;selector&amp;rdquo;.&lt;/td&gt;
&lt;td&gt;No&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;h2&gt;Tips&lt;span class="hx:absolute hx:-mt-20" id="tips"&gt;&lt;/span&gt;
&lt;a href="#tips" class="subheading-anchor" aria-label="Permalink for this section"&gt;&lt;/a&gt;&lt;/h2&gt;&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;Take time to understand the forms you are testing:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Are fields appearing dynamically?&lt;/li&gt;
&lt;li&gt;Are there field&amp;rsquo;s labels being updated automatically and removing the previous selection?&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Assert for elements in the screen before interacting with them, to ensure they are ready.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Test how many scrolls you need by plugging the phone in the computer and run these adb commands:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Scroll down: &lt;code&gt;adb shell input swipe 500 1000 300 300&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;Scroll up: &lt;code&gt;adb shell input swipe 300 300 500 1000&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;For example, if you need to run the scroll down command 3 times, then you add 3 as the value for scrollDown like this: &lt;code&gt;&amp;quot;scrollDown&amp;quot;: 3,&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;In some cases, it&amp;rsquo;s necessary to unfocus a selected element, trigger a click in a label. For example:&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;div class="hextra-code-block hx:relative hx:mt-6 hx:first:mt-0 hx:group/code"&gt;
&lt;div&gt;&lt;div class="highlight"&gt;&lt;pre tabindex="0" class="chroma"&gt;&lt;code class="language-json" data-lang="json"&gt;&lt;span class="line"&gt;&lt;span class="cl"&gt;&lt;span class="p"&gt;{&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class="line"&gt;&lt;span class="cl"&gt; &lt;span class="nt"&gt;&amp;#34;id&amp;#34;&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="s2"&gt;&amp;#34;age_field_label&amp;#34;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class="line"&gt;&lt;span class="cl"&gt; &lt;span class="nt"&gt;&amp;#34;selector&amp;#34;&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="s2"&gt;&amp;#34;//*[contains(@text, \&amp;#34;What is your age\&amp;#34;)]&amp;#34;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class="line"&gt;&lt;span class="cl"&gt;&lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="err"&gt;,&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;&lt;div class="hextra-code-copy-btn-container hx:opacity-0 hx:transition hx:group-hover/code:opacity-100 hx:flex hx:gap-1 hx:absolute hx:m-[11px] hx:right-0 hx:top-0"&gt;
&lt;button
class="hextra-code-copy-btn hx:group/copybtn hx:cursor-pointer hx:transition-all hx:active:opacity-50 hx:bg-primary-700/5 hx:border hx:border-black/5 hx:text-gray-600 hx:hover:text-gray-900 hx:rounded-md hx:p-1.5 hx:dark:bg-primary-300/10 hx:dark:border-white/10 hx:dark:text-gray-400 hx:dark:hover:text-gray-50"
title="Copy code"
&gt;
&lt;div class="hextra-copy-icon hx:group-[.copied]/copybtn:hidden hx:pointer-events-none hx:h-4 hx:w-4"&gt;&lt;/div&gt;
&lt;div class="hextra-success-icon hx:hidden hx:group-[.copied]/copybtn:block hx:pointer-events-none hx:h-4 hx:w-4"&gt;&lt;/div&gt;
&lt;/button&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;ul&gt;
&lt;li&gt;XPATH selectors
&lt;ul&gt;
&lt;li&gt;Avoid XPATH selector with special characters like single quote, asterisks.&lt;/li&gt;
&lt;li&gt;Find an element containing a text &lt;em&gt;anywhere&lt;/em&gt; on the screen: &lt;code&gt;&amp;quot;//*[text()[contains(.,\&amp;quot;Eric Patt\&amp;quot;)]&amp;quot;&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;Use &lt;a href="https://github.com/appium/appium-inspector"target="_blank" rel="noopener"&gt;Appium Inspector&lt;/a&gt; to help you find the XPath selectors. Sometimes it produces very long selectors but you can find a way to make them shorter.
&lt;ul&gt;
&lt;li&gt;If it fails to start after setting up with capabilities, try running appium server with the &lt;code&gt;appium&lt;/code&gt; command in the terminal before starting the Appium Inspector.&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;</description></item><item><title>Developing on Windows</title><link>https://docs.communityhealthtoolkit.org/community/contributing/code/core/using-windows/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://docs.communityhealthtoolkit.org/community/contributing/code/core/using-windows/</guid><description>
&lt;p&gt;We don&amp;rsquo;t actively support development on Windows, instead preferring MacOS or Linux.&lt;/p&gt;
&lt;p&gt;However, Microsoft has recently been stabilizing their &lt;a href="https://docs.microsoft.com/en-us/windows/wsl/about"target="_blank" rel="noopener"&gt;Windows Subsystem for Linux&lt;/a&gt;, which appears to work reasonably well for development.&lt;/p&gt;
&lt;p&gt;Installation instructions are mostly the same as they written in &lt;a href="https://github.com/medic/cht-core/blob/master/README.md"target="_blank" rel="noopener"&gt;the README&lt;/a&gt; with a couple of caveats as of time of writing (2019-07-25), noted below.&lt;/p&gt;
&lt;div class="hx:overflow-x-auto hx:mt-6 hx:flex hx:flex-col hx:rounded-lg hx:border hx:py-4 hx:px-4 hx:border-gray-200 hx:contrast-more:border-current hx:contrast-more:dark:border-current hx:border-blue-200 hx:bg-blue-100 hx:text-blue-900 hx:dark:border-blue-200/30 hx:dark:bg-blue-900/30 hx:dark:text-blue-200"&gt;
&lt;p class="hx:flex hx:items-center hx:font-medium"&gt;&lt;svg height=16px class="hx:inline-block hx:align-middle hx:mr-2" xmlns="http://www.w3.org/2000/svg" fill="none" viewBox="0 0 24 24" stroke-width="2" stroke="currentColor" aria-hidden="true"&gt;&lt;path stroke-linecap="round" stroke-linejoin="round" d="M13 16h-1v-4h-1m1-4h.01M21 12a9 9 0 11-18 0 9 9 0 0118 0z"/&gt;&lt;/svg&gt;Note&lt;/p&gt;
&lt;div class="hx:w-full hx:min-w-0 hx:leading-7"&gt;
&lt;div class="hx:mt-6 hx:leading-7 hx:first:mt-0"&gt;&lt;p&gt;Both the Windows Subsystem for Linux and Medic&amp;rsquo;s support for developing in it is very much in beta. These are advanced instructions, expect some understanding of linux and may not always work. Be patient and raise bugs as you find them!&lt;/p&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;h2&gt;Installing Ubuntu in the Windows Subsystem for Linux.&lt;span class="hx:absolute hx:-mt-20" id="installing-ubuntu-in-the-windows-subsystem-for-linux"&gt;&lt;/span&gt;
&lt;a href="#installing-ubuntu-in-the-windows-subsystem-for-linux" class="subheading-anchor" aria-label="Permalink for this section"&gt;&lt;/a&gt;&lt;/h2&gt;&lt;p&gt;For the rest of this document we&amp;rsquo;re going to presume that you&amp;rsquo;re using Ubuntu (18.04) in WSL. Medic probably works on all distributions, but Ubuntu is likely the best supported.&lt;/p&gt;
&lt;p&gt;First, follow Microsoft&amp;rsquo;s &lt;a href="https://docs.microsoft.com/en-us/windows/wsl/install-win10"target="_blank" rel="noopener"&gt;instructions on enabling and installing linux&lt;/a&gt;. At the end of this process you should have a linux terminal.&lt;/p&gt;
&lt;div class="hx:overflow-x-auto hx:mt-6 hx:flex hx:flex-col hx:rounded-lg hx:border hx:py-4 hx:px-4 hx:border-gray-200 hx:contrast-more:border-current hx:contrast-more:dark:border-current hx:border-blue-200 hx:bg-blue-100 hx:text-blue-900 hx:dark:border-blue-200/30 hx:dark:bg-blue-900/30 hx:dark:text-blue-200"&gt;
&lt;p class="hx:flex hx:items-center hx:font-medium"&gt;&lt;svg height=16px class="hx:inline-block hx:align-middle hx:mr-2" xmlns="http://www.w3.org/2000/svg" fill="none" viewBox="0 0 24 24" stroke-width="2" stroke="currentColor" aria-hidden="true"&gt;&lt;path stroke-linecap="round" stroke-linejoin="round" d="M13 16h-1v-4h-1m1-4h.01M21 12a9 9 0 11-18 0 9 9 0 0118 0z"/&gt;&lt;/svg&gt;Note&lt;/p&gt;
&lt;div class="hx:w-full hx:min-w-0 hx:leading-7"&gt;
&lt;div class="hx:mt-6 hx:leading-7 hx:first:mt-0"&gt;&lt;p&gt;For the rest of this tutorial &lt;strong&gt;in linux&lt;/strong&gt; means code executing or performing actions in the WSL, while &lt;strong&gt;in Windows&lt;/strong&gt; means code executing or performing actions in Windows natively.&lt;/p&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;h2&gt;CouchDB&lt;span class="hx:absolute hx:-mt-20" id="couchdb"&gt;&lt;/span&gt;
&lt;a href="#couchdb" class="subheading-anchor" aria-label="Permalink for this section"&gt;&lt;/a&gt;&lt;/h2&gt;&lt;p&gt;As of writing CouchDB wouldn&amp;rsquo;t autostart (due to systemd not existing?), and wasn&amp;rsquo;t manually starting due to erlang errors.&lt;/p&gt;
&lt;p&gt;Luckily, there is a perfectly working CouchDB installation for Windows:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Download from &lt;a href="https://couchdb.apache.org/#download"target="_blank" rel="noopener"&gt;CouchDB&lt;/a&gt; and install the Windows version. This will create a Windows service.&lt;/li&gt;
&lt;li&gt;Run it either by directly executing &lt;code&gt;C:\CouchDB\bin\couchdb.cmd&lt;/code&gt; or by starting the service&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Then go to &lt;code&gt;http://localhost:5984/_utils/#/setup&lt;/code&gt; in Windows and do the single node setup. Once done head back to linux and confirm it works:&lt;/p&gt;
&lt;div class="hextra-code-block hx:relative hx:mt-6 hx:first:mt-0 hx:group/code"&gt;
&lt;div&gt;&lt;div class="highlight"&gt;&lt;pre tabindex="0" class="chroma"&gt;&lt;code class="language-bash" data-lang="bash"&gt;&lt;span class="line"&gt;&lt;span class="cl"&gt;$: curl http://localhost:5984/
&lt;/span&gt;&lt;/span&gt;&lt;span class="line"&gt;&lt;span class="cl"&gt;&lt;span class="o"&gt;{&lt;/span&gt;&lt;span class="s2"&gt;&amp;#34;couchdb&amp;#34;&lt;/span&gt;:&lt;span class="s2"&gt;&amp;#34;Welcome&amp;#34;&lt;/span&gt;,&lt;span class="s2"&gt;&amp;#34;version&amp;#34;&lt;/span&gt;:&lt;span class="s2"&gt;&amp;#34;2.3.1&amp;#34;&lt;/span&gt;,&lt;span class="s2"&gt;&amp;#34;git_sha&amp;#34;&lt;/span&gt;:&lt;span class="s2"&gt;&amp;#34;c298091a4&amp;#34;&lt;/span&gt;,&lt;span class="s2"&gt;&amp;#34;uuid&amp;#34;&lt;/span&gt;:&lt;span class="s2"&gt;&amp;#34;5f60350abaaa11c0131a5630e83ae979&amp;#34;&lt;/span&gt;,&lt;span class="s2"&gt;&amp;#34;features&amp;#34;&lt;/span&gt;:&lt;span class="o"&gt;[&lt;/span&gt;&lt;span class="s2"&gt;&amp;#34;pluggable-storage-engines&amp;#34;&lt;/span&gt;,&lt;span class="s2"&gt;&amp;#34;scheduler&amp;#34;&lt;/span&gt;&lt;span class="o"&gt;]&lt;/span&gt;,&lt;span class="s2"&gt;&amp;#34;vendor&amp;#34;&lt;/span&gt;:&lt;span class="o"&gt;{&lt;/span&gt;&lt;span class="s2"&gt;&amp;#34;name&amp;#34;&lt;/span&gt;:&lt;span class="s2"&gt;&amp;#34;The Apache Software Foundation&amp;#34;&lt;/span&gt;&lt;span class="o"&gt;}}&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;&lt;div class="hextra-code-copy-btn-container hx:opacity-0 hx:transition hx:group-hover/code:opacity-100 hx:flex hx:gap-1 hx:absolute hx:m-[11px] hx:right-0 hx:top-0"&gt;
&lt;button
class="hextra-code-copy-btn hx:group/copybtn hx:cursor-pointer hx:transition-all hx:active:opacity-50 hx:bg-primary-700/5 hx:border hx:border-black/5 hx:text-gray-600 hx:hover:text-gray-900 hx:rounded-md hx:p-1.5 hx:dark:bg-primary-300/10 hx:dark:border-white/10 hx:dark:text-gray-400 hx:dark:hover:text-gray-50"
title="Copy code"
&gt;
&lt;div class="hextra-copy-icon hx:group-[.copied]/copybtn:hidden hx:pointer-events-none hx:h-4 hx:w-4"&gt;&lt;/div&gt;
&lt;div class="hextra-success-icon hx:hidden hx:group-[.copied]/copybtn:block hx:pointer-events-none hx:h-4 hx:w-4"&gt;&lt;/div&gt;
&lt;/button&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;h2&gt;Installing NPM&lt;span class="hx:absolute hx:-mt-20" id="installing-npm"&gt;&lt;/span&gt;
&lt;a href="#installing-npm" class="subheading-anchor" aria-label="Permalink for this section"&gt;&lt;/a&gt;&lt;/h2&gt;&lt;p&gt;Start your WSL instance (Ubuntu), not WSL as they take you to two different default directories.&lt;/p&gt;
&lt;p&gt;The default &lt;code&gt;npm&lt;/code&gt; in linux is really old and doesn&amp;rsquo;t have &lt;code&gt;npm ci&lt;/code&gt;, which we need.&lt;/p&gt;
&lt;p&gt;Instead use &lt;a href="https://github.com/nvm-sh/nvm"target="_blank" rel="noopener"&gt;nvm&lt;/a&gt; to install &lt;code&gt;nvm install 11.3&lt;/code&gt; .&lt;/p&gt;
&lt;h2&gt;Checking out the code&lt;span class="hx:absolute hx:-mt-20" id="checking-out-the-code"&gt;&lt;/span&gt;
&lt;a href="#checking-out-the-code" class="subheading-anchor" aria-label="Permalink for this section"&gt;&lt;/a&gt;&lt;/h2&gt;&lt;p&gt;We used git that&amp;rsquo;s preinstalled with Ubuntu to check out the code.&lt;/p&gt;
&lt;p&gt;You can checkout cht code inside WSL itself. You can checkout anywhere you have write access. We&amp;rsquo;ll checkout inside /home/username/medic directory.&lt;/p&gt;
&lt;div class="hextra-code-block hx:relative hx:mt-6 hx:first:mt-0 hx:group/code"&gt;
&lt;div&gt;&lt;div class="highlight"&gt;&lt;pre tabindex="0" class="chroma"&gt;&lt;code class="language-bash" data-lang="bash"&gt;&lt;span class="line"&gt;&lt;span class="cl"&gt;$: mkdir ~/medic &lt;span class="o"&gt;&amp;amp;&amp;amp;&lt;/span&gt; &lt;span class="nb"&gt;cd&lt;/span&gt; ~/medic
&lt;/span&gt;&lt;/span&gt;&lt;span class="line"&gt;&lt;span class="cl"&gt;$: git clone https://github.com/medic/cht-core.git&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;&lt;div class="hextra-code-copy-btn-container hx:opacity-0 hx:transition hx:group-hover/code:opacity-100 hx:flex hx:gap-1 hx:absolute hx:m-[11px] hx:right-0 hx:top-0"&gt;
&lt;button
class="hextra-code-copy-btn hx:group/copybtn hx:cursor-pointer hx:transition-all hx:active:opacity-50 hx:bg-primary-700/5 hx:border hx:border-black/5 hx:text-gray-600 hx:hover:text-gray-900 hx:rounded-md hx:p-1.5 hx:dark:bg-primary-300/10 hx:dark:border-white/10 hx:dark:text-gray-400 hx:dark:hover:text-gray-50"
title="Copy code"
&gt;
&lt;div class="hextra-copy-icon hx:group-[.copied]/copybtn:hidden hx:pointer-events-none hx:h-4 hx:w-4"&gt;&lt;/div&gt;
&lt;div class="hextra-success-icon hx:hidden hx:group-[.copied]/copybtn:block hx:pointer-events-none hx:h-4 hx:w-4"&gt;&lt;/div&gt;
&lt;/button&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;h2&gt;Setup Environment Variables&lt;span class="hx:absolute hx:-mt-20" id="setup-environment-variables"&gt;&lt;/span&gt;
&lt;a href="#setup-environment-variables" class="subheading-anchor" aria-label="Permalink for this section"&gt;&lt;/a&gt;&lt;/h2&gt;&lt;p&gt;Using &lt;code&gt;.bashrc&lt;/code&gt; works as expected, and so is a good place to put exports:&lt;/p&gt;
&lt;div class="hextra-code-block hx:relative hx:mt-6 hx:first:mt-0 hx:group/code"&gt;
&lt;div&gt;&lt;div class="highlight"&gt;&lt;pre tabindex="0" class="chroma"&gt;&lt;code class="language-bash" data-lang="bash"&gt;&lt;span class="line"&gt;&lt;span class="cl"&gt;&lt;span class="c1"&gt;# Medic stuff&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class="line"&gt;&lt;span class="cl"&gt;&lt;span class="nb"&gt;export&lt;/span&gt; &lt;span class="nv"&gt;COUCH_URL&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;http://admin:pass@localhost:5984/medic
&lt;/span&gt;&lt;/span&gt;&lt;span class="line"&gt;&lt;span class="cl"&gt;&lt;span class="nb"&gt;export&lt;/span&gt; &lt;span class="nv"&gt;COUCH_NODE_NAME&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;couchdb@localhost&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;&lt;div class="hextra-code-copy-btn-container hx:opacity-0 hx:transition hx:group-hover/code:opacity-100 hx:flex hx:gap-1 hx:absolute hx:m-[11px] hx:right-0 hx:top-0"&gt;
&lt;button
class="hextra-code-copy-btn hx:group/copybtn hx:cursor-pointer hx:transition-all hx:active:opacity-50 hx:bg-primary-700/5 hx:border hx:border-black/5 hx:text-gray-600 hx:hover:text-gray-900 hx:rounded-md hx:p-1.5 hx:dark:bg-primary-300/10 hx:dark:border-white/10 hx:dark:text-gray-400 hx:dark:hover:text-gray-50"
title="Copy code"
&gt;
&lt;div class="hextra-copy-icon hx:group-[.copied]/copybtn:hidden hx:pointer-events-none hx:h-4 hx:w-4"&gt;&lt;/div&gt;
&lt;div class="hextra-success-icon hx:hidden hx:group-[.copied]/copybtn:block hx:pointer-events-none hx:h-4 hx:w-4"&gt;&lt;/div&gt;
&lt;/button&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;h2&gt;Everything else&lt;span class="hx:absolute hx:-mt-20" id="everything-else"&gt;&lt;/span&gt;
&lt;a href="#everything-else" class="subheading-anchor" aria-label="Permalink for this section"&gt;&lt;/a&gt;&lt;/h2&gt;&lt;p&gt;&lt;code&gt;npm ci&lt;/code&gt; should just work once you&amp;rsquo;ve installed a latest version of node via nvm as noted above.&lt;/p&gt;
&lt;p&gt;Also install xstproc in your WSL:&lt;/p&gt;
&lt;div class="hextra-code-block hx:relative hx:mt-6 hx:first:mt-0 hx:group/code"&gt;
&lt;div&gt;&lt;div class="highlight"&gt;&lt;pre tabindex="0" class="chroma"&gt;&lt;code class="language-bash" data-lang="bash"&gt;&lt;span class="line"&gt;&lt;span class="cl"&gt;$: sudo apt-get update
&lt;/span&gt;&lt;/span&gt;&lt;span class="line"&gt;&lt;span class="cl"&gt;$: sudo apt-get install xsltproc&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;&lt;div class="hextra-code-copy-btn-container hx:opacity-0 hx:transition hx:group-hover/code:opacity-100 hx:flex hx:gap-1 hx:absolute hx:m-[11px] hx:right-0 hx:top-0"&gt;
&lt;button
class="hextra-code-copy-btn hx:group/copybtn hx:cursor-pointer hx:transition-all hx:active:opacity-50 hx:bg-primary-700/5 hx:border hx:border-black/5 hx:text-gray-600 hx:hover:text-gray-900 hx:rounded-md hx:p-1.5 hx:dark:bg-primary-300/10 hx:dark:border-white/10 hx:dark:text-gray-400 hx:dark:hover:text-gray-50"
title="Copy code"
&gt;
&lt;div class="hextra-copy-icon hx:group-[.copied]/copybtn:hidden hx:pointer-events-none hx:h-4 hx:w-4"&gt;&lt;/div&gt;
&lt;div class="hextra-success-icon hx:hidden hx:group-[.copied]/copybtn:block hx:pointer-events-none hx:h-4 hx:w-4"&gt;&lt;/div&gt;
&lt;/button&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;p&gt;Now you can build the web app.&lt;/p&gt;
&lt;div class="hextra-code-block hx:relative hx:mt-6 hx:first:mt-0 hx:group/code"&gt;
&lt;div&gt;&lt;div class="highlight"&gt;&lt;pre tabindex="0" class="chroma"&gt;&lt;code class="language-bash" data-lang="bash"&gt;&lt;span class="line"&gt;&lt;span class="cl"&gt;$: &lt;span class="nb"&gt;cd&lt;/span&gt; ~/medic/cht-core/
&lt;/span&gt;&lt;/span&gt;&lt;span class="line"&gt;&lt;span class="cl"&gt;$: npm ci
&lt;/span&gt;&lt;/span&gt;&lt;span class="line"&gt;&lt;span class="cl"&gt;$: npm run build-dev-watch&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;&lt;div class="hextra-code-copy-btn-container hx:opacity-0 hx:transition hx:group-hover/code:opacity-100 hx:flex hx:gap-1 hx:absolute hx:m-[11px] hx:right-0 hx:top-0"&gt;
&lt;button
class="hextra-code-copy-btn hx:group/copybtn hx:cursor-pointer hx:transition-all hx:active:opacity-50 hx:bg-primary-700/5 hx:border hx:border-black/5 hx:text-gray-600 hx:hover:text-gray-900 hx:rounded-md hx:p-1.5 hx:dark:bg-primary-300/10 hx:dark:border-white/10 hx:dark:text-gray-400 hx:dark:hover:text-gray-50"
title="Copy code"
&gt;
&lt;div class="hextra-copy-icon hx:group-[.copied]/copybtn:hidden hx:pointer-events-none hx:h-4 hx:w-4"&gt;&lt;/div&gt;
&lt;div class="hextra-success-icon hx:hidden hx:group-[.copied]/copybtn:block hx:pointer-events-none hx:h-4 hx:w-4"&gt;&lt;/div&gt;
&lt;/button&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;p&gt;From this point, follow the &lt;code&gt;harden couch&lt;/code&gt; section in &lt;a href="https://docs.communityhealthtoolkit.org/community/contributing/code/core/dev-environment/#cht-core-cloning-and-setup"&gt;Core Developer Setup&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;To get multiple linux terminals (so you can run &lt;code&gt;npm run&lt;/code&gt;, &lt;code&gt;api&lt;/code&gt; and &lt;code&gt;sentinel&lt;/code&gt; at the same time) either install and use something like Tmux, or if you click &lt;code&gt;Ubuntu&lt;/code&gt; in the Windows start menu again it will open up a new terminal in the same linux instance.&lt;/p&gt;
&lt;p&gt;Once you&amp;rsquo;re done with the default instructions and have api running, check if it works by going to http://localhost:5988 in Chrome or Firefox.&lt;/p&gt;
&lt;h2&gt;Editing Code&lt;span class="hx:absolute hx:-mt-20" id="editing-code"&gt;&lt;/span&gt;
&lt;a href="#editing-code" class="subheading-anchor" aria-label="Permalink for this section"&gt;&lt;/a&gt;&lt;/h2&gt;&lt;p&gt;If you want to make changes to your code or contribute to our community health toolkit, you can do so by editing code from your favorite editor. If you editor supports UNC path, you can access and edit files inside WSL from &lt;code&gt;\\wsl$\Ubuntu\&amp;lt;cht-core-location&amp;gt;&lt;/code&gt;. If you use Visual Studio Code, it&amp;rsquo;s even easier to edit your code. Just navigate to where you have checked out cht-core and type &lt;code&gt;code .&lt;/code&gt; This will download VS Code Server for Ubuntu and open the project in Visual Studio Code in windows.&lt;/p&gt;
&lt;div class="hextra-code-block hx:relative hx:mt-6 hx:first:mt-0 hx:group/code"&gt;
&lt;div&gt;&lt;div class="highlight"&gt;&lt;pre tabindex="0" class="chroma"&gt;&lt;code class="language-bash" data-lang="bash"&gt;&lt;span class="line"&gt;&lt;span class="cl"&gt;$: &lt;span class="nb"&gt;cd&lt;/span&gt; ~/medic/cht-core
&lt;/span&gt;&lt;/span&gt;&lt;span class="line"&gt;&lt;span class="cl"&gt;$: code .&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;&lt;div class="hextra-code-copy-btn-container hx:opacity-0 hx:transition hx:group-hover/code:opacity-100 hx:flex hx:gap-1 hx:absolute hx:m-[11px] hx:right-0 hx:top-0"&gt;
&lt;button
class="hextra-code-copy-btn hx:group/copybtn hx:cursor-pointer hx:transition-all hx:active:opacity-50 hx:bg-primary-700/5 hx:border hx:border-black/5 hx:text-gray-600 hx:hover:text-gray-900 hx:rounded-md hx:p-1.5 hx:dark:bg-primary-300/10 hx:dark:border-white/10 hx:dark:text-gray-400 hx:dark:hover:text-gray-50"
title="Copy code"
&gt;
&lt;div class="hextra-copy-icon hx:group-[.copied]/copybtn:hidden hx:pointer-events-none hx:h-4 hx:w-4"&gt;&lt;/div&gt;
&lt;div class="hextra-success-icon hx:hidden hx:group-[.copied]/copybtn:block hx:pointer-events-none hx:h-4 hx:w-4"&gt;&lt;/div&gt;
&lt;/button&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;h2&gt;Default port and credentials for cht-core web&lt;span class="hx:absolute hx:-mt-20" id="default-port-and-credentials-for-cht-core-web"&gt;&lt;/span&gt;
&lt;a href="#default-port-and-credentials-for-cht-core-web" class="subheading-anchor" aria-label="Permalink for this section"&gt;&lt;/a&gt;&lt;/h2&gt;&lt;p&gt;The default launch port for cht-core is 5988, which can be changed by providing the environment variable at runtime &lt;code&gt;API_PORT&lt;/code&gt;, for example: &lt;code&gt;API_PORT=6000 node server.js&lt;/code&gt;.&lt;/p&gt;
&lt;p&gt;The deployed web app&amp;rsquo;s default user name and password is the username and password we set for CouchDB in the initial steps.&lt;/p&gt;
&lt;h2&gt;Problems?&lt;span class="hx:absolute hx:-mt-20" id="problems"&gt;&lt;/span&gt;
&lt;a href="#problems" class="subheading-anchor" aria-label="Permalink for this section"&gt;&lt;/a&gt;&lt;/h2&gt;&lt;p&gt;As none of CHT maintainers use Windows as a development environment daily this solution may not be as stable as directly using MacOS or Linux. If you encounter issues let a developer know&lt;/p&gt;</description></item><item><title>Running multiple Chrome versions</title><link>https://docs.communityhealthtoolkit.org/community/contributing/code/core/run-multiple-chrome-versions/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://docs.communityhealthtoolkit.org/community/contributing/code/core/run-multiple-chrome-versions/</guid><description>
&lt;div class="hx:overflow-x-auto hx:mt-6 hx:flex hx:rounded-lg hx:border hx:py-2 hx:ltr:pr-4 hx:rtl:pl-4 hx:contrast-more:border-current hx:contrast-more:dark:border-current hx:border-green-200 hx:bg-green-100 hx:text-green-900 hx:dark:border-green-200/30 hx:dark:bg-green-900/30 hx:dark:text-green-200"&gt;
&lt;div class="hx:ltr:pl-3 hx:ltr:pr-2 hx:rtl:pr-3 hx:rtl:pl-2"&gt;&lt;svg height=1.2em class="hx:inline-block hx:align-middle" xmlns="http://www.w3.org/2000/svg" fill="none" viewBox="0 0 24 24" stroke-width="2" stroke="currentColor" aria-hidden="true"&gt;&lt;path stroke-linecap="round" stroke-linejoin="round" d="M9.663 17h4.673M12 3v1m6.364 1.636l-.707.707M21 12h-1M4 12H3m3.343-5.657l-.707-.707m2.828 9.9a5 5 0 117.072 0l-.548.547A3.374 3.374 0 0014 18.469V19a2 2 0 11-4 0v-.531c0-.895-.356-1.754-.988-2.386l-.548-.547z"/&gt;&lt;/svg&gt;&lt;/div&gt;
&lt;div class="hx:w-full hx:min-w-0 hx:leading-7"&gt;
&lt;div class="hx:mt-6 hx:leading-7 hx:first:mt-0"&gt;These steps are suitable for Mac. They were tested in a Mac Intel. They can be adapted to any Chrome version.&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;p&gt;Follow these steps on a Mac to run Chrome version 90 while having another Chrome app on a different version.&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Download Chrome &lt;code&gt;90.0.4430.72&lt;/code&gt; from &lt;a href="https://www.slimjet.com/chrome/google-chrome-old-version.php?cmtx_sort="target="_blank" rel="noopener"&gt;slimjet&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;Do not install the &lt;code&gt;Google Chrome.app&lt;/code&gt; in your &lt;code&gt;Application&lt;/code&gt; folder. Install it in your &lt;code&gt;Desktop&lt;/code&gt; folder for example.&lt;/li&gt;
&lt;li&gt;Change the name of the app to &lt;code&gt;Google Chrome 90.app&lt;/code&gt; and then move it to the &lt;code&gt;Application&lt;/code&gt; folder, &lt;em&gt;&lt;strong&gt;without&lt;/strong&gt;&lt;/em&gt; overwriting your current Chrome&lt;/li&gt;
&lt;li&gt;Remove Chromeâ€™s automatic updates by:
&lt;ul&gt;
&lt;li&gt;Close all Chrome open instances.&lt;/li&gt;
&lt;li&gt;Open &lt;code&gt;Google Chrome 90.app&lt;/code&gt; while not having Internet, so it doesn&amp;rsquo;t give an error after modifying the &lt;code&gt;Info.plis&lt;/code&gt;.&lt;/li&gt;
&lt;li&gt;Right-click on &lt;code&gt;Application/Google Chrome 90.app&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;Click on &lt;code&gt;Show package content&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;Open the file &lt;code&gt;Contents/Info.plist&lt;/code&gt; in your IDE&lt;/li&gt;
&lt;li&gt;Find the key &lt;code&gt;KSUpdateURL&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;Replace the string below: &lt;string&gt;&lt;a href="https://tools.google.com/service/update2"target="_blank" rel="noopener"&gt;https://tools.google.com/service/update2&lt;/a&gt;&lt;/string&gt; to &lt;string&gt;&lt;a href="https://tools.google.com/[DUMMYTEXT]"target="_blank" rel="noopener"&gt;https://tools.google.com/[DUMMYTEXT]&lt;/a&gt;&lt;/string&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;Run &lt;code&gt;Google Chrome 90.app&lt;/code&gt; as long as itâ€™s the only one running&lt;/li&gt;
&lt;/ul&gt;</description></item><item><title>Feature Flags</title><link>https://docs.communityhealthtoolkit.org/community/contributing/code/core/feature-flags/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://docs.communityhealthtoolkit.org/community/contributing/code/core/feature-flags/</guid><description>
&lt;p&gt;Some CHT Core features can be enabled for specific users only. This can be particularly helpful for features that require training. The updated or &amp;ldquo;new&amp;rdquo; version will generally be the system default, but users can be configured to see the &amp;ldquo;old&amp;rdquo; version. If you do nothing when you upgrade, users will automatically start seeing the new version.&lt;/p&gt;
&lt;div class="hx:overflow-x-auto hx:mt-6 hx:flex hx:flex-col hx:rounded-lg hx:border hx:py-4 hx:px-4 hx:border-gray-200 hx:contrast-more:border-current hx:contrast-more:dark:border-current hx:border-blue-200 hx:bg-blue-100 hx:text-blue-900 hx:dark:border-blue-200/30 hx:dark:bg-blue-900/30 hx:dark:text-blue-200"&gt;
&lt;p class="hx:flex hx:items-center hx:font-medium"&gt;&lt;svg height=16px class="hx:inline-block hx:align-middle hx:mr-2" xmlns="http://www.w3.org/2000/svg" fill="none" viewBox="0 0 24 24" stroke-width="2" stroke="currentColor" aria-hidden="true"&gt;&lt;path stroke-linecap="round" stroke-linejoin="round" d="M13 16h-1v-4h-1m1-4h.01M21 12a9 9 0 11-18 0 9 9 0 0118 0z"/&gt;&lt;/svg&gt;Note&lt;/p&gt;
&lt;div class="hx:w-full hx:min-w-0 hx:leading-7"&gt;
&lt;div class="hx:mt-6 hx:leading-7 hx:first:mt-0"&gt;&lt;p&gt;Feature flags are used primarily as a way to phase in updates. The old version should be considered deprecated and will be completely removed in a future release.&lt;/p&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;h2&gt;Configuration&lt;span class="hx:absolute hx:-mt-20" id="configuration"&gt;&lt;/span&gt;
&lt;a href="#configuration" class="subheading-anchor" aria-label="Permalink for this section"&gt;&lt;/a&gt;&lt;/h2&gt;&lt;p&gt;If the specific CHT Core feature supports feature flagging, users can be configured to see the &amp;ldquo;old&amp;rdquo; version by means of a &lt;a href="https://docs.communityhealthtoolkit.org/building/reference/app-settings/user-permissions/"&gt;permission&lt;/a&gt;. The permission can be added to existing Roles, or for more granular control and rolling out by cohorts, you can create a new Role with the one permission and add that Role to desired users. The permission will not be included in &lt;code&gt;app_settings&lt;/code&gt; automatically so if you want it to be selectable from the Admin app user interface, you will need to add it to &lt;code&gt;app_settings&lt;/code&gt;.&lt;/p&gt;
&lt;h2&gt;Roll-out Scenarios&lt;span class="hx:absolute hx:-mt-20" id="roll-out-scenarios"&gt;&lt;/span&gt;
&lt;a href="#roll-out-scenarios" class="subheading-anchor" aria-label="Permalink for this section"&gt;&lt;/a&gt;&lt;/h2&gt;&lt;p&gt;The table below illustrates some potential rollout scenarios and recommended Actions.&lt;/p&gt;
&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;Scenario&lt;/th&gt;
&lt;th&gt;Actions&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;[Default] All users see the &amp;ldquo;new&amp;rdquo; version once you upgrade&lt;/td&gt;
&lt;td&gt;None, just upgrade.&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;All users see the &amp;ldquo;old&amp;rdquo; version once you upgrade. All users see the &amp;ldquo;new&amp;rdquo; version at the same time in the future.&lt;/td&gt;
&lt;td&gt;Add the permission to all Roles before you upgrade. When you are ready to transition everyone to the the new version, just remove the permission form all Roles.&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;All users see the &amp;ldquo;old&amp;rdquo; version once you upgrade. Roll out the &amp;ldquo;new&amp;rdquo; version in cohorts over time.&lt;/td&gt;
&lt;td&gt;Create a new Role with the one permission and add that role to all users. When you are ready to transition a cohort of users, remove the Role from that cohort.&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;Some cohorts see the &amp;ldquo;old&amp;rdquo; version/some see the &amp;ldquo;new&amp;rdquo; version once you upgrade. All cohorts seeing the &amp;ldquo;old&amp;rdquo; version start seeing the &amp;ldquo;new&amp;rdquo; version at the same time.&lt;/td&gt;
&lt;td&gt;Create a new Role with the one permission and add it to selected users. When you are ready to transition all cohorts to the &amp;ldquo;new&amp;rdquo; version, remove the Role from all users.&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;Some cohorts see the &amp;ldquo;old&amp;rdquo; version/some see the &amp;ldquo;new&amp;rdquo; version once you upgrade. Roll out the &amp;ldquo;new&amp;rdquo; version to applicable cohorts over time.&lt;/td&gt;
&lt;td&gt;Create a new Role with the one permission and add it to selected users. When you are ready to transition a cohort of users, remove the Role from those users.&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;</description></item><item><title>Update Collect Forms Remotely</title><link>https://docs.communityhealthtoolkit.org/community/contributing/code/core/collect-forms-update/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://docs.communityhealthtoolkit.org/community/contributing/code/core/collect-forms-update/</guid><description>
&lt;p&gt;To do over the air Medic Collect form updates via HTTP rather than sending APKs which have a long manual install process, follow the steps below:&lt;/p&gt;
&lt;div class="hextra-steps hx:ml-4 hx:mb-12 hx:ltr:border-l hx:rtl:border-r hx:border-gray-200 hx:ltr:pl-6 hx:rtl:pr-6 hx:dark:border-neutral-800 [counter-reset:step]"&gt;
&lt;h3&gt;Step 1&lt;span class="hx:absolute hx:-mt-20" id="step-1"&gt;&lt;/span&gt;
&lt;a href="#step-1" class="subheading-anchor" aria-label="Permalink for this section"&gt;&lt;/a&gt;&lt;/h3&gt;&lt;p&gt;Have your xls forms ready in the folder.&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;They should use underscore as name separators. e.g form_name.xlsx&lt;/li&gt;
&lt;li&gt;They should have &lt;code&gt;form_id&lt;/code&gt; and &lt;code&gt;name&lt;/code&gt; properties in the settings&lt;/li&gt;
&lt;/ul&gt;
&lt;figure&gt;&lt;a href="xform_name_settings.png"&gt;&lt;img src="https://docs.communityhealthtoolkit.org/community/contributing/code/core/collect-forms-update/xform_name_settings.png"
alt="Name property"&gt;&lt;/a&gt;&lt;figcaption&gt;
&lt;p&gt;Name property&lt;/p&gt;
&lt;/figcaption&gt;
&lt;/figure&gt;
&lt;h3&gt;Step 2&lt;span class="hx:absolute hx:-mt-20" id="step-2"&gt;&lt;/span&gt;
&lt;a href="#step-2" class="subheading-anchor" aria-label="Permalink for this section"&gt;&lt;/a&gt;&lt;/h3&gt;&lt;p&gt;Upload the forms to the instance using &lt;code&gt;cht-conf&lt;/code&gt; Using the &lt;code&gt;upload-collect-forms&lt;/code&gt; &lt;a href="https://github.com/medic/cht-conf/blob/master/src/cli/supported-actions.js"target="_blank" rel="noopener"&gt;action&lt;/a&gt; as shown below.&lt;/p&gt;
&lt;div class="hextra-code-block hx:relative hx:mt-6 hx:first:mt-0 hx:group/code"&gt;
&lt;div&gt;&lt;div class="highlight"&gt;&lt;pre tabindex="0" class="chroma"&gt;&lt;code class="language-shell" data-lang="shell"&gt;&lt;span class="line"&gt;&lt;span class="cl"&gt;cht --instance&lt;span class="o"&gt;=&lt;/span&gt;user:pass@instancename.app.medicmobile.org upload-collect-forms&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;&lt;div class="hextra-code-copy-btn-container hx:opacity-0 hx:transition hx:group-hover/code:opacity-100 hx:flex hx:gap-1 hx:absolute hx:m-[11px] hx:right-0 hx:top-0"&gt;
&lt;button
class="hextra-code-copy-btn hx:group/copybtn hx:cursor-pointer hx:transition-all hx:active:opacity-50 hx:bg-primary-700/5 hx:border hx:border-black/5 hx:text-gray-600 hx:hover:text-gray-900 hx:rounded-md hx:p-1.5 hx:dark:bg-primary-300/10 hx:dark:border-white/10 hx:dark:text-gray-400 hx:dark:hover:text-gray-50"
title="Copy code"
&gt;
&lt;div class="hextra-copy-icon hx:group-[.copied]/copybtn:hidden hx:pointer-events-none hx:h-4 hx:w-4"&gt;&lt;/div&gt;
&lt;div class="hextra-success-icon hx:hidden hx:group-[.copied]/copybtn:block hx:pointer-events-none hx:h-4 hx:w-4"&gt;&lt;/div&gt;
&lt;/button&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;h3&gt;Step 3&lt;span class="hx:absolute hx:-mt-20" id="step-3"&gt;&lt;/span&gt;
&lt;a href="#step-3" class="subheading-anchor" aria-label="Permalink for this section"&gt;&lt;/a&gt;&lt;/h3&gt;&lt;p&gt;Go to the Collect App. Delete All forms then go to &lt;code&gt;Get Blank Form&lt;/code&gt; and select all the forms you need.&lt;/p&gt;
&lt;/div&gt;
&lt;h1&gt;Troubleshooting&lt;/h1&gt;&lt;p&gt;When you go to &lt;code&gt;Get Blank Forms&lt;/code&gt; and instead of getting a list of the forms available, you get a pop-up error which has a portion of this message instead&lt;/p&gt;
&lt;div class="hextra-code-block hx:relative hx:mt-6 hx:first:mt-0 hx:group/code"&gt;
&lt;div&gt;&lt;div class="highlight"&gt;&lt;pre tabindex="0" class="chroma"&gt;&lt;code class="language-shell" data-lang="shell"&gt;&lt;span class="line"&gt;&lt;span class="cl"&gt;...OpenRosa Version 1.0 standard: Forms list entry &lt;span class="m"&gt;1&lt;/span&gt; is missing one or more tags: formId, name or downloadUrl&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;&lt;div class="hextra-code-copy-btn-container hx:opacity-0 hx:transition hx:group-hover/code:opacity-100 hx:flex hx:gap-1 hx:absolute hx:m-[11px] hx:right-0 hx:top-0"&gt;
&lt;button
class="hextra-code-copy-btn hx:group/copybtn hx:cursor-pointer hx:transition-all hx:active:opacity-50 hx:bg-primary-700/5 hx:border hx:border-black/5 hx:text-gray-600 hx:hover:text-gray-900 hx:rounded-md hx:p-1.5 hx:dark:bg-primary-300/10 hx:dark:border-white/10 hx:dark:text-gray-400 hx:dark:hover:text-gray-50"
title="Copy code"
&gt;
&lt;div class="hextra-copy-icon hx:group-[.copied]/copybtn:hidden hx:pointer-events-none hx:h-4 hx:w-4"&gt;&lt;/div&gt;
&lt;div class="hextra-success-icon hx:hidden hx:group-[.copied]/copybtn:block hx:pointer-events-none hx:h-4 hx:w-4"&gt;&lt;/div&gt;
&lt;/button&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;p&gt;This means you probably uploaded a XLS file without a &lt;code&gt;name&lt;/code&gt; or &lt;code&gt;form_id&lt;/code&gt; property. To find out which form is missing that, use this command:&lt;/p&gt;
&lt;div class="hextra-code-block hx:relative hx:mt-6 hx:first:mt-0 hx:group/code"&gt;
&lt;div&gt;&lt;div class="highlight"&gt;&lt;pre tabindex="0" class="chroma"&gt;&lt;code class="language-shell" data-lang="shell"&gt;&lt;span class="line"&gt;&lt;span class="cl"&gt;curl -vvvv -H &lt;span class="s2"&gt;&amp;#34;x-openrosa-version: 1&amp;#34;&lt;/span&gt; http://user:pass@host:port/api/v1/forms&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;&lt;div class="hextra-code-copy-btn-container hx:opacity-0 hx:transition hx:group-hover/code:opacity-100 hx:flex hx:gap-1 hx:absolute hx:m-[11px] hx:right-0 hx:top-0"&gt;
&lt;button
class="hextra-code-copy-btn hx:group/copybtn hx:cursor-pointer hx:transition-all hx:active:opacity-50 hx:bg-primary-700/5 hx:border hx:border-black/5 hx:text-gray-600 hx:hover:text-gray-900 hx:rounded-md hx:p-1.5 hx:dark:bg-primary-300/10 hx:dark:border-white/10 hx:dark:text-gray-400 hx:dark:hover:text-gray-50"
title="Copy code"
&gt;
&lt;div class="hextra-copy-icon hx:group-[.copied]/copybtn:hidden hx:pointer-events-none hx:h-4 hx:w-4"&gt;&lt;/div&gt;
&lt;div class="hextra-success-icon hx:hidden hx:group-[.copied]/copybtn:block hx:pointer-events-none hx:h-4 hx:w-4"&gt;&lt;/div&gt;
&lt;/button&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;p&gt;Should bring a list like this one:&lt;/p&gt;
&lt;figure&gt;&lt;a href="xform_list.png"&gt;&lt;img src="https://docs.communityhealthtoolkit.org/community/contributing/code/core/collect-forms-update/xform_list.png"
alt="Xform List"&gt;&lt;/a&gt;&lt;figcaption&gt;
&lt;p&gt;Xform List&lt;/p&gt;
&lt;/figcaption&gt;
&lt;/figure&gt;
&lt;p&gt;Go through the list and see which form has a missing &lt;code&gt;&amp;lt;name&amp;gt;&lt;/code&gt; or &lt;code&gt;&amp;lt;formID&amp;gt;&lt;/code&gt; property. Add it and reupload the forms using &lt;code&gt;cht-conf&lt;/code&gt; again.&lt;/p&gt;</description></item><item><title>Securely Sharing Your Development Environment</title><link>https://docs.communityhealthtoolkit.org/community/contributing/code/core/secure-sharing-of-developer-instance/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://docs.communityhealthtoolkit.org/community/contributing/code/core/secure-sharing-of-developer-instance/</guid><description>
&lt;div class="hx:overflow-x-auto hx:mt-6 hx:flex hx:flex-col hx:rounded-lg hx:border hx:py-4 hx:px-4 hx:border-gray-200 hx:contrast-more:border-current hx:contrast-more:dark:border-current hx:border-red-200 hx:bg-red-100 hx:text-red-900 hx:dark:border-red-200/30 hx:dark:bg-red-900/30 hx:dark:text-red-200"&gt;
&lt;p class="hx:flex hx:items-center hx:font-medium"&gt;&lt;svg height=16px class="hx:inline-block hx:align-middle hx:mr-2" xmlns="http://www.w3.org/2000/svg" fill="none" viewBox="0 0 24 24" stroke-width="2" stroke="currentColor" aria-hidden="true"&gt;&lt;path stroke-linecap="round" stroke-linejoin="round" d="M12 8v4m0 4h.01M21 12a9 9 0 11-18 0 9 9 0 0118 0z"/&gt;&lt;/svg&gt;Caution&lt;/p&gt;
&lt;div class="hx:w-full hx:min-w-0 hx:leading-7"&gt;
&lt;div class="hx:mt-6 hx:leading-7 hx:first:mt-0"&gt;&lt;p&gt;Be extra careful with this process! The end result will be that your development instance will be accessible to the internet. If you have simple logins and passwords like &amp;ldquo;admin/test.223&amp;rdquo; because you thought it was just your local dev instance and it doesn&amp;rsquo;t matter, now it matters! Whenever you&amp;rsquo;re not using the SSH tunnel for testing, shut it down so there&amp;rsquo;s no more remote access.&lt;/p&gt;
&lt;p&gt;Never expose a development instance to the internet where you&amp;rsquo;ve replicated production data locally. Well, maybe not never, but with extreme care and intention.&lt;/p&gt;
&lt;p&gt;Also not - if you only want to test with mobile devices that require a valid TLS certificate, do not use method. Instead, use &lt;a href="https://docs.communityhealthtoolkit.org/community/contributing/code/core/dev-environment/#nginx-local-ip"&gt;nginx-local-ip&lt;/a&gt;&lt;/p&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;h2&gt;Overview&lt;span class="hx:absolute hx:-mt-20" id="overview"&gt;&lt;/span&gt;
&lt;a href="#overview" class="subheading-anchor" aria-label="Permalink for this section"&gt;&lt;/a&gt;&lt;/h2&gt;&lt;p&gt;When using a local &lt;a href="https://docs.communityhealthtoolkit.org/community/contributing/code/core/dev-environment/"&gt;development environment&lt;/a&gt;, you may want to share your work with other collaborators. By using a publicly accessible web server, you can receive the secure https requests and forward them back to your CHT instance which doesn&amp;rsquo;t have https set up:&lt;/p&gt;
&lt;figure&gt;&lt;img src="https://docs.communityhealthtoolkit.org/community/contributing/code/troubleshooting/obtaining-logs/SSH-tunnel-diagram.svg"
alt="Path data flows from mobile device -&amp;gt; reverse proxy -&amp;gt; router -&amp;gt; developer"&gt;&lt;figcaption&gt;
&lt;p&gt;Path data flows from mobile device -&amp;gt; reverse proxy -&amp;gt; router -&amp;gt; developer&lt;/p&gt;
&lt;/figcaption&gt;
&lt;/figure&gt;
&lt;p&gt;Once you have this web server set up, you may continue to use it whenever you want by simply reconnecting to it via the secure tunnel.&lt;/p&gt;
&lt;h2&gt;Prerequisites&lt;span class="hx:absolute hx:-mt-20" id="prerequisites"&gt;&lt;/span&gt;
&lt;a href="#prerequisites" class="subheading-anchor" aria-label="Permalink for this section"&gt;&lt;/a&gt;&lt;/h2&gt;&lt;p&gt;This guide assumes:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;You have a local &lt;a href="https://docs.communityhealthtoolkit.org/community/contributing/code/core/dev-environment/"&gt;dev instance&lt;/a&gt; set up of cht-core&lt;/li&gt;
&lt;li&gt;You have the &lt;a href="https://play.google.com/store/apps/details?id=org.medicmobile.webapp.mobile&amp;amp;hl=en_US"target="_blank" rel="noopener"&gt;generic Medic app&lt;/a&gt; installed on your Android device. This version allows you to enter a custom CHT URL on first run.&lt;/li&gt;
&lt;li&gt;You have an Ubuntu &amp;gt;18.04 server with a public IP and a DNS entry that you can SSH into and have sudo on&lt;/li&gt;
&lt;li&gt;You have Apache &amp;gt;2.4.29 installed on the Ubuntu server and can add a new vhost to it, including an SSL cert. (nginx could be used instead as well, but not covered here)&lt;/li&gt;
&lt;li&gt;You have certbot installed from letsencrypt.org&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;The steps in this guide can be done on any of the cheap server providers out there (&lt;a href="https://digitalocean.com"target="_blank" rel="noopener"&gt;Digital Ocean&lt;/a&gt; has a $5/mo server).&lt;/p&gt;
&lt;h2&gt;Steps&lt;span class="hx:absolute hx:-mt-20" id="steps"&gt;&lt;/span&gt;
&lt;a href="#steps" class="subheading-anchor" aria-label="Permalink for this section"&gt;&lt;/a&gt;&lt;/h2&gt;&lt;ol&gt;
&lt;li&gt;
&lt;p&gt;Create a DNS entry. Let&amp;rsquo;s assume it&amp;rsquo;s &lt;code&gt;cht.domain.com&lt;/code&gt;. It should point to the IP of your Ubuntu server. If you do not already have a domain name with DNS services that you can use, you can sign up for a free service to do this like &lt;a href="https://www.noip.com/remote-access"target="_blank" rel="noopener"&gt;noip.com&lt;/a&gt;.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;On your Ubuntu server, create a new apache vhost in &lt;code&gt;/etc/apache2/sites-available/100-cht.domain.com.conf&lt;/code&gt; with the following contents:&lt;/p&gt;
&lt;div class="hextra-code-block hx:relative hx:mt-6 hx:first:mt-0 hx:group/code"&gt;
&lt;div&gt;&lt;pre&gt;&lt;code&gt;&amp;lt;VirtualHost *:80&amp;gt;
ServerName cht.domain.com
RewriteEngine on
RewriteRule (.*) https://cht.domain.com%{REQUEST_URI}
&amp;lt;/VirtualHost&amp;gt;
&amp;lt;IfModule mod_ssl.c&amp;gt;
&amp;lt;VirtualHost *:443&amp;gt;
ServerName cht.domain.com
SSLEngine On
&amp;lt;IfModule mod_headers.c&amp;gt;
Header always set Strict-Transport-Security &amp;#34;max-age=63072000; preload&amp;#34;
&amp;lt;/IfModule&amp;gt;
RewriteEngine on
Include /etc/letsencrypt/options-ssl-apache.conf
SSLCertificateFile /etc/ssl/certs/ssl-cert-snakeoil.pem
SSLCertificateKeyFile /etc/ssl/private/ssl-cert-snakeoil.key
ProxyPass / http://localhost:8081/
ProxyPassReverse / http://localhost:8081/
RequestHeader set X-Forwarded-Proto &amp;#34;https&amp;#34;
&amp;lt;/VirtualHost&amp;gt;
&amp;lt;/IfModule&amp;gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;div class="hextra-code-copy-btn-container hx:opacity-0 hx:transition hx:group-hover/code:opacity-100 hx:flex hx:gap-1 hx:absolute hx:m-[11px] hx:right-0 hx:top-0"&gt;
&lt;button
class="hextra-code-copy-btn hx:group/copybtn hx:cursor-pointer hx:transition-all hx:active:opacity-50 hx:bg-primary-700/5 hx:border hx:border-black/5 hx:text-gray-600 hx:hover:text-gray-900 hx:rounded-md hx:p-1.5 hx:dark:bg-primary-300/10 hx:dark:border-white/10 hx:dark:text-gray-400 hx:dark:hover:text-gray-50"
title="Copy code"
&gt;
&lt;div class="hextra-copy-icon hx:group-[.copied]/copybtn:hidden hx:pointer-events-none hx:h-4 hx:w-4"&gt;&lt;/div&gt;
&lt;div class="hextra-success-icon hx:hidden hx:group-[.copied]/copybtn:block hx:pointer-events-none hx:h-4 hx:w-4"&gt;&lt;/div&gt;
&lt;/button&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Enable the new site: &lt;code&gt;a2ensite 100-cht.domain.com&lt;/code&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Restart apache and ensure there&amp;rsquo;s no errors: &lt;code&gt;apachectl restart&lt;/code&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Create the TLS certificate: &lt;code&gt;certbot -d cht.domain.com&lt;/code&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;When prompted choose no redirect: &amp;ldquo;No redirect - Make no further changes to the webserver configuration.&amp;rdquo;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Restart apache and ensure there&amp;rsquo;s no errors: &lt;code&gt;apachectl restart&lt;/code&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;In a browser, test that you can connect to your server with no errors at &lt;a href="https://cht.domain.com"target="_blank" rel="noopener"&gt;https://cht.domain.com&lt;/a&gt; (you may get a &lt;code&gt;500&lt;/code&gt; error, but you shouldn&amp;rsquo;t get any TLS errors)&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Ensure your cht-core local dev instance is running by going to http://localhost:5988/&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;On your local dev box, set up the SSH tunnel with: &lt;code&gt;ssh -NT -R 8081:127.0.0.1:5988 cht.domain.com&lt;/code&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;This assumes your local username is the same as it is on cht.domain.com. This command will hang and you may exit when down with &lt;code&gt;ctrl + c&lt;/code&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;In a browser, test again that you now see your local dev instance and it loads correctly at &lt;a href="https://cht.domain.com"target="_blank" rel="noopener"&gt;https://cht.domain.com&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;If needed, reset the Medic app on your phone so that it prompts which instance to use&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;In the app on your phone, choose &amp;ldquo;custom&amp;rdquo; for which instance to use and enter &lt;a href="https://cht.domain.com"target="_blank" rel="noopener"&gt;https://cht.domain.com&lt;/a&gt;. You should now see your local dev instance in the CHT Android device. Happy testing!&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;h2&gt;Tunnel command breakdown&lt;span class="hx:absolute hx:-mt-20" id="tunnel-command-breakdown"&gt;&lt;/span&gt;
&lt;a href="#tunnel-command-breakdown" class="subheading-anchor" aria-label="Permalink for this section"&gt;&lt;/a&gt;&lt;/h2&gt;&lt;p&gt;From the SSH command in step 10 above:&lt;/p&gt;
&lt;figure&gt;&lt;img src="https://docs.communityhealthtoolkit.org/community/contributing/code/troubleshooting/obtaining-logs/ssh-ports.svg"
alt="Explanation of ports and IPs from SSH"&gt;&lt;figcaption&gt;
&lt;p&gt;Explanation of ports and IPs from SSH&lt;/p&gt;
&lt;/figcaption&gt;
&lt;/figure&gt;
&lt;ol&gt;
&lt;li&gt;&lt;code&gt;8081&lt;/code&gt; - Remote port on cht.domain.com to listen to. This is the same port that apache redirects to in step 2 above.&lt;/li&gt;
&lt;li&gt;&lt;code&gt;127.0.0.1&lt;/code&gt; - Host to send forwarded traffic to. In this case, your local machine.&lt;/li&gt;
&lt;li&gt;&lt;code&gt;5988&lt;/code&gt; - Local port where traffic from step one will be sent. In this case, your instance of the CHT&lt;/li&gt;
&lt;li&gt;&lt;code&gt;cht.domain.com&lt;/code&gt; - Public domain where you have an SSH account and we&amp;rsquo;ll attach port &lt;code&gt;8081&lt;/code&gt; to from step 1.&lt;/li&gt;
&lt;/ol&gt;</description></item></channel></rss>