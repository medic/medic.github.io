{"/building/":{"data":{"":"This section provides an introduction to CHT Applications, provides some sample CHT Applications, and provides guides and reference materials for those wanting to build a CHT Application or deploy an existing one.\nCommunity Health Toolkit (CHT) Applications are digital health tools built using the CHT Core Framework. The Core Framework provides a foundation on which custom CHT Applications are built. Since all CHT Applications share the same foundation, they also share capabilities and attributes. For example, all CHT Applications share a similar user-interface and share the same look-and-feel. All CHT Applications can be built to scale, can run across a variety of devices, support Offline-First experiences, and support most languages. These baseline capabilities are foundational across all CHT Applications. Read more about this in Why the CHT?.\nTo create a digital health tool using the Community Health Toolkit, you’ll need to build a CHT Application or re-use an existing CHT Application.\nCHT Applications have been built to support a range of health interventions including antenatal care, postnatal care, family planning, integrated community case management of childhood illness, malnutrition, immunization, and epidemic response. CHT Applications have been built to support users at all levels of the community health system including patients, CHWs, CHW supervisors, nurses, health facility staff, program staff, researchers, and policy makers.\nBeyond the community-level, data from CHT Applications can integrate and/or interoperate with the broader health system through integrations with software such as OpenMRS, DHIS2, and RapidPro.\nPrerequisitesTools and skills needed for developing CHT Applications Getting StartedSet up a local environment to build and test CHT applications CHT ImplementationsConsiderations for digital health implementations"},"title":"Build"},"/building/admin/":{"data":{"":"Content in this section Overview App Management Details"},"title":"App Management"},"/building/admin/admin-overview/":{"data":{"":"App Management is an interface for non-technical administrative users. With it, you can manage users and make minor changes to the app, such as setting the SMS gateway phone number and changing the default language for the app.\nThe App Management pages are a desktop-only interface meant for users with a reliable internet connection."},"title":"Overview"},"/building/admin/details/":{"data":{"":"","admin-console-vs-command-line-tools#Admin Console vs Command Line Tools":"In general, everything that can be done in the Admin Console can also be done in command line tools, but not everything in the command line tools can be done in the Admin Console.\nThe Admin Console does not track changes. For most app development, using command line tools such as cht-conf and tracking files using a version control system is recommended\nIn Admin Console But Not Command Line Tools:\nUser management Upgrades In Command Line Tools But Not Admin Console:\nMost of the JSON settings XLS → Xform conversion","available-features#Available Features":"These sections of the App can be configured from within the Admin Console:\nSettings: Change basic settings like gateway phone number \u0026 country code Languages: Set default app language, update translations Forms: Upload XML and JSON forms Import \u0026 Export: Import and export settings Upgrade Instance: Install a newer app version Users: View and edit users of the system Icons: View and edit icons used in the app Targets: Modify performance or activity targets Roles \u0026 Permissions: Fine tuned control of user roles and permissions"},"title":"Details"},"/building/branding/":{"data":{"":"Content in this section Configuring CHT Application Graphics Publishing resources/ Building CHT Android Flavors"},"title":"Branding"},"/building/branding/android/":{"data":{"":"This tutorial will take you through building a CHT Android Application off the existing wrapper.\nThe CHT Android application is a thin wrapper to load the CHT Core Framework web application in a WebView.\nYou will be adding a new android flavor based off the CHT Android.","1-required-resources#1. Required Resources":"To proceed you need to have ready the following:\nThe URL of your CHT server so users don’t have to type it in post install. The app logo and title. Translations for your supported languages (most flavors don’t need to customize translations though). Also be sure to have a working Development Environment.\nWhile you should use your own branding, the CHT logo is available to use if so desired.","2-new-brand#2. New Brand":"Each branded app has an identifier (id) that is used to identify and configure it in different parts of the source code and when invoking some commands. In the instructions below we will use as example the id new_brand.\nCheck out the tag from the last stable release in CHT Android repository and create a branch, for example, if the latest stable release is v0.11.0 and the branch name is v0.11.0-new-brand, then the command is:\ngit checkout v0.11.0 -b v0.11.0-new-brand Add productFlavors { { ... } } in build.gradle, e.g.:\nnew_brand { dimension = 'brand' applicationId = 'org.medicmobile.webapp.mobile.new_brand' } Add icons, strings etc. in the src/ folder. It’s required to place there at least the src/new_brand/res/values/strings.xml file with the name of the app and the URL of the CHT instance:\n\u003c?xml version=\"1.0\" encoding=\"utf-8\"?\u003e","3-generate-a-new-keystore#3. Generate a new keystore":"Each branded app created needs its own keystore to sign the binaries for releasing.\nSince the .aab files generated here are signed with the same key you generated, the files and key can be uploaded to the Play Store later and any file generated locally following the steps above will be compatible with any installation made from the Play Store.\nThe keystore files are placed into a compressed and encrypted file in the secrets/ folder. In our case the file will be secrets/secrets-new_brand.tar.gz.enc, and the content inside when the file is decrypted is:\nnew_brand.keystore: the Java keystore with a signature key inside that is always called medicmobile. It’s used to sign the APKs and the bundles, and the one that Google will use to sign the optimized APKs that generates in the Play Store. new_brand_private_key.pepk: a PEPK file is an encrypted file that contains inside the medicmobile key from the keystore above, ready to be uploaded to the Play Store the first time the app is registered in the Play Console. The file is only used there, but kept in the compressed file as a backup. Don’t worry to follow all the name conventions and how to generate these files, you can create all them in one step: the new keystore, the passwords and the PEPK file with make org=new_brand keygen.\nExecuting the command will check that you have the necessary tooling installed, and ask you the information about the certificate like the organization name, organization unit, etc. The command also takes care of picking random passwords that meet the security requirements, and then compresses the key files and finally encrypt the .tar.gz file into the .enc file. At the end of the execution, the script will also show the list of environment variables that you have to setup in CI (Github Actions) and locally in order to sign the apps with the new keystore. Below is an example of executing it to create the keystore for our “new_brand”:\nmake org=new_brand keygen Verifying the following executables are in the $PATH: java keytool openssl ... keytool -genkey -storepass dd8668... -v -keystore new_brand.keystore -alias medicmobile -keyalg RSA -keysize 2048 -validity 9125 What is your first and last name? [Unknown]: What is the name of your organizational unit? [Unknown]: New Brand What is the name of your organization? [Unknown]: Medic What is the name of your City or Locality? [Unknown]: San Fran... ... Is CN=Unknown, OU=New Brand, O=Medic, L=San Francisco, ST=CA, C=US correct? [no]: y Generating 2,048 bit RSA key pair and self-signed certificate (SHA256withRSA) with a validity of 9,125 days for: CN=Unknown, OU=New Brand, O=Medic, L=San Francisco, ST=CA, C=US [Storing new_brand.keystore] ... ... ####################################### Secrets! ####################################### # # # The following environment variables needs to be added to the CI environment # # (Github Actions), and to your local environment if you also want # # to sign APK or AAB files locally: # # # export ANDROID_KEYSTORE_PASSWORD_NEW_BRAND=dd8668... export ANDROID_KEY_PASSWORD_NEW_BRAND=dd8668... export ANDROID_SECRETS_IV_NEW_BRAND=88d9c2dea7a9... export ANDROID_SECRETS_KEY_NEW_BRAND=2824d02d2bc221f5844b8fe1d928211dcbbc... # # The file secrets/secrets-new_brand.tar.gz.enc was created and has to be added to the git # repository (don't worry, it's encrypted with some of the keys above). # # NOTE: *keep the environment variables secret !!* # # # ########################################### End of Secrets ################################### The Secrets! section at the end is as important as the secrets/secrets-new_brand.tar.gz.enc file generated, because as it says above, it needs to be configured in CI.\nUse a safe channel to send the environment variables to the manager in charge, like a password manager, and keep them locally at least for testing, storing in a script file that is safe in your computer.\nAbout the file secrets/secrets-new_brand.tar.gz.enc, as the last paragraph in the console says: has to be added to the git repository (don’t worry, it’s encrypted with some of the keys above).\nIf you want to start over because some of the parameters were wrong, just execute make org=new_brand keyrm-all to clean all the files generated. Once committed the .enc file, you can delete the uncompressed and unencrypted version with make org=new_brand keyrm, it will delete the new_brand.keystore, new_brand_private_key.pepk, and the unencrypted .tar.gz files, that are safer kept in the .tar.gz.enc file.\nIf you encounter issues with the make org=new_brand keygen command repeatedly looping through questions, we recommend changing your OS language to English.","4-test-the-keystore-locally#4. Test the keystore locally":"Want to check the keystore? here are a few things you must test before upload to the repository:\nTo decrypt the content like CI does to sign the app, execute: make org=new_brand keydec, it will decrypt and decompress the files removed in the step above. Remember that the environment variables printed in the console needs to be loaded in the CLI. Note that all the variables above end with the suffix _NEW_BRAND, as the id of the app that we pass through the org argument in lowercase, but if Make found the same variables defined without the prefix, they take precedence over the suffix ones.\nExecute make org=new_brand keyprint to see the certificate content, like the org name, the certificate fingerprints, etc.\nSign your app! You can try locally to build the app with the certificate. To create the .apk files run: make org=new_brand flavor=New_brand assemble. The “release” files signed should be placed in build/outputs/apk/new_brand/release/. To ensure the files were signed with the right signature execute make keyprint-apk, it will check the certificate of the first apk file under the build/ folder:\nmake keyprint-apk apksigner verify -v --print-certs build/outputs/apk/new_brand/release/cht-android-SNAPSHOT-new_brand-arm64-v8a-release.apk ... ... Verified using v2 scheme (APK Signature Scheme v2): true ... ... Signer #1 certificate DN: CN=Unknown, OU=New Brand, O=Medic Mobile, L=San Francisco, ST=CA, C=US Signer #1 certificate SHA-256 digest: 7f072b... Also, do the same for the bundle format: build and verify, despite the AAB are not useful for local development. In our example, execute first make org=new_brand flavor=New_brand bundle, and then make keyprint-bundle to see the signature of one of the .aab files generated.\nBecause the files generated here are signed with the same key that you are going to use in CI, and the files produced in CI will be uploaded to the Play Store later, any file generated locally following the steps above will be compatible with any installation made from the Play Store, means that if a user install the app from the Play Store, and then we want to replace the installation with an alpha version generated in CI or a local version generated in dev environment, it will work without requiring the user to uninstall the app and lost the data.","5-release-the-new-flavor#5. Release the new flavor":"Releasing a new flavor requires the following steps:\nMake a pull request to the release branch in the CHT Android repository. Once approved it’s recommended to create an alpha version to do final tests. Merge the pull request. Release the flavor.","6-publish-the-app#6. Publish the app":"The last step is to publish it in the Play Store, or whatever option best suit your needs. Checkout the Publishing page to see all the options available and instructions.","add-a-new-brand#Add a new Brand":"Adding a new “brand” or “flavor” requires the following steps:\nCheck you meet the Required Resources.\nAdd the New Brand in the source code.\nGenerate a new keystore if there is no one.\nTest locally and create a pull request with the changes.\nRelease the new flavor.\nPublish in the Play Store or whatever channel.\nBelow are more instructions for each step.","android-app-links-verification#Android App Links verification":"Supported for CHT Core 4.7.0+ and CHT Android 1.3.0+\nStarting with Android 12, Android supports associating an app with a domain and automatically verifying this association. This allows deep links to immediately open content in the app. To get this working, you need to host a Digital Asset Links JSON file at https:///.well-known/assetlinks.json containing some information about your app to associate it with your domain. More information is available on the official Android docs.","brief-overview-of-key-concepts#Brief Overview of Key Concepts":"The CHT Android is a native Android container for the Community Health Toolkit (CHT). The repository contains “flavored” configurations, where each “flavor” or “brand” is an app. All apps share the same code and features, but can be customized, hard-coding a specific CHT deployment and have a partner specific logo and display name.","hosting-assetlinksjson-with-the-cht#Hosting \u003ccode\u003eassetlinks.json\u003c/code\u003e with the CHT":"Since CHT Core version 4.7.0, the CHT supports serving assetlinks.json by adding it to your app settings. All you have to do to make the CHT serve your assetlinks at /.well-known/assetlinks.json is to:\nEnsure your flavor of cht-android has a valid keystore. Use the keytool utility (included with your Java SDK) to get your app’s cert fingerprint: keytool -list -v -keystore ./path/to/release-key.keystore # or alternatively: keytool -printcert -jarfile ./path/to/project.apk Set the cert fingerprint in the assetlinks configuration for your CHT instance and deploy it to your server with cht-conf.","manually-testing-on-the-device#Manually testing on the device":"Another way of verifying your Android app has been properly associated to your CHT instance’s domain is by opening the Android app on a device. You can run this test on a real device or with the emulator in Android Studio.\nOpening the app for the first time should take you straight to the login page without prompting you to link a domain to the app as shown in the following screenshot:\nAdditionally, clicking a link to your CHT instance should open the app immediately instead of opening the CHT instance in the default browser.","note-for-apps-using-google-play-signing#Note for Apps Using Google Play Signing":"For apps signed by Google Play, you need to use the SHA256 fingerprint provided in the Google Play Console to ensure successful domain verification.","play-store-assets#Play Store assets":"If you are going to publish the app in the Play Store, Google will require to provide the following to list the app:\nA description of the app. A shorter description (80 characters). Logo 512x512px, typically a version of the partner logo e.g. square design icons. A background image. Screenshots. Google is constantly changing the requirements to publish in the Play Store, it’s a good practice to check in advance whether all the requirements are met (checkout Add preview assets…).","steps-to-retrieve-sha256-fingerprint-from-google-play#Steps to Retrieve SHA256 Fingerprint from Google Play":"Log in to Google Play Console. Navigate to your app: Select your app from the list of published applications. Setup \u003e App signing: In the left-hand menu, under the Setup Menu, there is App Signing. Find SHA256 fingerprint: Google Play will display the SHA256 fingerprint required for your app. Update assetlinks.json: Use this SHA256 fingerprint in your assetlinks.json file. (Google Play also provides the full JSON) Once added and pushed to the server, the deep link can be monitored from the console as well, under the Deep Links in the left-hand menu where the Play Console allows you to check the deep link settings and also provides hints to fix any errors (providing the right SHA256 fingerprint to add).","test-data#Test data":"When publishing for the first time in the Play Store, a reviewer from Google will try to check whether the permission requested by the app follows the Play Store rules. The CHT Android app has enabled by default location request permissions, and the workflow to request the permission follows the strict rules imposed by Google, but they won’t be aware that your flavored app is based on the CHT Android, so you have to provide Google with instructions of how to test the app, specifically how to test the location request.\nTo do so, give them instructions of how to login with the app (with a real username and password), and the basic steps to reach the location request, like open up a form.\nOnce approved you can delete the “test” user, Google conduct the tests only the first time, or when a new permission request is added to the app.","use-case---a-single-android-app-for-many-cht-instances#Use case - a single Android app for many CHT instances":"For specific large deployment scenarios, you might publish a single Android app to serve multiple CHT instances. In this case, each CHT instance’s app settings will need to be configured with the same assetlinks.json because they share the same Android app and hence the same package_name and sha256_cert_fingerprints properties.\nWhen building your Android app, you will need to ensure the app’s manifest has with each CHT instance’s domain listed in it like so:\n\u003c?xml version=\"1.0\" encoding=\"utf-8\"?\u003e","using-android-debug-bridge-adb#Using Android Debug Bridge \u003ccode\u003eadb\u003c/code\u003e":"To install the adb command, follow the instructions under the Development Environment \u003e Debug tool adb section. With the phone connected to your computer, open a command line session and write the following command: adb shell pm get-app-links where is your application ID. The output of this command should look like this:\n: ID: 01234567-89ab-cdef-0123-456789abcdef Signatures: [\"62:BF:C1:78:24:D8:4D:5C:B4:E1:8B:66:98:EA:14:16:57:6F:A4:E5:96:CD:93:81:B2:65:19:71:A7:80:EA:4D\"] Domain verification state: mobile.webapp.medicmobile.org: verified The domain verification state for your CHT instance’s domain should show verified.","verifying-it-works#Verifying it works":"There are different ways to verify your setup works and we’ll go through a few of them in the next steps."},"title":"CHT Android Flavors"},"/building/branding/application-graphics/":{"data":{"":"This tutorial will take you through customising some graphical elements of CHT core.\nYou will cover site branding, partner logos, header tab icons, and app icons (used in tasks, targets, and contacts).","1-site-branding#1. Site branding":"You have the ability to modify the app title, logo, and favicon. For Progressive Web App installations you can also configure the desktop icon.\nVariable Description logo Should be less than 100KB, have a transparent background, have high contrast, and be horizontal in shape with a ratio of about 3.5:1. We recommend SVG or PNG image formats. favicon Ideally 32x32 pixels, simple, and very small in size. We recommend SVG or PNG image formats. icon Must be at least 192x192 pixels, square. We recommend SVG or PNG image formats.","2-partner-logos#2. Partner logos":"If you would like to display a collection of logos representing all of the organizations and funders involved in a project, there is a space for these at the bottom of the About page. This page can be accessed through; Menu \u003e About","3-header-tab-icons#3. Header tab icons":"As of cht-core 3.10, app header tabs icons are configurable. CHT currently has five tabs: messages, tasks, reports, contacts, analytics.\nSee Also: Header tabs","4-app-icons#4. App Icons":"Apps can be customised by defining the icons to use for tasks, targets, contacts or forms on the action bar.\nAdd icons to the resources folder, and include them by name in the resources.json file as the following example:\n{ \"icon-risk\": \"icon-healthcare-warning@2x.png\", \"icon-treatment\": \"icon-healthcare-medicine@2x.png\", \"medic-clinic\": \"medic-family.svg\", \"medic-district-hospital\": \"medic-family.svg\", \"medic-health-center\": \"medic-chw-area.svg\", \"medic-person\": \"medic-person.svg\" } See Also: Icon Library\nThe folder and files structure would look like this:\n./ resources.json /resources icon-healthcare-warning@2x.png icon-healthcare-medicine@2x.png medic-family.svg medic-family.svg medic-chw-area.svg medic-person.svg Finally run the command: cht --url= upload-resources\nTo modify the icon used in contacts, you will need to edit the icon subkey in app_settings.json (under contact_types). You will modify app_settings.json with the following contents:\n{ ... \"contact_types\": [ { \"id\": \"person\", \"name_key\": \"contact.type.person\", \"group_key\": \"contact.type.person.plural\", \"create_key\": \"contact.type.person.new\", \"edit_key\": \"contact.type.person.edit\", \"primary_contact_key\": \"person.field.contact\", \"icon\": \"medic-person\", \"create_form\": \"form:contact:person:create\", \"edit_form\": \"form:contact:person:edit\" }, ... ] } Finally run the command: cht --local upload-app-settings\nTo customise the icons used in tasks or the action bar, you will need to edit a form properties file and add an icon property as outline in form properties tutorial.\nTo customise the icons used in targets, you will need to add an icon property in a target’s definition as shown in the targets tutorial.","implementation-steps#Implementation Steps":"","required-resources#Required Resources":"You should have a functioning CHT instance with cht-conf installed locally and completed a project folder setup.","using-cht-conf#Using cht-conf":"Create a branding.json file if it doesn’t exist. (This may have already been created by the initialise-project-layout command). Edit the file with the following content:\n{ \"title\": \"My App Name\", \"resources\": { \"logo\": \"logo.png\", \"favicon\": \"favicon.ico\", \"icon\": \"pwa-icon.svg\" // required for PWA installation only } } The folder and files structure would look like this:\n./ branding.json /branding logo.png favicon.ico pwa-icon.svg Finally run the command: cht --url= upload-branding","using-cht-conf-1#Using cht-conf":"Create a partners.json file if it doesn’t exist. (This may have already been created by the initialise-project-layout command). Edit the file with the following content:\n{ \"resources\": { \"partnerA\": \"parnerA.png\", \"partnerB\": \"parnerB.png\", \"partnerC\": \"parnerC.png\" } } The folder and files structure would look like this:\n./ partners.json /partners parnerA.png parnerB.png Finally run the command: cht --url= upload-partners","using-cht-conf-2#Using cht-conf":"Create a app_settings.json file if it doesn’t exist. (This may have already been created by the initialise-project-layout command).\nWe will then add a header_tabs key within app_settings with the following structure:\n{ \"messages\": { \"icon\": \"fa-user\" }, \"tasks\": { \"resource_icon\": \"medic-health-center\" }, \"analytics\": { \"icon\": \"fa-flag\", \"resource_icon\": \"icon-treatment\" }, \"reports\": { \"icon\": \"fa-list-alt\" }, \"contacts\": { \"icon\": \"fa-user\" } } The above assumes you have the following resource icons already in your instance (either uploaded or out-of-the-box): medic-health-center, icon-treatment.\nFinally run the command: cht --url= upload-app-settings\n🌐 Demo ↗\nSee Also: Icons","using-the-admin-interface#Using the admin interface":"Log in to your instance and navigate to Menu \u003e App Settings \u003e Images \u003e Icons\nNote\nIf your changes are not reflected on the browser, you will have to clear browser data to get rid of the already cached resources.","using-the-admin-interface-1#Using the admin interface":"Log in to your instance and navigate to Menu \u003e App Settings \u003e Images \u003e Partners","using-the-admin-interface-2#Using the admin interface":"Log in to your instance and navigate to Menu \u003e App Settings \u003e Images \u003e Header Icons"},"title":"CHT Application Graphics"},"/building/branding/publishing/":{"data":{"":"","f-droid#F-Droid":"F-Droid is a free open source application store which gives the app developer more control over the listing. As it isn’t installed on Android devices by default it takes a little more effort to set up originally, but is easier than manually sideloading.\nRead more about Using F-Droid for app distribution.","google-play-store#Google Play Store":"The Play Store has the advantage of being installed on all Android phones by default. This makes it very easy for users to install your app, which makes it the approach we recommend for most applications.\nOne of the downsides is it can be more difficult to get your app published and it may be removed in future if it’s found to not comply with future requirements.\nFor this method you will need access to the organization’s play store console with permission to publish the app.\nIn the Google Play Console, for each flavor to publish:\nCreate a new Production release Upload the arm64 app bundles (from the GitHub Release) for the flavor. If you plan on uploading multiple APKs, the APKs should have different version codes. Read more: here. Use the new cht-android version as the Release name Add a one sentence summary of the CHANGELOG entry as the Release notes. For a more detailed explanation, follow this doc.\nNote\nPublished apps are not immediately available to users on the Play Store. Confirm, via the Google Play Console, that the release is available before officially announcing it (this could take hours or days).","mobile-device-management#Mobile Device Management":"Using mobile device management (MDM) software allows administrators to remotely manage mobile devices. This gives the IT administrator full control over which applications are installed on the devices, as well as having the option to delete apps and data from lost or stolen mobile devices. For this reason, using MDM software is highly recommended for deployments.\nThere are many commercially available MDM tools to evaluate, with a wide range of features and prices. Google Endpoint is available for organizations using Google Workspace (formerly G Suite), and has free plans for non-profit organizations. Check out the Endpoint documentation overview for more information, including how to enable mobile device management, and how to remotely wipe a device.\nOther MDM providers include Headwind MDM and Microsoft Intune. It is recommended that you research MDM options and pick the one that’s right for you.","new-app-in-the-play-store#New App in the Play Store":"Remember that when the app is created in the Play Store, it’s required to choose the way the app will be signed by Google: we upload the signed AAB files, but then Google creates optimized versions of the app in .apk format. The app has to be configured to use the same signing and upload signatures by Google. Choose to upload a “Java keystore”, the Play Console will require a file encrypted with a tool named PEPK, that file is _private_key.pepk generated when following the instructions of New brand (the button to upload the .pepk in the Play Console may say “Upload generated ZIP” although the PEPK file doesn’t look like a .zip file).\nNote\nNew apps cannot longer be uploaded with the APK format in the Play Store. Apps created before Aug 1, 2021 can still be updated with .apk files, but new ones needs to be uploaded with the Android App Bundle format (.aab). Checkout the Artifact formats section.","progressive-web-app#Progressive Web App":"Another alternative is to install the CHT Core webapp as a Progressive Web App. This avoids building an Android application altogether. Read more on the PWA page.","publishing#Publishing":"Once the flavor is bui````lt there are many different ways to publish the binaries for installation.","side-loading#Side loading":"This method gives an app developer full control over installation. It is also possible to do the installation without an internet connection which makes it ideal for remote installation, or to save bandwidth when performing multiple installs.\nIn the phone settings select the option to “opt in for installing unknown apps”. Download the correct APK on to the phone. It’s important to select the right APK for the instruction set and Android version, as documented in this table. This is likely easiest done by using the phone’s browser to navigate to the download page. After downloading, you should be prompted to install the APK."},"title":"Publishing"},"/building/branding/resources/":{"data":{"":"","branding#Branding":"The site title, favicon, and header logo are configurable. The location to change these are in the Admin console on the images page under the branding tab.\nAnother way to configure these options is by using the cht-conf, add the favicon and the header logo in the branding folder, then include the options in the branding.json as the following example:\n{ \"title\": \"My Clinic\", \"resources\": { \"logo\": \"logo.png\", \"favicon\": \"favicon.ico\" } } The folder and files structure would look like this:\n./ branding.json /branding logo.png favicon.ico Finally run the command: cht --local upload-branding","icons#Icons":"Apps can be customized by defining the icons to use for tasks, targets, and contacts.\nAdd icons to the resources folder, and include them by name in the resources.json file as the following example:\n{ \"icon-risk\": \"icon-healthcare-warning@2x.png\", \"icon-treatment\": \"icon-healthcare-medicine@2x.png\", \"medic-clinic\": \"medic-family.svg\", \"medic-district-hospital\": \"medic-family.svg\", \"medic-health-center\": \"medic-chw-area.svg\", \"medic-person\": \"medic-person.svg\" } See Also: Interface\nThe folder and files structure would look like this:\n./ resources.json /resources icon-healthcare-warning@2x.png icon-healthcare-medicine@2x.png medic-family.svg medic-family.svg medic-chw-area.svg medic-person.svg Finally run the command: cht --local upload-resources","partner-logos#Partner logos":"Adding your partner logos can be done in the Admin console on the images page under the Partners tab. This will add partner logos on the about page.\nAnother way is by using the cht-conf, add the partners logo in the partners folder, then include them in the partners.json as the following example:\n{ \"resources\": { \"partnerA\": \"parnerA.png\", \"partnerB\": \"parnerB.png\" } } The folder and files structure would look like this:\n./ partners.json /partners parnerA.png parnerB.png Finally run the command: cht --local upload-partners"},"title":"resources/"},"/building/care-guides/":{"data":{"":"","care-guides#Care Guides":"Forms are used to build “Care Guides” that take health workers through care protocols and provide decision support for their interactions with patients. App designers can use the basic form building functionality in a variety of ways.\nCare Guides also allow CHWs to register new families and people, assess a sick child, and enroll a new pregnancy into an antenatal care schedule. Care Guides can be located in many parts of your app, including the Tasks, People, and Reports tabs.\nCare Guides provided in the CHT’s Reference Applications can be configured for your app, or a new Care Guide can be written from scratch. Some configuration is probably necessary due to different local requirements, and government protocols.","examples#Examples":"While a health worker is going through the form during the care visit, you can include a family planning question only if the person who the form is about is a woman and not pregnant. You can include on-the-spot conversational prompts and advice for the CHW based on how they answer questions in the form. For instance, if a CHW answers “yes” to the question about a woman’s interest in family planning, text can automatically appear to provide information on her options. An image showing how to read a rapid test can be displayed within a form, to help health workers to correctly interpret their test results.","functionality#Functionality":"Care Guides consists of questions grouped into pages. They are capable of presenting many different types of questions, skip logic, images, and videos. Validation rules can require certain questions to be answered or restrict answers to a specified type or range.\nIt’s possible to reference previous information that was submitted about the person or household from within the care guide. The interaction can also conclude with a summary that includes assessment results, treatment recommendations, and referral info.\nCare Guides can include images for instructional purposes and can access a user’s camera to take a photo if needed.","summary#Summary":"After all of the required questions have been answered, a summary page can be displayed.\nHere, health workers can review the information they entered, receive instructions for treatment, care, and referrals, and relay detailed education to the patient.\nNote\nThe form is not submitted until the user scrolls to the very end of the summary and clicks the Submit button."},"title":"Care Guides"},"/building/condition-cards/":{"data":{"":"This tutorial will take you through building a condition card for CHT applications.\nCondition cards, like contact summaries display information about the contact. The data displayed in condition cards can be pulled from submitted reports.\nIn this tutorial,you will be adding a condition card that displays information about a person’s most recent assessment, including: the date of the most recent assessment, and whether or not they had a cough.","1-add-dependencies-and-variable-definitions#1. Add Dependencies and Variable Definitions":"Add the following dependencies and variable definitions at the top of the file (some of them may have been added from the contact summary tutorial):\nconst thisContact = contact; const thisLineage = lineage; const allReports = reports; contact, reports, lineage are globally available for contact-summary.","2-define-cards-and-add-a-condition-card-object#2. Define \u003ccode\u003ecards\u003c/code\u003e and Add a Condition Card Object":"const thisContact = contact; const thisLineage = lineage; const allReports = reports; const cards = [ { label: 'contact.profile.assessment_history', appliesToType: 'report', appliesIf: (report) =\u003e { const assessmentForm = getNewestReport(allReports, assessmentForms); return assessmentForm.reported_date \u003e= report.reported_date; }, fields: [ { label: 'contact.profile.most_recent_assessment.date', value: (report) =\u003e { return report.reported_date; }, filter: 'simpleDate', width: 6 }, { label: 'contact.profile.cough', value: (report) =\u003e { return report.fields.cough; }, width: 6, } ] } ];","3-export-cards#3. Export \u003ccode\u003ecards\u003c/code\u003e":"Export the defined fields as shown below:\nconst thisContact = contact; const thisLineage = lineage; const allReports = reports; const cards = [ { label: 'contact.profile.assessment_history', appliesToType: 'report', appliesIf: (report) =\u003e { const assessmentForm = getNewestReport(allReports, assessmentForms); return assessmentForm.reported_date \u003e= report.reported_date; }, fields: [ { label: 'contact.profile.most_recent_assessment.date', value: (report) =\u003e { return report.reported_date; }, filter: 'simpleDate', width: 6 }, { label: 'contact.profile.cough', value: (report) =\u003e { return report.fields.cough; }, width: 6, } ] } ]; module.exports = { cards: cards };","4-compile-and-upload-app-settings#4. Compile and Upload App Settings":"To compile and upload app settings to your local instance, run the following command:\ncht --url=https://:@localhost --accept-self-signed-certs compile-app-settings upload-app-settings Be sure to replace the values and with the actual username and password of your test instance.","brief-overview-of-key-concepts#Brief Overview of Key Concepts":"Condition cards can be permanent or conditional. They can be set to appear only when a specific type of report is submitted. They can also be set to disappear when a condition is resolved or a certain amount of time has passed.\nCondition cards have several configurable elements including:\nTitle Label for each data point displayed Data point for the field Icon for the field, if desired Conditions under which to display","implementation-steps#Implementation Steps":"Create a contact-summary.templated.js file if it doesn’t exist. (This may have already been created by the initialise-project-layout command.)","required-resources#Required Resources":"You should have a functioning CHT instance with cht-conf installed locally, completed a project folder setup, and an assessment form."},"title":"Condition Cards"},"/building/contact-management/":{"data":{"":"Content in this section Contacts and Users Contact and User Management - Part 1 Contact and User Management - Part 2 Moving Contacts within the Hierarchy CHT User Management tool"},"title":"Contact Management"},"/building/contact-management/contact-and-users-1/":{"data":{"":"In this tutorial you will learn how to create and edit contacts and their associated users in and application built with the CHT using the default contact creation forms. This will help you get familiar with the UI of the webapp as well as some features and functionality. If you are already comfortable with this, you can skip to part 2, which covers manipulating contacts and their associated documents using cht-conf.","1-create-new-health-facility#1. Create New Health Facility":"While logged into the CHT application, go to the People tab and select New Health Facility\nFor now we will skip creating or assigning a primary contact so that we can focus on creating the new Health Facility.\nEnter the details of the Health Facility and submit the form.\nYou should see the newly created Health Facility appear on the left-hand side and when you select it, you will see details of the Health Facility appear on the right-hand side.","2-create-chw-area-and-chw#2. Create CHW Area and CHW":"We will now create a Place and the primary contact for it within one form. We want to create a CHW Area within the Health Facility that we previously created.\nSelect the Health Facility on the left-hand side. You will then select the Floating Action Button (FAB) that opens a menu with all actions.\nIn the FAB menu select New Area.\nSelect the option that lets you create a new person within the form. This person will automatically become the primary contact for the created place.\nFill in the required fields and go to the next section.\nYou will get an option to name the Place after the created contact person or name it yourself. If you select Yes, the new place will be named 's Area. For example Jane Doe's Area.\nOnce you submit, a new CHW Area will be created. On the right-hand you should see the CHW Area name, the primary contact of the CHW Area, and the Health Facility that the CHW Area belongs to.","3-create-chw-supervisor#3. Create CHW Supervisor":"To create a primary contact for an existing Place (in this case, for the Health Facility that we created without a primary contact); select the Place and then select the Floating Action Button (FAB) that opens a menu with all actions, in the menu select the New Person action.\nA new person form will appear with an option to change the Place the new person will belong to. A new contact will be created in the Health Facility when you submit this form.\nFinally, we will set the newly created person as a primary contact for the Health Facility they belong to. To do this, select the Health Facility and then in the More Options (⋮) menu select the Edit action.\nYou should see an edit form from which you can set the primary contact of the Health Facility. Click Submit to apply the changes.","4-create-the-chw-user#4. Create the CHW User":"You may want to log in as a CHW and perform some actions now that the CHW and CHW Supervisor contacts are created; let’s create a CHW user who’s linked to the CHW contact we created earlier.\nGo to the hamburger menu and select App Settings.\nWhen you are on the App Settings page, select Users on the left-hand side and then select Add User on the right-hand side.\nYou should now see an Add User Form. Fill in the user name, then select the role as CHW or Regional Admin. In the Place field, select the name of the CHW Area whose CHW you want to create a user for (you can search by typing the first few letters of the CHW Area name). Once that is done, under the Associate Contact field select the name of the CHW whose user you are creating. Finally, input a password and hit Submit.\nOnce this is done, you can logout and log into the app using the username and password that you just created.","brief-overview-of-key-concepts#Brief Overview of Key Concepts":"Contacts are people or places that are created in the CHT application.\nPeople are both patients in the system and users of the system, such as CHWs or Nurses.\nPlaces represent either an actual physical location such as a health facility, clinic, or a grouping such as a household or CHW Area.\nContact forms are forms in the CHT app that are used to create people or places.\nCHT App Hierarchy is often modeled after the health system, health program or community structure. All people who are registered in the app must be associated with a Place. These Places are located in a hierarchy with other Places. For instance, a Family Member is part of a Household. A Household and CHWs are part of a CHW Area. A CHW Area and nurses are part of a Health Facility. Additional levels may be added as needed. The Admin level operates outside of the hierarchy and gives access to all levels and people.\nDefault app hierarchy\nUsers represent credentials and roles / permissions for accessing the application. This can either be:\nPeople who can log into the application, such as CHWs or Nurses or Credentials granting external software restricted permissions to perform certain tasks, such as allowing an external service permission to write reports via the api.","frequently-asked-questions#Frequently Asked Questions":"Is there any downside of creating too many users? For offline users, how often does the app try to refresh if there is an available internet connection? Can one person belong to multiple places in the same hierarchy?","implementation-steps#Implementation Steps":"In this tutorial, you will work with the default contact forms and the default hierarchy, which is illustrated above in the overview of key concepts.\nWhile logged in as an admin user, you will first create the Health Facility, CHW Supervisor, CHW Area, and CHW. You will then create the users for the CHW so that they can log in and create households and household members.","required-resources#Required Resources":"You should have a functioning CHT instance with contact forms configured. Read How to set up a CHT local configuration environment"},"title":"Contacts + Users 1"},"/building/contact-management/contact-and-users-2/":{"data":{"":"In this tutorial you will learn how to create and edit contacts and their associated users in the CHT application using cht-conf. If you haven’t already, have a look at part 1 of this tutorial for a useful overview of key concepts.","1-create-health-facilities-using-cht-confs-csv-to-docs-and-upload-docs-features#1. Create Health Facilities (using cht-conf\u0026rsquo;s csv-to-docs and upload-docs features)":"To create contacts and their associated users with cht-conf, you will need to create a CSV file with the information of the contacts and the users that you would like to create. The name of the file determines the type of doc created for rows contained in the file.\nFor example, file named place.district_hospital.csv adds the property \"type\":\"district_hospital\" and a file named person.clinic.csv adds the property \"type\":\"person\"\nCreate a CSV file named place.district_hospital.csv and add the details of the Health Facilities you would like to create.\nname Nairobi South Facility Nairobi West Facility Nairobi East Facility Save this file to a folder name csv in your project’s base directory.\nOpen terminal or command line. cd to your project’s base directory and then run the command\ncht csv-to-docs This will convert rows of the CSV files from the csv folder to JSON docs that are stored in a json-docs folder.\nTo upload the JSON docs to your local test instance, run the command\ncht --url=https://:@localhost --accept-self-signed-certs upload-docs Be sure to replace the values and with the actual username and password of your test instance.","2-create-chw-areas-chw-contacts-and-users-using-cht-confs-create-users-feature#2. Create CHW Areas, CHW Contacts and Users (using cht-conf\u0026rsquo;s create-users feature)":"Next you are going to create CHW Areas for the Health Facilities you created in the step above along with the CHW contacts and users for these CHW Areas.\nCreate a CSV file named users.csv and add the details of the Users, CHW contacts, and CHW Areas you would like to create. Save this file in the base project directory.\nusername password roles fullname phone contact.name contact.phone contact.sex contact.age place.type place.name place.parent mmutiso q3Z5-vH5 district_admin Mary Mutiso 0712345678 Mary Mutiso 0712345678 Female 36 health_center Mary Mutiso’s Area The value place.parent is the uuid of the Facility to which the CHW Area belongs to. You can get this value by selecting the Health Facility in the webapp and copying the last portion of the url.\nRun the command:\ncht --url=https://:@localhost --accept-self-signed-certs create-users This will create the CHW Area, the CHW contact, and the user that the CHW will use to log into the application.","brief-overview-of-key-concepts#Brief Overview of Key Concepts":"cht-conf is a command-line interface tool to manage and configure your apps built using the Core Framework of the Community Health Toolkit.\nSee more key concepts in part 1 of this tutorial.","frequently-asked-questions#Frequently Asked Questions":"Can one person belong to multiple places in the same hierarchy?","implementation-steps#Implementation Steps":"In these steps you are going to create a Health Facility, CHW Areas, primary contacts for the CHW Areas, and their associated users.","required-resources#Required Resources":"You should have a functioning CHT instance and have cht-conf installed locally. Read How to set up a CHT local configuration environment"},"title":"Contacts + Users 2"},"/building/contact-management/contacts/":{"data":{"":"“People” is the generic name used for individuals in apps built with the Core Framework. They can be patients, family members, nurses or health workers. Anyone with a profile in your app is a person.\n“Places” is the generic name that represents a level in the hierarchy. “People” belong to “places”, and “places” belong to other higher level “places” in the hierarchy. A “place” could be a geographic area, like a district with the “people” associated to it being health officers. A “place” could also be a structure in the health system, such as a health facility, and the “people” associated to it being nurses. In deployments with CHWs, the lowest “place” in the hierarchy often represents individual households or families, and the individual members of that household are the “people” associated to it.\nUsers can access their “people” and “places” from the People tab. The permissions set for your role and your placement in the hierarchy will determine which contacts you’re able to see. Advanced configuration options are available for a specific offline user role to manage what level of contact data is downloaded and stored on their device.","care-guides#Care Guides":"“Care Guides” are dynamic forms that you can fill out for a person or place. You can access Care Guides by clicking on the + button at the bottom of a profile. For more info, see the Care Guides overview page.\nYou’ll see different forms here depending on which person or place you’re viewing. For example, forms for families might include a “Family Survey.” Forms for adult women might include “New Pregnancy.” Forms for adult women who have had a pregnancy report, and no delivery yet reported, would also see “ANC visit.” Forms for children might include “Under-5 Assessment” or “Growth Monitoring.”\nHealth workers can use these Care Guides at any time. If the app has scheduled a care visit or follow up, it will be listed under “Tasks.”\nSee Also: Defining Care Guides","condition-cards#Condition Cards":"A “condition” card displays data on a profile that’s been submitted in a report about that person or place. Data can be pulled from one report or summarize many reports.\nCondition cards can be permanent or conditional; set to appear only when a specific type of report is submitted. They can also be set to disappear when a condition is resolved or a certain amount of time has passed. You can have as many condition cards as you like, though we recommend keeping the user’s experience in mind.\nConfigurable elements include:\nTitle Label for each data point displayed Data point for the field Icon for the field, if desired Conditions under which to display See Also: Defining Condition Cards","contact-summary#Contact Summary":"The top card on all profiles contains general information for the contact. All the fields shown in this summary card are configurable.\nSee Also: Defining Contact Summary","creating-and-editing-contacts#Creating and Editing Contacts":"Contacts are created/modified via contact forms. These forms are highly configurable and allow for specifying detailed workflows for capturing information about contacts.","duplicate-contact-detection#Duplicate Contact Detection":"(Added in CHT 4.19.0)\nOne major challenge when collecting contact data is ensuring users do not inadvertently enter duplicate records for the same contact. It is important to train users on the searching functionality described above as this will allow them to find the desired profile of a previously recorded contact instead of creating a duplicate record for the same person or place.\nThe CHT also supports automatically detecting when a contact being created or edited by a user matches an existing contact record. If a duplicate contact is detected, the user will be given the option of proceeding to the profile of the existing contact. Alternatively, the user can choose to override the duplicate detection logic and continue creating/editing the contact as originally intended.\nThe matching logic for duplicate detection is configurable and can be tuned to the specific needs and data structures of a particular project. The algorithm compares the created/edited contact to its sibling contacts. These are other contacts of the same type that share the same parent contact. By default, contacts are considered duplicates if they have very similar names AND (for persons) if they are the same age (in years). This default logic can be overridden with custom logic for each type of contact.","fields#Fields":"","main-list#Main List":"The list view on the leftmost screenshot is what a logged-in CHW would see when they access the “People” tab on a small screen.\nThe item at the top of the list is the “place” the user belongs to. Below that is a list of the “places” they serve, represented by families. Individual “people” are not shown here, but will appear in search results.\nBecause this list defaults to show the “places” below the user in the hierarchy, a CHW supervisor would see a different view. Instead of families, they might see a list of CHW Areas they manage.\nNew “places” can be added to this level of the hierarchy by clicking on the “Add new +” button at the bottom of the screen. This allows a CHW to add a new family to their list, or a CHW supervisor to add a new Area they manage.\nWith the UHC Mode configured, the main list of households is displayed as shown on the rightmost screenshot to help health workers ensure that all households are visited regularly.","profiles#Profiles":"Clicking an item on the main list will open a profile where you can see detailed information about that person or place. At the top is general information like name and phone number.\nIf you’re viewing a place profile, you’ll see a list of people or places that belong to this place in the app hierarchy, such as family members. The star signifies the primary contact.\nBeneath that, you will find tasks for this person or place. At the very bottom is a history of submitted reports for this person or place.\nFrom profiles, users can edit contact information, take actions, and, if viewing a place profile, add new people and assign a primary contact person. If a place is not at the bottom of the hierarchy, a user can add new places to the level below this.","searching#Searching":"Click on the search icon at the top of the screen to search for a “person” or “place”. The freetext search works on all fields included in the “person” or “place” document such as patient name or patient ID. The exact fields depends on which information you’ve configured your app to collect.\nAfter typing a search term, press the “Enter” key on your keyboard, then the list filters to show matching items. Searching will only return items that are lower than you in the hierarchy and that you have permission to view.\nTo clear the search and return to the default view, click on the arrow icon located to the left of the search box."},"title":"Contacts"},"/building/contact-management/moving-contacts/":{"data":{"":"Contacts are organized into a hierarchy. It is not straight-forward to move contacts from one position in the hierarchy to another because many copies of this hierarchy exist. Use the move-contacts action in cht-conf to assign a new parent to contacts. This command will move the specified contact, all the contacts under that contact, and all reports created by any of those contacts. This action will download all documents that need to be updated, update the lineages within those documents, and then save the updated documents on your local disk. To commit those changes to the database, run the upload-docs action.\nOffline users who have contacts removed from their visible hierarchy will not automatically see those contacts disappear. The contact remains on the user’s device. Any updates made to the contact (or any reports created for that contact) will silently fail to sync. These users must be encouraged to clear cache and resync!\nAlso impactful, but less serious - this script can cause significant amounts of changes to the database and offline users who have contacts moved into their visible hierarchy may experience lengthy and bandwidth-intensive synchronizations.\nParameter Description Required contacts Comma delimited list of contact IDs which will be moved Yes parent ID of the new parent which will be assigned to the provided contacts Yes docDirectoryPath This action outputs files to local disk at this destination No. Default json-docs Some constraints when moving contacts:\nAllowed Parents - When moving contacts on WebApp \u003ev3.7, your chosen parent must be listed as a valid parent for the contact as defined in the configuration for place hierarchy. For WebApp","examples#Examples":"Move the contacts with the id contact_1 and contact_2 to have the parent parent_id. The changes will be in the local folder my_folder only for review. Run the second command to upload the changes after review.\ncht --instance= move-contacts -- --contacts=contact_1,contact_2 --parent=parent_id --docDirectoryPath=my_folder cht --local upload-docs -- --docDirectoryPath=my_folder Move the contact with the id contact_1 to the top of the hierarchy (no parent).\ncht --local move-contacts upload-docs -- --contacts=contact_1 --parent=root"},"title":"Moving Contacts"},"/building/contact-management/user-management-tool/":{"data":{"":"The Community Health Toolkit (CHT) is highly configurable and can be customized to support multiple hierarchies and users in the health care system. The CHT user management tool is a user friendly web application that works with the CHT to decentralize the user management process to the subnational levels, increasing efficiency and accuracy. This guide highlights steps for setting up and configuring the user management tool. The guide has been tailored for specific CHT-supported national community health information systems. Partners and ministries of health are advised to customize the tool to fit their specific needs. The tool provides templates that can be downloaded and populated.\nThe user management tool has various features and fuctionalities including:\nCreation of single or bulk (many) users. Replacing of existing users Moving of an existing place Users can access bulk user templates that they can populate. One can validate the entries before the upload. Download the user credentials upon upload. Validation of input for completeness and accuracy. The tool identifies errors that the can be corrected. Configuring the CHT User Management toolImplementation Steps Clone the cht-user-management repository.\nCreate a new folder under src/config with your required instance eg. chis-znz\nWithin that new folder create a config.json file with the following parameters\nProperty Type Description domains Array Controls the list of instances which the user can login to domains.friendly string Friendly name for the instance (eg. “Migori”) domains.domain string Hostname for the instance (eg. “migori-echis.health.go.ke”) domains.useHttp boolean Whether to make an insecure connection (http) to the hostname (defaults to false) contact_types Array One element for each type of user which can be created by the system contact_types.name string The name of the contact_type as it appears in the app’s base_settings.json contact_types.friendly string Friendly name of the contact type contact_types.contact_type string The contact_type of the primary contact. As defined in base_settings.json contact_types.contact_friendly string Friendly name of the primary contact type contact_types.user_role string[] A list of allowed user roles. If only one is provided, it will be used by default. contact_types.username_from_place boolean When true, the username is generated from the place’s name. When false, the username is generated from the primary contact’s name. Default is false. contact_types.hierarchy Array Defines how this contact_type is connected into the hierarchy. An element with level:1 (parent) is required and additional elements can be provided to support disambiguation. See ConfigProperty. contact_types.hierarchy.level integer The hierarchy element with level:1 is the parent, level:3 is the great grandparent. contact_types.replacement_property Property Defines how this contact_type is described when being replaced. The property_name is always replacement. See ConfigProperty. contact_types.place_properties Array Defines the attributes which are collected and set on the user’s created place. See ConfigProperty. contact_types.contact_properties Array Defines the attributes which are collected and set on the user’s primary contact doc. See ConfigProperty. contact_types.deactivate_users_on_replace boolean Controls what should happen to the defunct contact and user documents when a user is replaced. When false, the contact and user account will be deleted. When true, the contact will be unaltered and the user account will be assigned the role deactivated. This allows for account restoration. logoBase64 Image in base64 Logo image for your project Add reference to your configuration folder(that you have just added above) in src/config/config-factory.ts. For example import znzConfig from './chis-znz'\nConfigure the config.json file.","configproperty#ConfigProperty":"The ConfigProperty is a data structure used several times within the config.json file and defines a property on an object. The ConfigProperty include:\nProperty Type Description friendly_name string Defines how this data will be labeled in CSV files and throughout the user experience. property_name string Defines how the value will be stored on the object. type ConfigPropertyType Defines the validation rules, and auto-formatting rules. See ConfigPropertyType. parameter any See ConfigPropertyType. required boolean True if the object should not exist without this information.","configpropertytype#ConfigPropertyType":"The ConfigPropertyType defines a property’s validation rules and auto-formatting rules. The optional parameter information alters the behavior of the ConfigPropertyType.\nType Validation Rules Auto Formatting Rules Validator Parameter string Must be defined Removes double whitespaces, leading or trailing whitespaces, and any character which is not alphanumeric or ()\\-' None name Must be defined Same as string + title case + parameter behavior One or more regexes which are removed from the value when matched (eg. \"parameter\": [\"\\\\sCHU\"] will format this CHU into This) regex Must match the regex captured by parameter Same as string A regex which must be matched to pass validation (eg. \"parameter\": \"^\\\\d{6}$\" will accept only 6 digit numbers) phone A valid phone number for the specified locality Auto formatting provided by libphonenumber Two letter country code specifying the locality of phone number (eg. \"parameter\": \"KE\") generated None. No user inputs. Uses LiquidJS templates to generate data None Details select_one Single choice from a list of options Same as string None Dictionary where the keys are the option values and the values are the corresponding labels select_multiple Multiple choice from a list of options Same as string None Same as select_one none None None None","configuring-the-cht-user-management-tool#Configuring the CHT User Management tool":"","deployment#Deployment":"This tool is available via Docker by running docker compose up. Set the Environment Variables.","development#Development":"Create an environment file by cp env.example .env. Change INTERFACE to 127.0.0.1 and otherwise see Environment Variables for more info.\nThen run:\nnpm run dev or\nnpm run build npm start","environment-variables#Environment Variables":"The env.example file has example values. Here’s what they mean:\nVariable Description Sample CONFIG_NAME Name of the configuration to use chis-ke EXTERNAL_PORT Port to use in docker compose when starting the web server 3000 PORT For localhost development environment 3000 COOKIE_PRIVATE_KEY A string used to two-way encryption of cookies. Production values need to be a secret. Suggest uuidgen to generate 589a7f23-5bb2-4b77-ac78-f202b9b6d5e3 INTERFACE Interface to bind to. Leave as ‘0.0.0.0’ for prod, suggest ‘127.0.0.1’ for development 127.0.0.1 CHT_DEV_URL_PORT CHT instance when in NODE_ENV===dev. Needs URL and port 192-168-1-26.local-ip.medicmobile.org:10463 CHT_DEV_HTTP ‘false’ for http ’true’ for https false","implementation-steps#Implementation Steps":"","publishing-new-docker-images#Publishing new docker images":"Docker images are hosted on AWS’s Elastic Container Registry (ECR). To publish a new version:\nUpdate the version string in the package.json. Submit a PR and have it merged to main. Existing CI will push an image to ECR.","the-generated-configpropertytype#The Generated ConfigPropertyType":"ContactProperties with type: \"generated\" use the LiquidJS template engine to populate a property with data. Here is an example of some configuration properties which use \"type\": \"generated\":\n{ \"place_properties\": [ { \"friendly_name\": \"CHP Area Name\", \"property_name\": \"name\", \"type\": \"generated\", \"parameter\": \"{{ contact.name }}'s Area\", \"required\": true } ], \"contact_properties\": [ { \"friendly_name\": \"CHP Name\", \"property_name\": \"name\", \"type\": \"name\", \"required\": true } ] } The user will be prompted to input the contact’s name (CHP Name). The user is not prompted to input the place’s name (CHP Area Name) because the place’s name will automatically be assigned a value. In this example, if the user puts john as the contact’s name, then the place will be named John's Area.\nThe data that is passed to the template is consistent with the properties defined in your configuration.\nVariable Value place Has the attributes from place_properties.property_name contact Has the attributes from contact_properties.property_name lineage Has the attributes from hierarchy.property_name"},"title":"User management tool"},"/building/contact-summary/":{"data":{"":"Content in this section Building Contact Summary contact-summary.templated.js"},"title":"Contact Summary"},"/building/contact-summary/contact-summary-overview/":{"data":{"":"This tutorial will take you through building a contact summary for CHT applications.\nContact summaries display basic information about the contact.\nYou will be adding a contact summary that displays information about a person’s patient id, age, sex, phone number, and information about the place they belong to ie. parent.","1-add-dependencies-and-variable-definitions#1. Add Dependencies and Variable Definitions":"Add the following dependencies and variable definitions at the top of the file:\nconst thisContact = contact; const thisLineage = lineage; contact, reports, lineage are globally available for contact-summary.","2-define-contact-summary-fields#2. Define Contact Summary Fields":"Define the patient_id, age, sex, phone, and parent contact fields as shown below:\nconst thisContact = contact; const thisLineage = lineage; const fields = [ { appliesToType: 'person', label: 'patient_id', value: thisContact.patient_id, width: 4 }, { appliesToType: 'person', label: 'contact.age', value: thisContact.date_of_birth, width: 4, filter: 'age' }, { appliesToType: 'person', label: 'contact.sex', value: 'contact.sex.' + thisContact.sex, translate: true, width: 4 }, { appliesToType: 'person', label: 'person.field.phone', value: thisContact.phone, width: 4 }, { appliesToType: 'person', label: 'contact.parent', value: thisLineage, filter: 'lineage' }, ]; The contact field e.g. patient_id and date_of_birth, should exist in the contact’s document for it to return a value.","3-export-fields#3. Export \u003ccode\u003efields\u003c/code\u003e":"Export the defined fields as shown below:\nconst thisContact = contact; const thisLineage = lineage; const fields = [ { appliesToType: 'person', label: 'patient_id', value: thisContact.patient_id, width: 4 }, { appliesToType: 'person', label: 'contact.age', value: thisContact.date_of_birth, width: 4, filter: 'age' }, { appliesToType: 'person', label: 'contact.sex', value: 'contact.sex.' + thisContact.sex, translate: true, width: 4 }, { appliesToType: 'person', label: 'person.field.phone', value: thisContact.phone, width: 4 }, { appliesToType: 'person', label: 'contact.parent', value: thisLineage, filter: 'lineage' }, ]; module.exports = { fields: fields };","4-compile-and-upload-app-settings#4. Compile and Upload App Settings":"To compile and upload app settings to your local instance, run the following command:\ncht --url=https://:@localhost --accept-self-signed-certs compile-app-settings upload-app-settings Be sure to replace the values and with the actual username and password of your test instance.","brief-overview-of-key-concepts#Brief Overview of Key Concepts":"Each field that can be shown on a contact’s profile is defined as an object in the fields array of contact-summary.templated.js.\nThe properties for each object determine how and when the field is shown.","implementation-steps#Implementation Steps":"Create a contact-summary.templated.js file. (This may have already been created by the initialise-project-layout command.)","required-resources#Required Resources":"You should have a functioning CHT instance with cht-conf installed locally, and completed a project folder setup."},"title":"Building"},"/building/contact-summary/contact-summary-templated/":{"data":{"":"Contact profile pages display basic information about the contact along with their history and upcoming tasks. A contact’s profile page is defined by the Fields, Cards, and Care Guides available.\nHelper variables and functions for the contact summary can be defined in contact-summary-extras.js. There are several variables available to inspect to generate the summary information:\nVariable Description contact The currently selected contact. This has minimal stubs for the contact.parent, so if you want to refer to a property on the parent use lineage below. reports An array of reports for the contact or for any of the contact’s person children. Note that if the contact has more than 500 reports, only the 500 with the latest reported_date values will be provided. Prior to version 4.7.0, only 50 reports were provided. lineage An array of the contact’s parents (2.13+), eg lineage[0] is the parent, lineage[1] is the grandparent, etc. Each lineage entry has full information for the contact, so you can use lineage[1].contact.phone. lineage will include only those contacts which are visible to the logged in profile targetDoc Doc with target document of the contact, hydrated with the config information of every target it contains a value for. If there is no target document available (for example when viewing a contact that does not upload targets), this value will be undefined. This value might also be undefined if the contact has not yet synced the current target document. Added in 3.9.0. uhcStats Object containing UHC stats information. Added in v3.12.0 uhcStats.uhcInterval Object containing the start and end date of UHC reporting period, it is calculated from the uhc.visit_count.month_start_date defined in the app settings. uhcStats.uhcInterval.start Timestamp, start date of the UHC reporting period. uhcStats.uhcInterval.end Timestamp, end date of the UHC reporting period. uhcStats.homeVisits Object containing the contact’s home visits stats. The contact’s type should have count_visits enabled and the UHC visit count settings should be defined, additionally this information is only available for users that have can_view_uhc_stats permission and that are not System Administrators. uhcStats.homeVisits.lastVisitedDate Timestamp, date of contact’s last home visit. uhcStats.homeVisits.count Number of contact’s home visits in the current reporting interval. uhcStats.homeVisits.countGoal Number, home visits goal, defined in the UHC visit count settings. cht Object containing the CHT API for contact summary, targets and tasks. Added in v3.12.0","build#Build":"To update the Contact profiles for an app, changes must be compiled into app-settings, then uploaded.\ncht --local compile-app-settings backup-app-settings upload-app-settings","care-guides#Care Guides":"Each care guide accessible from a contact profile is defined as an App Form. Context information can be provided to forms via the context object of contact-summary.templated.js.\nTo show an App Form on a contact’s profile, the form’s expression field in its properties file must evaluate to true for that contact. The context information from the profile is accessible as the variable summary.\nThe context data is also available directly within the app forms’ XForm calculations, as instance('contact-summary')/context/${variable}. For instance if context.is_pregnant is used in the contact summary, it can be accessed in an XForm field’s calculation as instance('contact-summary')/context/is_pregnant. Note that these fields are not available when editing a previously completed form, or when accessing the form from outside of the profile page.","cht-api#CHT API":"Introduced in v3.12.0\nProvides CHT-Core Framework’s functions to contact summary, targets and tasks. The API is available in the cht reserved variable under the v1 version.\nFunction Arguments Description hasPermissions(permissions, userRoles, chtPermissionsSettings) permissions: String or array of permission name(s).\nuserRoles: (Optional) Array of user roles. Default to the current logged in user.\nchtPermissionsSettings: (Optional) Object of configured permissions in CHT-Core’s settings. Default to the current instance’s configured permissions. Returns true if the user has the permission(s), otherwise returns false. hasAnyPermission(permissionsGroups, userRoles, chtPermissionsSettings) permissionsGroups: Array of groups of permission name(s).\nuserRoles: (Optional) Array of user roles. Default to the current logged in user.\nchtPermissionsSettings: (Optional) Object of configured permissions in CHT-Core’s settings. Default to the current instance’s configured permissions. Returns true if the user has all the permissions of any of the provided groups, otherwise returns false. getExtensionLib(name) name: String of script name Returns an executable function identified by the given name configured as extension-libs. analytics.getTargetDocs() Returns three target documents of the contact, calculated for the last three reporting intervals, including the current one. When viewing one of the current logged in user’s associated facilities, returns the target documents for the contact associated with the current logged in user. Returns an empty array if no target documents are found (for example when viewing a contact that does not upload targets). Introduced in v4.11.0 CHT API’s code samples const canEdit = cht.v1.hasPermissions('can_edit'); const canManagePlaces = cht.v1.hasPermissions(['can_create_places', 'can_update_places']); const hasAnyGroup = cht.v1.hasAnyPermission([ ['can_view_messages', 'can_view_message_action'], ['can_view_reports', 'can_verify_reports'] ]); const averageFn = cht.v1.getExtensionLib('average.js'); const targetDocs = cht.v1.analytics.getTargetDocs();","code-samples#Code samples":"The following samples show how fields, cards, and care guide context comes together in the contact-summary.templated.js file.","condition-cards#Condition Cards":"Each condition card is defined as a card object in the cards array of contact-summary.templated.js. Condition cards are conditional and are configured to appear when a certain report is submitted or condition is met. The properties for each object determine how and when the card and its fields are shown.","contact-summary#Contact Summary":"Each field that can be shown on a contact’s profile is defined as an object in the fields array of contact-summary.templated.js. The properties for each object determine how and when the field is shown.","contact-summary-extrasjs#\u003ccode\u003econtact-summary-extras.js\u003c/code\u003e":"module.exports = { isActivePregnancy : function(report) { // ... }, isCoveredByUseCaseInLineage: function(lineage, usecase) { // ... }, isHighRiskPregnancy: function(report) { // ... }, getSubsequentVisits: function(report) { // ... }, };","contact-summarytemplatedjs#\u003ccode\u003econtact-summary.templated.js\u003c/code\u003e":"module.exports = { context: { use_cases: { anc: isCoveredByUseCaseInLineage(lineage, 'anc'), pnc: isCoveredByUseCaseInLineage(lineage, 'pnc'), }, }, fields: [ { appliesToType: 'person', label: 'patient_id', value: contact.patient_id, width: 4 }, { appliesToType: 'person', label: 'contact.age', value: contact.date_of_birth, width: 4, filter: 'age' }, { appliesToType: 'person', label: 'contact.parent', value: lineage, filter: 'lineage' }, { appliesToType: '!person', appliesIf: function() { return contact.parent \u0026\u0026 lineage[0]; }, label: 'contact.parent', value: lineage, filter: 'lineage' }, ], cards: [ { label: 'contact.profile.pregnancy', appliesToType: 'report', appliesIf: extras.isActivePregnancy, fields: [ { label: 'contact.profile.edd', value: function(report) { return report.fields.edd_8601; }, filter: 'relativeDay', width: 12 }, { label: 'contact.profile.visit', value: 'contact.profile.visits.of', translate: true, context: { count: function(report) { return extras.getSubsequentVisits(report).length; }, total: 4, }, width: 6, }, { label: 'contact.profile.risk.title', value: function(report) { return extras.isHighRiskPregnancy(report) ? 'high' : 'normal'; }, translate: true, width: 5, icon: function(report) { return extras.isHighRiskPregnancy(report) ? 'risk' : ''; }, }, ], modifyContext: function(ctx) { ctx.pregnant = true; // don't show Create Pregnancy Report button }, }, ], };","contact-summarytemplatedjs-cards#\u003ccode\u003econtact-summary.templated.js .cards[]\u003c/code\u003e":"property type description required label translation key Label on top of card. yes appliesToType string[] A filter, so appliesIf is called only if the contact’s type matches one or more of the elements. For example, ['person']. Note that ['report'] is also allowed to create a report card. But, you cannot use it in conjunction with a contact’s type. It defaults to all types if it is not defined. no appliesIf function(report) or boolean Return true if the field should be shown. no modifyContext function(context, report) Used to modify or add data which is passed as input to forms filled from the contact page. no fields Array[] of fields The content of the card. yes fields[n].appliesIf boolean or function(report) Same as Fields.appliesIf above. fields[n].label string or function(report) Label shown with the field. yes fields[n].icon string or function(report) The name of the icon to display beside this field, as defined through the Configuration \u003e Icons page. no fields[n].value string or function(report) The value shown for the field. yes fields[n].filter string or function(report) The display filter to apply to the value, eg: { value: '2005-10-09', filter: 'age' } will render as “11 years”. Common filters are: age, phone, weeksPregnant, relativeDate, relativeDay, fullDate, simpleDate, simpleDateTime, lineage, resourceIcon, translate. For the complete list of filters, and more details on what each does, check out the code in webapp/src/ts/pipes dir. no fields[n].width integer or function(report) The horizontal space for the field. Common values are 12 for full width, 6 for half width, or 3 for quarter width. Default 12. no fields[n].translate boolean or function(report) Whether or not to translate the value. Defaults to false. no fields[n].context object When translate: true and value uses translation variables, this value should provide the translation variables. Only supports properties count and total on cards. no","contact-summarytemplatedjs-fields#\u003ccode\u003econtact-summary.templated.js .fields[]\u003c/code\u003e":"property type description required label string A translation key which is shown with the field. yes icon string The name of the icon to display beside this field, as defined through the Configuration \u003e Icons page. no value string The value shown for the field. yes filter string The display filter to apply to the value, eg: { value: '2005-10-09', filter: 'age' } will render as “11 years”. Common filters are: age, phone, weeksPregnant, relativeDate, relativeDay, fullDate, simpleDate, simpleDateTime, lineage, resourceIcon, translate. For the complete list of filters, and more details on what each does, check out the code in webapp/src/ts/pipes dir. no width integer The horizontal space for the field. Common values are 12 for full width, 6 for half width, or 3 for quarter width. Default 12. no translate boolean Whether or not to translate the value. Defaults to false. no context object When translate: true and value uses translation variables, this value should provide the translation variables. no appliesIf function() Return true if the field should be shown, and false if it should be hidden. Default is true. no appliesToType string[] Filters the contacts for which appliesIf will be evaluated. For example, ['person'] or ['clinic', 'health_center']. It defaults to all types if it is not defined. no"},"title":"contact-summary.templated.js"},"/building/forms/":{"data":{"":"Forms are a building block of all CHT apps. They are used when creating or editing contacts, and when completing a care guide or survey within the app. Forms are also used to interpret SMS interactions with the CHT.\nWhen a completed form is submitted, it is treated as a Report in the app. All reports can be viewed in the Reports tab by those with the proper access within the hierarchy.\nThere are four different types of forms:\nContact Forms: used to create and edit contacts. Defined as CHT-enhanced XForms. App Forms: serve as actions within the app, such as a task or an action. Defined as CHT-enhanced XForms. Collect Forms: used to render forms in Medic Collect. Defined as ODK XForms and need a corresponding JSON form to receive data in CHT. Forms that can be completed in the app are built using a CHT-enhanced version of ODK XForms notation – a XML definition of the structure and format for a set of questions. Since writing raw XML can be tedious, the XLSForm standard is commonly used to define forms. The cht-conf command line tool can be used to convert to the XForm format and include the form in a CHT application. The instructions on this site assume some knowledge of XLSForm.\nContent in this section app contact collect Setting Form Properties Versioning forms Expression Functions"},"title":"Forms"},"/building/forms/_partial_expression_functions/":{"data":{"":"The following functions are available for use in JavaScript expressions:\nSignature Description ageInDays(contact) Returns the current age of the given contact in days. ageInMonth(contact) Returns the current age of the given contact in months. ageInYears(contact) Returns the current age of the given contact in years. levenshteinEq(string0, string1, threshold = 3) (Added 4.19.0) Returns true if the Levenshtein distance between the given strings is less than or equal to the given threshold. Otherwise false. normalizedLevenshteinEq(string0, string1, threshold = 0.42857142857142855) (Added 4.19.0) Similar to the levenshteinEq function except the distance value is “normalized” (by dividing by the length of the longest string) before comparing to the threshold. See below for more details.","normalized-levenshtein-equality#Normalized Levenshtein Equality":"In cases where the length of the input strings can vary greatly, the normalizedLevenshteinEq function can be preferable to the levenshteinEq function. The normalizedLevenshteinEq function divides the Levenshtein distance by the length of the longest string before comparing the result to the threshold. In effect, this makes the matching more strict for shorter strings (the actual distance must be shorter for them to be considered equal) and more lenient for longer strings (the actual distance can be longer, but the strings will still be considered equal).\nThis can help make the same threshold limit value appropriate for use across a greater variety of string lengths. For example, if the threshold is set to 0.3, then an actual distance of 2 would be considered equal (when using normalizedLevenshteinEq) for strings of length 9, but not for two strings of length 5. (Because (2 / 9 = 0.2222) \u003c= 0.3 and (2 / 5 = 0.4) \u003e 0.3.)\nWhen using normalized Levenshtein equality, make sure you consider the behavior of a particular threshold value at the edges of your expected string length range. For example, the distance between far and car is 1. If you want your logic to consider john and jon as equal, you will need to use a normalized Levenshtein equality threshold of at least 1 / 4 = 0.25. However, for strings with a length of 25, that threshold will allow a distance of 5 to be considered equal."},"title":"Expression Functions"},"/building/forms/app/":{"data":{"":"App forms are used for care guides within the web app, whether accessed in browser or via the Android app. When a user completes an app form, the contents are saved in the database with the type data_record. These docs are known in the app as Reports.\nApp forms are defined by the following files:\nA XML form definition using a CHT-enhanced ODK XForm format A XLSForm form definition, easier to write and converts to the XForm (optional) Meta information in the {form_name}.properties.json file (optional) Media files in the {form_name}-media directory (optional). How to include multimedia files.","add-date#\u003ccode\u003eadd-date\u003c/code\u003e":"Added in 4.0.0.\nAdds the provided number of years/months/days/hours/minutes to a date value.\nadd-date(date, years, months, days, hours, minutes) This function is useful for things like calculating a date that is a specific number of days in the future. For example, the following returns a date that is two weeks from now: add-date(today(), 0, 0, 14).\nYou can also add negative numbers to get dates in the past. This can be used to calculate a person’s birthdate date based on how many years/months old they are: add-date(today(), 0-${age_years}, 0-${age_months}).","android-app-launcher#Android App Launcher":"Available in +3.13.0 and in Android device only.\nA widget to launch an Android app that receives and sends data back to an app form in CHT-Core.\nThis widget requires the cht-android app in order to work, and will be disabled for users running the CHT in a browser. This widget requires the READ_EXTERNAL_STORAGE permission in CHT Android to work properly, to enable this permission add the following line in the branded app’s AndroidManifest.xml.","bikram-sambat-datepicker#Bikram Sambat Datepicker":"Calendar widget using Bikram Sambat calendar, which is used by default for appropriate languages. The CHT documentation includes a conversion tool to check the conversion between Gregorian and Bikram Sambat dates. See Also: `to-bikram-sambat` XPath function","build#Build":"Convert and build the app forms into your application using the convert-app-forms and upload-app-forms actions in cht-conf.\ncht --local convert-app-forms upload-app-forms","cht-special-fields#CHT Special Fields":"Some fields in app forms control specific aspects of CHT Apps, either to bring data into forms or for a feature outside of the form.","cht-xform-widgets#CHT XForm Widgets":"Some XForm widgets have been added or modified for use in CHT applications. The code for these widgets can be found in the CHT Core Framework repository.","cht-xpath-functions#CHT XPath Functions":"","chtdifference-in-days#\u003ccode\u003echt:difference-in-days\u003c/code\u003e":"Added in 4.7.0.\nCalculates the number of whole days between two dates.","chtdifference-in-months#\u003ccode\u003echt:difference-in-months\u003c/code\u003e":"Calculates the number of whole calendar months between two dates. This is often used when determining a child’s age for immunizations or assessments.\nFor CHT versions lower than 4.7.0, the deprecated difference-in-months function (without the cht namespace) should be used.","chtdifference-in-weeks#\u003ccode\u003echt:difference-in-weeks\u003c/code\u003e":"Added in 4.7.0.\nCalculates the number of whole calendar weeks between two dates.","chtdifference-in-years#\u003ccode\u003echt:difference-in-years\u003c/code\u003e":"Added in 4.7.0.\nCalculates the number of whole calendar years between two dates.","chtextension-lib#\u003ccode\u003echt:extension-lib\u003c/code\u003e":"Added in 4.2.0.\nThis function invokes a configured extension library. The first parameter is a string with the name of the library to execute, and any remaining parameters are passed through as is. For example, to calculate an average of two numbers, the xpath could be: cht:extension-lib('average.js', /data/first, /data/second ).","chtstrip-whitespace#\u003ccode\u003echt:strip-whitespace\u003c/code\u003e":"Added in 4.10.0.\nRemoves all whitespace characters from a string.","chtvalidate-luhn#\u003ccode\u003echt:validate-luhn\u003c/code\u003e":"Added in 4.10.0.\nValidate a given number using the Luhn algorithm to help detect typos. Provide the field as the first parameter and optionally include the expected string length in the second parameter. Returns true if the number is valid.","code-sample#Code sample":"In this sample properties file, the associated form would only show on a person’s page, and only if their sex is unspecified or female and they are between 10 and 65 years old:","contact-selector#Contact Selector":"A dropdown field to search and select a person or place, and save their UUID in the report. The contact’s data will also be mapped to fields with matching names within the containing group. If the contact selector’s appearance includes bind-id-only, the associated data fields are not mapped. See the form input guide for an example.","countdown-timer#Countdown Timer":"A visual timer widget that starts when tapped/clicked, and has an audible alert when done. To use it, first make sure you have the namespaces column in the “settings” tab of your XLSForm populated with a value that includes cht=https://communityhealthtoolkit.org. Then, you can add the timer as a trigger field with the appearance set to countdown-timer. The duration of the timer (in seconds) can be set in a column named instance::cht:duration (the default value is 60).\ntype appearance instance::cht:duration trigger countdown-timer 30 If you want to make the timer mandatory so users must wait for the timer to complete before continuing to the next page or submitting the form, you can populate the required column with an XPath expression as you would do for any other required question. A value of \"OK\" will be set for the trigger field when the timer completes.\nThe trigger implementation of the countdown timer is only supported for CHT versions 4.7.0+. For older CHT versions, the deprecated note implementation of the countdown timer can be used. However, it does not support setting a value in the required column. To use the deprecated countdown timer, create a note field with the appearance set to countdown-timer. The duration of the timer (in seconds) can be set in the default column. If this value is not set, the timer will be set to 60 seconds.","display-base64-image#Display Base64 Image":"Available in +3.13.0.\nTo display an image based on a field containing the Base64 encode value, add the appearance display-base64-image to a field type text.","example-use#Example Use":"This example XForm form shows the use of the z-score function. To calculate the z-score for a patient given their sex, age, and weight the XPath calculation is as follows:\nz-score('weight-for-age', ../my_sex, ../my_age, ../my_weight)\nThe data used by this function needs to be added to CouchDB. The example below shows the structure of the database document. It creates a weight-for-age table, where you can see that a male aged 0 at 2.08kg has a z-score of -3. Your database doc will be substantially larger, so you may find the conversion script helpful to convert z-score tables to the required doc format.\n{ \"_id\": \"zscore-charts\", \"charts\": [{ \"id\": \"weight-for-age\", \"data\": { \"male\": [{ \"key\": 0, \"points\": [ 1.701, 2.08, 2.459, 2.881, 3.346, 3.859, 4.419, 5.031, 5.642 ] }] } }] }","expression-functions#Expression functions":"The following functions are available for use in JavaScript expressions:\nSignature Description ageInDays(contact) Returns the current age of the given contact in days. ageInMonth(contact) Returns the current age of the given contact in months. ageInYears(contact) Returns the current age of the given contact in years. levenshteinEq(string0, string1, threshold = 3) (Added 4.19.0) Returns true if the Levenshtein distance between the given strings is less than or equal to the given threshold. Otherwise false. normalizedLevenshteinEq(string0, string1, threshold = 0.42857142857142855) (Added 4.19.0) Similar to the levenshteinEq function except the distance value is “normalized” (by dividing by the length of the longest string) before comparing to the threshold. See below for more details. Normalized Levenshtein Equality In cases where the length of the input strings can vary greatly, the normalizedLevenshteinEq function can be preferable to the levenshteinEq function. The normalizedLevenshteinEq function divides the Levenshtein distance by the length of the longest string before comparing the result to the threshold. In effect, this makes the matching more strict for shorter strings (the actual distance must be shorter for them to be considered equal) and more lenient for longer strings (the actual distance can be longer, but the strings will still be considered equal).\nThis can help make the same threshold limit value appropriate for use across a greater variety of string lengths. For example, if the threshold is set to 0.3, then an actual distance of 2 would be considered equal (when using normalizedLevenshteinEq) for strings of length 9, but not for two strings of length 5. (Because (2 / 9 = 0.2222) \u003c= 0.3 and (2 / 5 = 0.4) \u003e 0.3.)\nWhen using normalized Levenshtein equality, make sure you consider the behavior of a particular threshold value at the edges of your expected string length range. For example, the distance between far and car is 1. If you want your logic to consider john and jon as equal, you will need to use a normalized Levenshtein equality threshold of at least 1 / 4 = 0.25. However, for strings with a length of 25, that threshold will allow a distance of 5 to be considered equal.","formsappform_namepropertiesjson#\u003ccode\u003eforms/app/{form_name}.properties.json\u003c/code\u003e":"property description required title The form’s title seen in the app. Uses a localization array using the 2-letter code, not the translation keys discussed in the Localization section. yes icon Icon associated with the form. The value is the image’s key in the resources.json file, as described in the Icons section yes subject_key Override the default report list title with a custom translation key. The translation uses a summary of the report as the evaluation context so you can include report fields in your value, for example: Case registration {{case_id}}. Useful properties available in the summary include: from (the phone number of the sender), phone (the phone number of the report contact), form (the form code), subject.name (the name of the subject), and case_id (the generated case id). Defaults to the name of the report subject. no hidden_fields Array of Strings of form fields to hide in the view report UI in the app. This is only applied to future reports and will not change how existing reports are displayed. no context The context defines when and where the form should be available in the app no context.person Boolean determining if the form can be seen in the Action list for a person’s profile. This is still subject to the expression. no context.place Boolean determining if the form can be seen in the Action list for a person’s profile. This is still subject to the expression. no context.expression A JavaScript expression which is evaluated when a contact profile or the reports tab is viewed. If the expression evaluates to true, the form will be listed as an available action. The inputs contact, summary, user and userSummary (as of 4.21.0) are available. By default, forms are not shown on the reports tab, use \"expression\": \"!contact\" to show the form on the Reports tab since there is no contact for this scenario. no context.permission String permission key required to allow the user to view and submit this form. If blank, this defaults to allowing all access. no","formsapppregnancypropertiesjson#\u003ccode\u003eforms/app/pregnancy.properties.json\u003c/code\u003e":"{ \"title\": [ { \"locale\": \"en\", \"content\": \"New Pregnancy\" }, { \"locale\": \"hi\", \"content\": \"नई गर्भावस्था\" } ], \"icon\": \"pregnancy-1\", \"hidden_fields\": [ \"private\", \"internal\" ], \"context\": { \"person\": true, \"place\": false, \"expression\": \"contact.type === 'person' \u0026\u0026 (!contact.sex || contact.sex === 'female') \u0026\u0026 (!contact.date_of_birth || (ageInYears(contact) \u003e= 10 \u0026\u0026 ageInYears(contact) \u003c 65))\", \"permission\": \"can_register_pregnancies\" } }","input-data#Input data":"app forms have access to a variety of input data depending on the source of the form.","parse-timestamp-to-date#\u003ccode\u003eparse-timestamp-to-date\u003c/code\u003e":"Added in 3.13.0.\nUse this function to parse from a timestamp number to a date. This is useful when using other XForm utility functions that receive date type as parameter, see example below:\ntype name label calculation default … string start_date_time NO_LABEL 1628945040308 string start_date_time_formatted Started on: format-date-time(parse-timestamp-to-date(${start_date_time}), “%e/%b/%Y %H:%M:%S”)","phone-number-input#Phone number input":"When accepting telephone numbers in a form, the phone widget validates the given phone number is valid for the server’s configured locale and can optionally check to see if a duplicate contact already exists with the same phone number.\nTo use the widget, create a string field with the appearance numbers tel. This will produce a text box input field in the form where the user can enter the phone number. Values entered for this field will be rejected if they are not valid phone numbers for the server’s configured default_country_code (as determined by the google-libphonenumber library). Additionally, valid input will be normalized to the E164 format (e.g. +1234567890) before storing it in the form data model.\nThe widget can also reject phone numbers that are already associated with an existing contact. (A contact already exists with the same phone number value in its phone field.) To enable this duplicate checking for a particular field, first make sure you have the namespaces column in the “settings” tab of your XLSForm populated with a value that includes cht=https://communityhealthtoolkit.org. Then, in the “survey” tab, add a column called instance::cht:unique_tel and set the value to true for the phone number field.\nA validation failure, either for an invalid or duplicate phone number will prevent the form from being submitted. To also display an error message to the user, set true in the constraint column for the phone number field and enter localized messages in the desired constraint_message::xx columns.\ntype appearance instance::cht:unique_tel constraint constraint_message::en string numbers tel true true Please enter a valid phone number. Configuring a phone input as a string field with the tel appearance is only supported for CHT versions 4.11.0+. For older CHT versions, a phone input can be configured by setting tel in the type column (without any appearance value). This deprecated implementation cannot be configured via the instance::cht:unique_tel column and instead will always reject numbers that match the phone field on an existing contact.","properties#Properties":"The meta information in the {form_name}.properties.json file defines the form’s title and icon, as well as when and where the form should be available.","quintiles#Quintiles":"The NationalQuintile and UrbanQuintile fields on a form will be assigned to all people belonging to the place. This is helpful when household surveys have quintile information which could be used to target health services for individuals. Read More: Track Wealth Quintiles","rapid-diagnostic-test-capture#Rapid Diagnostic Test Capture":"Take a picture of a Rapid Diagnotistic Test and save it with the report. Works with rdt-capture Android application. To use create a string field with appearance mrdt-verify.","supported-xlsform-meta-fields#Supported XLSForm Meta Fields":"XLSForm has a number of data type options available for meta data collection, of which the following are supported in CHT app forms:\nelement description start A timestamp of when the form entry was started, which occurs when the form is fully loaded. end A timestamp of when the form entry ended, which is when the user hits the Submit button. today Day on which the form entry was started.","to-bikram-sambat#\u003ccode\u003eto-bikram-sambat\u003c/code\u003e":"Added in 3.14.0.\nThis function converts a date to a string containing the value of the date formatted according to the Bikram Sambat calendar.\nSee also: Bikram Sambat Datepicker","uhc-mode#UHC Mode":"When the visited_contact_uuid field is set at the top level of a form, this form is counted as a household visit in UHC Mode. This field must be a calculate field with the place UUID of the visited contact. You may run into performance issues if you configure this to look at forms submitted very frequently. Read More: Configuring UHC Mode","uploading-binary-attachments#Uploading Binary Attachments":"Forms can include arbitrary binary data which is submitted and included in the doc as an attachment. If this is an image type it’ll then be displayed inline in the report UI.\nTo mark an element as having binary data add an extra column in the XLSForm called instance::type and specify binary in the element’s row.","xform#XForm":"A CHT-enhanced version of the ODK XForm standard is supported.\nData needed during the completion of the form (eg patient’s name, prior information) is passed into the inputs group. Reports that have at least one of place_id, patient_id, and patient_uuid at the top level will be associated with that contact.\nSee Also: Passing contact data to care guides\nA typical form ends with a summary group (eg group_summary, or group_review) where important information is shown to the user before they submit the form.\nIn between the inputs and the closing group is the form flow - a collection of questions that can be grouped into pages. All data fields submitted with a form are stored, but often important information that will need to be accessed from the form is brought to the top level. To make sure forms are properly associated to a contact, make sure at least one of place_id, patient_id, and patient_uuid is stored at the top level of the form.\nSee Also: Content and Layout","xlsform#XLSForm":"Since writing raw XML can be tedious, we suggest creating the forms using the XLSForm standard, and using the cht-conf command line configurer tool to convert them to XForm format.\ntype name label relevant appearance calculate … begin group inputs Inputs ./source = ‘user’ field-list hidden source hidden source_id hidden task_id Task_ID begin group contact string _id Patient ID select-contact type-person string patient_id Medic ID hidden string name Patient Name hidden end group end group calculate _id ../inputs/contact/_id calculate patient_id ../inputs/contact/patient_id calculate name ../inputs/contact/name … begin group group_summary Summary field-list summary note r_patient_info **${patient_name}** ID: ${r_patient_id} note r_followup Follow Up note r_followup_note ${r_followup_instructions} end group Note: If the form uses a file picker to upload any type of file, and it is accessed by using CHT Android, then include the READ_EXTERNAL_STORAGE permission in order to access the files in the device. To enable this permission add the following line in the branded app’s AndroidManifest.xml.","xpath#XPath":"Calculations are achieved within app forms using XPath statements in the “calculate” field of XForms and XLSForms. CHT apps support XPath from the ODK XForm spec, which is based on a subset of XPath 1.0, and is evaluated by openrosa-xpath-evaluator. The ODK XForm documentation provides useful notes about the available operators and functions. Additionally, CHT specific functions are available for forms in CHT apps.\nThe + operator for string concatenation is deprecated and will be removed in a future version. You are strongly encouraged to use the concat() function instead.","z-score#\u003ccode\u003ez-score\u003c/code\u003e":"In Enketo forms you have access to an XPath function to calculate the z-score value for a patient. The function accesses table data stored in CouchDB.\nThe z-score function takes four parameters:\nThe name of z-score table to use, which corresponds to value of the database document’s _id attribute. Patient’s sex, which corresponds to the data object’s name. In the example below male for this parameter corresponds to charts[].data.male in the database document. First parameter for the table lookup, such as age. Value maps to the key value in the database document. Second parameter for the table lookup, such as height. Value is compared against the points in the database document."},"title":"app"},"/building/forms/collect/":{"data":{"":"ODK XForms are used to render forms in the Medic Collect Android app. These forms cannot use any CHT-specific XForm notations. All Medic Collect forms are processed as SMS (even when submitted over a wifi) therefore a corresponding JSON form with matching fields is used to interpret the incoming report.\nCollect forms must be in the forms/collect folder to be processed by cht-conf’s convert-collect-forms and upload-collect-forms actions. Once uploaded to the server, they can be downloaded by the Medic Collect app. These forms can also be included in Medic Collect builds for users without a data connection to get forms.\nXForms require a couple minor changes to be compatible with Medic Collect so that they can properly be received by a Medic instance. The changes can be done either manually in the XForm’s XML, or automatically with XLSForm forms using cht-conf.","automatic-changes-with-xlsforms#Automatic changes with XLSForms":"If using a XLSForm and using cht-conf to convert to XForm, the necessary fields will be automatically added to the resulting XForm. You can override the default prefix and separator by declaring sms_keyword and sms_separator respectively in the Settings tab.","manual-changes-in-xform#Manual changes in XForm":"Collect forms need prefix and delimiter values added to the XForm’s XML. This is done where the form ID is declared in the instance’s data model. For example, the following:"},"title":"collect"},"/building/forms/configuring/":{"data":{"":"Content in this section Configuring UHC Mode Creating Additional Docs from App Forms Make Calls and Sending SMS from App Forms Fetch forms from Google Drive Input data available in forms Include Multimedia in Forms Track Wealth Quintiles Customizing Titles in the Reports List"},"title":"Configuring"},"/building/forms/configuring/additional-docs/":{"data":{"":"In version 2.13.0 and higher, you can configure app forms to generate additional docs upon submission. You can create one or more docs using variations on the configuration described below. One case where this can be used is to register a newborn from a delivery report, as shown below. First, here is an overview of what you can do and how the configuration should look in XML:","example-form#Example Form":"Ab","example-form-model#Example Form Model":"val A","example-form-model-1#Example Form Model":"","extra-docs#Extra Docs":"Extra docs can be added by defining structures in the model with the attribute\ndb-doc=\"true\" Important\nYou must have lower-case true in your XLSform, even though Excel will default to TRUE.","linked-docs#Linked Docs":"Linked docs can be referred to using the doc-ref attribute, with an xpath. This can be done at any point in the model, e.g.:","linked-docs-example#Linked Docs Example":"This example shows how you would register a single newborn from a delivery report.\nFirst, the relevant section of the delivery report XLSForm file:\nDelivery report\nHere is the corresponding portion of XML generated after converting the form:","repeated-docs#Repeated Docs":"Can have references to other docs, including the parent These currently cannot be linked from other docs, as no provision is made for indexing these docs","repeated-docs-example#Repeated Docs Example":"This example extends the above example to show how you would register one or multiple newborns from a delivery report. This allows you to handle multiple births.\nFirst, the relevant section of the delivery report XLSForm file:\nDelivery report\nHere is the corresponding portion of XML generated after converting the form:","resulting-docs#Resulting Docs":"Report (as before):\n{ _id: '...', _rev: '...', type: 'report', _attachments: { xml: ... ], fields: { root_prop_1: 'val A' } } Other doc:\n{ \"_id\": \"...\", \"_rev\": \"...\", \"type\": \"whatever\", \"other_prop\": \"val B\" }","resulting-docs-1#Resulting Docs":"Report:\n{ \"_id\": \"abc-123\", \"_rev\": \"...\", \"type\": \"report\", \"fields\": { \"sufferer\": \"def-456\" } } Other doc:\n{ \"_id\": \"def-456\", \"_rev\": \"...\", \"type\": \"person\", \"name\": \"Gómez\", \"original_report\": \"abc-123\" }","resulting-docs-2#Resulting Docs":"Report:\n{ \"_id\": \"abc-123\", \"_rev\": \"...\", \"type\": \"report\", \"fields\": { \"name\": \"Ab\" } } Other docs:\n{ \"_id\": \"...\", \"_rev\": \"...\", \"type\": \"relative\", \"name\": \"Bo\", \"parent\": \"abc-123\", } { \"_id\": \"...\", \"_rev\": \"...\", \"type\": \"relative\", \"name\": \"Ch\", \"parent\": \"abc-123\", }"},"title":"Additional Docs"},"/building/forms/configuring/app-form-sms/":{"data":{"":"","concatargs#\u003ccode\u003econcat(...args)\u003c/code\u003e":"...args: 0 or more values to be concatenated.\nconcat('A', 'bee', 'Sea') =\u003e 'AbeeSea'","examples#Examples":"","form-submission-json#Form Submission JSON":"doc.fields = { s_acc_danger_signs: { s_acc_danger_sign_seizure: 'no', s_acc_danger_sign_loss_consiousness: 'yes', s_acc_danger_sign_unable_drink: 'no', s_acc_danger_sign_confusion: 'yes', s_acc_danger_sign_vomit: 'no', s_acc_danger_sign_chest_indrawing: 'yes', s_acc_danger_sign_wheezing: 'no', s_acc_danger_sign_bleeding: 'yes', s_acc_danger_sign_lathargy: 'no', has_danger_sign: 'true', }, };","formdocreport2sms#\u003ccode\u003eformDoc.report2sms\u003c/code\u003e":"concat( \"U5 \", match(doc.s_acc_danger_signs.has_danger_sign, \"true:DANGER, false:NO_DANGER\"), \" \", match(doc.s_acc_danger_signs.s_acc_danger_sign_seizure, \"yes:S\"), match(doc.s_acc_danger_signs.s_acc_danger_sign_loss_consiousness, \"yes:L\"), match(doc.s_acc_danger_signs.s_acc_danger_sign_unable_drink, \"yes:D\"), match(doc.s_acc_danger_signs.s_acc_danger_sign_confusion, \"yes:C\"), match(doc.s_acc_danger_signs.s_acc_danger_sign_vomit, \"yes:V\"), match(doc.s_acc_danger_signs.s_acc_danger_sign_chest_indrawing, \"yes:I\"), match(doc.s_acc_danger_signs.s_acc_danger_sign_wheezing, \"yes:W\"), match(doc.s_acc_danger_signs.s_acc_danger_sign_bleeding, \"yes:B\"), match(doc.s_acc_danger_signs.s_acc_danger_sign_lathargy, \"yes:Y\") )","matchval-matchers#\u003ccode\u003ematch(val, matchers)\u003c/code\u003e":"val: the value to run matches against\nmatchers: a string representing values to match and their corresponding outputs\nmatch('a', 'a:Hay,b:bzz,c:see') =\u003e 'Hay' match('b', 'a:Hay,b:bzz,c:see') =\u003e 'bzz' match('c', 'a:Hay,b:bzz,c:see') =\u003e 'c'","medic-custom-sms-representation#Medic Custom SMS representation":"To configure a form to send using Medic’s custom SMS definition, the value of xml2sms from the form’s CouchDB doc should be a string containing an Angular expression. This allows access to the fields property of the data_record doc created when saving the form submission to the database. Extra functions are also provided to make compiling a form submission more simple.","odk-compact-record-representation-for-sms#ODK compact record representation for SMS":"When xml2sms field value is Boolean true, the app will try to compact the form using this format. To get forms sent in this format, follow the ODK documentation.","sending-reports-as-sms#Sending reports as SMS":"To define that an XForm should be converted to an SMS, add the field xml2sms to the form’s CouchDB doc and assign it a truthy value (either a boolean or a string).\nWhen submitting such a form, along with creating the report document, the app will try to compact the report’s content into an SMS that would be sent to the configured Gateway phone number.\nThere are two formats available - either using the ODK’s compact record representation for SMS, or Medic’s custom format. When the form compaction fails or returns no content, no SMS will be sent.","sms-content#SMS content":"U5 DANGER LCIB","spacedargs#\u003ccode\u003espaced(...args)\u003c/code\u003e":"...args: 0 or more values to be concatenated with spaces between them.\nspaced('A', 'bee', 'Sea') =\u003e 'A bee Sea'","special-functions#Special Functions":"","triggering-calls-and-sms#Triggering Calls and SMS":"When an XForm is loaded on a phone you can start a phone call or trigger the sending of an SMS within the form itself. This can be useful if within a task or assessment, you want to tell the user to contact a patient, or perhaps a health worker at a facility.\nTo set up the call or SMS you’ll need to create a link with tel: or sms: within a note field. To create the link, use the markdown link format, eg [Call Patient](tel:+2547009875000). You can specify the content of the SMS by using the body parameter, eg [Send SMS](sms://+25470098765000?body=Hello World!).\nThe phone number and message can be generated from fields within the XForm. For instance, if you have patient_name, patient_phone, and message fields, you can generate the SMS as follows:\nXLSForm [Send SMS to ${patient_name}](sms://${patient_phone}?body=${message})\nXForm [Send SMS to ](sms://?body=)\nIf you want to use a button to make the action more obvious, this can be done using HTML and CSS within the note:\n[\u003cspan style='background-color: #CC0000; color:white; padding: 1em; text-decoration: none; '\u003eCall the patient\u003c/span\u003e](tel:${patient_phone}) Note that the SMS link notation can be interpreted differently from one phone to another. Some devices work well with sms:${phone}?body=${message}, others with sms://${phone}?body=${message}. You may find these SMS link tests helpful in determining what works on devices for your deployment."},"title":"App Form SMS"},"/building/forms/configuring/form-inputs/":{"data":{"":"CHT forms have access to varying amounts of input data depending on the type of form and its source.","app-forms#\u003ccode\u003eapp\u003c/code\u003e forms":"Available data:\ninputs data for source inputs data for contact contact-summary data user-contact-summary data inputs data from task inputs data for user Contact data via contact selector","conditionally-selectingloading-contact-data-for-the-current-contact#Conditionally selecting/loading contact data for the current contact":"As noted above, when opening an app form with a contact in context (e.g. when opening the form from the “People” tab), the contact’s data will be available in the inputs/contact group. However, this data is not available when opening the form from the “Reports” tab since there is no contact in context.\nA common pattern for enabling consistent form behavior in this case is to use a contact selector in the inputs/contact group and make the inputs group only relevant when the default source value is not overridden (the source field is populated with specific values when the form is opened from the “People” tab or from a task). With this pattern, the contact selector will only be visible when the form is opened from the “Reports” tab and the user can select the contact they want to report on. This will ensure that the inputs/contact data is always available regardless of how the form is opened.\nThen, this contact data can be used to link the report created from the form to the person or place in context (or the person selected when opening the form). Getting the values for _id or patient_id and setting them to patient_id or patient_uuid on the final report will link that report to the contact. Then the report will be displayed on the contact’s summary page.\ntype name label appearance calculate relevant default begin group inputs NO_LABEL field-list ./source = ‘user’ hidden source Source user begin group contact NO_LABEL string _id Patient ID select-contact type-person string patient_id Medic ID hidden end group contact end group inputs calculate patient_uuid Patient UUID ../contact/_id calculate patient_id Patient ID ../contact/patient_id","contact-forms#\u003ccode\u003econtact\u003c/code\u003e forms":"Available data:\ninitial contact data inputs data for user Contact data via contact selector","contact-selector#Contact selector":"Using a contact selector allows you to load data from the selected contact (person or place). The contact’s id can be provided by the form or the user can search for an existing contact.\nTo select a contact in a form, create a field with the type string and set the appearance to select-contact type-{{contact_type_1}} type-{{contact_type_2}} .... Setting multiple contact_type ids allows the user to search among multiple types of contacts. If no contact type appearance is specified then all contact types will be queried when searching.\nFor CHT version v3.9.x and below, contacts must be selected by setting the field type to db:{{contact_type}} and the appearance to db-object (instead of using string and select-contact). The user-settings doc for the user is NOT the same as the CHT contact doc for the user.","contact-summary-data#\u003ccode\u003econtact-summary\u003c/code\u003e data":"app forms with a contact in context can access the contact-summary data associated with the contact. This is done by referencing an instance named contact-summary. E.g. instance('contact-summary')/context/${variable}. See the reference documentation for more information.\nContact summary data is not available in contact forms or in forms created from the “Reports” tab.","create-forms#Create forms":"Forms for adding contacts have access to a small group of fields contained in a top-level group that is named for the contact_type id of the contact being added (so person, clinic, etc). (This is the same group used to create the contact document when the form is completed.)\ntype name label hint begin group person NO_LABEL hidden parent Parent Id Contains the doc id for the new contact’s parent contact doc. hidden contact_type Contact Type The contact_type id of the contact. end group","edit-forms#Edit forms":"Forms for editing contacts have access to all the contact’s current data. These fields are contained in a top-level group that is named for the contact_type id of the contact being added (so person, clinic, etc). If fields in the top-level group are edited by the form, these changes will be saved to the contact’s doc.\nIn addition, the contact’s parent data is hydrated so that the form has access to the data stored on the parent contact doc in the parent group.\ntype name label hint begin group person NO_LABEL begin group parent Parent Contains the data for the contact’s parent contact doc. hidden name Parent name The name of the parent contact end group parent end group","example-of-saving-user-data-as-metadata-on-a-report#Example of saving \u003ccode\u003euser\u003c/code\u003e data as metadata on a report":"type name label calculation begin group inputs NO_LABEL begin group user NO_LABEL string contact_id User’s contact id string facility_id Id for user’s facility name name Username end group end group calculate created_by Username that created report ../inputs/user/name calculate created_by_person_uuid UUID that created report ../inputs/user/contact_id calculate created_by_place_uuid Facility of user that created report ../inputs/user/facility_id","form-source#Form source":"If a form is created from the “People” tab, inputs/source will be set to “contact”. If a form is created from a task, inputs/source will be set to “task”.\nThe source field is also available at the top level (not nested in the inputs group).","initial-contact-data-in-contact-forms#Initial contact data in \u003ccode\u003econtact\u003c/code\u003e forms":"","inputs-data-for-contact-in-app-forms#\u003ccode\u003einputs\u003c/code\u003e data for contact in \u003ccode\u003eapp\u003c/code\u003e forms":"app forms with a contact in context have access to that contact’s data in the inputs/contact group.\nThe contact group is also available at the top level (not nested in the inputs group). The contact group contains all the fields from the doc of the contact in context. If a place is in context, the primary person for that place will be hydrated in the inputs/contact/contact group. Alternatively, when a person is in context, the parent place for the person will be hydrated in inputs/contact/parent.\nContact data is not available in forms created from the “Reports” tab.","inputs-data-from-task#\u003ccode\u003einputs\u003c/code\u003e data from task":"app forms created via a task have access to any data supplied by the task in the inputs group.\nAdditionally, these forms have access to the contact data for the contact associated with the task.\nThe following fields will also be available in the inputs group:\ntask_id: The unique identifier of the task in context. source_id: For tasks with appliesTo: 'contacts, this is the id of the contact for the task. For tasks with appliesTo: 'reports', this is the id of the report which triggered the task.","loading-additional-contact-data#Loading additional contact data":"Additional data about the contact can be loaded by adding fields to the same group as the contact selector. The field name must match the name of a field on the contact doc. The data will be loaded when the contact is selected and will overwrite any existing data in the field.\nWarning\nThe data loaded by the contact selector will overwrite any existing data in fields that are in the same group as the contact selector and share the same name as a field on the selected contact. Data will not be written into matching fields if bind-id-only is included in the appearance.\ntype name label appearance begin group selected_person NO_LABEL string person_id Person ID select-contact type-person string name Name of selected person end group selected_person","loading-contact-data-for-use-in-other-expressions#Loading contact data for use in other expressions":"One powerful way to use the contact selector is to automatically load data about an existing contact for usage in various expressions within the form. This can be done with a combination of functionality we have already seen!\nIn the following example, we are loading the name of the current user from the associated contact doc:\ntype name label appearance calculate begin group inputs NO_LABEL begin group user NO_LABEL hidden contact_id User’s Contact ID end group user end group inputs begin group intro NO_LABEL field-list begin group current_user NO_LABEL string _id User’s Contact ID hidden select-contact type-person ${contact_id} string name User’s name hidden end group current_user calculate user_name Supervisor name ../current_user/name note welcome Welcome ${user_name}! end group intro Note\nWhen loading “hidden” contact data, it is recommended to nest the group inside an existing page (created by a group with the field-list appearance). This is because there is a known issue that results in an empty page being added to the form when a top-level group had no visible questions.","loading-descendants-of-the-current-contact#Loading descendants of the current contact":"Use the appearance descendant-of-current-contact to load the current contact’s descendants when opening an app form or contact form from the “People” tab.\ntype name label appearance string household_members Household’s members select-contact type-person descendant-of-current-contact","loading-the-users-contact-data#Loading the user\u0026rsquo;s contact data":"While the inputs/user group does not contain the user’s contact data, it does contain the user’s contact_id which can be used to load the contact doc via a contact selector.","searching-for-a-contact#Searching for a contact":"When a contact selector question is visible in a form, the user can search for a contact by typing in the search box.\nA value can be pre-selected for the search box via a calculate expression. By default, the user can change the selected value, but this can be prevented by setting read_only = true.\ntype name label appearance calculate string person_id Person ID select-contact type-person string household_id Household ID select-contact type-clinic ../inputs/contact/parent/_id","user-contact-summary-data#\u003ccode\u003euser-contact-summary\u003c/code\u003e data":"Available since 4.21.0 When the logged in user has an associated contact, app forms can access the contact-summary data associated with the user’s contact. This is done by referencing an instance named user-contact-summary. E.g. instance('user-contact-summary')/context/${variable}. See the reference documentation for more information.","user-data#\u003ccode\u003euser\u003c/code\u003e data":"Both app and contact forms can access the current user’s data at inputs/user. The data provided is simply the user-settings doc for the user (e.g. org.couchdb.user:username) plus an additional language field that contains the user’s currently selected language code.\nThe user-settings doc for the user is NOT the same as the CHT contact doc for the user."},"title":"Form Inputs"},"/building/forms/configuring/google-drive/":{"data":{"":"To work collaboratively on form design it can be helpful to keep XLSForms in Google Drive. The fetch-forms-from-google-drive action downloads these XLSForms so that they can be converted to XForms and uploaded to your CHT app.\nThis action requires the following files in the top-level folder of your CHT app config: forms-on-google-drive.json and .gdrive.secrets.json.","forms-on-google-drivejson#forms-on-google-drive.json":"This JSON file contains key value pairs, where the key is the relative path and name for the downloaded file, and the value is the file’s Google Drive File ID.\nTo get the File ID for the form open the form in Google Sheets. The URL will look something like https://docs.google.com/spreadsheets/d/12345ABCDEF/edit#gid=555666888 . The ID is the middle portion 12345ABCDEF\n{ \"app/sample_report.xlsx\": \"12345ABCDEF\", \"contact/person-create.xlsx\": \"ABCDEF123456\", }","gdrivesecretsjson#.gdrive.secrets.json":"This file contains authentication secrets that are generated by enabling access to your Google Drive using these instructions.\n{ \"client_id\": \"your_client_id\", \"project_id\": \"your_project_id\", \"auth_uri\": \"https://accounts.google.com/o/oauth2/auth\", \"token_uri\": \"https://accounts.google.com/o/oauth2/token\", \"auth_provider_x509_cert_url\": \"https://www.googleapis.com/oauth2/v1/certs\", \"client_secret\": \"your_client_secret\", \"redirect_uris\": [\"your_redirect_uris\", \"http://localhost\"] }","run#Run":"With the files in place, run cht-conf’s fetch-forms-from-google-drive action in your CHT app’s top level directory.\ncht fetch-forms-from-google-drive You will be prompted for an access code from your authenticated user. Follow the prompts through Google’s authentication page and copy the access code into your command line. The forms will then be downloaded to the locations set in the forms-on-google-drive.json file.\nTip\nIf the browser does not launch own its own, copy the URL and paste the authentication url into a browser and then follow the prompts."},"title":"Forms in Google Drive"},"/building/forms/configuring/multimedia/":{"data":{"":"","configuration#Configuration":"To play multimedia from forms you need to add elements to your xml and upload the corresponding multimedia to couchdb as an attachment to your form.","couchdb-config#Couchdb Config":"The file needs to be added as an attachment with a name that matches what is defined in the form. This can be added by using curl or fauxton. Here is the structure of the curl command.\ncurl -vX PUT https://user:pass@server_name/medic//?rev= --data-binary @ -H \"Content-Type: \" Here is an example of how it would look uploading a sample video for the form above.\ncurl -vX PUT https://user:pass@localhost/medic/form:multimedia/video.mp4?rev=11-a2ebf09cb9678c031859cd2c1da4b603 -k --data-binary @sample.mp4 -H \"Content-Type: video/mp4\" To use fauxton.\nNavigate to fauxton. https:///_utils Click on the medic database. Locate the form document. Click add attachment Upload the multimedia file and ensure the name matches what has been defined in the form.","form-config#Form Config":"Add an xml element of text and another element of value. Set form equal to the type of multimedia being used(video, audio, image). The value element must contain jr://file_name.suffix where file_name.suffix is the name of your multimedia file uploaded to couchdb.\nExample:","multimedia-formats#Multimedia Formats":"There are many supported formats for video, audio, and images. We recommend using h.264(mpeg) for video, jpeg for images, and mp3 for audio. When creating videos or images keep in mind the dimensions and storage capabilities on phones that may be used. Lower end phones have smaller storage and screen sizes. When rendering images, video, and audio the CHT uses the browser’s built in rendering tools. This means you can render any media format that is supported by the minimum version of Chrome.\nList of Supported formats:\nvideo/audio images","uploading-with-cht-conf#Uploading with CHT-conf":"Multimedia files can be uploaded when running CHT-conf to upload your forms.\nTo include the files:\nCreate a directory {form_name}-media. EX: config/default/forms/app/delivery-media Add multimedia files to {form_name}-media\\image.png. EX: config/default/forms/app/delivery-media/health_baby.png Run cht-conf upload-app-forms Confirm image is uploaded in CHT app."},"title":"Multimedia in Forms"},"/building/forms/configuring/report-titles/":{"data":{"":"Added in 3.9.0 By default the CHT shows the name of the subject of the report in the reports list. This can be overridden by configuring the subject_key property with a translation key in the form document.\nThe translation uses a summary of the report as the evaluation context so you can include report fields in your value, for example: Case registration {{case_id}}. Useful properties available in the summary include: from (the phone number of the sender), phone (the phone number of the report contact), form (the form code), subject.name (the name of the subject), and case_id (the generated case id).","code-sample#Code Sample":"\"internalId\": \"signal\", \"title\": \"Signal signoff\", \"subject_key\": \"signal.list.subject\","},"title":"Report Titles"},"/building/forms/configuring/uhc-mode/":{"data":{"":"The CHT’s UHC Mode empowers CHWs to provide equitable and timely care to families in their catchment area. The Community Health Toolkit supports this use-case by displaying the number of visits made to a household and highlighting households which haven’t met their visit goal in red at the top of the contact list.\nThe date last visited is colored red whenever the date is 30 days or more in the past. The date last visited is displayed as a relative date. This period is described in terms of “days” up until two months, so “Visited 3 days ago” or “Visited 36 days ago”. After two months, we simply say “2 months” or “3 months”.","configuration#Configuration":"Any patient- or household-level form or forms can be used to update the date last visited. You may run into performance issues if you configure this to look at forms submitted very frequently. For example, five forms submitted only once a month would work better than two forms submitted every day.","forms#Forms":"Indicate which forms should be included in the calculation of the date last visited. You can use forms at the person or household level. Add the visited_contact_uuid field to forms to track visits. This should be a calculate field that contains the place UUID of the visited contact. Ensure this is a top-level field and not in any group. When the form is submitted it would be seen as doc.fields.visited_contact_uuid.","household-visits#Household Visits":"The date of the last visit is displayed and contacts can be sorted by last visit date to allow the CHW plan their work.\n“Date last visited” and “Visits this month” are different data points:\nDate last visited is calculated based upon a rolling count of “how many days ago” and is not tied to the calendar at all. Visits this month are tied directly to the calendar.","settings#Settings":"Information on when to begin counting visits, household visit goals, and default contact sorting is defined in base_settings.json.\nSetting Description Default Version uhc.contacts_default_sort “alpha”: Sort contacts alphanumerically“last_visited_date”: sort contacts by the date they were most recently visited. “alpha” 2.18.0 uhc.visit_count.month_start_date The date of each month when the visit count is reset to 0. 1 2.18.0 uhc.visit_count.visit_count_goal The monthly visit count goal. 0 2.18.0","uhc-permissions#UHC Permissions":"To see the date last visited, grant the relevant user role (usually CHW) the can_view_last_visited_date permission. Once that permission is enabled, you’ll be able to display the date the household was last visited in the list.\nTo view UHC metrics, the can_view_uhc_stats permission needs to be granted to the CHW user role.\n\"permissions\": { \"can_view_last_visited_date\": [ \"chwUserRole\" ] },"},"title":"UHC Mode"},"/building/forms/configuring/wealth-quintiles/":{"data":{"":"Household surveys with questions about the home, possessions, and access to safe drinking water have been used to create equity score and improve the targeting of health services. This guide will cover how quintile information from a household survey can be used in customizing care for individual household members. For example, the equity quintile can be used to increase the number of pregnancy follow-ups for women in specific households, or to display specific notes or questions within patient forms.\nFor quintile information from a household survey to be used for people in that household, a form about a place must contain NationalQuintile and/or UrbanQuintile fields at the top level. When that form is submitted all the people belonging to that place will get the corresponding wealth_quintile_national and wealth_quintile_urban fields. Those fields can then be used by forms, tasks, and contact profiles accordingly.\nNote that the can_write_wealth_quintiles permission is needed for the user that is submitting the form.","sample-contact#Sample Contact":"{ \"_id\": \"c148d0c7-b200-47f6-a891-3f55c78eda9b\", \"_rev\": \"3-746a7c8ecb15dc1f43bfa13eba2afbbe\", \"type\": \"person\", \"name\": \"Jane Smith\", \"notes\": \"\", \"sex\": \"female\", \"date_of_birth_method\": \"approx\", \"date_of_birth\": \"1987-12-10\", \"phone\": \"\", \"alternate_phone\": \"\", \"external_id\": \"\", \"reported_date\": 1607530340715, \"parent\": { \"_id\": \"23c7ab6e-6ea5-4f9f-9ffa-f00a1e30278d\", \"parent\": { \"_id\": \"8ed3600f-23e2-4446-8ff4-2528067085e7\" } }, \"wealth_quintile_national\": \"5\", \"wealth_quintile_urban\": \"3\" }","sample-form#Sample form":"type name label relevant appearance calculate … string place_id select-contact type-household integer NationalQuintile National Quintile integer UrbanQuintile Urban Quintile","sample-report#Sample Report":"{ \"form\": \"family_survey\", \"type\": \"data_record\", \"content_type\": \"xml\", \"fields\": { \"place_id\": \"23c7ab6e-6ea5-4f9f-9ffa-f00a1e30278d\", \"NationalQuintile\": \"5\", \"UrbanQuintile\": \"3\" } }"},"title":"Quintiles"},"/building/forms/contact/":{"data":{"":"Contact forms are used to create and edit contacts (persons and places). Each contact-type should ideally have two forms; one for creation, and another for editing.\nThese forms are stored in the forms/contact sub-folder of the project config directory. The naming convention used should be .xlsx.","code-sample#Code sample":"In this sample properties file, the person create form would only be accessible for CHW Supervisors with the can_export_contacts permission. Additionally, a new person should not have the exact same name as an existing sibling contact.","context-expression#Context Expression":"The contact form context expression can be used to limit which users have access to the contact form. If the expression evaluates to true, the form will be listed as an available action on the proper contact profiles.\nIn the expression, the user input is available. (Note that unlike in the app form expressions, the contact and summary inputs are not currently available for contact form expressions.)","creating-additional-child-contacts-for-place#Creating additional child contacts for place":"It is also possible to create additional contacts as children of the new place using a repeat. In a new top-level group named repeat, add a repeat named child. Each entry in the child repeat will be considered a new contact to be added. As with the contact group, use PARENT as the default parent value so the contacts are automatically associated with the new place. Include any other fields you want to capture for the new contacts inside the child repeat.\ntype name label::en appearance default calculation begin_group repeat Add household members begin_repeat child Household member field-list text parent NO_LABEL hidden PARENT calculate type “person” text name Member Name end_repeat child end_group repeat","creating-person-and-place-contacts-in-the-same-form#Creating person and place contacts in the same form":"Contact forms for creating a place can also optionally create one or more person-type documents. One of these person contacts can be linked to the created place as the primary contact.","creating-primary-contact-for-place#Creating primary contact for place":"When creating a place, it is often useful to create a primary contact person for that place at the same time. This is done by including a group with the name contact as a top-level group. Use PARENT as the default parent value so the person is automatically associated with the new place. Include any other fields you want to capture for the person inside the contact group.\ntype name label::en appearance default calculation begin_group contact Head of the Household field-list text parent NO_LABEL hidden PARENT calculate type “person” text name Person name end_group contact To mark the new person as the primary contact for the place, set the contact field in the place’s top-level group to \"NEW\". When the new place is written, its contact._id value will be set to the id for the newly created person.\ntype name label::en appearance default calculation begin_group clinic Household field-list text parent NO_LABEL hidden PARENT calculate type “clinic” text name Household name calculate contact “NEW” end_group clinic","customizing-the-duplicate-contact-error-message#Customizing the duplicate contact error message":"The default message shown to the user when a duplicate contact is found can be modified by adding a custom translation for the duplicate_check.contact.duplication_message key.\nAdditionally, different messages can be shown for different contact types by setting duplicate_check.contact.${contact_type_id}.duplication_message keys. This can be useful if you want to prompt the user with the likely reason the duplicate contacts matched based on your custom duplicate check expression logic.","duplicate-check-expression#Duplicate Check Expression":"The duplicate check expression is a boolean check executed against each of the sibling contacts of the contact being created/modified. “Sibling contacts” are contacts of the same type that share the same parent contact. When the expression evaluates to true, the contact being created/edited will be considered a duplicate of the existing sibling.\nIn the expression, both the current contact doc (the contact currently being created/edited) and the existing sibling contact doc are available. The default duplicate expression is:\nlevenshteinEq(current.name, existing.name, 3) \u0026\u0026 ageInYears(current) === ageInYears(existing) This expression will consider contacts to be duplicate if the Levenshtein distance between the two names is less than or equal to 3 (meaning the names are very similar or exactly the same) and (for persons) if the contacts have the same age (in years).\nWhen designing custom duplicate check expressions, consider how the contact data collected might evolve over time. If properties are added/removed/renamed on the contact doc, your duplicate expression logic will need to account for this if it references these properties (e.g. support for falling-back to older properties to ensure broader compatibility).\nAlways consider the nature and quality of your data. As data quality improves (e.g., consistent naming conventions), duplicate check expressions for some contact types can be refined to reduce both false positives and false negatives.","expression-functions#Expression functions":"The following functions are available for use in JavaScript expressions:\nSignature Description ageInDays(contact) Returns the current age of the given contact in days. ageInMonth(contact) Returns the current age of the given contact in months. ageInYears(contact) Returns the current age of the given contact in years. levenshteinEq(string0, string1, threshold = 3) (Added 4.19.0) Returns true if the Levenshtein distance between the given strings is less than or equal to the given threshold. Otherwise false. normalizedLevenshteinEq(string0, string1, threshold = 0.42857142857142855) (Added 4.19.0) Similar to the levenshteinEq function except the distance value is “normalized” (by dividing by the length of the longest string) before comparing to the threshold. See below for more details. Normalized Levenshtein Equality In cases where the length of the input strings can vary greatly, the normalizedLevenshteinEq function can be preferable to the levenshteinEq function. The normalizedLevenshteinEq function divides the Levenshtein distance by the length of the longest string before comparing the result to the threshold. In effect, this makes the matching more strict for shorter strings (the actual distance must be shorter for them to be considered equal) and more lenient for longer strings (the actual distance can be longer, but the strings will still be considered equal).\nThis can help make the same threshold limit value appropriate for use across a greater variety of string lengths. For example, if the threshold is set to 0.3, then an actual distance of 2 would be considered equal (when using normalizedLevenshteinEq) for strings of length 9, but not for two strings of length 5. (Because (2 / 9 = 0.2222) \u003c= 0.3 and (2 / 5 = 0.4) \u003e 0.3.)\nWhen using normalized Levenshtein equality, make sure you consider the behavior of a particular threshold value at the edges of your expected string length range. For example, the distance between far and car is 1. If you want your logic to consider john and jon as equal, you will need to use a normalized Levenshtein equality threshold of at least 1 / 4 = 0.25. However, for strings with a length of 25, that threshold will allow a distance of 5 to be considered equal.","form-details#Form details":"","formscontactcontact_type_id-createeditpropertiesjson#\u003ccode\u003eforms/contact/{contact_type_id}-{create|edit}.properties.json\u003c/code\u003e":"Property Description required context Added in 3.10. The contact form context defines when the form should be available in the app. Note: this applies only to the contact form, not the contacts themselves. no context.expression A JavaScript expression evaluated when a contact profile is viewed. This can limit which users have access to the contact form. See below for more details. no context.permission String permission key required to allow the user to view and submit this form. If blank, this defaults to allowing all access. no duplicate_check Added in 4.19. Allows for configuring or disabling the duplicate detection logic for a particular contact type. no duplicate_check.expression A JavaScript expression evaluated when submitting the contact form. The expression defines the logic used for determining when a contact is considered to be a duplicate. See below for more details. no duplicate_check.disabled Boolean determining if the duplicate check should be run when submitting this contact form. Default is false. no","formscontactperson-createpropertiesjson#\u003ccode\u003eforms/contact/person-create.properties.json\u003c/code\u003e":"{ \"context\": { \"expression\": \"user.role === 'chw_supervisor'\", \"permission\": \"can_export_contacts\" }, \"duplicate_check\": { \"expression\": \"current.name === existing.name\" } }","generic-contact-forms#Generic contact forms":"If your place contact forms are similar across all levels of your specified project hierarchy, you can templatise the form creation process. You will need to create the following files in forms/contact: place-types.json, PLACE_TYPE-create.xlsx and PLACE_TYPE-edit.xlsx.\nplace-types.json maps the place contact_type id to a human-readable description that will be shown on the app’s user interface.\nBoth PLACE_TYPE-create.xlsx and PLACE_TYPE-edit.xlsx will contain two placeholder values PLACE_TYPE and PLACE_NAME which will be replaced by the keys and values specified in place-types.json respectively during form conversion. Also, copies of the different place-type forms will be created (if they don’t exist) during the form conversion process with PLACE_TYPE being replaced with the keys specified in place-types.json.\nConvert and build the contact forms into your application using the convert-contact-forms and upload-contact-forms actions in cht-conf.\ncht --local convert-contact-forms upload-contact-forms` For examples on how to structure the above files you can have a look at the default configuration in CHT-core.","input-data#Input data":"contact forms have access to a variety of input data.","properties#Properties":"The meta information in the {contact_type_id}-{create|edit}.properties.json file defines additional configuration controlling when the form is available and checks that will be performed when submitting the form.","settings-sheet#Settings sheet":"The form_id should follow the pattern contact:CONTACT_TYPE_ID:ACTION where CONTACT_TYPE_ID is the contact_type id for the contact and ACTION is create or edit. (e.g. contact:clinic:create)","survey-sheet#Survey sheet":"To collect information about the contact, use a top-level group with the id of the contact_type as the name of the group (e.g. person when adding or editing a person contact). Information in this group will be saved to the contact’s document in the database.\ntype name label::en begin group person NO_LABEL hidden parent Parent Id hidden type Contact Type string name Full Name … end group The parent, type, and name fields are mandatory on forms that are adding contacts. parent will be automatically populated with the id of the parent contact. type will be automatically set to the contact_type id when saving the new contact.\nImportant\nFor edit forms, the name of the top-level group should still match the contact_type id of the contact, but only the relevant fields for editing need to be specified in the form."},"title":"contact"},"/building/forms/form-properties/":{"data":{"":"This tutorial will take you through how to write the .properties.json file.\nThe .properties.json file allows you to add logic that ensures that the right action appears for the right contacts (people and places). For instance, an assessment form for children under-5 will only appear for person contacts on the CHT whose age is less than 5.\nYou will be adding meta-data and context to an assessment workflow that allows Community Health Workers to conduct a health assessment for children under the age of 5.","1-define-the-forms-title#1. Define the Form\u0026rsquo;s Title":"Edit the assessment.properties.json file and add a title key with the value corresponding to the desired file title.\n{ \"title\": \"Assessment\" }","2-define-the-forms-icon#2. Define the Form\u0026rsquo;s Icon":"Add a resources folder in your project folder and put your preferred icon for assessment in it. Name the icon file icon-healthcare-assessment.png if it is a png file or icon-healthcare-assessment.svg if it is an svg file.\nCreate a resources.json file in your project folder and add key/value pairs for your icon resources.\n{ \"icon-healthcare-assessment\": \"icon-healthcare-assessment.png\" } See Also: Interface\nAdd an icon key in the assessment.properties.json file. Pick the key of the icon you require from the resources.json file and add it as the icon value.\n{ \"title\": \"Assessment\", \"icon\": \"icon-healthcare-assessment\" }","3-define-the-forms-context#3. Define the Form\u0026rsquo;s Context":"First, add a context key in the assessment.properties.json file. Next, add an object with person, place and expression keys. Then, add the boolean value true for the person key, the boolean value false for the place key and the expression ageInYears(contact) \u003c 5 for the expression key.\n{ \"title\": \"Assessment\", \"icon\": \"icon-healthcare-assessment\", \"context\": { \"person\": true, \"place\": false, \"expression\": \"ageInYears(contact) \u003c 5\" } }","4-upload-resources-and-the-form_namepropertiesjson-file#4. Upload resources and the \u003ccode\u003e\u0026lt;form_name\u0026gt;.properties.json\u003c/code\u003e File":"Run the following command from the root folder to upload the resources folder and resources.json file:\ncht --url=https://:@localhost --accept-self-signed-certs upload-resources Run the following command from the root folder to upload the assessment.properties.json file:\ncht --url=https://:@localhost --accept-self-signed-certs upload-app-forms -- assessment Important\nBe sure to replace the values and with the actual username and password of your test instance.\nOnce you successfully upload the assessment.properties.json file, ‘Assessment’ will appear as an action only for person contacts who are less that 5 years old. Additionally, the icon-healthcare-assessment icon will now show alongside the action name.","brief-overview-of-key-concepts#Brief Overview of Key Concepts":"Form context defines when and where the form should be available in the app.","frequently-asked-questions#Frequently Asked Questions":"Can you associate an icon to a xml form?","implementation-steps#Implementation Steps":"Create a new file in the same folder as your assessment.xlsx file and name it assessment.properties.json.","required-resources#Required Resources":"You should have a functioning CHT instance with cht-conf installed locally, completed a project folder setup, and an assessment form."},"title":"Properties"},"/building/forms/versioning/":{"data":{"":"Added in cht-core 3.15.0 and cht-conf 3.10.0 When uploading app or contact xforms, cht-conf 3.10.0+ will automatically generate a version and include it in the form doc’s xmlVersion property. The version has two properties.\nProperty Description time The time that the form was uploaded to the server in millis since the epoch. sha256 A hash of the xform content. For example:\n\"xmlVersion\": { \"time\": 1658717177750, \"sha256\": \"6f0bbfe5a9a9ebeb25784165879afec5e311b197cbd76ade5698c83c22dd9a8f\" } When a user fills in a form with an xmlVersion property, the version is copied in to the report doc as the form_version property. For example, the snippet above would generate a property like this:\n\"form_version\": { \"time\": 1658717177750, \"sha256\": \"6f0bbfe5a9a9ebeb25784165879afec5e311b197cbd76ade5698c83c22dd9a8f\" } This can be used to determine the version of the form that was used to submit the report. If you upload multiple versions of a form over time you can use logic to have the CHT and integrated systems to enable backwards compatibility so they behave the same regardless of which version of the form was used.\nFor example, if a property was modified between versions then the logic may look something like this:\nlet patientName; if (doc.form_version \u003c 1658717177750) { patientName = doc.first_name + ' ' + doc.last_name; } else { patientName = doc.name; }"},"title":"Versioning"},"/building/implementations/":{"data":{"":"To run a successful digital health implementation, the following considerations are made:\nScope. Clear definition of the challenge, duration of implementation, implementation deliverables, and the change expected as a result of implementation. Technical requirements. Infrastructure (servers - physical/ cloud) and hardware (devices such as smartphones/tablets, laptops/computers) requirements. Context. General understanding of the geography (country/region) in the following domains; legal and policy landscape, infrastructure penetration, for example, mobile and electricity connectivity, community health setup and maturity e.g cadres of community health workers, coverage and functionality. Human resource requirements. Skills to build, implement and sustain the implementation.","cht-lifecycle#CHT Lifecycle":"CHT implementations follow a process from beginning to end in order to deliver a complete functional digital health solution. This process is referred to as the CHT Lifecycle. Although the process may differ from implementation to implementation, the process below is what has been used for most deployed implementations. It is an agile and iterative process that involves feedback collection and improvement. Initiation - at this stage, the project scope, goal and use cases are defined. Planning - includes coming up with detailed workplans, schedules, budget estimation, baseline data collection, user estimation and resource planning. Design - a design activity is conducted to gather user insights and requirements that will inform the design of the workflows in the CHT. Building - refers to the app development process where workflows are configured, tested and improved. Hosting - includes different hosting options, data migration, configuration and optimization of CHT applications in various environments. Implementation - refers to the process of training end users and them using the CHT application to support the delivery of health care services. It includes training plan development, logistics planning, expenditure estimation and tracking, tech support training and application installation. Support - this is the support provided to end users to address any technical issues and ensure the usability of the tools. Evaluation - includes budget tracking, discussions on scaling, report writing and user feedback activities to help improve user experience and impact before the next development cycle begins.","community-health-workers#Community health workers":"Community health workers deliver essential health services to the last mile to improve health outcomes. Community health workers require good working conditions and the right tools to perform their responsibilities. To enable this, the items listed below are important. You can learn more on the eight proCHW best practices.\nSkilled. Continuous training for skill growth Supervised. Supportive supervision for optimal performance management Salaried. Compensation for economic growth and sustainability Supplied. Equipping with required supplies and kits","implementation-personas#Implementation personas":"Various people interact with CHT implementations at various stages. The list below may not be exhaustive but highlights bare minimum requirements for a successful implementation. In some cases, personas may have overlapping roles.\nProject managers - They may also be referred to as program heads or program leads. They are involved in planning, coordinating and overseeing digital health projects. Although they oversee the entire implementation, they interact with the CHT implementation more closely during the implementation and evaluation stages. Designers - They include service designers, user experience/user interface designers, product designers, graphic designers among others. Designers interact with CHT implementations during the design phase. They carry out field immersion visits to gather technical requirements from the prospective end users, program leads at MoH, policy makers among others. The technical requirements gathered inform the final application. Product and UI/UX designers are involved in the design and evaluation phases to explore opportunities for improvement and user experience optimization. Developers - they include app developers, core developers and software developers who are involved in the building stage. App developers build custom applications based on the CHT core. These apps are composed of application and contact forms, application settings among other configurations. Core developers contribute to the CHT Core framework that powers the mobile apps. System administrators - they include database administrators, security engineers, site reliability engineers, devOps engineers and network managers. They are responsible for configuration of computers, servers, databases, pipelines and infrastructure of CHT applications, monitoring health status of the infrastructure and application such as performance, server resources utilization, and uptime. They interact with CHT implementations at the planning, hosting and support stages. Technical support team - they include information communication and technology (ICT) officers and monitoring \u0026 evaluation officers. ICT officers are responsible for mobile device testing, application installation and technical assistance for issues experienced by end users post deployment. Monitoring \u0026 Evaluation officers are responsible for monitoring project indicators performance, impact evaluation, data analysis and reporting. They interact with CHT implementations at the design and support stages. Researchers - they include Data Scientists, UX researchers and research scientists. They integrate research aspects such as implementation research into the project cycle to test hypothesis. They are involved through out the project cycle. In case an implementing partner does not have the expertise listed above, the CHT has a robust network of technical partners who have built CHT applications and have a deep understanding of how CHT implementations work.","running-successful-community-health-implementations#Running successful community health implementations":"Digital health implementations do no exist in silos. To be successful, there are other critical enablers to be aware of and champion for;","technical-performance-optimization#Technical performance optimization":"For CHT implementations to be successful and sustainable, the following requirements are integral.\nPrivacy and protection of user and client data Routine monitoring and evaluation to identify and resolve issues on time Data backups Redundancy Regular CHT upgrades to benefit from new features and performance improvements Device maintenance Regular Android app and security updates Alternative power sources e.g solar chargers or powerbanks Phone covers and screen protectors Device replacements (losses, end of life) and repairs (broken screen, faulty chargers etc) Design Designing with the user (Human-centered design) Consistent user feedback to inform improvements Consistency with material design guidelines for intuitive use."},"title":"CHT Implementations"},"/building/integrations/":{"data":{"":"Content in this section Custom Android DHIS2 DHIS2 Aggregate OpenMRS RapidPro OppiaMobile"},"title":"Integrations"},"/building/integrations/android/":{"data":{"":"The CHT Android application can be launched by clicking on a link or invoking an intent in another Android app. This is useful for enabling login by SMS, directing a user to a specific page, and integrating between Android applications.","sending-a-url#Sending a URL":"When the user clicks on a link to a CHT instance from an SMS, email, WhatsApp, or any other app, Android will prompt the user to choose whether to open the URL in the Android app or the browser. If a CHT app is not installed then the URL will be opened in the browser.\nThe prompt may look different depending on the version of Android being used. Up to Android 11, users can choose “Always” to skip this prompt in the future. Starting with Android 12, users will be promped to associate the CHT instance’s domain with the Android app. Alternatively, a CHT instance can be configured to have its links automatically verified for the associated Android App (with no user action required). See the docs on Android App Links verification for more information.","using-an-intent#Using an intent":"To have another Android application launch the CHT Android application, use an ACTION_VIEW intent, for example:\nString url = \"https://myapplication.app.medicmobile.org\"; Intent i = new Intent(Intent.ACTION_VIEW); i.setData(Uri.parse(url)); startActivity(i);"},"title":"Android"},"/building/integrations/custom/":{"data":{"":"The CHT Core Framework includes functionality that allows sharing data with any API-based system. Developers have configured CHT integrations with OpenMRS, KenyaEMR, Bahmni, DHIS2, RapidPro, Apache NiFi, OpenHIM, custom electronic medical records (EMR), and several other systems.","authentication#Authentication":"Credentials for the destination system are stored in CouchdDB. You will need to set this up before you can test your configuration.","enable-outbound#Enable outbound":"Enable the mark_for_outbound transition in app_settings.","integration-design-patterns#Integration Design Patterns":"There are a number of different interactions that may occur between digital health systems. Below are some common use cases:\nCreating a patient in the CHT creates that patient in another system Creating a patient in another system creates that patient in the CHT Submitting a form in the CHT triggers an event in another system Submitting a form in the CHT sends data to another system Activity in another system triggers an event in the CHT Activity in another system stores the results in the CHT Another system needs to look up data in the CHT","look-up-data-in-the-cht#Look up data in the CHT":"The CHT has a number of different API endpoints that can be used to look up data.\nImportant\nExample 1: You have a patient’s phone number and you want to look up more information about that patient, such as who their CHW is or what Catchment Area they live in.\nYou can use the contacts_by_phone endpoint will return the fully hydrated contact information for those patients.\nExample 2: You just have the internal UUID of a particular contact but want to get the complete information available for that contact.\nYou can use the hydrate endpoint to obtain this information. to look up the complete information for that contact.","overview#Overview":"Integrating a CHT App into your digital health ecosystem starts with identifying an integration use case. It’s important to first understand all the components present in the ecosystem (EMR, laboratory system, community health information system, etc) and then plan out what the workflow will look like operationally. It is important to consider what information is needed at each point, will it be available to them, what happens if it is not, is this workflow even useful for them.\nOne of the biggest challenges in developing integrations between systems is patient matching and/or deduplication. Sometimes this can be controlled operationally, other times it requires complicated algorithms or human intervention.\nBelow are a few example integration use cases:\nLost to Follow-up: EMR generates a list of patients that require follow-up in the community, that list is sent to the CHT and healthworkers receive a task in the CHT to find those patients and refer them to the health facility. Referrals from the community: When a CHW does an assessment and determines the patient should be referred to a health facility, send the referral information to the EMR. Contact Tracing: Similar to Lost to Follow-Up, the EMR generates a list of contacts to be followed up with and this is sent to the CHT so that a tracer can call those contacts to see if they have symptoms. Interactive Messaging: Integrate with a messaging platform (such as RapidPro) to allow community members to initiate self-screening assessments, which can then be sent to the CHT for follow-up by a healthworker. As you design your use cases, creating a sequence diagram will be helpful in illustrating what the flow will look like. Here is an example sequence diagram for an integration use case with RapidPro.","post-data-to-the-cht#POST data to the CHT":"The CHT API also allows you to POST data. Using these endpoints, you can create new records in your CHT API. You can store activities that took place in another system on that contact’s profile in the CHT, and even create tasks for CHWs in the CHT based on activities that took place in the other system.\nExample 1: You use RapidPro to send daily quarantine follow-up messages to a patient. You want to store the patient’s responses to those messages on their profile in the CHT.\nYou can do this by submitting a JSON Form to the records endpoint.\nImportant\nExample 2: Continuing from Example 1, create a task for a CHW in the CHT whenever a patient responds that they have developed symptoms.\nYou would do this by simply configuring a task to be generated based on criteria available in the report that was created in Example 1.","requests-from-other-systems#Requests from other systems":"The CHT has a complete RESTful API that other systems can utilize to interact with data in the CHT.\nThe most common uses are:\nLooking up data in the CHT from another system POSTing data to the CHT from another system","sending-data-to-other-systems#Sending data to other systems":"Using the outbound push feature, you can configure the CHT to send data to another system. Before starting, you’ll want to make sure you understand the APIs of the destination system and have login credentials with adequate privileges.\nTo send data to other systems from the CHT, you will need to do the following:\nEnable outbound in app_settings Specify when data is sent Specify where data is sent Specify what data is sent Set up credentials for the destination system","what-data-is-sent#What data is sent":"You configure what data is sent using the mapping property. You will map data from the CHT to the format required by the destination API endpoint.\nTip\nMap the contact.name field in the CHT to the patient.name field in the EMR.","when-data-is-sent#When data is sent":"Whenever a document is changed (such as submitting a form, creating a new contact, or editing an existing one) you can configure outbound to send data to another system. The relevant_to property in the outbound configuration is used to identify which activities will trigger the sending of data.\nTip\nSend data to the EMR whenever a CHW submits an assessment form where referral = true.","where-data-is-sent#Where data is sent":"The destination property in the outbound configuration is used to specify where to send data. This will normally be the API endpoint of the destination system or interoperabiliy layer.\nTip\nSend data to the /api/v1/referral endpoint in the destination system."},"title":"Custom"},"/building/integrations/dhis2-aggregate/":{"data":{"":"One of the first things you’ll need to do is identify the specific DHIS2 data set that you plan to implement. You’ll need a list of all the data elements on that data set, a detailed understanding of how each is calculated, the frequency in which the data set is submitted (weekly, monthly, etc…), and for which organisation units the data set applies. You’ll also want to identify and engage the appropriate DHIS2 stakeholders to get access to DHIS2 metadata, test environments, and discuss workflows. The DHIS2 documentation site provides additional background and advice here.","configuration#Configuration":"Once you have designed your hierarchies, forms, calculations, and workflows, there are a few key configurations that need to be made.","data-elements#Data elements":"Calculations for DHIS2 indicators are done using CHT Target functionality. For each DHIS2 data element, you will need to configure a corresponding CHT Target and specify the ID of the DHIS2 data set and data element. If you do not include the data set, this data element will be included in every data set.\nNote\nIn targets.js, configure one or more data elements by setting the dhis.dataSet and dhis.dataElement attributes in the target schema.\nSee Also: Targets\nmodule.export = [ { id: 'births-this-month', type: 'count', icon: 'icon-infant', translation_key: 'targets.births.title', subtitle_translation_key: 'targets.this_month.subtitle', goal: -1, appliesTo: 'contacts', appliesToType: ['person'], appliesIf: contact =\u003e !!contact, date: (contact) =\u003e contact.contact.date_of_birth, dhis: { dataSet: 'VMuFODsyWaO', dataElement: 'kB0ZBFisE0e' } }, ];","data-sets#Data sets":"For the CHT to be able to export the file for DHIS2, it needs to know the specific name and ID of the data set in DHIS2. You will need to obtain the ID from the test or production DHIS2 environment.\nConfigure the data set in app_settings.json.\nSee Also: DHIS2 in App Settings","design-considerations#Design Considerations":"There are a few very important considerations related to how you design workflows and set up your CHT application to make sure you will be able to integrate with DHIS2. The main areas are:\nHierarchies Fields and calculations Workflows and user access. These considerations are summarized below.","export-data#Export data":"Login to the CHT instance using a user account with the required permissions. You should be automatically navigated to the Admin Console. Select “Import \u0026 export data” from the side Select “DHIS2” from the header along the top Select the data set, org unit, and time period that you’d like to send to DHIS2. Click “Export” A file should download in your browser. This file contains a dataValueSet with aggregated user’s data.","fields-and-calculations#Fields and calculations":"It’s important to understand each data element on the DHIS2 data set you want to integrate data into and how each data element is calculated. When you are designing your forms in the CHT, you will need to make sure you are capturing information in your forms so that every data element on the chosen DHIS2 data set can be calculated within the CHT.\nNote\nOnce you obtain the list of data elements on the data set, be sure to go through them one by one and figure out how to calculate each one using information available in your CHT forms.\nSee Also: Forms","hierarchies#Hierarchies":"The CHT relies on your Place hierarchy to determine how data should be aggregated for DHIS2. As such, it’s important that you consider how organization units are configured in the DHIS2 instance that you need to integrate data into. If your CHT Place hierarchy does not align with the DHIS2 organisation unit structure, the CHT will not be able to aggregate data in the way DHIS2 needs it.\nImportant\nThere should be a one-to-one relationship between DHIS2 organisation units and CHT places.\nSee Also: Hierarchies","import-data#Import data":"Login to DHIS2 using a user account with permission to manage the relevant dataset and organisation units. Select the “import/export” application inside DHIS2. Select “import data”. Upload the file you downloaded in Step 5. Click “Import” Check the UI for any errors. If you get errors you don’t understand or are unable to resolve an error, you can always ask for assistance on the CHT Forum. If there are no errors, you can review the numbers that resulted by reviewing the data set in DHIS2.","known-limitations#Known limitations":"Data for each user is aggregated based on the contents of the user’s target document. Note that if your users don’t login and synchronize, their data won’t be represented in the exported data. Integrations are limited to monthly DHIS2 data sets. Integrations are limited to numeric data-types. To support other data types, consider making a DHIS2 App for your project.","organisation-units#Organisation units":"Aggregation in the CHT is based on your Place hierarchy. As mentioned in the Hierarchies Design Considerations above, your Places must align with DHIS2 organisation units. You will need to specify the DHIS2 organisation unit’s ID on the Place document in the CHT.\nNote\nUpdate the contact document of each place you wish to map to an organisation unit. Add a dhis.orgUnit attribute.\nSee Also: Contact Forms\n{ \"_id\": \"my_place\", \"type\": \"health_center\", \"dhis\": { \"orgUnit\": \"HJiPOcmziQA\" } }","user-experience#User experience":"Once your CHT project is configured to integrate with DHIS2, follow these steps to export the data from CHT and import it into DHIS:","users#Users":"For the HRIO role, create a new user role and a new user with that role; or update an existing user role. To export DHIS2 metrics, users need to have the following permissions: can_configure, can_export_all, and can_export_dhis.\nSee Also: Users","workflows-and-user-access#Workflows and User Access":"The aggregate data workflow is really designed around 3 key user personas. You’ll need to make sure that your context can support those assumptions and will be able to have access to the appropriate features in the CHT and DHIS2.\nMoving data from the CHT to DHIS2 can be done in three main ways.\nManually downloading from the CHT Building an app in DHIS2 and calling an API in the CHT Orchestrating the steps using an interoperability layer such as OpenHIM, OpenFn, etc…"},"title":"DHIS2 Aggregate"},"/building/integrations/dhis2/":{"data":{"":"Most health systems have regular reporting requirements for community-level activities. Health workers often carry around heavy logbooks to manually record all relevant activities. When it is time to submit their data, community health workers (CHWs) summarize what was recorded in their logbooks and share this information with their supervisors, who in turn create paper records of these totals across entire community units or health facilities. This paper record is often passed to yet another individual whose responsibility is to manually key in the data into a health information management system, such as DHIS2.\nIn communities using digital health apps that do not integrate with DHIS2, it is highly likely that health workers are duplicating efforts by recording the same information both in their app and in their logbook(s). For example, they are not only registering new pregnancies in their app, but they are also manually recording this in their logbooks, manually adding them up at the end of the month, and then someone else is manually keying this into DHIS2.\nIn communities using digital health apps built with the CHT, health systems can reduce or eliminate the need to complete paper based forms for DHIS2 reporting needs. This gives health workers more time to focus on caring for the families in their community while also increasing accuracy and timeliness of their DHIS2 reporting requirements.","aggregate-workflow#Aggregate Workflow":"The aggregate workflow was designed specifically for CHWs, Supervisors, and Health Records Information Officers (HRIO) but may be adapted to other contexts.\nCHW (offline user): Conducts home visits and records information in the app. Reviews aggregate data throughout the month and makes sure to sync at the end of the month.\nSupervisor (offline user): Provides supervision to the CHWs, reviews and verifies aggregate data for an entire community unit.\nHRIO (online user): Exports a file from the CHT and imports into DHIS2. Reviews data in DHIS2.","community-health-workers#Community Health Workers":"CHWs support patients in their community by following care guides and recording responses in the CHT. The CHT calculates aggregate DHIS2 Data Values for each CHW based on rules configured in the CHT. CHWs can view these indicators on the Targets tab and should review them and sync at the end of the month.\nCHWs\nSee Also: Targets","dhis2-apps#DHIS2 apps":"The CHT also includes an API that can be called from other applications that returns DHIS2 Data Sets. This means that you can build a DHIS2 app that pulls data from the CHT and imports it electronically into DHIS2. This would allow Data Entry to control the process directly from DHIS2 without having to access the CHT.\nFeature Overview Data Entry 2","health-records-information-officers#Health Records Information Officers":"HRIOs access the CHT App Management tab and select the appropriate DHIS2 Data Set, Organisation Unit, and Period. They then Export a file that is formatted for DHIS2. HRIOs will need access to the Import/Export feature in DHIS2 so that they can Import the file. Once it has been imported into DHIS2, they review the data from the Data Entry screen in DHIS2.\nFeature Overview Data Entry 1","overview#Overview":"The CHT Core Framework supports integrations with DHIS2 in a variety of ways:\nSending patient data Sending event data Sending pre-aggregated “Service Reports” Aggregating data across multiple health workers into DHIS2 Data Values Exporting a file that can be imported into DHIS2 as a Data Set Exposing an API for DHIS2 app developers to pull aggregate data from CHT Core Receiving data from DHIS2 Sending patient, event, and pre-aggregated data can be achieved using the Outbound push feature. Receiving data from DHIS2 can be achieved using the CHT Core Web API.\nAggregating data across multiple health workers requires a somewhat specific workflow and was designed with three key user personas in mind. The aggregate workflow is described in more detail below.","supervisors#Supervisors":"In addition to their own targets, Supervisors can see the aggregate of each DHIS2 Data Value across all CHWs in their area from the CHW Aggregate view on the Targets tab. By tapping on a target, they can also see each CHW’s contribution towards that total. Supervisors can review and verify with CHWs that everyone has synced and that their data is correct. The Supervisor can communicate with the HRIO when everything has been validated.\nFeature Overview Supervisors","version-notes#Version Notes":"Feature CHT Core version Calculate DHIS2 Data Values by aggregating data from CHT Core reports 3.9.0 Export file from CHT Core that can be imported into DHIS2 as a Data Set 3.9.0"},"title":"DHIS2"},"/building/integrations/openmrs/":{"data":{"":"OpenMRS is an open source electronic medical record system used in dozens of countries. Integrating CHT apps with OpenMRS can open up opportunities to improve health outcomes for patients by promoting better coordination of care. For example, referrals by CHWs in the community can be sent electronically to health facilities using OpenMRS so that nurses and clinicians can prepare for their visit and have full access to the assessment done by a CHW.\nIntegrating CHT apps with OpenMRS can be achieved by following this guide, which leverages the OpenMRS REST API.","choices#Choices":"list_name name label client_consented _1065_Yes_99DCT Yes client_consented _1066_No_99DCT No disability_type _1058_vision_99DCT Vision disability_type _1059_hearing_99DCT Hearing disability_type _1060_mental_99DCT Mental disability_type _1061_other_99DCT Other Remember to convert and upload your forms\ncht --url=https://:@localhost --accept-self-signed-certs convert-contact-forms upload-contact-forms convert-app-forms upload-app-forms Important\nRemember to setup the Outbound push modules to send data to OpenMRS.","cht-to-openmrs#CHT to OpenMRS":"This section focuses on a simple process and the best practices to send data to OpenMRS.","data-fields#Data fields":"type name label required relevant appearance constraint constraint_message calculation choice_filter hint default calculate form_uuid NO_LABEL yes _99DCT calculate encounter_type_uuid NO_LABEL yes begin group group_assessment Assessment select_one client_consented _1710_clientConsented_99DCT Has ${patient_name} consented? yes select_multiple disability_type _162558_disabilityTypeMULTISELECT_99DCT Disability type yes text _160632_Specify_99DCT Specify (Other) yes ${_162558_disabilityTypeMULTISELECT_99DCT} = ‘other’ end group","error-handling#Error Handling":"Exceptions thrown during processing can be added to a queue and presented on an interface for action. The erring data may then be re-queued. You need to consider what works best at this point. For convenience, it makes sense for a backend user to resolve such errors.\nSample OpenMRS handler scripts include:\nPIH Malawi’s EMR handler KenyaEMR handler","getting-started#Getting started":"The CHT API and OpenMRS API are used for integration. However, the APIs do not do data cleaning and formatting out-of-the-box. Therefore, both systems require custom solutions that ochestrate the functionality to transform exchanged data to be accepted. In the following sections, we focus more on the general procedure for setting up custom modules and services.","handling-the-data#Handling the data":"After collecting data using the forms defined above, the next step is to process and persist it in OpenMRS. Processing includes:\nCleaning First, the data has to be transformed to an OpenMRS-compatible format before it is queued. This means that you need to define custom RESTful endpoints if not already existing, that would be utilized by the Outbound push modules configured above. Transformation basically involves extracting form data into an object. Most importantly, discriminators, which are like flags appended to form data to inform the type of data being processed. For example, a registration discriminator implies that we’re dealing with demographic details. A sample transformed payload is shown below:\n{ \"patient\": { \"patient.family_name\": \"Doe\", \"patient.first_name\": \"John\", \"patient.middle_name\": \"Test\", \"patient.other_identifier\": [ { \"identifier_type_uuid\": \"49af6cdc-7968-4abb-bf46-de10d7f4859f\", \"identifier_type\": \"38839128\", \"identifier_type_name\": \"National ID\", }, { \"identifier_type_uuid\": \"000f85aa-a460-46d1-87be-daabe7bd9d99\", \"identifier_type\": \"1271891\", \"identifier_type_name\": \"Clinic Number\", } ] }, \"observation\": { \"1710^CLIENT CONSENTED^99DCT\": \"1065^Yes^99DCT\", \"1542^OCCUPATION^99DCT\": \"1538^Farmer^99DCT\" }, \"discriminator\": { \"discriminator\": \"registration\" } } Queueing This step involves adding a transformed payload, now objects, to a queue. This is important because it helps to capture errors that occur during processing and the data can be corrected and re-queued. A queue will have both registration and encounter objects.\nYou need to define a queue processor that will be consuming the queue and push each object to the rightful handler.\nData handlers Data handlers are responsible for persisting the data in OpenMRS. The handler can also be used to trigger feedback to submitters of the data (this can be a brief summary such as number of synced documents and success rate). The following steps apply:\nDefine handlers for each object type (e.g. person / patient, trace report. Create a scheduler to start the queue processor above. The queue processor shall get to the handler for processing. Closely monitor the errors log for prompt action where necessary. You may want to further configure a service that relays feedback to the CHT. Feel free to utilize in-app text messages, which can be triggered via the sms endpoint of CHT. The health workers would receive these feedback messages on their phones as well as access via the Messages tab in-app.","listener-script-in-the-cht#Listener script in the CHT":"This is a service that would help shift information in the CHT hierarchy to support the usecases of interest. Through {db}/bulk_docs, OpenMRS posts a data record that contains data objects such as observations and contact list (if available) details. The service obtains the record, and unpacks it into a contact in CHT and parented under the correct hierarchy level based on the metadata received from OpenMRS. The script should:\nDo patient matching to avoid duplicate details. Querying can be achieved via available endpoints such as contacts_by_phone endpoint and hydrate endpoint among others/ If the incoming data matches what exists, update the contact found in CHT. Process all reports payloads and append them to the linked contact’s profile. Note that the xml or JSON form has to be defined in the CHT. Delete the payload that is received from OpenMRS after it is processed since it will have been used to create CHT data structures. Monitor and log failed transactions Once you have configured the above for data exchange, the data flow will be like this:\nCHT - OpenMRS Data Flow","mapping-forms#Mapping forms":"The first thing is to define forms to capture data. Forms can be contact or app, which translate to patient and encounter (for example, observation, lab request, and referral) respectively. Forms are defined using the XLS Form standard. Some of the best practices here include adopting a convention that results in minimum disruption (or that would require minimal processing) of the concept dictionary.\nDefining contact forms Here, you need to capture the basic details required for registering a patient or a patient contact in OpenMRS. Below is a sample naming convention for demographic details such as a person’s name (under field name):\npatient_familyName for family_name, patient_firstName for first_name, patient_middleName for middle_name\nAnother example of patient identifiers could take the form _IdentifierType_humanReadableName_IdentifierTypeUuid. For example, national Id identifier type definition would be, patient_identifierType_nationalId_49af6cdc-7968-4abb-bf46-de10d7f4859f.\nA sample form definition could be as follows:\ntype name label required relevant appearance constraint constraint_message calculation choice_filter hint default begin group patient_demographics Demographic details string patient_familyName Family name yes string patient_firstName First name yes string patient_middleName Middle name yes string patient_identifierType_nationalId_49af6cdc-7968-4abb-bf46-de10d7f4859f National ID yes end group A sample payload would be as follows:\n{ ..., \"patient_demographics\": { \"patient_familyName\": \"Doe\", \"patient_firstName\": \"John\", \"patient_middleName\": \"Test\", \"patient_identifierType_nationalId_49af6cdc-7968-4abb-bf46-de10d7f4859f\": \"38839128\", \"patient_identifierType_clinicNumber_000f85aa-a460-46d1-87be-daabe7bd9d99\": \"1271891\" } } Such convention makes it easier to process the payload for queueing handling.\nDefining app forms An encounter form consists of input and observation groups in the XForm. form_uuid and encounter_type_uuid define the uuids for the encounter form and encounter type respectively. Note that these are defined within the general input group provided by CHT.\nThe observation group is used to define the clinical observation variables to be collected by the form. This group is equivalent to the group of in OpenMRS html form entry module. In OpenMRS, an observation construct has concept ID (with inherent concept type), label, and answer options if it requires. In Xforms, one needs to define the following:\nObservation type (field type of the xlsform)\nName - this will be used as key in the generated JSON payload for the form data. Using the adopted convention above, _conceptID_humanReadableConceptName_99DCT, we could have:\n_5089_weight_99DC for weight.\nFor multi-select (obs group in OpenMRS), we can easily append MULTISELECT to the humanReadableConceptName for example: _162558_disabilityTypeMULTISELECT_99DCT for diability type with the options blind, dumb, ...\nA label which is displayed to the user during form entry\nHere is a sample form snippet followed by sample select list in the choices worksheet.","openmrs-to-cht#OpenMRS to CHT":"","overview#Overview":"The CHT Core Framework supports integrations with OpenMRS in a variety of ways:\nSending patient and patient contacts data Sending reports (encounters and observations) data Exposing an API for OpenMRS developers to pull data from CHT Core Receiving data from OpenMRS Sending patients, patient contacts, and reports data can be achieved using the Outbound push. Receiving data from OpenMRS can be achieved using the CHT Core Web API.\nCommon OpenMRS use cases include:\nLinkage to care: Completion of medical visits after diagnosis Contact tracing: OpenMRS generates a list of contacts to be followed up Care coordination: Reminding patients to self-report or health-care givers to complete follow ups on patients of interest","prerequisites#Prerequisites":"As you design your usecases, bear in mind that at the heart of OpenMRS is the Concept Dictionary. Every contact, relationship, encounter or observation metadata exists first, which guides the definition of the forms in the CHT. Therefore, you need to have good understanding of what data maps to what concept.","scheduled-tasks#Scheduled tasks":"This includes defining a scheduler and a task that will be compiling the payload to be pushed to the CHT on specific intervals. Remember that the CHT expects data in JSON format. The CHT API can be used to process incoming reports. For custom payloads, the {db}/bulk_docs can be utilized to save multiple payloads concurrent"},"title":"OpenMRS"},"/building/integrations/oppia/":{"data":{"":"","app-forms#App Forms":"The CHT application uses XLSForms (app forms), which are a simplified method of setting up form configurations using Excel (or Libre Office Calc, Google sheets, etc). The forms contain the questions/content that the user will interact with, including web links that enable the users to navigate from the CHT application to a specific course in OppiaMobile. App forms are typically created in the project-folder \u003e forms \u003e app directory of a project. If the content requires a user to access any form of media, then a media folder for the specific form is created and named after the form. For example, to add video content for a form module_one.xlsx, save the video file to the following directory: project-folder \u003e forms \u003e app \u003e module_one-media \u003e video. Once the forms are set up with content, the forms are converted to XForms, which are in xml format. To limit access of App Forms to certain contacts, an App Forms must have a properties file, which defines when and for whom certain forms should be accessed. Once configured, the forms are uploaded to an instance using the CHT configurer with the following commands, which upload specific forms and all forms respectively:\ncht --instance= convert-app-forms upload-app-forms -- or\ncht --instance= convert-app-forms upload-app-forms The image below shows an example of an XLSForm configured for the Educational Modules:","contact-summary#Contact Summary":"In addition to targets, the user is able to see which specific modules they have completed, and view upcoming tasks and other general information on their profile. The section containing this information is known as the contact summary. The contact summary has 3 main outputs: cards, fields, and context. Contact summary is defined in the contact-summary.templated.js file under the project folder.\nCards are an array of objects which can be customized to group information viewed on a contact’s profile. The required properties of a card include:\nLabel - title of the card; Fields - content of the card; Field name- title/label of a field; Field value - value displayed for a field. The code snippet below shows an example of a card configured for the educational modules:\nconst isCHW = () =\u003e { return getField(contact, 'role') === 'chw'; }; const hasCompletedModuleTraining = function (form) { return reports \u0026\u0026 reports.some(report =\u003e report.form === form \u0026\u0026 report.fields.assessment_passed === 'yes'); }; const hasCompletedModuleOne = hasCompletedModuleTraining('cha_module_one'); const hasCompletedModuleTwo = hasCompletedModuleTraining('cha_module_two'); const hasCompletedModuleThree = hasCompletedModuleTraining('cha_module_three'); const cards = [ { label: 'contact.profile.training', appliesToType: 'person', appliesIf: isCHW, fields: function () { let fields = []; const completedModuleOne = hasCompletedModuleOne ? 'Complete' : 'Incomplete'; const completedModuleTwo = hasCompletedModuleTwo ? 'Complete' : 'Incomplete'; const completedModuleThree = hasCompletedModuleThree ? 'Complete' : 'Incomplete'; fields.push( { icon: 'icon-cha', label: 'Introduction To COVID-19', value: completedModuleOne, width: 6 }, { icon: 'icon-cha', label: 'COVID Care', value: completedModuleTwo, width: 6 }, { icon: 'icon-cha', label: 'COVID Misinformation', value: completedModuleThree, width: 6 } ); return fields; } } ] This image shows the training card configured to show completion status of the educational modules:\nContext provides information to App Forms, which are initiated from the contact’s profile page. To show an App Form on a contact’s profile, the form’s expression field in its properties file must evaluate to true for the contact. The context information from the profile is accessible as the variable summary.\nThe code snippet below shows the context variables that can be accessed in the app forms:\nconst context = { hasCompletedModuleOne, hasCompletedModuleTwo, hasCompletedModuleThree, }; The three variables hasCompletedModuleOne, hasCompletedModuleTwo and hasCompletedModuleThree are used in the educational modules app forms to determine whether the user will access the forms through the care guide.\nThe code snippet below shows an example of App Form properties, where the user can only access the form as a care guide if they have completed module one task. This is defined by the phrase summary.hasCompletedModuleOne in the expression statement.\n{ \"icon\": \"icon-person\", \"context\": { \"person\": false, \"place\": false, \"expression\": \"!contact || (contact.type === 'person' \u0026\u0026 user.parent.type === 'health_center' \u0026\u0026 user.role === 'chw' \u0026\u0026 contact.role === 'chw' \u0026\u0026 summary.hasCompletedModuleOne)\" } }","features#Features":"This integration leverages the remote onboarding, task \u0026 scheduling, and target features of the CHT core framework with the curated, multimedia educational content available via OppiaMobile’s learning platform.\nThe CHT Core Framework \u0026 OppiaMobile integration currently supports the following capabilities and features:\nTask management for notifications on new educational modules and software updates Remote onboarding to new apps, software features, and workflows when they are updated, without relying on face-to-face training Optimized multimedia content with links to educational modules powered by OppiaMobile Message and feedback options, to contact supervisors with questions and seek support Supervisor visibility into CHW progress for onboarding, learning, and care Hosting options for government-led, government-owned platforms The training modules configuration consists of five main components:\nApp Forms - Content that the user will interact with; Tasks - How forms are presented to the user: how and when the user accesses the forms for input; Targets - Shows the progress of the user; Contact Summary - Gives a highlight of the modules completed by the user; Context - Defines what forms are available to fill from the user’s profile, or available as tasks.","integration-with-oppiamobile-using-weblinks#Integration with OppiaMobile using weblinks":"The CHT application makes use of weblinks to direct the user to the OppiaMobile application. Each task in the CHT has a weblink configured to point to a specific course in OppiaMobile. The weblinks are configured in the forms as a button, which, when clicked or tapped, redirects the user accordingly, depending on the installation status of the OppiaMobile application and the respective course. The weblinks are configured in each of the XLSForms that are triggered by a selected task as illustrated in the image below:\n[Open Oppia Mobile] represents the button styling and label.\nhttps://staging.cha.oppia-mobile.org/view?course=introduction-to-covid-19 represents the weblink, where course=introduction-to-covid-19 specifies the name of the course to be launched in OppiaMobile as configured on Moodle.\nThis image shows the outcome of the button configuration:","overview#Overview":"OppiaMobile is an open source mobile learning platform built by Digital Campus specially designed for delivering learning content, multimedia, and quizzes in low connectivity settings. All the content and activities can be accessed and used when no internet connection is available, and users can earn points and badges for completing activities and watching videos. To learn more about the platform, check out the overview, OppiaMobile on Github, and their documentation site. You can also join the OppiaMobile Community Discussion Board.\nThis documentation describes how the CHT and OppiaMobile can integrate to provide a learning and care experience for community health workers and other health care providers. It demonstrates how both apps link to one another to provide a seamless user experience, describes features of both applications, and the required configuration adjustments.\nWe provide a detailed example of the CHT\u003c\u003eOppiaMobile integration, including how to access the learning material, an overview of the functionalities within educational modules, and post-course assessment and supervisor support.","targets#Targets":"The users also have access to targets. Targets are a visual representation of the progress and goals of the user. These are app analytics accessed through the targets tab, where the user is able to view how many modules they have completed. Similar to tasks, targets are defined as an array of objects in a targets.js file under the project folder, with each target following the targets schema. The required properties of a target object include:\nId - unique identifier of the target; Translation_key - title displayed for the widget; Type - type of numeric representation i.e. count/percentage; Goal - denotes how much the user should achieve; appliesTo - Determines whether a contact or a report is counted. On completing the targets configuration, the following command is used to compile and upload the applications settings (tasks, targets, contact-summary, form properties):\ncht --instance= compile-app-settings upload-app-settings Below is a code snippet for a target configured for the educational modules:\n{ id: 'training-modules-completed', type: 'percent', icon: 'icon-cha', goal: 100, context: 'user.role === \"chw\"', translation_key: 'targets.training_completion.title', subtitle_translation_key: 'targets.all_time.subtitle', appliesTo: 'contacts', appliesToType: ['person'], appliesIf: function (contact) { return getField(contact.contact, 'role') === 'chw'; }, idType: 'report', passesIf: function(contact) { return contact.reports || !contact.reports; }, aggregate: true, date: 'now', emitCustom: (emit, original, contact) =\u003e { const assessmentModules = ['cha_module_one','cha_module_two','cha_module_three']; for(let eligibleModule of assessmentModules){ emit(Object.assign({}, original, { _id: `${eligibleModule}`, pass: false })); } const validReports = contact.reports.filter(report =\u003e ((assessmentModules.includes(report.form)) \u0026\u0026 report.fields.assessment_passed === 'yes')); for (let report of validReports) { const instance = Object.assign({}, original, { _id: `${report.form}`, pass: true }); emit(instance); } } }","tasks#Tasks":"Tasks are a set of actions available to users from the task tab. Selecting a task opens up a specific form that completes a workflow. Tasks are available within a given timeframe, after which they expire and the user is unable to view or do them. Tasks are defined as an array of objects in a tasks.js file under the project folder, with each task following the task schema. The required properties of a task include:\nName - unique identifier of the task; Title - displays the workflow to be completed for a contact; AppliesTo - determines if the task is emitted per contact or report; ResolvedIf - conditions to mark a task as resolved/completed; Events - specifies the timeframe of a task; Actions - specifies the forms accessed by the user and allows injecting content from previous submissions. On completing the task configuration, the following command is used to compile and upload the applications settings (tasks, targets, contact-summary, form properties):\ncht --instance= compile-app-settings upload-app-settings\nThe code snippet below illustrates an example of a task configured for the educational modules:\n{ title: 'Community Health Academy', name: 'cha-module-one-oppia', contactLabel: 'Introduction To Covid-19', icon:'icon-cha', appliesTo: 'contacts', appliesToType: ['person'], appliesIf: c =\u003e c.contact.role === 'chw' \u0026\u0026 user.parent \u0026\u0026 user.parent.type === 'health_center', actions: [{ form: 'cha_module_one' }], events: [{ dueDate: (event, c) =\u003e { return Utils.addDate(new Date(c.contact.reported_date), 0); }, start: 0, end: 25550 }], resolvedIf: function (c) { return c.reports.some(report =\u003e report.form === 'cha_module_one' \u0026\u0026 Utils.getField(report, 'assessment_passed') === 'yes'); } }"},"title":"OppiaMobile"},"/building/integrations/rapidpro/":{"data":{"":"RapidPro is the open-source platform that powers TextIt, developed by UNICEF and Nyaruka. RapidPro allows you to visually build messaging workflows for mobile-based services. The flows support a variety of technologies such as: SMS, USSD, IVR, Telegram, Facebook Messenger, and WhatsApp. Review RapidPro’s documentation to familiarize yourself with various components that include the API. Before you embark on designing an integrated RapidPro/CHT workflow, you should start by understanding the needs of your users, identifying a problem to solve, and establishing goals. While an integrated RapidPro/CHT workflow can open up many powerful and personalized messaging capabilities, introducing an additional technology solution does come with complexities and cost. A good way to mitigate some of the complexities of setting up and hosting RapidPro yourself is to utilize a SaaS solution such as TextIt. TextIt offers transparent per message pricing and free credits to start off.\nTo learn more about the platform, check out RapidPro on GitHub or join their Google Group.\nComing up with a design to accommodate user needs requires a detailed understanding of the capabilities of both systems and conceptually where it makes sense to introduce interactions between them. Below we introduce some of the key concepts in RapidPro, but to learn more you can have a look at their documentation.","best-practices#Best Practices":"","campaigns#Campaigns":"Campaigns allow you to schedule messages and flows around a date unique to each contact in a group, like a delivery date or registration date. You can add any number of Events to the Campaign.\nUse Case Example: Send a daily check-in message to quarantined patients for 14 days to see if they have developed any symptoms.\nAdditional Resources: Creating a Campaign","chw-symptom-and-mental-health-checks#CHW Symptom and Mental Health Checks":"The CHW Symptom and Mental Health Checks app is used to proactively check in with health workers to screen for COVID-19 symptoms and/or the need for psychosocial counseling.","configuration#Configuration":"The information below focuses on specific interactions between RapidPro and the CHT, it does not cover RapidPro specific configuration, consult RapidPro documentation and resources for that. Also, the examples and code snippets below are using TextIt, the hosted RapidPro service mentioned above.","configuration-1#Configuration":"Persist a unique identifier for each respondent entering the flows. This identifier shall be used to link flow runs to the recipients to make data analysis smooth. Use consistent language and message design patterns to maintain a consistent experience and conversation. For example, if including a contact name at the beginning of a message, keep it that way for all messages including the localized messages. Be mindful of when you save data back to the CHT. This should happen at major milestones in a flow, for example, end of a flow or before sending a payload to an API endpoint. Use globals, shared values that can be referenced inflows, as well as broadcasts and campaigns, within your account referenced by @globals.value_name. This prevents re-entry of values in various components and allows flows to be shared easily in staging and production environments. Beware of concurrency that is not supported in RapidPro. Concurrency refers to a situation whereby one contact participates in more than one flow at the same time. Whenever this happens, the former flow shall be interrupted in favor of the latter. This can result in respondents exiting flows before completion, which is a confusing user experience and results in poor survey data. A main flow that spins up individual flows may be useful to consider.","contact-tracing#Contact Tracing":"The COVID-19 Contact Tracing app uses RapidPro to send messages to quarantined COVID-19 patients. Messages are sent to the patients daily asking whether or not they developed new symptoms. If so, a health worker will be notified by SMS and receive a CHT task. All responses to the RapidPro workflow are recorded in the CHT and can be queried in analytics.","create-rapidpro-user-in-cht#Create RapidPro user in CHT":"For RapidPro to communicate with the CHT, you need to create a User in the CHT that will be used by RapidPro when calling the CHT’s APIs. This can be done from the App Management page in the CHT. When adding the user in the CHT, be sure to select the Gateway - Limited access user for Medic Gateway Role.","deployment#Deployment":"Make sure all your flows are in source control. For every change, no matter how small (fixing a typo, etc), at the very least, document and commit the JSON for the flows to Github. This makes flows restorable, auditable, and releasable across environments Use an automated deployment process when pushing changes to an instance - either staging or production. A CI/CD reduces manual errors and ensures your production state is tested and reproducible. Remember to set up the rapidpro2pg service to get your RapidPro workspace data over to the Postgres database.","flow-design#Flow design":"Tips and best practices are listed below:\nIf possible, have less than 10 questions. Long surveys may either lead to low completion rates or rushed responses that affects the data quality. Close ended questions are better and easier to respond and handle in RapidPro since respondents only have to send a number or letter such as 1 for “Yes”, 2 for “No”. Avoid sensitive questions since privacy cannot be guaranteed over SMS and where it is common to share phones. Include intro and outro messages. Intro messages serve the purpose of giving the survey details such as the background of the survey, the number of questions, data protection, whether there shall be follow up, SMS billing, etc. Outro messages are helpful to notify respondents that they survey is over and commonly include thank you notes. Include questions that give the respondent an opportunity to opt-in or out of the survey. If they opt out, do not send a follow-up text. Keep it short, to the size of one SMS (160 characters). Longer messages will be split and may not display well on the recipients’ devices since Mobile Network Operators (MNOs) cannot guarantee that the multi-parts shall be delivered in the desired order. Retain the same message length as you localize to multiple languages. Truncate appropriately if long contact names included in the message push the length beyond the limit.","flow-programming#Flow programming":"Use skip logic to ask relevant questions only. For example, number of children only if they have children. Automate error messages to validate responses. For example, You submitted an invalid response. Reply 1 for “Yes”, 2 for “No”. These can be customized. Reduce unnecessary messaging by using reminders and follow-up messages selectively on respondents by first differentiating those that completed a flow versus those that did not. Customize messages as much as possible by pre-populating information already known such as name, to target respondents, especially when phones are shared among clients. Translate all messages, especially when deploying in a multi-lingual environment. This ensures that respondents fully understand the survey in their language. Beware of the timing of the surveys that directly affects response rates. From experience, sending questions when respondents are busy with their errands during the day ultimately leads to low response rates as opposed to evenings when they are done for the day. Make sure you handle unsolicited responses by redirecting such to, for example, a flow that eventually alerts concerned individuals such as reports of an outbreak. Use timeouts or pauses to send automatic messages after a period of inactivity during a survey. This helps nudge the respondents to complete their flows.","flows#Flows":"Flows are a series of steps you link together visually to define the interactions users will have. At any point in the flow, you can trigger actions such as sending an SMS, email, or calling external APIs. Flows are the base for RapidPro’s other features.\nUse Case Example: Send an SMS to a patient asking if they are experiencing any new symptoms today. If so, let the patient know that a CHW will contact them. If not, let the patient know that they will receive another check-in message in three days and to contact their CHW if any new symptoms develop before then.\nAdditional Resource: How to Build a RapidPro Flow.","globals#Globals":"Globals are shared values that can be referenced in flows, as well as broadcasts and campaigns, within your account referenced by @globals.value_name. They allow you to create a value once and use it repeatedly without having to reenter the value. Likewise, globals make updating a shared value much easier. Rather than manually changing a value everywhere it’s used in your account, simply update the value found in your Globals page.\nGlobals\nOnce you have configured a Global value, you can easily use it in your flows like this:\nGlobals-Usage","look-up-cht-data-from-rapidpro#Look up CHT data from RapidPro":"Another common action you will likely need to perform in RapidPro is getting information from the CHT about a user or patient based on their phone number. You can use the contacts-by-phone API to get fully hydrated contacts associated to that phone number.","messages#Messages":"If language options are included allow users to select their preference before beginning the flow Make sure the language and terminology of your messages are appropriate for the audience Use a personalized welcome message before asking users to take actions Keep content brief and relevant to the topic as to not overload the user Make your response requests and calls-to-action clear Be cognizant of form collisions during assessments (ex. “0=no, 1=yes” if those numbers may also reference workflow codes, or “N=no” if “N” is the code to create a new person) Use standards in logic where possible (ex. The non-zero value is true; 0=false, 1=true, 0=no, 1=yes) Sign the first message with the partner’s name, or MOH for visibility Consider providing an option to revisit information again (ex. Text 123 to this number to receive these messages again)","monitoring#Monitoring":"Make sure you are monitoring workflows. Are they finishing as expected? Are some workflows not being used? A useful feature is the “send email” action whenever an unexpected event occurs while the flow is in progress, for example, failure calling an API endpoint. Include relevant parties in the monitoring notifications. For starters, a mailing group that includes all parties will do it without re-entry of each address of relevant recipients. Include notifications to respondents too, appropriate to the messaging method. Check that your workspace has enough credits and ensure RapidPro email credit alerts are configured so that credits top ups are done promptly.","overview#Overview":"CHT-based SMS workflows can be configured to support registering of new patients or pregnancies, recording outcomes of visits, confirmation via auto-responses, and scheduling reminders. Some projects are designed entirely around SMS workflows. The CHT also supports person to person SMS messaging from the Messages tab.\nFor more complex messaging workflows or to utilize other messaging platforms, you can design workflows that leverage the functionality of RapidPro and the CHT together. This enables semi-automated, direct to patient approaches to health assessments and care coordination at the community level.","rapidpro-concepts#RapidPro Concepts":"Before designing your integrated RapidPro/CHT workflow, it’s important to understand a couple key functional concepts in RapidPro: Flows, Campaigns, and Triggers.","remote-training#Remote Training":"The Remote Training by SMS app uses RapidPro to train health workers on Antenatal Care in the language of their choice. If the health worker answers a training question incorrectly, a task can be created for their supervisor to follow up with them.","save-flow-data-to-the-cht#Save flow data to the CHT":"Once a user has completed a Flow in RapidPro, it is likely you will want to record some of the information collected in the RapidPro flow back in the CHT. This can be achieved by utilizing the Call Webhook action in RapidPro.\nStep Application Config step 1 CHT Configure a JSON Form that includes the fields from RapidPro you want to send to the CHT. 2 RapidPro Add a Call a Webhook node. 3 RapidPro POST to the records endpoint in the CHT. If you used the Global value mentioned above, the POST will look something like @globals.api/v2/records. 4 RapidPro Set a Result Name 5 RapidPro Configure HTTP Headers to be Content-Type -\u003e application/json 6 RapidPro Configure the POST Body (see example below)","sequence-diagrams#Sequence Diagrams":"A sequence diagram will help you identify the various actors in a given workflow and what the flow of data will look like. Below is an overview and example diagram for a patient initiated triage and feedback workflow.\nPatient triggers a RapidPro flow by sending a message to a short code Using the phone number of the patient, RapidPro requests information from the CHT The CHT responds with the patient’s name and other details RapidPro sends personalized messages to conduct triage for the patient RapidPro determines the outcome RapidPro sends the outcome to the patient via SMS and posts the results to the CHT If the patient needs to be followed-up with, the CHT creates a task for the appropriate CHW Once the CHW completes that task, the CHT initiates the Feedback Flow in RapidPro RapidPro logic records feedback via SMS from the patient The results of the feedback flow are saved in the CHT Sequence","sms-messaging-channels#SMS Messaging Channels":"RapidPro supports both Android channels and SMS aggregators.\nNote\nAndroid channels have a messaging limit of 330 outgoing messages per hour.\nEnsure that you install the maximum number of SMS packs (available in the RapidPro SMS Channel Android app) and follow these best practices when using Android channels:\nPrevent the Android channel from going to sleep. Some steps to achieve this are available on dontkillmyapp:\nDo not optimize battery usage. Make sure that the app is on the list of Apps that will not be put to sleep. Set Background Limit to Standard Limit and confirm that the RapidPro app has the toggle enabled in “Background Check” and all of the apps have “App Standby state: ACTIVE” in Standby apps. Keep the phone plugged into a power source. Automatically wake up the phone.\nThe RapidPro system uses Google Cloud Messaging which wakes up the phone whenever a message is sent. Install an APK that makes the channel relay messages as soon as RapidPro emits. Alerts for when things go wrong.\nSend monitoring emails and alert various parties when the Android Channel goes to sleep or becomes unavailable. This can be done from the channel’s management page under Alert Email Android channels can be used with a bulk sender to get past the 330 outgoing messages per hour.\nUse shared or dedicated shortcodes for SMS messaging. Dedicated shortcodes are preferred because recipients do not have to include the keyword with each response submitted. Shortcode procurement can be a lengthy process, so make arrangements for the shortcode in advance. It is possible but inconvenient to migrate to a shortcode after deployment.\nIt is recommended that SMS costs be zero-rated so that respondents do not incur charges. This motivates them to respond.","start-rapidpro-flow-from-cht#Start RapidPro Flow from CHT":"One of the most common activities you’ll want to do is trigger a Flow in RapidPro based on something that occurred in the CHT. For example… whenever a specific form is submitted in the CHT with some conditional value, start a flow in RapidPro. To do this, you will use the Outbound feature in the CHT, invoking the Flow Starts Endpoint in RapidPro.\nBelow is an example outbound config in the CHT called textit-self-quarantine that will trigger a flow in RapidPro whenever a covid_trace_follow_up form is submitted in the CHT where symptom = no. It will also pass an extra date value for self_quarantine_enrollment.\n{ \"textit-self-quarantine\": { \"relevant_to\": \"doc.type === 'data_record' \u0026\u0026 doc.form === 'covid_trace_follow_up' \u0026\u0026 doc.fields.trace.symptom === 'no'\", \"destination\": { \"base_url\": \"https://textit.in\", \"auth\": { \"type\": \"header\", \"name\": \"Authorization\", \"value_key\": \"textit.in\" }, \"path\": \"/api/v2/flow_starts.json\" }, \"mapping\": { \"flow\": { \"expr\": \"'\" }, \"urns\": { \"expr\": \"[ 'tel:' + doc.fields.inputs.contact.phone ]\", \"optional\": false }, \"extra.self_quarantine_enrollment\": { \"expr\": \"new Date(doc.reported_date).getDate()+'-'+ (new Date(doc.reported_date).getMonth()+1) +'-' + new Date(doc.reported_date).getFullYear()+ ' ' + new Date(doc.reported_date).getHours() + ':' + new Date(doc.reported_date).getMinutes()\", \"optional\": false }, \"extra.name\": \"doc.fields.inputs.contact.surname\" } } }","testing#Testing":"Testing includes manual and scripted.\nManual testing\nTelegram is an effective, free, convenient tool for testing that is great for developers and quick testing. Prior to release, it is crucial that you test the workflow as close to production as possible. Use the production messaging channels, to especially check messaging fidelity. It is recommended to run a pilot prior to scaling a deployment. Remember, this shall expose the flows to real respondents and be helpful towards uncovering details such as text display among others. In order to prevent breakages in flows, run full end-to-end tests as edits/changes can have unpredictable impacts. Check that the entire flow is not impacted by the change prior to releasing in production. Scripted testing\nThese tests cover the parts that are inaccessible via manual tests. They include units that test individual components and end-to-end tests that test a flow from start to end. As a best practice, the following test pattern using the cht-conf-test-harness is recommended:\nCreate contact doc via cht-conf-test-harness PUT docs into localhost API Trigger RapidPro flow Wait for a RapidPro flow to complete Fetch state of contact in RapidPro Wait for document to be created in API Inject document into cht-conf-test-harness Mock passage of time to test task behavior One e2e test per production scenario","triggers#Triggers":"Triggers allow you to control how or when a Flow begins. A Trigger can be a keyword received in a text, a point in time, a missed call, or even a follow to a Twitter handle.\nUse Case Example: Start a health assessment Flow whenever a person sends the text assessment to a specific short code.\nAdditional Resources: Creating a Keyword Trigger that starts a Flow","workflow-design#Workflow Design":"Designing an integrated workflow between multiple systems is more of an art than a science. Drafting a sequence diagram (below) is a good first step. When drafting your sequence diagram, it is useful to consider a few key integration touchpoints that are common across many integrated workflows.\nOne system initiates or triggers an action in the other system One system needs to get information from the other system One system wants to store or update data in the other system","workflows#Workflows":"Integrated RapidPro/CHT workflows are very flexible and leverage the full functionality of each application; You configure RapidPro directly in RapidPro, and configure the CHT in the CHT and the two systems communicate with each other through APIs and Outbound push. With this architecture, you are not limited to a subset of functionality within either application.\nA simple RapidPro/CHT integration might include triggering an interactive SMS messaging flow in RapidPro whenever a new patient is registered in the CHT and then storing the responses of that messaging flow in the CHT. You could then conditionally trigger a Task for a health worker in the CHT based on the patient responses from the RapidPro flow.\nApp builders have built and deployed a number of interactive messaging workflows that integrate RapidPro and the CHT already, see below for a few examples.","workspaces#Workspaces":"A workspace contains models for a set of RapidPro users, and it also identifies a company or project. Set up staging and production workspaces so that builds, tests and updates can proceed safely before and after deployment."},"title":"RapidPro"},"/building/interoperability/":{"data":{"":"Content in this section Overview OpenHIM Mediators Configuring CHT applications for interoperability workflows Loss To Follow-Up reference workflow OpenMRS Interoperability"},"title":"Interoperability"},"/building/interoperability/cht-config/":{"data":{"":"","inbound-patients#Inbound Patients":"It is also possbile to create patients in the CHT from patients that were created in external systems. Patients in CHT applications are represented as contacts, and require a parent to be assigned to a CHW, facility, or other location. This requires a mediator to have the ids of contacts in CHT and currently cannot be done automatically by the default mediator. A custom mediator needs to be created which assigns a field to use as the parent_id.\nTo create data in CHT, a mediator converts a FHIR Patient to a json object that it submits as a request to the records API. This requires a form to be configured in the CHT; the incoming data will be saved as a report. Then, the actual patient document is created by assigning a create patient transition to the form.\nBecause the patient creation form is a CHT form like any other, messages, validations and other transitions can be assigned to it to build more complex workflows.\nThis example form allows an interoperating system to create a patient with some common fields: patient_name, age_in_days, phone_number, and an id in the external system. In this example, location_id is used as the parent_id field; this field will usually have to be configured in a custom mediator.\nField Description patient_name Patient’s name. phone_number Patient’s phone number. age_in_days Patient’s age, in days. sex Patient’s sex. external_id The preferred identifier from the external system. { \"INTEROP_PATIENT\": { \"meta\": { \"code\": \"interop_patient\", }, \"fields\": { \"age_in_days\": { \"labels\": { \"short\": { \"en\": \"Age in Days\" } }, \"position\": 0, \"type\": \"integer\", \"required\": true }, \"patient_name\": { \"labels\": { \"short\": { \"en\": \"Patient Name\" } }, \"position\": 1, \"type\": \"string\", \"length\": [ 1, 40 ], \"required\": true }, \"phone_number\": { \"labels\": { \"short\": { \"en\": \"patient Phone\" } }, \"position\": 2, \"flags\":{ \"allow_duplicate\": false }, \"type\": \"phone_number\", \"required\": true }, \"location_id\": { \"labels\": { \"short\": { \"en\": \"location_id\" } }, \"position\": 3, \"type\": \"string\", \"length\": [ 1, 60 ], \"required\": true }, \"external_id\": { \"labels\": { \"short\": { \"en\": \"External ID\" } }, \"position\": 4, \"type\": \"string\", \"length\": [ 1, 60 ], \"required\": true } }, \"public_form\": true } } Using the above example form, this transition will create a patient document and add a birth_date field using patient_age_in_days.\n{ \"form\": \"interop_patient\", \"events\": [ { \"name\": \"on_create\", \"trigger\": \"add_birth_date\", \"params\": \"\", \"bool_expr\": \"doc.patient_name\" }, { \"name\": \"on_create\", \"trigger\": \"add_patient\", \"params\": { \"parent_id\": \"location_id\" }, \"bool_expr\": \"doc.patient_name\" } ] }","inbound-reports#Inbound Reports":"Encounters and Observations created by interoperating systems can be sent to the CHT to be visible to CHT users. Similarly to patients, a mediator converts the FHIR resources to a json format that is submitted to the records API. Reports need to be linked to patients using a patient_id field which is the uuid of the patient document in CHT. The mediator extracts this id from the CHT Document ID identifier of the FHIR Patient. For patients created by CHT, they need to have been sent to the interoperating system before receiving any reports. For patients created by the interoperating system, the CHT Document ID needs to have been set; see the section below on Patient Ids.\nA CHT form needs to be configured to receive the reports via the records API. In the form configuration, the names of fields which should be extracted from Observations should be the codes of the Observations. Human readable labels can be added for display.\nBecause these forms are CHT forms like any other, messages, validations and other transitions can be assigned to them to build more complex workflows.\nThis example configures the form for a typical antenatal care form.\n{ \"INTEROP_ANC\": { \"meta\": { \"code\": \"interop_anc\", \"translation_key\": \"forms.interop_anc.title\", \"icon\": \"icon-anc-followup\" }, \"fields\": { \"patient_id\": { \"labels\": { \"short\": { \"en\": \"Patient Id\" } }, \"position\": 0, \"type\": \"string\", \"length\": [ 1, 13 ], \"required\": true }, \"17a57368-5f59-42c8-aaab-f2774d21501e\": { \"labels\": { \"short\": { \"en\": \"Danger signs screening\" } }, \"position\": 1, \"type\": \"string\", \"length\": [ 1, 20 ], \"required\": false }, \"1427aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa\": { \"labels\": { \"short\": { \"en\": \"Date of last menstrual period\" } }, \"position\": 2, \"type\": \"string\", \"length\": [ 1, 60 ], \"required\": false }, \"5596aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa\": { \"labels\": { \"short\": { \"en\": \"Estimated date of delivery\" } }, \"position\": 3, \"type\": \"string\", \"length\": [ 1, 60 ], \"required\": false } }, \"public_form\": true } }","outbound-patients#Outbound Patients":"When sending Patient data collected from CHT to an interoperating system, first identify which documents represent patients. In the example below, a patient is a document with type person and role patient. This may not apply to all CHT applications. Then, create an outbound push configuration to send these documents to the interoperating system.\nThe outbound push config contains the following fields.\nField Description relevant_to An “expression” (some JS code that resolves to a truthy or falsy value) that defines which documents are patients. base_url The url of the OpenHIM instance where the mediator is hosted path /mediator/cht/patient Add a condition in the relevant_to field; whenever any documents matching this condition are created or updated, a request will be sent to the url specified in base_url and path.\nThe fields in the patient document need to be mapped to the FHIR format. It is possible to convert the document to a FHIR Patient resource in outbound push config (an example can be found in the reference application). This can be difficult to configure correctly, so the default mediator also accepts a shorter form which is the id, name, phone, date_of_birth and patient_id fields from the document itself.\nThe mapping field in outbound push config contains the following fields.\nField Description _id CouchDB’s unique identifier of the record. This will be converted to an Identifier with type CHT Document Id. name Patient’s name. phone Patient’s phone number. date_of_birth Patient’s date of birth. sex Patient’s sex. patient_id If a separate patient_id is generated, it can be sent here. This will be converted to an Identifier with type CHT Patient Id. This example outbound push config selects documents where patient_id exists, and doc.role === patient:\n{ \"patient\": { \"relevant_to\": \"doc.type === 'person' \u0026\u0026 doc.patient_id \u0026\u0026 doc.role === 'patient'\", \"destination\": { \"base_url\": \"http://openhim-core:5001\", \"path\": \"/mediator/cht/patient\", \"auth\": { \"type\": \"basic\", \"username\": \"interop-client\", \"password_key\": \"openhim1\" } }, \"mapping\": { \"doc._id\": \"doc._id\", \"doc.name\": \"doc.name\", \"doc.phone\": \"doc.phone\", \"doc.date_of_birth\": \"doc.date_of_birth\", \"doc.sex\": \"doc.sex\", \"doc.patient_id\": \"doc.patient_id\" } } }","outbound-reports#Outbound Reports":"To send reports from the CHT to an interoperating system, an Encounter resource is created to represent the encounter between the patient and the CHW. Any data in the report that is sent to the interoperating system is represented as Observations linked to the Encounter.\nEncounters have a reference to Patients, so setting up outbound patients is a requirement for outbound reports.\nSimilarly to patients, create an outbound push configuration with the relevant_to field having doc.type === 'data_record' \u0026\u0026 doc.form === '{{the form to be sent}}'.\nThe outbound push config contains the following fields.\nField Description relevant_to An “expression” (some JS code that resolves to a truthy or falsy value) that defines which forms should be sent. doc.type === 'data_record' \u0026\u0026 doc.form === '{{the form to be sent}}'. base_url The url of the OpenHIM instance where the mediator is hosted. path /mediator/cht/encounter The fields in the form that need to be exchanged need to be mapped to a format that a mediator can convert to Observations. Observations need to have a Code that is understood by the interoperating system, and the response values may need to be converted to a different format.\nFor example a yes/no question may need to be converted to the presence (if yes) or absence (if no) of an observation with a code.\n“Does the patient show signs of fever?” can be converted to an observation with the code for fever if the answer was yes, or be omitted entirely if the answer was no.\nAnother example is multiple choice questions, which can be converted to a coded question where each of the choices is assigned a code.\n“Which danger signs does the patient show?” can be converted to Observations with the code for pregnancy danger signs, and for each danger sign selected, the value is the code of the danger sign.\nThe mapping field in outbound push config contains the following fields.\nField Description id CouchDB’s unique identifier of the record. This will be converted to an Identifier with type CHT Document Id. patient_uuid Document uuid of the patient document that is the subject of the report. reported_date Date when the report was made. observations A list of the form fields to be converted to Observations, with format observations.{{number}}.code and observations.{{number}}.{{value}} where value can be one of valueCode, valueDateTime and valueString. observation.n.code For each form field to convert to observations, a code for the observation. observation.n.valueCode For multiple choice questions with valueCoded responses, the code for the response value. If false, the observation will be omitted. observation.n.valueDateTime For datetime questions, the date for the value. observation.n.valueString For string questions, the value. In this example, a danger signs question is converted into Observations where danger signs has code 17a57368-5f59-42c8-aaab-f2774d21501e, and the yes/no questions fever and breathlessness with codes 43221561-0600-410e-8932-945665533510 and 070dca86-c275-4369-b405-868904d78156 are present if the response was yes or absent if the response was no.\n{ \"relevant_to\": \"doc.type === 'data_record' \u0026\u0026 doc.form === 'pregnancy'\", \"destination\": { \"base_url\": \"http://openhim-core:5001\", \"path\": \"/mediator/cht/encounter\", \"auth\": { \"type\": \"basic\", \"username\": \"interop-client\", \"password_key\": \"openhim1\" } }, \"mapping\": { \"id\": \"doc._id\", \"patient_uuid\": \"doc.fields.inputs.contact._id\", \"reported_date\": \"doc.reported_date\", \"observations.0.code\": { \"expr\": \"\\\"17a57368-5f59-42c8-aaab-f2774d21501e\\\"\" }, \"observations.0.valueCode\": { \"expr\": \"doc.fields.danger_signs.fever == \\\"yes\\\" ? \\\"43221561-0600-410e-8932-945665533510\\\" : false\" }, \"observations.1.code\": { \"expr\": \"\\\"17a57368-5f59-42c8-aaab-f2774d21501e\\\"\" }, \"observations.1.valueCode\": { \"expr\": \"doc.fields.danger_signs.breathlessness == \\\"yes\\\" ? \\\"070dca86-c275-4369-b405-868904d78156\\\" : false\" }, \"observations.2.code\": { \"expr\": \"\\\"1427AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA\\\"\" }, \"observations.2.valueDateTime\": \"doc.fields.lmp_date\", \"observations.3.code\": { \"expr\": \"\\\"5596AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA\\\"\" }, \"observations.3.valueDateTime\": \"doc.fields.expected_date\", \"observations.4.code\": { \"expr\": \"\\\"13179cce-a424-43d7-9ad1-dce7861946e8\\\"\" }, \"observations.4.valueString\": \"doc.fields.danger_signs.other_any\" } }","overview#Overview":"CHT has an interoperability tool which supports building FHIR workflows. You can see more details of the tool in the cht-interoperability repository. The following FHIR resources are supported:\nSending Patient data from the CHT to interoperating systems. Sending reports as Encounters with Observations from the CHT to interoperating systems. Sending Patient data created in interoperating systems to CHT applications. Sending health information represented as Encounters with Observations from interoperating systems to CHT applications.","populating-ids#Populating Ids":"When patients from an interoperating system are sent to a CHT application, the mediator needs to maintain a link between the CHT patient and the external patient by saving the document and patient ids from CHT, and forwarding them back to the interoperating system. Because the patient document is created aynschronously with the request to create the patient, the mediator exposes a callback endpoint to add these ids asynchronously.\nTo use this endpoint, create another outbound push config with patient_id and external_id, and relevant_to being doc.type === 'data_record' \u0026\u0026 doc.form === {{the code of the patient creation form}}.\nThe mapping contains three fields, id, patient_id, and external_id.\nField Description _id Id of the report document that created the patient. This is used to retrieve the patient document, but is not directly the CHT document ID that will be used. patient_id The patient_id from CHT. external_id The external id which will be used to create the link between the cht and external patient. { \"patient_id\": { \"relevant_to\": \"doc.type === 'data_record' \u0026\u0026 doc.form === 'INTEROP_PATIENT'\", \"destination\": { \"base_url\": \"http://openhim-core:5001\", \"path\": \"/mediator/cht/patient_ids\", \"auth\": { \"type\": \"basic\", \"username\": \"interop-client\", \"password_key\": \"openhim1\" } }, \"mapping\": { \"doc._id\": \"doc._id\", \"doc.patient_id\": \"doc.patient_id\", \"doc.external_id\": \"doc.fields.external_id\" } } }","receiving-data#Receiving data":"When receiving data from an interoperating system in a CHT application, forms and transitions are configured to map the incoming data to CHT documents. A mediator is responsible for getting these resources from an interoperating system (either by exposing API endpoints or pulling them from an API), and converting from FHIR resources to a format that can be submitted to the records API.","sending-data#Sending Data":"When sending data to an interoperating system, outbound push is used to configure which documents should be sent and at what point. A mediator then converts these documents to FHIR resources and orchestrates sending them to interoperating systems. The default mediator makes any resources sent to it queryable via a FHIR API using HAPI."},"title":"Configuring"},"/building/interoperability/ltfu/":{"data":{"":"","docker---local-setup#Docker - Local Setup":"Mediator (${MEDIATOR_ENDPOINT}) - http://localhost:5001/mediator OpenHIM Admin Console - http://localhost:9000/ CHT with LTFU configuration - http://localhost:5988/","encounter-resource#\u003ccode\u003eEncounter\u003c/code\u003e Resource":"The FHIR Encounter resource represents a clinical interaction between a patient and a healthcare provider. It contains information about the patient’s visit, such as the location, the reason for the visit, and any relevant procedures or diagnoses.","endpoint-resource#\u003ccode\u003eEndpoint\u003c/code\u003e Resource":"The FHIR Endpoint resource describes the network address of a system or service where messages or payloads can be exchanged. It defines the communication characteristics for sending and receiving messages, such as the transport protocol, the payload format, and the messaging endpoint’s address. The Endpoint resource can specify where to send data for specific purposes, such as notifications, alerts, or reports. It can be used in various contexts, such as clinical care, public health, or research, where different systems or services need to exchange data seamlessly.","environments#Environments":"The section includes placeholders for URLs. Replacing these placeholders with the appropriate endpoints for your specific environment is essential to utilize the guide correctly. Below are the endpoints provided for each available environment. It is important to note that if your setup differs from the documentation provided, you may need to use different endpoints. By ensuring that the correct endpoints are used, you can be confident in successfully implementing and utilizing the LTFU workflow.","organization-resource#\u003ccode\u003eOrganization\u003c/code\u003e Resource":"The FHIR Organization resource represents a group of people or entities with a common purpose or focus. It contains the organization’s name, type, and contact details. This resource is often used in healthcare settings to represent healthcare providers, hospitals, clinics, and other organizations involved in patient care. In the LTFU workflow, it represents the Requesting System, and it points to its callback URL.","patient-resource#\u003ccode\u003ePatient\u003c/code\u003e Resource":"The FHIR Patient resource represents an individual receiving or awaiting healthcare services. It includes patient demographics, clinical observations, and medical history. It is a foundational resource in healthcare and can be used to track patient progress, manage care plans, and facilitate communication between healthcare providers.","post-mediator_endpointencounter#\u003ccode\u003ePOST ${MEDIATOR_ENDPOINT}/encounter\u003c/code\u003e":"The Encounter resource is an essential part of the LTFU workflow, which is automatically created by the CHT system after a CHW completes the workflow. It triggers FHIR to send a Subscription response to the requesting system when there is a match with the Encounter resource. This allows for efficient monitoring and follow-up care of patients in the LTFU workflow.\nENCOUNTER_IDENTIFIER: An identifier for the encounter that can be used when querying the FHIR database in the future. Ideally, it should point to a document on the source system (CHT) that represents this encounter.\nNOTE: The ENCOUNTER_IDENTIFIER should be the same as the PATIENT_IDENTIFIER. The FHIR Subscription won’t be resolved properly if they don’t match. Updating an existing Encounter will also trigger pending Subscription that matches the Encounter document, which is one of the downsides of using this method. You can learn more about it by visiting Official FHIR Subscription Resource Scope.","post-mediator_endpointendpoint#\u003ccode\u003ePOST ${MEDIATOR_ENDPOINT}/endpoint\u003c/code\u003e":"In the LTFU workflow, the Endpoint is crucial in creating a ServiceRequest. It is obtained from the Organization attached to the ServiceRequest as the requester. The Endpoint represents the destination where the FHIR server sends notifications about matching Encounter resources. When the FHIR server receives a matching Encounter resource, it sends a notification to the endpoint. The endpoint is used as a callback URL for the FHIR server to notify the requester about the status of the ServiceRequest. Therefore, ensuring that the endpoint is accurate and valid for successful communication between the FHIR server and the requesting system is important.\nENDPOINT_ID: (Optional) A preferred id for the Endpoint. By default, the mediator will generate an id for the Endpoint. ENDPOINT_IDENTIFIER: An identifier for the Endpoint that can be used when querying the FHIR database in the future. ORG_CALLBACK_URL: A callback URL that the mediator can use to contact the requesting system (Organization) in the future when a ServiceRequest has been fulfilled. NOTE The FHIR Subscription that will be created ulteriorly requires ORG_CALLBACK_URL to accept HTTP PUT requests matching this path ${ORG_CALLBACK_URL}/:resourceType/:resourceId and return a 200. In this workflow, the callback should expect to receive an Encounter resource sent back to the requesting system on ${ORG_CALLBACK_URL}/Encounter/:id.","post-mediator_endpointorganization#\u003ccode\u003ePOST ${MEDIATOR_ENDPOINT}/organization\u003c/code\u003e":"The Organization resource in the LTFU workflow represents the Requesting System. Before creating an Organization, an Endpoint must be created. The ${ORGANIZATION_IDENTIFIER} is intended to be randomly assigned by the requesting system. It is important to take note of this identifier, as it will be used in future ServiceRequest’s to identify the requesting system.","post-mediator_endpointpatient#\u003ccode\u003ePOST ${MEDIATOR_ENDPOINT}/patient\u003c/code\u003e":"This endpoint creates a Patient in the LFTU workflow. Patients are created by CHT automatically whenever a new Patient is added to the system.","post-mediator_endpointservice-request#\u003ccode\u003ePOST ${MEDIATOR_ENDPOINT}/service-request\u003c/code\u003e":"This endpoint triggers the creation of a record on CHT and a Subscription resource on FHIR. The endpoint associated with the Organization resource in the requester is used as the callback URL for the Subscription which gets called when FHIR receives an Encounter resource with matching Patient identifier. The callback endpoint receives a FHIR Subscription response as its payload whenever the request is fulfilled. To learn more about FHIR subscriptions, you can visit the official documentation here.","request#Request":"POST ${MEDIATOR_ENDPOINT}/service-request { \"intent\": \"order\", \"subject\": { \"reference\": \"Patient/${PATIENT_IDENTIFIER}\" }, \"requester\": { \"reference\": \"Organization/${ORGANIZATION_IDENTIFIER}\" } , \"status\": \"active\" }","request-1#Request":"POST ${MEDIATOR_ENDPOINT}/endpoint { \"id\": \"${ENDPOINT_ID}\", \"identifier\": [ { \"system\": \"official\", \"value\": \"${ENDPOINT_IDENTIFIER}\" } ], \"connectionType\": { \"system\": \"http://terminology.hl7.org/CodeSystem/endpoint-connection-type\", \"code\": \"hl7-fhir-rest\" }, \"payloadType\": [ { \"text\": \"application/json\" } ], \"address\": \"${ORG_CALLBACK_URL}\", \"status\": \"active\" }","request-2#Request":"POST ${MEDIATOR_ENDPOINT}/patient { \"identifier\": [ { \"system\": \"official\", \"value\": \"${PATIENT_IDENTIFIER}\" } ], \"name\": [ { \"family\": \"Doe\", \"given\": [ \"John\" ] } ], \"gender\": \"male\", \"birthDate\": \"2000-01-01\" }","request-3#Request":"POST ${MEDIATOR_ENDPOINT}/encounter { \"resourceType\": \"Encounter\", \"identifier\": [ { \"system\": \"cht\", \"value\": \"${ENCOUNTER_IDENTIFIER}\" } ], \"status\": \"finished\", \"class\": \"outpatient\", \"type\": [ { \"text\": \"Community health worker visit\" } ], \"subject\": { \"reference\": \"Patient/${PATIENT_IDENTIFIER}\" }, \"participant\": [ { \"type\": [ { \"text\": \"Community health worker\" } ] } ] }","request-4#Request":"POST ${MEDIATOR_ENDPOINT}/organization { \"identifier\": [ { \"system\": \"official\", \"value\": \"${ORGANIZATION_IDENTIFIER}\" } ], \"name\": [ \"Athena\" ], \"endpoint\": [ { \"reference\": \"Endpoint/${ENDPOINT_ID}\" } ] }","resources#Resources":"The following FHIR Resources are used to implement the flow above:\nPatient Encounter Subscription Organization Endpoint The payload samples in the documentation contain placeholder values you must replace with the actual content. To do so, replace the entire ${} placeholder with the appropriate value. Be aware that some placeholder keys have the format _\\_IDENTIFIER and refer to the value in the Resource.identifier[0].value field. These keys differ from the _\\_ID placeholders used in the request, which refer to the Resource.id field. It is important to make this distinction, as using the wrong value may cause unexpected behavior in the system. Therefore, always ensure you use the right value in the right context to avoid errors.\nNote: The payload only contains the required fields or a subset of the possible options. Refer to the appropriate FHIR resource specifications to view all the available fields.","response#Response":"{ \"resourceType\": \"Subscription\", \"id\": \"4\", \"meta\": { \"versionId\": \"1\", \"lastUpdated\": \"2023-04-19T04:41:17.656+00:00\", \"tag\": [ { \"system\": \"http://hapifhir.io/fhir/StructureDefinition/subscription-matching-strategy\", \"code\": \"IN_MEMORY\", \"display\": \"In-memory\" } ] }, \"status\": \"requested\", \"reason\": \"Follow up request for patient\", \"criteria\": \"Encounter?identifier=003b24b5-2396-4d95-bcbc-5a4c63f43ff0\", \"channel\": { \"type\": \"rest-hook\", \"endpoint\": \"https://callback.com\", \"payload\": \"application/fhir+json\", \"header\": [\"Content-Type: application/fhir+json\"] } }","response-1#Response":"{ \"resourceType\": \"Endpoint\", \"id\": \"1\", \"meta\": { \"versionId\": \"1\", \"lastUpdated\": \"2023-04-19T04:40:44.401+00:00\" }, \"identifier\": [ { \"system\": \"official\", \"value\": \"ENDPOINT_ID\" } ], \"status\": \"active\", \"connectionType\": { \"system\": \"http://terminology.hl7.org/CodeSystem/endpoint-connection-type\", \"code\": \"hl7-fhir-rest\" }, \"payloadType\": [ { \"text\": \"application/json\" } ], \"address\": \"https://callback.com\" }","response-2#Response":"{ \"resourceType\": \"Patient\", \"id\": \"3\", \"meta\": { \"versionId\": \"1\", \"lastUpdated\": \"2023-04-19T04:41:01.217+00:00\" }, \"text\": { \"status\": \"generated\", \"div\": \"John DOE Identifier003b24b5-2396-4d95-bcbc-5a4c63f43ff0Date of birth01 January 2000\" }, \"identifier\": [ { \"system\": \"official\", \"value\": \"003b24b5-2396-4d95-bcbc-5a4c63f43ff0\" } ], \"name\": [ { \"family\": \"Doe\", \"given\": [\"John\"] } ], \"gender\": \"male\", \"birthDate\": \"2000-01-01\" }","response-3#Response":"{ \"resourceType\": \"Encounter\", \"id\": \"5\", \"meta\": { \"versionId\": \"1\", \"lastUpdated\": \"2023-04-19T05:00:18.031+00:00\" }, \"identifier\": [ { \"system\": \"cht\", \"value\": \"003b24b5-2396-4d95-bcbc-5a4c63f43ff0\" } ], \"status\": \"finished\", \"type\": [ { \"text\": \"Community health worker visit\" } ], \"subject\": { \"reference\": \"Patient/3\" }, \"participant\": [ { \"type\": [ { \"text\": \"Community health worker\" } ] } ] }","response-4#Response":"{ \"resourceType\": \"Organization\", \"id\": \"2\", \"meta\": { \"versionId\": \"1\", \"lastUpdated\": \"2023-04-19T04:40:48.663+00:00\" }, \"identifier\": [ { \"system\": \"official\", \"value\": \"003b24b5-2396-4d95-bcbc-5a4c63f43ff0\" } ], \"name\": \"Athena\", \"endpoint\": [ { \"reference\": \"Endpoint/1\" } ] }","servicerequest-resource#\u003ccode\u003eServiceRequest\u003c/code\u003e Resource":"The FHIR ServiceRequest resource represents a request for a healthcare service to be performed, such as a diagnostic test or a treatment. It contains information about the requested service, including the type of service, the patient for whom the service is requested, the date/time the service is requested, and the healthcare provider or organization making the request. In the context of the LTFU workflow, this resource is used to request a CHW follow-up in the CHT.","steps#Steps":"The following steps assume you have running OpenHIM and CHT instances you successfully logged into. See the OpenHIM guide for instructions to set up a local development instance of OpenHIM.\nCreate an Endpoint and an Organization\nHTTP Request - Use Postman to create an Endpoint Resource in the Mediator. You can view the API documentation for creating an Endpoint here. Once you send the request, the Mediator will return a JSON response containing the id of the newly created endpoint. Save this id for the next step.\nHTTP Request - Create an Organization Resource in the Mediator using as endpoint.reference the example value replacing ${ENDPOINT_ID} with the actual id of the Endpoint you created in the previous step. Once you send the request, the Mediator will return a JSON response containing the id of the newly created Organization. You can view the API documentation for creating an Organization here.\nIt is important to note that you only need to create an Organization once, which you can use for future requests. So, after creating the Organization, you can save the organization.identifier[0].value value and use it for all future ServiceRequest requests.\nCreate a Patient\nCHT - Log in to the CHT platform using the credentials for the chw user. If the chw user does not already exist, you can create one. CHT - Navigate to the People tab in the CHT dashboard. From there, select a Facility where you want to create a new Person. Click on the New Person button and fill in the required details for the Person. Make sure to select Patient as the Person’s role for this flow. CHT - Once you have created the new Person, you need to retrieve their unique identifier from the browser’s URL. You can do this by copying the alphanumeric string that appears after person/ in the URL. Keep this identifier safe as you will need it for the next steps. OpenHIM Admin Console - To verify that the Patient creation was successful, navigate to the Transaction Log in the OpenHIM Admin Console. You should see two successful API calls recorded in the log, one to /mediator/patient/ and one to /fhir/Patient/. Request the LTFU for the Patient\nHTTP Request - To trigger the LTFU process for the newly created patient, you need to create a ServiceRequest. You can refer to the API documentation available here to learn how to create a ServiceRequest. Replace the requester.reference and the subject.reference with the Organization and Patient identifiers respectively. Once the ServiceRequest is received by the mediator, it will initiate the LTFU workflow for the patient, which includes reminders for follow-up appointments and check-ins.\nHTTP Request - Verify that the ServiceRequest was successful in both OpenHIM Mediator \u0026 FHIR Resource. Navigate to the Transaction Log in the Admin Console. You should see three successful API calls, as in the image below: Handle LTFU Task\nCHT - Navigate to the Tasks tab. There should be an automatically created Task for the Patient. If it is not the case, sync data via Sync now option. The Task should look like in the image below:\nCHT - Select an option (Yes or No) and submit the Tasks.\nOpenHIM Admin Console - Verify that the Encounter creation was successful in both OpenHIM Mediator \u0026 FHIR Resource. Navigate to the Transaction Log in the Admin Console. You should see two successful API calls, one to /mediator/encounter/ and one to /fhir/Encounter/, as in the image below. If your callback URL test service was set up correctly, you should receive a notification from the mediator.\nAn API test collection that can be used with Postman or similar tools can be found under /docs/local-test in the cht-interoperability repository. This collection allows testing the LTFU flow while running the instances locally.","workflow-testing#Workflow Testing":"This section outlines the steps for testing the Loss To Follow-Up (LTFU) workflow, in addition to documenting the various endpoints available on the mediator. It provides a comprehensive guide on navigating the LTFU workflow and utilizing the endpoints to facilitate the necessary actions."},"title":"Loss To Follow-Up"},"/building/interoperability/openhim/":{"data":{"":"","cht-configuration#CHT Configuration":"Go into the cht-config directory by running cd cht-config. Run npm install to install the dependencies. Create a file named .env under /mediator folder, copy over the contents of /mediator/.env.template and update the CHT_USERNAME and CHT_PASSWORD values with the admin credentials of your CHT instance. Set up a proxy to your local CHT instance by running using something like nginx-local-ip or ngrok and update the CHT_URL value in the .env file with the new URL. Ensure you have cht-conf installed and run cht --local to compile and upload the app settings configuration to your local CHT instance. To verify if the configuration is loaded correctly is to create a Patient and to access a URL like https://*****.my.local-ip.co/#/contacts/patientUUID/report/interop_follow_up. This should retrieve correctly the follow up form. Only a non-admin user will be able to view this form. If you are logged in as an admin user then, check if the form interop_follow_up is listed in the form list in the app settings page. To verify if the configuration in CouchDB, access http://localhost:5984/_utils/#database/medic/settings.","cht-configuration-with-docker#CHT configuration with Docker":"The following steps apply when running CHT via the Docker setup provided in the cht-interoperability repository:\nCHT can be accessed via http://localhost:5988, and the credentials are admin/password. Create a new user in the CHT instance with the username interop-client using these instructions. For the role you can select Data entry and Analytics roles. Note that you can use any username you prefer but you would have to update the config with the new username. You can do that by editing the cht-config/app_settings.json file and updating the username value in the outbound object e.g. on this line. Securely save the interop-client user’s password to the database using the instructions here. Change the values mykey and my pass to openhim1 and your user’s password respectively. An example of the curl request is below: curl -X PUT -H \"Content-Type: text/plain\" http://admin:password@localhost:5988/api/v1/credentials/openhim1 -d 'interop-password'","cht-development-environment#CHT Development Environment":"Set up a local CHT instance using these instructions. Create a new user in the CHT instance with the username interop-client using these instructions. For the role you can select Data entry and Analytics roles. Note that you can use any username you prefer but you would have to update the config with the new username. You can do that by editing the cht-config/app_settings.json file and updating the username value in the outbound object e.g. on this line. Securely save the interop-client user’s password to the database using the instructions here. Change the values mykey and my pass to openhim1 and your user’s password respectively. An example of the curls request is below: curl -X PUT -H \"Content-Type: text/plain\" http://medic:password@localhost:5988/api/v1/credentials/openhim1 -d 'interop-password' After updating the mediator code or the CHT configuration, you need to run ./startup.sh up-dev to upload the changes to docker compose.","error-bind-address-already-in-use#Error \u0026ldquo;bind: address already in use\u0026rdquo;":"Users encountering:\nError response from daemon: Ports are not available: exposing port TCP 0.0.0.0:5000 -\u003e 0.0.0.0:0: listen tcp 0.0.0.0:5000: bind: address already in use\nwhen running ./startup.sh init need to update ports to available values in the /docker/docker-compose.yml file, under the ports verb.","error-preset-ts-jest-is-invalid-when-running-npm-test#Error “Preset ts-jest is invalid:” when running \u003ccode\u003enpm test\u003c/code\u003e":"Users encountering the error below when running npm test:\nPreset ts-jest is invalid: The “id” argument must be of type string. Received null TypeError [ERR_INVALID_ARG_TYPE]: The “id” argument must be of type string. Received null\nneed to run npm i --save-dev ts-jest before running npm test.","error-unsuccessful-npm-install-when-running-npm-install#Error “unsuccessful npm install” when running \u003ccode\u003enpm install\u003c/code\u003e":"Users encountering the error when running npm install:\nnpm ERR! code EACCES npm ERR! syscall unlink npm ERR! path /Users/phil/interoperability/cht-config/node_modules/.package-lock.json\nneed to run npm install as root user.","error-when-running-mediator-curl-request#Error when running mediator \u003ccode\u003ecurl\u003c/code\u003e request":"If the mediator curl request fails, visit http://localhost:9000/#!/clients and click on the icon the red arrow points to in the image below.","install--first-time-run#Install \u0026amp; First Time Run":"In the cht-interoperability folder, run ./startup.sh init to start up the docker containers on the first run or after calling ./startup.sh destroy. Use ./startup.sh up for subsequent runs after calling init without calling destroy.","interoperability-with-the-cht#Interoperability with the CHT":"The structure of documents in the CHT database reflects the configuration of the system, and therefore, does not map directly to a FHIR message format. To achieve interoperability, the CHT uses a middleware to convert the CHT data structure into a standardized form so the other systems can read it. Below is the standard data workflow:\ngraph LR cht[CHT] mediator_a([Mediator]) mediator_b([Mediator]) openhim[OpenHIM] cht -- Outbound pushfa:fa-arrow-right --- mediator_a cht -- API requestfa:fa-arrow-left --- mediator_b mediator_a -- Requestfa:fa-arrow-right --- openhim mediator_b -- Channelfa:fa-arrow-left --- openhim CHT Interoperability uses OpenHIM as the middleware component with Mediators to do the conversion. Outbound Push is configured to make a request to the middleware when relevant documents are created or modified in the CHT. A Mediator then creates a FHIR resource which is then routed to OpenHIM. OpenHIM routes the resource to any other configured systems.\nConversely, to bring data into the CHT, OpenHIM is configured to route the updated resource to the Mediator, which then calls the relevant CHT APIs to update the document in the CHT database. This will then be replicated to users’ devices as per usual.\nSee more information on the CHT interoperability page.","local-setup-of-cht-configuration#Local setup of CHT Configuration":"The following steps apply when running CHT locally in development mode and when making configuration changes locally:","openhim-admin-console#OpenHIM Admin Console":"Visit the OpenHIM Admin Console at http://localhost:9000 and login with the following credentials: email - interop@openhim.org and password - interop-password. The default User username for OpenHIM is interop@openhim.org and password is interop-password. The default Client username is interop-client and password is interop-password.\nOnce logged in, visit http://localhost:9000/#!/mediators and select the mediator named ‘CHT Mediator’.\nSelect the green + button to the right of the default channel to add the mediator.\nYou can test the CHT mediator by running:\ncurl -X GET http://localhost:5001/mediator/ -H \"Authorization: Basic $(echo -n interop-client:interop-password | base64)\" You should get as a response similar to this:\n{ \"status\": \"success\", \"osuptime\": 74012.24, \"processuptime\": 56940.700039383 } If everything is successful, when visiting http://localhost:9000/#!/clients you should see this:\nFor testing other mediators, replace the URL (http://localhost:5001/mediator) with the appropriate values for the specific mediator you are testing. For example if using the OpenMRS mediator, you can test it by running:\ncurl -X GET localhost:5001/mediator/openmrs/sync -H \"Authorization: Basic $(echo -n interop-client:interop-password | base64)\"","overview#Overview":"The components and reference information for interoperability used in CHT Interoperability project are:\nOpenHIE defines the architecture for an interoperability layer. OpenHIM is a middleware component designed to ease interoperability between systems. HL7 FHIR is a messaging format to allow all systems to understand the format of the message.","prerequisites#Prerequisites":"docker Postman or similar tool for API testing. cht-interoperability GitHub repository (can be cloned via git clone https://github.com/medic/cht-interoperability). Note\nUsers getting errors when running the following installation steps, see the Troubleshooting guide.","shutdown-the-servers#Shutdown the servers":"To shut-down the containers run ./startup.sh down to stop the instances. To then restart the containers, run ./startup.sh up. You do not need to run init again like you did in the initial install above. To shut-down and delete everything, run ./startup.sh destroy. You will have to subsequently run ./startup.sh init if you wish to start the containers.","troubleshooting#Troubleshooting":""},"title":"OpenHIM Mediators"},"/building/interoperability/openmrs/":{"data":{"":"OpenMRS is an open-source electronic medical record system used in dozens of countries. Data exchange between CHT apps and OpenMRS can open up opportunities to improve health outcomes for patients by promoting better coordination of care. For example, referrals by CHWs in the community can be sent electronically to health facilities using OpenMRS so that nurses and clinicians can prepare for their visit and have full access to the assessment done by a CHW.\nCHT apps can exchange data with OpenMRS using the CHT’s Interoperability Tools and following the guidance in the Building interoperability with FHIR APIs documentation.","cht-openmrs#CHT-\u0026gt;OpenMRS":"No outbound push sent: check outbound push config, and logs for sentinel Outbound push request sent, but returned error: check mediator logs and outbound push config; is it using the right endpoint and request has the expected data? What is the error in the mediator logs? Outbound push request sent and succeed, sync to OpenMRS returned error: check OpenMRS logs for more detail.","configuring-cht-and-openmrs#Configuring CHT And OpenMRS":"Depending on what data needs to be exchanged, outbound push configurations and JSON forms need to be added to CHT.","openhim-resources#OpenHIM resources":"The interoperability project will automatically create the following resources\nThe CHT Mediator is used to convert CHT documents to FHIR resources and store them on the FHIR Server. The OpenMRS mediator is used to send FHIR Resources from the FHIR Server to OpenMRS. It contains only one endpoint, sync. The CHT Mediator Channel contains routes to the CHT Mediator. The FHIR Channel contains routes to the FHIR Server. While this implementation does not utilize it, the channel can expose any CHT documents sent to it as a FHIR API. The OpenMRS Channel contains routes to the FHIR API of an external deployment of OpenMRS. When running ./startup.sh up-openmrs, a cht instances with a sample configuration is created for testing. This includes:\nA sample outbound push configuration for patients. A sample outbound push configuration for encounters with a form openmrs_height. A sample form HEIGHT_WEIGHT for outgoing encounters.","openmrs-cht#OpenMRS-\u0026gt;CHT":"Sync finds new patients/forms, error when saving to the FHIR server. Outbound push request sent, but returned error: check mediator logs and outbound push config; is it using the right endpoint and request has the expected data? What is the error in the mediator logs? Outbound push request sent and succeed, sync to OpenMRS returned error: check OpenMRS logs for more detail.","overview#Overview":"The CHT’s interoperability tools support sends patient and reports data to OpenMRS.\nThe steps to create an OpenMRS interoperability workflow are:\nProfile the workflow in terms of what data needs to be exchanged between OpenMRS and the CHT application. Set up a test environment including an OpenMRS instance, a CHT instance, and OpenHIM. The interoperability project has docker compose files so that you can set this up locally by running ./startup.sh up-openmrs in the interoperability project. Create or find concepts in OpenMRS that represent any data that needs to be exchanged. Configure outbound push and forms in the CHT application to match the interoperability workflow. Test and debug any configuration issues in the test environment. Once the configuration is confirmed to be working as expected, start deploying to production by uploading the CHT configuration to production. Add any OpenMRS concepts or forms to production. Set OpenMRS credentials and CHT credentials in the interoperability project, and start it in a production deployment.","profiling#Profiling":"The first step is to profile the workflow.\nWhich patients should be sent to OpenMRS, and how is a patient defined in the CHT application? Which forms should be sent to OpenMRS? Which fields on those forms should be sent to OpenMRS, and which concepts do they map to?","sending-forms-cht-openmrs#Sending forms CHT-\u0026gt;OpenMRS":"Any data sent from CHT to OpenMRS needs to map to a concept in OpenMRS. Each concept has a code which will be used to identify the concept in the CHT Application, the FHIR Server, and OpenMRS. For any fields to send to OpenMRS, first find or create matching concepts in OpenMRS. Then, using the appropriate codes, configure an outbound push as described in the CHT FHIR config documentation.\nIn OpenMRS, all form submissions are represented as Home Visit encounter types, with a Visit Note encounter. Any fields in the outbound push config are converted to FHIR observations, which are linked to the Visit Note.\nAfter setting up the outbound push, test that it works in the test environment by submitting a report to the form in the CHT application. Log in to OpenHIM and view the transaction log. You should see:\nA request from the CHT application to the CHT Mediator, containing all the fields from the form that were mapped to concepts. { \"id\": \"442b0937-a32f-443e-8d28-7d9a7552fda2\", \"patient_uuid\": \"75905106a4bc2a9046ed28df070016ce\", \"reported_date\": 1730355950419, \"observations\": [ { \"code\": \"5090AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA\", \"valueQuantity\": { \"value\": 175, \"unit\": \"cm\" }, \"label\": \"Height in cm\" }, { \"code\": \"5089AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA\", \"valueQuantity\": { \"value\": 60, \"unit\": \"kg\", }, \"label\": \"Weight in kg\" } ] } A PUT request to the FHIR server to create an encounter, and one request for each observation contained in that encounter. Requests to OpenMRS to create a Home Visit encounter, a Visit Note encounter, and one request for each observation. A request to the FHIR server updating the encounter with the corresponding id from OpenMRS.\nIf all the above look OK, you should now be able to see the encounter in OpenMRS.\ncurl -X GET localhost:8090/openmrs/ws/fhir2/R4/Encounter/?identifier=[identifier] -H \"Authorization: Basic $(echo -n admin:Admin123 | base64)\"","sending-patients-cht-openmrs#Sending patients CHT-\u0026gt;OpenMRS":"When sending patient data to OpenMRS, configure an outbound push mapping as described in the CHT FHIR config documentation. Patients synced to OpenMRS will have two new identifier types: CHT Document Id, the uuid of the document that is sent, and CHT Patient ID, if there is a patient_id field on the patient document. These identifier types are created automatically when the OpenMRS Channel is registered.\nAfter setting up the outbound push config, test that it works in the test environment by creating a patient in the CHT application. Log in to OpenHIM and view the transaction log. You should see:\nA request from the CHT application to the CHT Mediator, containing the patient document. { \"doc\": { \"_id\": \"75905106a4bc2a9046ed28df070016ce\", \"name\": \"John Test\", \"phone\": \"+2548277217095\", \"date_of_birth\": \"1980-06-06\", \"sex\": \"male\", \"patient_id\": \"13985\" } } A request from the CHT mediator to the FHIR Server, using a PUT request to upsert a FHIR patient created from the CHT patient document. { \"resourceType\": \"Patient\", \"id\": \"75905106a4bc2a9046ed28df070016ce\", \"meta\": { \"versionId\": \"1\", \"lastUpdated\": \"2024-10-31T04:53:44.026+00:00\" }, \"text\": { \"status\": \"generated\", \"div\": \"John TEST Identifier13985Date of birth06 June 1980\" }, \"identifier\": [ { \"use\": \"official\", \"type\": { \"text\": \"CHT Patient ID\" }, \"value\": \"13985\" }, { \"use\": \"secondary\", \"type\": { \"text\": \"CHT Document ID\" }, \"value\": \"75905106a4bc2a9046ed28df070016ce\" } ], \"name\": [ { \"family\": \"Test\", \"given\": [ \"John\" ] } ], \"telecom\": [ { \"value\": \"+2548277217095\" } ], \"gender\": \"male\", \"birthDate\": \"1980-06-06\" } A POST request to OpenMRS containing the newly created patient. A PUT request to the FHIR server updating the patient with the corresponding id from OpenMRS. If all the above look OK, you should now be able to search in OpenMRS for the patient by name, phone number, or patient id.\ncurl -X GET localhost:8090/openmrs/ws/fhir2/R4/Patient/?identifier=[identifier] -H \"Authorization: Basic $(echo -n admin:Admin123 | base64)\"","starting-the-interop-project#Starting the interop project":"Once the CHT and OpenMRS configs are ready, set up OpenHIM and install the mediators by following the instructions here. Set OPENMRS_URL, OPENMRS_PORT, and OPENMRS_HOST in .env to configure the necessary channel automatically.\nName Description OPENMRS_HOST hostname of OpenMRS instance OPENMRS_PORT port where OpenMRS FHIR API is listening OPENMRS_PASSWORD OpenMRS password to use for basic authentication OPENMRS_USERNAME OpenMRS password to use for basic authentication. Should be a user created specifically for this connection When these variables are set, a channel for OpenMRS will automatically be created on startup.","troubleshooting#Troubleshooting":"In case of errors when setting up the OpenHIM project see the Troubleshooting guide.\nIf the openhim project starts up correctly but something else does not work as expected, it can be helpful to first check the transaction log page of OpenHIM to see which requests were sent, and the request and response bodies. See the sequence diagrams above for the expected requests/responses."},"title":"OpenMRS"},"/building/interoperability/overview/":{"data":{"":"","cht-interoperability#CHT Interoperability":"CHT Interoperability implements interoperability between the CHT and other health information systems based on OpenHIE architecture and HL7 FHIR messaging format.","does-the-cht-support-legacy-standards#Does the CHT support legacy standards?":"One of the advantages of using mediators is they are highly configurable to support different FHIR Implementation Guides, different FHIR versions, and other information standards, so the CHT can work with whatever systems are in the ecosystem.","frequently-asked-questions#Frequently Asked Questions":"","introduction#Introduction":"Interoperability refers to the ability of different health information systems and applications to communicate with each other and exchange data seamlessly. With interoperability, patient information can be seen, exchanged, and used across different platforms. The information/data exchanged has to be understood across the different software for these systems to become interoperable. This is different from integration which requires custom development to connect two specific systems together.\nInteroperability is the best practice for health systems because it allows information from one system to be shared with one or more other systems with no additional development. Interoperability allows technical teams to scale in an efficient and repeatable manner due to the already predefined standards.","is-the-cht-fhir-compatible-and-does-it-have-a-fhir-api#Is the CHT FHIR Compatible and does it have a FHIR API?":"Yes. Mediators are one of the components of a CHT deployment and expose FHIR compatible APIs to the rest of the healthcare ecosystem.","standards--components#Standards \u0026amp; Components":"OpenHIE: OpenHIE is an open-source framework for building interoperable health information systems. OpenHIE provides a set of standards and protocols for enabling different health systems and applications to communicate with each other.\nOpenHIM: OpenHIM is an open-source middleware platform that provides a central point of control for managing health information exchange (HIE). OpenHIM enables healthcare providers to connect different health systems and applications and provides a common interface for managing data exchange and security.\nFHIR: FHIR is a standard for exchanging healthcare data electronically. FHIR provides a modern, web-based approach to exchanging healthcare data and is rapidly becoming the preferred standard for healthcare interoperability.","what-about-compatibility-with-future-standards#What about compatibility with future standards?":"The flexibility of mediators also means the CHT is future-proof and can be configured to support future FHIR revisions or completely new standards. Because this can be configured in the mediator layer it’s likely to be supported without any Core development required.","what-are-the-fhir-resources-utilized#What are the FHIR Resources utilized?":"Patient Encounter Subscription Organization Endpoint You can find additional information and instructions for setting up cht-interoperability in the dedicated guidelines .","what-does-the-mediator-do-to-the-source-data#What does the mediator do to the source data?":"It transforms the structure from the CHT format to the required standardized format. It can make requests for additional data. This could be querying the Client Registry for the patient’s national ID number, or other services such as the Terminology service to translate conditions, medications, procedures, and so on into the required classification system. Finally it passes the FHIR resource to the interoperability layer to be shared with other systems."},"title":"Overview"},"/building/local-setup/":{"data":{"":"This tutorial will take you through setting up a local environment to build and test CHT applications on CHT version 4.x. This includes setting up the necessary tools to download and run the CHT public docker image as well as a command line interface tool to manage and build CHT apps.\nBy the end of the tutorial you should be able to:\nView the login page to CHT webapp on localhost Upload default settings to localhost","brief-overview-of-key-concepts#Brief Overview of Key Concepts":"The CHT Core Framework makes it faster to build full-featured, scalable digital health apps by providing a foundation developers can build on. These apps can support most languages, are Offline-First, and work on basic phones (via SMS), smartphones, tablets, and computers.\nCHT Project Configurer also known as cht-conf is a command-line interface tool to manage and configure CHT apps.\nDocker is a tool designed to make it easier to create, deploy, and run applications by using containers.\nContainers allow a developer to package up an application with all of the parts it needs, such as libraries and other dependencies, and deploy it as one package.","cht-conf#\u003ccode\u003echt-conf\u003c/code\u003e":"Using npm on your terminal, install cht-conf globally using the command below.\nnpm install -g cht-conf You can confirm that the installation was successful by typing cht in your terminal.\nIf you have trouble installing cht-conf, see the application’s GitHub repository for more information.\nUsing the terminal (or the WSL shell on Windows: Start \u003e wsl), run the following commands from within your project directory (created above) to bootstrap your new CHT project:\ncd ~/cht-project cht initialise-project-layout","deploy-local-cht-instance#Deploy local CHT instance":"Now that you have the dependent tools and software installed, you are ready to set up your local CHT environment.\nRefer to the App Developer Hosting Guide for instructions on how to deploy a local CHT instance.\nNote that the first time you run your CHT instance it may take a while. In case you run into issues running your docker file, ensure that the following setting in Docker is checked.\nSettings » General » Use Docker Compose V2\nOnce your instance has started, navigate to https://localhost with the Google Chrome browser and login with the default username medic and default password password.\nYou might get an error “Your connection is not private” (see screenshot). Click “Advanced” and then click “Proceed to localhost”.\nIf you are using macOS you will not be able to find the “Proceed to localhost” link in Chrome, to bypass that error just click anywhere on the denial page and type “thisisunsafe”.\nThis error can be fixed by installing a TLS certificate as described below.\nIf you encounter an error bind: address already in use, check for port conflicts section in the Docker Setup guide.\nThis CHT instance is empty and has no data in it. While you’re free to explore and add your own data, in step 3 below we will upload sample data. Proceed to step 2 to install cht-conf which is needed to upload the test data.","developing-locally#Developing locally":"To build CHT apps on your local system, you need to have some additional tools:\nLinux (Ubuntu)macOSWindows (WSL2) sudo apt update \u0026\u0026 sudo apt -y dist-upgrade sudo apt -y install python3-pip python3-setuptools python3-wheel xsltproc # Use NVM to install NodeJS: export nvm_version=`curl -s https://api.github.com/repos/nvm-sh/nvm/releases/latest | jq -r .name` curl -o- https://raw.githubusercontent.com/nvm-sh/nvm/$nvm_version/install.sh | $SHELL . ~/.$(basename $SHELL)rc nvm install 22 # Uses Homebrew: https://brew.sh/ brew update brew install curl jq pyenv git make node@22 gcc openssl readline sqlite3 xz zlib tcl-tk # Python no longer included by default in macOS \u003e12.3 pyenv install 3 pyenv global 3 echo \"eval \\\"\\$(pyenv init --path)\\\"\" \u003e\u003e ~/.$(basename $SHELL)rc . ~/.$(basename $SHELL)rc sudo apt update \u0026\u0026 sudo apt -y dist-upgrade sudo apt -y install python3-pip python3-setuptools python3-wheel xsltproc # Use NVM to install NodeJS: export nvm_version=`curl -s https://api.github.com/repos/nvm-sh/nvm/releases/latest | jq -r .name` curl -o- https://raw.githubusercontent.com/nvm-sh/nvm/$nvm_version/install.sh | $SHELL . ~/.$(basename $SHELL)rc nvm install 22","developing-with-vs-code-dev-container#Developing with VS Code Dev Container":"If you want to develop CHT apps with VS Code, you can use the cht-app-ide Docker image as a Development Container. This will allow you to use the cht-conf utility and its associated tech stack from within VS Code (without needing to install dependencies like NodeJS on your host system).\nInstall VS Code if you do not have it already.\nUsing the terminal (or the WSL shell on Windows: Start \u003e wsl, or Git Bash for Windows without WSL), run the following commands from within your project directory (created above) to download the .devcontainer.json config file, install the Dev Containers extension, and open the project directory in VSCode:\ncd ~/cht-project curl -s https://raw.githubusercontent.com/medic/cht-conf/main/devcontainer.cht-app-ide/.devcontainer.json \u003e .devcontainer.json code --install-extension ms-vscode-remote.remote-containers code -n . When opening VS Code, you may be prompted with the question:\nDo you trust the authors of the files in this folder?\nChoose, “Yes, I trust the authors”.\nOpen the Command Palette in VS Code (Ctrl+Shift+P or Cmd+Shift+P) and select Reopen in Container. This will open your workspace inside a container based on the cht-app-ide image. You can use the cht commands by opening a terminal in VS Code (Ctrl+Shift+` or Cmd+Shift+`). If prompted “Do you trust the authors…” choose “Trust Folder \u0026 Continue”.\nRun the following command in the VS Code terminal to bootstrap your new CHT project:\ncht initialise-project-layout","frequently-asked-questions#Frequently Asked Questions":"How do I upgrade to a higher version of the webapp? How do I access the instance remotely? Error ‘No module named pip’ when installing cht-conf CouchDB failed to start properly Enable adding contacts in a blank project","initialize-project-directory#Initialize project directory":"Using the terminal (or the WSL shell on Windows: Start \u003e wsl), run the following commands to create a new project directory for your CHT app:\nmkdir -p ~/cht-project cd ~/cht-project","installing-docker#Installing Docker":"Linux (Ubuntu)macOSWindows (WSL2) Download and install Docker Desktop.\nAlternatively, on Linux you can use the following commands to install Docker Engine. (This will reduce the layers of technical abstraction for running containers, but will not include a GUI application for managing your Docker resources.)\ncurl -fsSL get.docker.com -o get-docker.sh \u0026\u0026 sh get-docker.sh # OPTIONAL: Allow user to run Docker without sudo dockerd-rootless-setuptool.sh install echo \"export PATH=/usr/bin:$PATH\" \u003e\u003e ~/.$(basename $SHELL)rc echo \"export DOCKER_HOST=unix:///run/user/1000/docker.sock\" \u003e\u003e ~/.$(basename $SHELL)rc . ~/.$(basename $SHELL)rc Restart your entire machine to finish initializing Docker.\nDownload and install Docker Desktop or Colima.\nRestart your entire machine to finish initializing Docker.\nDownload and install Docker Desktop.\nRestart your entire machine to finish initializing Docker.\nAfter you have restarted, ensure that “Enable integration with my default WSL distro” is checked in Docker Desktop along with intgration to other distros:\nAfter restarting, verify Docker is running as expected. Run the simple hello-world Docker container. This should output “Hello from Docker!” as well as some other intro text:\ndocker run hello-world","note-on-connecting-to-a-local-cht-instance#Note on connecting to a local CHT instance":"When using cht-conf within a Docker container to connect to a CHT instance that is running on your local machine (e.g. a development instance), you cannot use the --local flag or localhost in your --url parameter (since these will be interpreted as “local to the container”).\nIt is recommended to run a local CHT instance using the CHT Docker Helper script. You can connect to the resulting ...local-ip.medicmobile.org URL from the Docker container (or the VS Code terminal). (Just make sure the port your CHT instance is hosted on is not blocked by your firewall).","optional-install-valid-tls-certificate#Optional: Install Valid TLS Certificate":"With the blank project deployed to your CHT instance, you’re ready to start writing your first app. A big part of authoring an app is testing it on a mobile device, likely using the unbranded version of CHT Android. In order to test in the APK, your CHT instance needs a valid TLS certificate which the default docker version does not have.\nTo install a valid certificate, open a terminal in the cht-core directory. Ensure the CHT instance is running and make this call:\n./scripts/add-local-ip-certs-to-docker.sh cht_nginx_1 If add-local-ip-certs-to-docker-4.x.sh is not in your scripts directory, be sure to use git or GitHub Desktop to update your local repository with the latest changes. If you can’t update for some reason, you can download it directly.\nTo see what a before and after looks like, note the screenshot to the left which uses curl to test the certificate validity.\nThe output of add-local-ip-certs-to-docker.sh looks like this:\ncht_nginx_1 If just the container name is shown above, a fresh local-ip.medicmobile.org certificate was downloaded. The IP of your computer is used in the URL of the CHT instance now. For example, if your IP is 192.168.68.40 then the CHT URL with a valid TLS certificate is 192-168-68-40.local-ip.medicmobile.org. See the local-ip.medicmobile.org site to read more about these free-to-use certificates.\nWhen using cht-conf you can now drop the use of --accept-self-signed-certs. Further, update the URL to be based on your IP. Using the example IP above, this would be --url=https://medic:password@192-168-68-40.local-ip.medicmobile.org. As well, you can now use this URL to test with the CHT Android app.","pyxform#\u003ccode\u003epyxform\u003c/code\u003e":"Using python on your terminal, install pyxform globally using the command below. Ensure you create and activate an environment for python3.\nsudo python3 -m pip install git+https://github.com/medic/pyxform.git@medic-conf-1.17#egg=pyxform-medic If you encounter the error npm ERR! gyp ERR verb find Python Python is not set while installing pyxform and are running macOS, see this troubleshooting section.","setup-environment#Setup environment":"CHT app development can be done on Linux, macOS, or Windows (using the Windows Subsystem for Linux (WSL2)).\nCHT apps can be built on your local system (with the necessary libraries installed and configured) or they can be built from within VS Code Dev Containers.\nBefore you begin, ensure you have the following tools:\ngit or the Github Desktop docker and docker compose.","terminal-environment#Terminal environment":"When opening a terminal in VS Code in a development container, the terminal will be running on the container environment by default. This is what gives you access to the various cht commands. However, this also means you do NOT have access, within the default VS Code terminal, to commands from your host environment. So, for example, you cannot run docker commands since Docker is not installed inside the container.\nTo open a terminal running on you host environment in VS Code, open the Command Palette (Ctrl+Shift+P or Cmd+Shift+P) and select Create New Integrated Terminal (Local). Just remember that you will NOT be able to run cht commands from this terminal since cht-conf is not installed on your host machine.","upload-a-blank-project#Upload a Blank Project":"This step will erase the default Maternal \u0026 Newborn Health Reference Application. You can also upload the blank project you created above (via the cht initialise-project-layout command).\nDeploy the blank project onto your local test environment with the following command:\nLocalDev Container # accept-self-signed-certs bypasses normal SSL certificate verification. This is necessary when connecting to a local CHT instance. cht --url=https://medic:password@localhost --accept-self-signed-certs # Requires instance started with CHT Docker Helper (accessible via a local-ip.medicmobile.org URL) cht --url=https://medic:password@ If the above command shows an error similar to this one ERROR Error: Webpack warnings when building contact-summary you will need to install all the dependencies and libraries it needs (by running npm ci) before trying to upload the configuration again with the cht ... command.\nOnce you have run the above command it should complete with the message: INFO All actions completed..","upload-test-data#Upload Test Data":"By default, the CHT will have the Maternal \u0026 Newborn Health Reference Application installed. To upload demo data you can use cht-conf:\nClone cht-core on your computer using the following command: git clone https://github.com/medic/cht-core.git Navigate your terminal to the cht-core/config/default directory. This is where the reference application is stored. Run the following cht-conf command to compile and upload default test data to your local instance: cht --url=https://medic:password@localhost --accept-self-signed-certs cht --url=https://medic:password@localhost --accept-self-signed-certs csv-to-docs upload-docs With the test data uploaded, log back into your CHT instance and note the “Test Health Facility” and related data."},"title":"Getting Started"},"/building/login/":{"data":{"":"When accessing your app for the very first time, a login page is displayed. Users enter a username and password that grant access to their customized app experience.\nOn mobile devices, the app generally stays logged in after initial setup so that CHW users don’t have to type in their credentials each day.\nOn desktop devices, the user must login again if they close the app tab or browser window.\nUsers may log out by going to the options menu available in the top right corner of the app.\nSee Also: Navigating CHT Apps","magic-links-for-logging-in-token-login#Magic Links for Logging In (Token Login)":"When creating users, the admin has the option to enable a user to login in by simply clicking a link sent via SMS. When the token login link is clicked and the app is not installed on the user’s phone, it will open in their default browser. If no gateway is set up on the CHT server, the message may be sent via another messaging app. The link is only valid for 24 hours and can only be used once to log in. This ensures the link is used only by the intended recipient. By clicking the magic link, the user is logged into their project’s instance directly, bypassing the need to manually enter a username and password.\nWith token login, the password is never known by the admin or the user because the password is changed to a random string after every successful token login. If the user needs to login again, they need to contact the admin so that the admin can either send a new magic link or switch their account back to using a manual login and password.\nSee Also: Remote Onboarding and Training\nSee Also: .token_login\nNote\nThe magic link workflow will not work for users who want to use multiple devices or for multiple users on one device.","password-reset-on-first-login#Password reset on first login":"Added in 4.17.0.\nTo enhance the security of CHT applications, users logging in for the first time, or who have had their password reset, are prompted to change the password provided by the system administrator to their own strong password.\nThis feature is enabled by default because it encourages best practices. However, only new users will be prompted to go through this flow or those users whose passwords have been reset by the system administration. Projects can disable this feature by enabling the can_skip_password_change permission. This permission is a feature flag and will be removed in a later CHT release.\nSubsequent logins won’t require a password change – if the app closes before changing the password, the user will be prompted again when they reopen it. If a user is unable to update their password, they won’t be able to access the app.","single-sign-on-oidc-login#Single Sign-On (OIDC Login)":"The CHT supports Single Sign-On (SSO) via integration with an external authentication server. When configured, users can authenticate with their SSO credentials instead of needing a CHT-specific username and password.\nSee Also: Single Sign-On"},"title":"Logging in"},"/building/messaging/":{"data":{"":"Content in this section Overview SMS message states Short Contact Identifiers Message Loops"},"title":"Messaging"},"/building/messaging/gateways/":{"data":{"":"Content in this section Africa’s Talking SMS Aggregator Nepal DoIT Centralized SMS gateway RapidPro Messaging Gateway Installing RapidPro - CHT Gateway Android APK"},"title":"Gateways"},"/building/messaging/gateways/africas-talking/":{"data":{"":"As of v3.6.0, SMS messages can be sent and received using the Africa’s Talking service.","africas-talking-configuration#Africa\u0026rsquo;s Talking configuration":"First, run openssl rand -hex 32 in your terminal to generate a long unique key that you will use as the cht-api-key.\nLog on to the Africa’s Talking Dashboard and configure the two callback URLs as follows.\nDelivery Reports: https:///api/v1/sms/africastalking/delivery-reports?key= Incoming Messages: https:///api/v1/sms/africastalking/incoming-messages?key= Next, in Africa’s Talking dashboard, generate an “API Key” that you will use as the at-api-key.\nNext, save the at-api-key in your CHT Core configuration as covered below.","api-keys#API keys":"The Africa’s Talking integration uses the CHT Credentials service to retrieve the API keys using the IDs africastalking.com:incoming and africastalking.com:outgoing.\nUse the CHT credentials API to securely store the credentials by running the commands below.\ncurl -X PUT -H \"Content-Type: text/plain\" https://:@/api/v1/credentials/africastalking.com:incoming -d 'cht-api-key'\ncurl -X PUT -H \"Content-Type: text/plain\" https://:@/api/v1/credentials/africastalking.com:outgoing -d 'at-api-key'","app-settings#App settings":"Update your app settings as follows.\n{ \"sms\": { \"outgoing_service\": \"africas-talking\", \"reply_to\": \"","cht-core-configuration#CHT Core configuration":"","testing#Testing":"To test your integration, set your username to sandbox, log in to Africa’s Talking, and go to the Sandbox app."},"title":"Africa's Talking"},"/building/messaging/gateways/gateway/":{"data":{"":"Content in this section Configuration Phones Troubleshooting"},"title":"CHT Gateway"},"/building/messaging/gateways/gateway/configuration/":{"data":{"":"CHT gateway supports Android 4.1 and above. To have it up and fully working, follow the 3 steps below.","power-saving#Power Saving":"Care should be taken to disable all power-saving modes on the phone, as these may affect cht-gateway’s ability to check in with the server regularly.\nOn different versions of Android, power saving options may be found in different places. Sometimes they will be per-app, and sometimes phone-wide.\nSome places you might find the power savings settings:\nWiFi \u003e MORE \u003e Keep WiFi on during sleep \u003e ALWAYS (increases battery usage) Smart Manager \u003e Battery \u003e App Power Saving \u003e OFF, or Smart Manager \u003e Battery \u003e App Power Saving \u003e Detail \u003e CHT Gateway \u003e Disable","step-1#Step 1":"Install the latest APK from the releases page in the cht-gateway repo. This APK is not in the Play Store, you will need to side-load it as is done with CHT Android.","step-2#Step 2":"Open the app. if you are installing the app for the first time or afresh, you will get a Warning:medic-gateway is not set as the default messaging app on this device . Select HELP ME CHANGE and agree to the follow-up system prompt about changing the default messaging app.","step-3#Step 3":"Configure the app. If you’re configuring cht-gateway(v1.0.0 and above) for use with hosted medic, with a URL of e.g. https://myproject.dev.medicmobile.org and a username of gateway and a password of topSecret, fill in the settings as follows:\nInstance name: myproject [dev] (if https://myproject.app..., select ‘app’)\nUsername: gateway(Since v1.2.1 medic gateway versions this field is not present in the app. The user gateway is assumed.)\nPassword: topSecret(This should be the password for the gateway username as set up in the project web instance)\nconfiguration\nNote\nIf you’re configuring cht-gateway (v0.6.2 and below - recommended if you have a non-Medic hosted instance) you will need to use the generic build of cht-gateway - links to download are here. Find out the value for webapp URL from your tech support then configure as below:\nWebappUrl: https://gateway:topSecret@myproject.some-subdomain.mydomain.org"},"title":"Configuration"},"/building/messaging/gateways/gateway/phones/":{"data":{"":"In order to use SMS workflows with the CHT you will need an SMS gateway. For reliability an SMS Aggregator, such as Africa’s Talking or RapidPro, is recommended. When an SMS Aggregator is not available, an Android device running CHT Gateway can be used to send and receive SMS in your CHT application. You may use an existing Android device and are not required to purchase a new one. However, for more reliable sending and receiving of SMS, the Android device should be in your organization’s office or facility with a consistent internet connection.\nBelow is a list of recommended Android devices across a range of prices. You may find these in local mobile equipment stores as well as online through Amazon and other e-commerce sites.","high-cost-devices#High-cost devices:":"OnePlus 3T Nexus 6 *Devices marked with an asterisk have been tested and used by Medic and our partners.\nAndroid OS: We also support Android version 4.1 (Jelly Beans) and above. Details of the Android history can be found here.\nWe highly recommend investing in devices that are medium to high-cost, and in models that are marked with an asterisk in the list above to ensure optimal efficiency.","low-cost-devices#Low-cost devices:":"LG L60 * Samsung Duos * Lenovo A1000","medium-cost-devices#Medium-cost devices:":"Samsung Galaxy J5 * Huawei Honor 4x * Huawei G Play mini * Motorola Moto X play"},"title":"Phones"},"/building/messaging/gateways/gateway/troubleshooting/":{"data":{"":"In a techlead heaven, we would have immediate physical access to gateway phones, but alas, most of the time we have to hand them over to the partner. Fortunately, comes this guide on debugging gateway problems.\nFollow the steps as below (if you don’t have physical access to the phone, start with step 2 i.e debug from the server side first)\nMake sure that the device:\nIs connected to the internet. You can check this by opening any Browser app in the phone and going to https://google.com.\nCheck if the instance name, instance type and gateway user password are set correctly in the Gateway Settings app screen.\nSettings Screen\nHas the latest Gateway version. Get the latest version by opening the Google Play Store, searching for Medic Gateway and updating the existing app\nMedic Gateway should be set as the default app for SMS. To check, go to Settings in the Gateway app. If Medic Gateway is not the default, you will be met with the below app screen. In that case, click Help me change. Not Default\nIf messages are not going through to the server, in the To Webapp tab, select some of them and press Retry at the bottom and wait for about 5-10 minutes.\nIf messages are not going through to the users, in the From Webapp tab, select some of them and press Retry at the bottom and wait for about 5-10 minutes.\nIn CDMA networks, there are operator issues where messages get to the users in chunks of around 160 characters when the message is too long. If this is the case, go to Settings in the gateway screen and make sure you tick CDMA compatibility mode\nCheck if the phone has adequate free space\nRestart the phone if no solution seems to work. Resetting the Android state sometimes resolves some persistent problems\nWhen attacking the problem from the phones end does not work, move on to the server and try to solve it from there. Maybe the server has a configuration issue which hinders the processing or the acceptance of the messages by Medic-Api Follow the steps:\nNavigate to /srv/storage/gardener/logs/ Perform ls -lt to arrange the log files in order of modified date. Note the concerned file which was last modified on the date you are investigating Pipe it to grep to get only SMS logs e.g grep api/sms medic_medic_medic-api4.log. As below, note the errors and work from there. cd /srv/storage/gardener/logs/ ls -lt grep api/sms medic_medic_medic-api4.log If the above steps don’t yield the problem, read the Obtaining Logs page, note the make/model/android version their gateway handset is and escalate with those details to the PM/project techlead.\nVerifying the SMS Gateway via a Test Message\nWe can verify whether the SMS Gateway app is responding by sending a test message via the web app. For example, let us try this in a deployed project.\nLog in via the web app with a user with administrative rights. Log in page\nGo to App Management. App Management menu item\nClick on SMS option, then click the Test Message tab. SMS menu item\nTest message creation and delivery to Gateway phone verification:\nInput the test message which will be sent to the Gateway and the phone number where we wish to see the Gateway’s reply. Country code if not specified will be the default country code specified in SMS -\u003e Default country code. Default country code setting\nThe test message text doesn’t matter here as we are just verifying if the Gateway phone receives messages from our server and responds correctly to it by sending us a message back in the phone number we input in step (i). The easiest way would be to input our own phone number in (i) and validate that the Gateway phone sends the response message to it.\nAfter inputting the number where you expect to view the response message, press the “Send message” button.\nWe should see the Report Submitted message if the SMS was successfully received by the Gateway phone. Report submitted\nIf the message was received by the Gateway we should see the message in the “Messages” tab in the app and get an auto-reply on the number we provided in step 4(i). We should be able to see the following acknowledgments in the web app and phone respectively.\nMessage Acknowledgement in the web app in the messages tab. Message shown in Messages Tab\nResponse sent acknowledgment in the Outgoing Messages -\u003e Due tab. The recipient should be the number we input in 4(i) and the status should be delivered. Outgoing Messages in App Management\nMessage reply as seen on the phone of 4(i) from Gateway phone. Outgoing Messages in App Management\nSMS reply shown on device\nIf you see the message acknowledgment it means the Gateway is working as expected. Tip\nInsist on screenshots even for the most trivial things that partners insist they have performed as you asked. They are also good for giving you a mental image of what is happening on the phone remotely."},"title":"Troubleshooting"},"/building/messaging/gateways/nepal_doit/":{"data":{"":"From CHT version 4.22.0, SMS messages can be sent using the Nepal DoIT service.","api-keys#API keys":"The integration uses the CHT Credentials service to retrieve the API key using the ID nepal_doit_sms:outgoing.\nUse the CHT credentials API to securely store the credentials by running the commands below. Be sure to replace a valid user, pass and hostname in the command:\ncurl -X PUT -H \"Content-Type: text/plain\" https://:@/api/v1/credentials/nepal_doit_sms:outgoing -d 'nepal-doit-api-key'`","app-settings#App settings":"Update your app settings as follows.\n{ \"sms\": { \"outgoing_service\": \"nepal-doit-sms\", \"nepal_doit_sms\": { \"url\": \"https://sms.doit.gov.np/api/sms\" } } }","cht-core-configuration#CHT Core configuration":"","nepal-doit-configuration#Nepal DoIT configuration":"Log in to the Nepal DoIT Gateway dashboard and get your “API Key” that you will use as the nepal-doit-api-key.\nNext, save the nepal-doit-api-key in your CHT Core configuration as covered below.","testing#Testing":"Nepal DoIT SMS gateway does not provide a sandbox environment for testing. Once you get your API key, you can test your integration by sending a message to a valid phone number."},"title":"Nepal DoIT"},"/building/messaging/gateways/rapidpro/":{"data":{"":"As of v3.11.0, messages can be sent and received using RapidPro as a messaging gateway.","api-keys#API keys":"The RapidPro integration uses the CHT Credentials service to retrieve the API keys using the IDs rapidpro:incoming and rapidpro:outgoing. Use the CHT credentials API to securely store the credentials.\nrapidpro:incoming should contain the value of the long unique key generated earlier to verify incoming requests from RapidPro.\nrapidpro:outgoing should contain your RapidPro API token to authenticate requests made against RapidPro’s API.","app-settings#App settings":"Update your app settings as follows.\n{ \"sms\": { \"outgoing_service\": \"rapidpro\", \"rapidpro\": { \"url\": \"\" } } } Important\nThe RapidPro API endpoints are rate-limited, meaning that requests to send or check the status of messages beyond a certain number per hour will be blocked. The limit is currently 2500 actions per hour, and may change without notice. Check out the RapidPro API reference for more details. If sending a message or retrieving a status update fails, it will be retried automatically again later.\nWhen the outgoing message service is set to RapidPro or the host/account are changed, CHT Core will request state updates for all messages that aren’t in one of the final states: delivered, failed, denied, or cleared. Each of these request counts towards your quota. Since the messages are unlikely to exist on the new RapidPro service, these requests will fail on every retry and consume your request quota. It is therefore important that all outgoing messages have a final state before switching RapidPro accounts or hosts. The status can be set to failed for messages that should not be resent without user intervention, or to scheduled for those that should be automatically sent with the new RapidPro account.","cht-core-configuration#CHT Core configuration":"","create-a-new-flow#Create a new flow":"In your RapidPro dashboard, visit the flows page (/flow/) and create a new flow. It only needs to contain a webhook, to relay the message to your CHT Core instance and handle possible errors.\nflow_overview\nConfigure the new webhook:\nto POST to the cht_url you configured earlier: flow_webhook_host\nset the authorization and content-type headers flow_webhook_headers\nset the body to relay the message to CHT in the expected format: @(json(object( \"id\", run.uuid, \"from\", replace(urns.tel,\"tel:+\", \"+\"), \"content\", input.text ))) flow_webhook_body","create-a-new-trigger#Create a new trigger":"Create a trigger (/trigger/) to start the new flow when a message is not handled elsewhere.\ntrigger_select\nFor more details about RapidPro configuration, consult the RapidPro integration documentation.","rapidpro-configuration#RapidPro configuration":"","store-globals#Store globals":"Generate a long unique key to use as the cht_api_key.\nLog in to your RapidPro dashboard, go to the globals page (/global/) and create two globals with the following data:\nname: cht url, value: https:///api/v2/sms/rapidpro/incoming-messages. For security the instance host must not include basic authentication. (NB: This endpoint was added in CHT 4.1.0. If integrating with an earlier version you will need to use the earlier version with a typo in the URL: https:///api/v1/sms/radpidpro/incoming-messages) name: cht api key, value: Note\nPlease note that only letters, numbers, and hyphens are accepted when naming a global variable in RapidPro. However, any space(s) in the name will be replaced with underscore(s) when saved. For example, cht url will be saved as cht_url.\nThe names of these two global variables are arbitrary, but in this document we will keep referring to the names defined above.\nNow visit the RapidPro workspace settings page (/org/home/) and check your RapidPro API token (we’ll refer to this as the rapidpro_api_key). We will use it later."},"title":"RapidPro"},"/building/messaging/gateways/rapidpro_cht_gateway/":{"data":{"":"RapidPro - CHT uses your Android phone to send and receive messages on your behalf.\nDue to restrictions that Google has placed on Android applications that send SMS messages, RapidPro - CHT applications can no longer be distributed through the Google Play Store. You will need to download the application file and install it using the steps below:\nDownload App - On your Android device, open your browser and download the app by entering the URL: https://rapidpro.app.medicmobile.org/android/\nLaunch the RapidPro - CHT installer - Open the notifications shade by dragging from the top and select the downloaded file. download\nTap Settings - You will be taken to a screen with “allow from this source” toggle settings\nToggle allow from this source - Make sure “allow from this source” toggle is in the On position. The go back and click install Toggle allow from this source\nConfirm Toggle allow from this source\nOpen RapidPro - CHT - Once RapidPro - CHT has been installed, open the app drawer and tap on the RapidPro - CHT icon to start the app. Open RapidPro - CHT\nSend Claim Code - When you first open RapidPro - CHT, the app will register your device with Google and our servers. Once that is complete, it will display a claim code. Copy that claim code in the form to the left and send it to your supporting engineers at Medic to connect your device. Copy and Send Claim Code"},"title":"RapidPro Gateway Installation"},"/building/messaging/message-loops/":{"data":{"":"Endless messaging loops can between the webapp and a mobile number via the gateway due to autoreplies from the webapp.\nSee the Github Issue.\nSolution: Add the offending number(e.g 800 or SAFARICOM) to the Outgoing Deny List in the webapp’s app_settings configuration file.\n\"multipart_sms_limit\": 10, \"outgoing_deny_list\": \"800, SAFARICOM\", \"contact_summary\": \"\""},"title":"Message Loops"},"/building/messaging/overview/":{"data":{"":"Messaging is a quick way to coordinate with other health workers. The Messages tab allows users to send a SMS message to any person or group of people in the app. Common uses of messages include asking questions, coordinating care logistics, providing encouragement or confirming training times.\nThe main list is a combination of both outgoing and incoming messages. Messages exchanged with the same person or group are organized into a thread, similar to messages in a phone’s messaging app.\nThe features on the Messages tab are best supported on desktop and most often used by someone in a supervisor role.","detail-page#Detail Page":"Clicking on a message in the main list will take you to a detail tab where you can see the full text of the conversation. Underneath each individual message in the conversation, you will see the message status which tells you whether or not the message was successfully delivered or received and at what time.\nTo reply to a message, tap or click in the box at the bottom of the conversation that says “Reply to…” and start typing. Each message is limited to 160 characters but you may send more than one message if necessary.\nIt is also possible to configure auto-responses and for schedules of personalized, automated messages to be triggered upon submission of a form (e.g., a pregnancy registration triggers a schedule of personalized Antenatal care messages).","main-list#Main List":"On the main list of messages, the first line of bold text is the name and / or phone number of the sender. The second line is an excerpt from the most recent message, and the third line, if applicable, is the place(s) that the sender belongs to.\nIn the upper right corner, a timestamp displays when the most recent message was sent. An unread message is indicated by a blue line and bold blue timestamp. Messages are sorted by date with the most recent at the top of the list.\nTo send a new message that starts a brand new conversation thread, select the “Send Message +” button at the bottom of the screen. On the new message screen, enter the phone number you would like to send the message to or select a person in the app from the drop-down list. Then, type out your message text."},"title":"Overview"},"/building/messaging/shortcodes/":{"data":{"":"Short unique identifiers for contacts are often used to identify contacts in messaging workflows. Unique short codes are generated on doc.patient_id against any document of a person type, and on every doc.place_id against any document of a place type. By default, these IDs start at 5 numeric digits long, and will increase in length as deemed necessary by the generation algorithm.\nIf the length is increased, this increase is stored in a CouchDB documented called shortcode-id-length:\n{ \"_id\": \"shortcode-id-length\", \"current_length\": 6 }","configuring-a-maximum-length-locking-down-an-exact-length-etc#Configuring a maximum length, locking down an exact length etc":"It is not possible to either alter the maximum length of IDs, to stop it automatically increasing, or to tweak when it decides to automatically increase. IDs automatically increasing in length when required is important to the continual correct functioning of Sentinel.","configuring-a-minimum-length#Configuring a minimum length":"If you wish to change the minimum length of the generated identifiers, create or edit the shortcode-id-length document in CouchDB. For example, if you wish for the minimum length to be 7:\n{ \"_id\": \"shortcode-id-length\", \"current_length\": 7 } If this file already exists be sure to include the existing _rev property.\nNote\nIf you are changing this document and want to make it relevant straight away, you must restart Sentinel. Otherwise there may be a collection of cached already accepted IDs of the previous length that Sentinel will work through first.","valid-sizes#Valid sizes":"The shortcode identifiers can be between 5 and 13 digits long. Due to the last digit being a checksum digit, there are at most 10,000 5 digit ids, and at most 1,000,000,000,000 13 digit IDs."},"title":"Contact IDs"},"/building/messaging/sms-states/":{"data":{"":"","interaction-with-sms-providers#Interaction with SMS providers":"CHT Applications can use CHT Gateway and third party aggregators to send and receive SMS messages.\nWhen an SMS report comes in from a user, medic-sentinel adds the appropriate list of scheduled messages (to be sent at a future date) to the report doc.\nPeriodically, sentinel checks for messages that need to be sent, and sets their state to pending if their scheduled sending time has been reached or passed.\nPeriodically, the aggregator checks for messages that need to be sent (i.e. that are in pending state).\nThe aggregator also reports on the status of the messages it’s sending.","message-states-in-medic#Message states in medic":"State Description scheduled Not yet due. Messages as part of a configured schedule start in this state and are changed to pending when due. pending Due to be sent. The SMS gateway should pick this up for sending. Auto replies and instant messages start in this state. forwarded-to-gateway Message has been sent to gateway. received-by-gateway Has been received by the gateway. forwarded-by-gateway Gateway has tried sending the message. sent Successfully delivered to the sms network. delivered Successfully received by the recipient’s device. failed The sending attempt failed. Sending will not be retried without user intervention. denied This will not be sent. The recipient phone number is configured to be denied via outgoing_deny_list, outgoing_deny_with_alphas, or outgoing_deny_shorter_than. cleared This will not be sent as a report has triggered an event to stop it. This can happen if a patient visit has occurred before the visit reminder is sent. muted This will not be sent as the task has been deliberately stopped. Messages in this state can be unmuted by user action.","message-statuses-in-cht-gateway#Message statuses in cht-gateway":"See https://github.com/medic/cht-gateway#content","message-statusesstates#Message statuses/states":"Both webapp and the aggregator store states/statuses of the messages to keep track of the exchange. They each have their set of statuses, which sometimes are called the same but do not mean the same thing. Watch out.","timeline-of-the-cht-gateway-protocol-for-webapp-originating-message#Timeline of the cht-gateway protocol for webapp-originating message":"Read the table below like a vertical timeline : each time an event happens, the states/statuses corresponding to the message get updated.\nNote 1 : Gateway only sends a status update for a message only if the “needs forwarding” flag for the message status is true, and then sets it back to false. So it only sends status updates once.\nNote 2 : If api sends the same WO message again, then gateway sets its needs forwarding flag to true, and so sends the status at the next poll.\nNote 3 : not all of the events below happen every time : this is assuming only one step of SMS-sending happens between each poll. If several steps happened, then some of the events below are skipped. If several status changes have happened between polls, Gateway will report the multiple new statuses at the next poll.\nnumber Event webapp state gateway status gateway “Needs forwarding” flag 1 Due date to send the message passes pending — 2 Gateway polls and gets a new WO message forwarded-to-gateway — — 3 Gateway saves message in its DB forwarded-to-gateway UNSENT true 4 Gateway reports UNSENT status for the message received-by-gateway UNSENT false 5 Gateway sends the message received-by-gateway PENDING true 6 Gateway reports PENDING status for the message forwarded-by-gateway PENDING false 7 Gateway gets confirmation the message left forwarded-by-gateway SENT true 8 Gateway reports SENT status for the message sent SENT false 9 Gateway gets confirmation the message arrived sent DELIVERED true 10 Gateway reports DELIVERED status for the message delivered DELIVERED false"},"title":"SMS States"},"/building/navigation/":{"data":{"":"","replication-types#Replication Types":"Synchronization consists of upward replication and downward replication.\nUpward Replication: Uploading all new or updated data from the device to the server. It includes a retry mechanism for handling larger data batches, ensuring a robust and reliable upload process. Downward Replication: Downloading new or updated data from the server to the device. Downward replication may include the download of software updates to the CHT app when available. The CHT application manages data synchronization across two types of databases:\nMain Application Database (medic): The main database that stores the primary data used by the application. It includes contacts, reports, messages, and other critical documents necessary for the core functionality of the application. This database is synchronized continuously to reflect changes to the application, such as new contact creations. Each user stores a subset of the main database which includes only the documents they’re allowed to view. User-Metadata Database(medic-user-{username}-meta): Each user has a dedicated database that stores operational metadata, including telemetry data and error messages. Synchronization occurs at predefined intervals to ensure up-to-date monitoring and analysis.","storage-pressure-indicator#Storage Pressure Indicator":"Introduced in 4.20.0 Another important factor for offline users is the amount of storage available on their device. The CHT app will not continue to function if a user runs out of storage space. The storage pressure indicator in the menu drawer shows users, at a glance, how much free disk space they have left.","summary-of-page-tabs#Summary of Page Tabs":"Page tabs are the primary way to navigate apps built with the Core Framework. The number of tabs is variable depending on the user’s role and place in the hierarchy. For example, non-admin users don’t have Messages. The Reports tab is accessible to CHWs but often located inside the secondary menu drawer.\nMessages​: A place for community-based staff to send and exchange messages Tasks​: This is a list of upcoming visits, follow-ups, or other required tasks Reports​: A detailed history of all forms submitted by CHWs and other staff People​: This is where profiles of districts, staff, CHWs and patients live Targets: Displays real-time visualizations of key activity and impact indicators","sync-status#Sync Status":"Data synchronization is important for offline users. These users keep a copy of the data they have access to on their device. They can work from their device while disconnected from the internet (offline), by reading from and writing to their copy of the data. “Sync” (synchronization) is when data on the device is made to match the data on the server and requires an internet connection. The CHT app monitors the online status and attempts sync accordingly.","sync-status-notification#Sync Status Notification":"At the bottom of the menu is a notification which provides important information about data synchronization.\nIf the sync status is green and says “All reports synced,” this means you have successfully uploaded the most recent data on your device to the server. It also means that you downloaded the latest data from the server as of the time displayed. Note that there could be more recent data changes on the server, and it doesn’t guarantee you are up to date.\nIf the indicator is red, it means you have data changes waiting to be uploaded to the server. You should check your internet and data connection to ensure a successful sync.\nTriggering a manual sync by clicking the “Sync now” button will provide feedback at every step of the process through a snackbar appearing on the bottom side of the screen. This performs upward and downward synchronization of both databases. It will also retry the sync process in case of failure..","sync-status-states#Sync Status States":"The synchronization process can be in one of the following states:\nUnknown: The sync status is not determined yet. Disabled: Sync is disabled - only applies to online-only users. InProgress: Synchronization is currently ongoing. Success: The last sync operation was successful. Required: There is data pending synchronization.","synchronization-triggers#Synchronization Triggers":"On Login: Synchronization is automatically initiated upon successful user login if the app is connected to the internet. Manual: Clicking the “Sync now” button. Periodic Sync: The application performs regular checks and attempts to synchronize. The main application database syncs every 5 minutes, while the user metadata database syncs every 30 minutes.. On Reload: Synchronization is automatically initiated when the user reloads the application, refreshes the page, or clicks the reload button in the “Update available” modal. On Connect: The app also detects when an internet connection becomes available and attempts to sync immediately.","the-menu-drawer#The Menu Drawer":"Tap the menu icon in the upper right corner of the header to access other pages, edit personal settings, view sync status and more.\nAdmin Console: Change advanced app settings (only admin users will see this) About: View your app version and other detailed database information User Settings: Update basic user information like email, phone number, and password Report Bug: Let us know if something isn’t working or you encounter errors Log Out: Sign out of the app"},"title":"Navigation"},"/building/prerequisites/":{"data":{"":"There are no set prerequisites for users of CHT apps, yet the following are helpful for developing CHT applications.","build-tool#Build tool":"The build tool for applications using the Core Framework is cht-conf. To set it up, follow the installation instructions. To properly use the tool you will need your application files in set locations within a folder. Once you are set up with the basic file structure you can edit the files, and rebuild the application by compiling or converting components as needed, and uploading them to your test instance.","configuration-skills#Configuration skills":"Technically speaking, CHT Applications consist of JSON files, XLSForms, JavaScript code, media (images/videos), and translations. Collectively, this is referred to as “configuration code”. The following technical skills are necessary to work with all the aspects of configuration code, ordered by importance:","couchdb#CouchDB":"A free and open source NoSQL database we use to store all our data, configuration, and even the application code. CouchDB is really good at replication which is the process of sending the data to another database, such as PouchDB in the client application, and back again. Although building your own app using the Core Framework does not require knowledge or experience with CouchDB it can be useful to be familiar with general concepts as a document store.","javascript#Javascript":"Many key aspects are defined with JavaScript code and expressions. This includes managing profile pages, creating tasks and targets, and setting the condition for when to show forms. Unless you are only doing minor modification to an existing application, a good understanding of JavaScript is required.","json#JSON":"JSON (JavaScript Object Notation) is a format for storing structured text. Understanding JSON will help with minor modification of existing applications.","required-skills#Required skills":"Building a CHT Application or altering an existing app is a technical undertaking requiring a technical skillset.","sql#SQL":"Although the application you build uses a NoSQL database, a parallel PostgreSQL database is available in the Core Framework to make querying data easier. Familiarity with SQL is needed to set up and query the database.","test-instance#Test Instance":"To build your own application using the Core Framework you will need an instance set up for testing. You can set up a local instance by following these instructions.","to-build-an-app#To Build an App":"Use of command line tools to compile and deploy configuration code XLSForms for building forms (to create contacts, add contact actions, complete tasks) JSON for modifying settings JavaScript for modifying tasks and targets","to-deploy-an-app#To Deploy an App":"System administration Database administration for CouchDB and PostgreSQL Familiarity with AWS including EC2 and CloudWatch Familiarity with Docker Service monitoring Use of command line tools","xlsforms-and-xforms#XLSForms and XForms":"Many workflows in your application, including completing tasks and creating contacts, will be generated using ODK XForms. Many app developers use XLSForms as an easier way to generate XForms. A strong knowledge of XLSForm standard is very useful in building your own application."},"title":"Prerequisites"},"/building/privacy-policies/":{"data":{"":"As of 3.10.0, privacy policies can be customized for every language, by adding desired content into HTML files.\nPrivacy policies are now publicly accessible rather than only being available after logging in. This means it can be shared with third parties, for example, app store compliance. If your instance URL is https://my-health-facility.org, then the privacy policy is available at https://my-health-facility.org/medic/privacy-policy. Added in 3.17.0.\nPrivacy Policy on login page\nAdd these HTML files to the privacy-policies folder in your configuration. The privacy-policies.json file, which associates the HTML files with the correct language, should reside in the root of the project directory, not inside the privacy_policies folder.\n{ \"en\": \"en.attachment.html\", \"fr\": \"fr.file.html\", \"sw\": \"swahili.html\" }","adding-and-editing-a-privacy-policy#Adding and Editing a Privacy Policy":"There are two ways to add or edit a privacy policy:\nBuild the privacy policies into the application with the upload-privacy-policies action in cht-conf. cht --local upload-privacy-policies Update and view privacy policies in the Admin Console, under Display \u003e Privacy Policies Note\nUse language codes when associating HTML files to languages Files that are not in HTML format will be skipped Files that are not associated with a language will not be uploaded Before being displayed to users, privacy policies HTML is sanitized, which strips all unsafe elements and attributes. The admin console has a previewing feature that will display your privacy policy contents after being sanitized. When displayed to users, privacy policy HTML will be styled by webapp CSS.","view-in-webapp#View In Webapp":"When a privacy policy is configured for a language, users who load the app in this language are prompted to accept the policy.\nIf our en.attachment.html file looked like this:\n\u003chtml\u003e\u003cbody\u003e \u003ch1\u003eLorem Ipsum: Privacy \u0026 Data Protection Policy\u003c/h1\u003e \u003ch2\u003eThe standard Lorem Ipsum passage, used since the 1500s\u003c/h2\u003e \u003cp\u003e Lorem ipsum dolor sit amet, consectetur adipiscing elit, sed do eiusmod tempor incididunt ut labore et dolore magna aliqua. Ut enim ad minim veniam, quis nostrud exercitation ullamco laboris nisi ut aliquip ex ea commodo consequat. Duis aute irure dolor in reprehenderit in voluptate velit esse cillum dolore eu fugiat nulla pariatur. Excepteur sint occaecat cupidatat non proident, sunt in culpa qui officia deserunt mollit anim id est laborum \u003c/p\u003e \u003c/body\u003e\u003c/html\u003e Then visitors of the privacy policy would see:\nAccept privacy policy\nThe app will load normally after acceptance. The user cannot opt out or skip acceptance, meaning, if a privacy policy is configured, the app will be unusable until the user has accepted it. Once accepted, users will not be prompted to accept the same policy again. However, users will be prompted for acceptance again when the policy is updated or when they change their language. An acceptance log is saved in the user-settings file and synced to the server, containing a history of privacy policies accepted by the user."},"title":"Privacy policies"},"/building/privacy-policies/policy/":{"data":{"":"Note\nThis policy is reviewed and updated periodically by our Responsible Data Working Group and is intended as a resource for the CHT community.\nIf you have any questions, reach out to our Data Protection Officer at support@medic.org.","compliance-with-applicable-data-regulations-and-policies#Compliance with applicable data regulations and policies":"Medic serves as a technical partner to governments and non-governmental organizations around the world. As a result, our projects comply with a range of country-specific and region-specific data protection regulations, and the details of compliance are addressed on a project-by-project basis. Adhering to all data regulations that are relevant to a given project is a central element of Medic’s global privacy and data protection policy.\nIn most cases, the Ministries of Health, other government agencies, and non-governmental organizations that Medic supports (Medic “Partner(s)”) serve as data controlling entities, and they work with Medic as a business associate. Partners establish additional data handling policies and standard operating procedures, which are typically documented in Memoranda of Understanding or/and Data Sharing Agreements signed by these Partners as well as Medic.","data-and-protected-health-information#Data and protected health information":"","inquiries-with-medics-data-protection-officer#Inquiries with Medic’s Data Protection Officer":"For any inquiries, reach out to Medic’s Data Protection Officer, by emailing support@medic.org with the words “Data Protection” in the subject line.","our-responsible-data-promise#Our responsible data promise":"As a non-profit organization, Medic Mobile (“Medic”)’s mission is to advance good health and human flourishing by building open source technology with and for hard-to-reach communities. We value humanity, creativity, initiative, solidarity, and openness. Being responsible stewards of people’s data is critically important to our mission.\nWe use the concept of Responsible Data (RD) to outline our collective duty to prioritise and respond to the ethical, legal, social, and privacy-related challenges that come from using data in new and different ways in healthcare, advocacy, and social change. We have an obligation to account for unintended consequences of working with data by:\nPrioritising people’s rights to consent, privacy, security and ownership when using data in social change and advocacy efforts Implementing values and practices of transparency and openness As an organization, we promise to do our best to live up to these obligations. We promise to show initiative, to seek feedback, and to proactively seek out ways to work with data more responsibly. We promise to accompany patients, health workers, researchers, organizational partners, and our open source community in the journey from best intentions to best practices in data-driven projects. The purpose of Medic’s data policy is to help our organization deliver on this responsible data promise.","protected-health-information-policy#Protected health information policy":"For purposes of this policy, protected health information (“PHI”) is defined as any physically or electronically-encoded information containing at least one of the following:\npatient name(s); patient-related dates (including birth, registration, visit, death); patient-related ages; patient and/or family phone/fax numbers, e-mail addresses, and/or social media account names; references to a patient-related geographical subdivision (if smaller than 20,000 people); social security, tax identification, or other patient account numbers; patient-related device identifiers, addresses, or serial numbers (including IP addresses, MAC addresses, computer/-device serial numbers, beneficiary numbers, account numbers, and personally-identifying URLs); licensure information (including drivers’ license and license plate numbers, and numbers related to professional membership/licensing); images containing the face of a patient, patient’s family member, or any other patient-related contact; any biometric data describing a patient (including eye/hand measurements, height, weight, or clothing sizes); and any unique identifier or code, other than a study-specific unique identifier assigned for purposes of managing an approved research protocol Medic’s PHI policy requires that:\nAccess to protected health information – and to devices containing protected health information – must be password protected. Any and all protected health information must be stored and retrieved using a full-disk encryption system. Any device that connects to or uses any of Medic’s mission-critical services must use a full-disk encryption system at all times. When communicating information electronically, any and all protected health information must be protected using a secure transfer system. Each person is responsible for his/her own compliance. If any person becomes aware of a violation of this policy, they have a duty to report the incident directly to Medic’s People Operations Manager, and/or COO. All Medic personnel sign a Protected Health Information (PHI) policy which mandates the use of full disk encryption, secure communication channels, and two factor authentication when handling PHI. This policy applies to all Medic personnel – including, but not limited to, employees, contractors, associates, fellows, interns, advisors, and board members. This policy applies to computer equipment and/or systems that are either: (i) property of Medic; (ii) property of any Medic personnel; or (iii) used directly by Medic personnel to carry out any assigned duties.\nExceptions to this policy may be granted – on a task-specific or project-specific basis only – at the discretion of the CPO or COO. This policy does not confer any ownership of data; Partner-submitted data remains in the control of Partner organizations. This policy does not apply to equipment stored in an authorized secure data center / facility (e.g. Amazon Web Services), or to equipment wholly owned and operated by an external Partner, or to external software deployments to which Medic has no access.","security-practices#Security practices":"Medic is committed to data security. In addition to adhering to data security standards established by our Partners, we also recognize the security benefits and drawbacks of different technology tools and work with our partners to make the best choices and mitigate risk.","security-training-for-our-partners#Security training for our Partners":"We work with every partner to make sure they are trained and equipped to handle their data. This includes advising partners on how to create secure passwords and PINs, how to secure hardware, and how to safely transport data.","technology-security-overview#Technology security overview":"Web app: Medic uses secure transfers over HTTPS for all communication between the browser and our web application, with perfect forward secrecy (PFS) and 4096-bit SHA-2 certificates by default. We use a non-standard port for SSH access to reduce our exposure to automated brute-force attacks and can configure the web app to accept only public key authentication for SSH connections. Access to the web application requires a password, and user access can be established to varying degrees using a role-based access control facility (e.g. full access, restricted access, data entry only, and data export only).\nData storage: Medic uses Amazon Web Services (AWS) with enforced two-factor authentication, HTTPS, and Identity and Access Management (IAM) for all hosted instances. We use IAM policies on AWS to restrict what any one individual Medic developer/administrator can do. See below for more information on AWS data security.\nSMS: We train users to input data using simple SMS codes or freeform SMS. We use “plain text encoding” which means viewers can see the value but not know the context of the data. As an example: when health workers text P 3 Jane (“P” for pregnancy, “3” for number of weeks pregnant, name), Medic registers the pregnancy, creates a patient ID, calculates the expected delivery date, and schedules automated reminder messages. SMS is inherently insecure but we work with every partner on safety practices to reduce and minimize mishandling of data and transmission of protected health information.\nAndroid phones: To secure the data, each device must be configured to use Full Disk Encryption and a Screen Lock.","use-of-software-to-collect-and-process-data#Use of software to collect and process data":"Medic has developed an open-source software toolkit (“Software”) that combines smart messaging, decision support, easy data gathering and management, and health system analytics. The Software can be accessed via many types of devices, including feature phones, smartphones, tablets, and desktop computers. Certain aspects of the Software can be downloaded for use on such end user devices. Health workers and families can use the Software to help monitor pregnancies, track outbreaks faster, treat illnesses, keep stock of essential medicines, and communicate about emergencies, among other things.\nThe Software is made available to the public on a free and open source basis, under licenses approved by the Open Source Initiative. These licenses limit Medic’s liability or responsibility with respect to any uses of the Software in which Medic personnel are not directly involved in Processing Data (defined below). The Software source code and the relevant licenses can be accessed at http://github.com/medic.\nMedic hosts, maintains and supports certain components of the Software on Medic managed servers where Data obtained by use of Software on end user devices is received, accessed, handled, and/or stored (collectively, “Processed”). “Data” means any and all data, information and other content uploaded, posted, input or transmitted to the Software, or generated by the use of the Software, by or on behalf of End Users.\nSubject to compliance with applicable law, Medic and its permitted subcontractors and agents shall not disclose Data to any third party and shall not use or access the Data for any purpose, except the following specific purposes:\nTo provide services or conduct activities as permitted in writing by a Partner acting as the data controlling entity for the specific Data being accessed or shared (which may require execution of a memorandum of understand or data use agreement); To maintain and improve the Software; To perform routine monitoring and public reporting on aggregated Impact Metrics (defined below). For the purposes of this policy, “Impact Metrics” refers to aggregated Data which does not include personally identifiable information or Protected Health Information (defined below), and which is useful for Medic’s charitable purpose of monitoring the use of the Software and understanding its impacts on health systems. Examples of Impact Metrics include the total number of households registered in the Software, the total number of health workers using the Software, the total number of households visited in a given month, and the total number of Software-supported actions on antenatal care, postnatal care, integrated community case management, family planning, malnutrition, and immunization services. It may also include aggregate Data concerning COVID-19 services such as community event-based surveillance, contact tracing, CHW self-checks, and support for self-isolation provided in Medic-supported projects.\nAny Impact Metrics shared with the general public will be aggregated globally; Medic personnel shall not de-aggregate the Impact Metrics to identify activities in any particular Country, without obtaining prior written consent from the Partner(s) acting as the relevant data controlling entities. Examples of previously reported Impact Metrics are available to the public in Medic’s quarterly and annual reports, which can be accessed at https://medic.org/reports/.\nAll additional uses of data for research and reporting will comply with applicable Ministry of Health policies and existing Partner policies for health data access and sharing. Medic personnel shall not use any Data for research purposes unless Medic has obtained the prior written consent of the relevant Partner(s), which may involve execution of a data sharing agreement."},"title":"Medic’s Policy"},"/building/reference/":{"data":{"":"Content in this section API to interact with CHT Applications extension-libs/ CHT API Utils Functions"},"title":"Reference"},"/building/reference/_partial_cht_api/":{"data":{"":"Introduced in v3.12.0\nProvides CHT-Core Framework’s functions to contact summary, targets and tasks. The API is available in the cht reserved variable under the v1 version.\nFunction Arguments Description hasPermissions(permissions, userRoles, chtPermissionsSettings) permissions: String or array of permission name(s).\nuserRoles: (Optional) Array of user roles. Default to the current logged in user.\nchtPermissionsSettings: (Optional) Object of configured permissions in CHT-Core’s settings. Default to the current instance’s configured permissions. Returns true if the user has the permission(s), otherwise returns false. hasAnyPermission(permissionsGroups, userRoles, chtPermissionsSettings) permissionsGroups: Array of groups of permission name(s).\nuserRoles: (Optional) Array of user roles. Default to the current logged in user.\nchtPermissionsSettings: (Optional) Object of configured permissions in CHT-Core’s settings. Default to the current instance’s configured permissions. Returns true if the user has all the permissions of any of the provided groups, otherwise returns false. getExtensionLib(name) name: String of script name Returns an executable function identified by the given name configured as extension-libs. analytics.getTargetDocs() Returns three target documents of the contact, calculated for the last three reporting intervals, including the current one. When viewing one of the current logged in user’s associated facilities, returns the target documents for the contact associated with the current logged in user. Returns an empty array if no target documents are found (for example when viewing a contact that does not upload targets). Introduced in v4.11.0","cht-apis-code-samples#CHT API\u0026rsquo;s code samples":"const canEdit = cht.v1.hasPermissions('can_edit'); const canManagePlaces = cht.v1.hasPermissions(['can_create_places', 'can_update_places']); const hasAnyGroup = cht.v1.hasAnyPermission([ ['can_view_messages', 'can_view_message_action'], ['can_view_reports', 'can_verify_reports'] ]); const averageFn = cht.v1.getExtensionLib('average.js'); const targetDocs = cht.v1.analytics.getTargetDocs();"},"title":"CHT API"},"/building/reference/_partial_utils/":{"data":{"":"Utility functions in the Core Framework can make common tasks much easier. These are available only for Tasks and Targets. To use the function call Utils.\u003cfunction-name\u003e(\u003cparams\u003e), for example Utils.addDate(report.reported_date, 10).\nName Description isTimely(date, event) Returns true if the given date is after the start date and before the end date of the event. addDate(date, days) Returns a new Date set to midnight the given number of days after the given date. If no date is given the date defaults to today. getLmpDate(doc) Attempts to work out the LMP from the given doc. If no LMP is given it defaults to four weeks before the reported_date. getSchedule(name) Returns the task schedule with the given name from the configuration. getMostRecentTimestamp(reports, form) Returns the reported_date of the most recent of the reports with form ID matching the given form. getMostRecentReport(reports, form) Like getMostRecentTimestamp but returns the report, not just the reported_date. From CHT v3.14.0, it also accepts an array of forms. isFormSubmittedInWindow(reports, form, start, end) Returns true if any of the given reports are for the given form and were reported after start and before end. isFirstReportNewer(firstReport, secondReport) Returns true if the firstReport was reported before the secondReport. isDateValid(date) Returns true if the given date is a validate JavaScript Date. now() Returns the current Date. getField(report, fieldPath) Returns the value of the specified fieldPath. The fieldPath is a period separated json path. MS_IN_DAY A constant for the number of milliseconds in a day. Open an issue if you’d like other functions included."},"title":"Utils Functions"},"/building/reference/api/":{"data":{"":"This page covers the endpoints to use when integrating with the CHT server. If there isn’t an endpoint that provides the function or data you need, direct access to the database is possible via the CouchDB API. Access to the PostgreSQL database may also prove useful for data analysis. If additional endpoints would be helpful, make suggestions via a GitHub issue.\nSettings GET /api/v1/settings PUT /api/v1/settings Export GET /api/v2/export/dhis GET /api/v2/export/reports GET /api/v2/export/messages GET /api/v2/export/feedback GET /api/v2/export/contacts GET /api/v2/export/user-devices Forms GET /api/v1/forms GET /api/v1/forms/{{id}}.{{format}} POST /api/v1/forms/validate Records POST /api/v2/records SMS POST /api/sms POST /api/v1/sms/{aggregator}/{endpoint} Contact GET/api/v1/contact/{{uuid}} GET /api/v1/contact/uuid Person GET /api/v1/person/{{uuid}} GET /api/v1/person People Supported Properties POST /api/v1/people Place GET /api/v1/place/{{uuid}} GET /api/v1/place Places Supported Properties POST /api/v1/places POST /api/v1/places/{{id}} Report GET/api/v1/report/{{uuid}} GET /api/v1/report/uuid Users Supported Properties GET /api/v1/users GET /api/v2/users GET /api/v2/users/{{username}} POST /api/v1/users POST /api/v2/users POST /api/v1/users/{{username}} DELETE /api/v1/users/{{username}} GET /api/v1/users-info Bulk Operations POST /api/v1/bulk-delete Monitoring GET /api/v1/monitoring GET /api/v2/monitoring GET /api/v1/express-metrics Upgrades POST /api/v1/upgrade POST /api/v1/upgrade/stage POST /api/v1/upgrade/complete Hydrate GET /api/v1/hydrate POST /api/v1/hydrate Contacts by phone GET /api/v1/contacts-by-phone POST /api/v1/contacts-by-phone Replication Limit GET /api/v1/users-doc-count Credentials PUT /api/v1/credentials 3.x API Note\nVarious properties throughout this API use a timestamp value, the following formats are supported:\nISO 8601 combined date and time with timezone of the format below where “Z” is offset from UTC like “-03”, “+1245”, or just “Z” which is UTC (0 offset);\nYYYY-MM-DDTHH:mm:ssZ YYYY-MM-DDTHH:mm:ss.SSSZ Milliseconds since Unix Epoch\nA compatible value can be generated using the toISOString or toValue method on a Javascript Date object.","3x-api#3.x API":"For 3.x deployments credentials are stored in CouchDB configuration in a custom medic-credentials section.\nTo add the credential to the admin config you need to PUT the value using curl, for example, to set a credential with key “mykey” and password “my pass” use the following command.\ncurl -X PUT https://:@/_node/_local/_config/medic-credentials/mykey -d '\"my pass\"' You can also add it via Fauxton:\nNavigate to the Config screen at https:///_utils/#/_config Click Add Option The Section should be medic-credentials, the Name should be (in this example) mykey and the value should be the password Click Create You should then be able to see your credential in the list of configuration shown","bulk-operations#Bulk Operations":"","contact#Contact":"","contacts-by-phone#Contacts by phone":"Added in 3.10.0\nAccepts a phone number parameter and returns fully hydrated contacts that match the requested phone number. If multiple contacts are found, all are returned. When no matches are found, a 404 error is returned. Supports both GET and POST. Only allowed for users with “online” roles.","create-many-users#Create many users":"Create two new users that can authenticate with a username and a password that can submit reports and view or modify records associated to their place. The place is created in the background and automatically linked to the contact.\nPOST /api/v1/users Content-Type: application/json [ { \"password\": \"secret\", \"username\": \"mary\", \"type\": \"district-manager\", \"place\": { \"name\": \"Mary's Area\", \"type\": \"health_center\", \"parent\": \"d14e1c3d557761320b13a77e7806e8f8\" }, \"contact\": { \"name\": \"Mary Anyango\", \"phone\": \"+2868917046\" } }, { \"password\": \"secret\", \"username\": \"bob\", \"type\": \"district-manager\", \"place\": { \"name\": \"Bob's Area\", \"type\": \"health_center\", \"parent\": \"d14e1c3d557761320b13a77e7806e8f8\" }, \"contact\": { \"name\": \"Bob Johnson\", \"phone\": \"+2868194607\" } } ] HTTP/1.1 200 Content-Type: application/json [ { \"contact\": { \"id\": \"65416b8ceb53ff88ac1847654501aeb3\", \"rev\": \"1-0b74d219ae13137c1a06f03a0a52e187\" }, \"user-settings\": { \"id\": \"org.couchdb.user:mary\", \"rev\": \"1-6ac1d36b775143835f4af53f9895d7ae\" }, \"user\": { \"id\": \"org.couchdb.user:mary\", \"rev\": \"1-c3b82a0b47cfe68edd9284c89bebbae4\" } }, { \"contact\": { \"id\": \"8d8a741c1cb441058e29a60ab7596bf2\", \"rev\": \"1-acbc31712fd105eae3cd0806cd20a8f4\" }, \"user-settings\": { \"id\": \"org.couchdb.user:bob\", \"rev\": \"1-d8629838127accd531043f845c416ef6\" }, \"user\": { \"id\": \"org.couchdb.user:bob\", \"rev\": \"1-5eac2542c801ba6b518728f53d9276a0\" } } ]","create-one-user#Create one user":"Create a new user that can authenticate with a username of “mary” and password of “secret” that can submit reports and view or modify records associated to their place. The place is created in the background and automatically linked to the contact.\nPOST /api/v1/users Content-Type: application/json { \"password\": \"secret\", \"username\": \"mary\", \"type\": \"district-manager\", \"place\": { \"name\": \"Mary's Area\", \"type\": \"health_center\", \"parent\": \"d14e1c3d557761320b13a77e7806e8f8\" }, \"contact\": { \"name\": \"Mary Anyango\", \"phone\": \"+2868917046\" } } HTTP/1.1 200 Content-Type: application/json { \"contact\": { \"id\": \"65416b8ceb53ff88ac1847654501aeb3\", \"rev\": \"1-0b74d219ae13137c1a06f03a0a52e187\" }, \"user-settings\": { \"id\": \"org.couchdb.user:mary\", \"rev\": \"1-6ac1d36b775143835f4af53f9895d7ae\" }, \"user\": { \"id\": \"org.couchdb.user:mary\", \"rev\": \"1-c3b82a0b47cfe68edd9284c89bebbae4\" } }","credentials#Credentials":"Securely store credentials for authentication with third party systems such as SMS aggregators and HMIS. Certain CHT services rely on these credentials when enabled.","delete-apiv1usersusername#DELETE /api/v1/users/{{username}}":"Delete a user. Does not affect a person or place associated to a user.","errors#Errors":"If required fields are not found return 500.\nIf invalid JSON return error response 500.\nIf submitting JSON and corresponding form is not found on the server you will receive an error.","errors-1#Errors":"","errors-2#Errors":"","errors-3#Errors":"If an error is encountered part-way through the response (eg on the third batch), it’s impossible to send new headers to indicate a 5xx error, so the connection will simply be terminated (as recommended here https://github.com/expressjs/express/issues/2700).","errors-4#Errors":"A metric of \"\" (for string values) or -1 (for numeric values) indicates an error occurred while querying the metric - check the API logs for details. If no response or an error response is received the instance is unreachable. Thus, this API can be used as an uptime monitoring endpoint.","errors-5#Errors":"A metric of \"\" (for string values) or -1 (for numeric values) indicates an error occurred while querying the metric - check the API logs for details. If no response or an error response is received the instance is unreachable. Thus, this API can be used as an uptime monitoring endpoint.","example#Example":"Create two new users that can authenticate with a username and a password that can submit reports and view or modify records associated to their place. Along with a new user, a new contact and new place are created as well. The new place will be a child of place.parent (see the UUID fe4da0f9-7d65-4834-bb42-88a5239bbd3b below) and must already exist or else the new place will be an orphan record in the hierarchy and not show up in the GUI.\nPOST /api/v2/users Content-Type: text/csv contact.first_name,contact.last_name,contact.sex,contact.phone,email,contact.meta.created_by,token_login,contact.role,contact.type,contact.contact_type,contact.name,username,password,phone,place.parent,place.type,place.name,place.contact_type,type,fullname Mary,Anyango,female,+2868917046,,,FALSE,chw,contact,person,Mary Anyango,mary,WrAGyGD9805,2868917046,fe4da0f9-7d65-4834-bb42-88a5239bbd3b,health_center,Mary Anyango's Health center,clinic,chw,Mary Anyango Bob,Johnson,male,+2868194607,,,FALSE,chw,contact,person,Bob Johnson,bob,JzAEQzY2614,2868194607,fe4da0f9-7d65-4834-bb42-88a5239bbd3b,health_center,Bob Johnson's Health center,clinic,chw,Bob Johnson HTTP/1.1 200 Content-Type: application/json [ { \"contact\": { \"id\": \"65416b8ceb53ff88ac1847654501aeb3\", \"rev\": \"1-0b74d219ae13137c1a06f03a0a52e187\" }, \"user-settings\": { \"id\": \"org.couchdb.user:mary\", \"rev\": \"1-6ac1d36b775143835f4af53f9895d7ae\" }, \"user\": { \"id\": \"org.couchdb.user:mary\", \"rev\": \"1-c3b82a0b47cfe68edd9284c89bebbae4\" } }, { \"contact\": { \"id\": \"8d8a741c1cb441058e29a60ab7596bf2\", \"rev\": \"1-acbc31712fd105eae3cd0806cd20a8f4\" }, \"user-settings\": { \"id\": \"org.couchdb.user:bob\", \"rev\": \"1-d8629838127accd531043f845c416ef6\" }, \"user\": { \"id\": \"org.couchdb.user:bob\", \"rev\": \"1-5eac2542c801ba6b518728f53d9276a0\" } } ]","example-1#Example":"GET /api/v1/users-info -H 'Cookie: AuthSession=OFFLINE_USER_SESSION;' HTTP/1.1 200 OK Content-Type: application/json { \"total_docs\": 5678, \"warn_docs\": 4852, \"warn\": false, \"limit: 10000 } When the requester has an online role, the following query parameters are accepted:","example-2#Example":"GET /api/v1/users-info?facility_id={{facility_uuid}}\u0026role={{role}}\u0026contact_id={{contact_uuid}} -H 'Cookie: AuthSession=OFFLINE_USER_SESSION;' HTTP/1.1 200 OK Content-Type: application/json { \"total_docs\": 10265, \"warn_docs\": 10265, \"warn\": true, \"limit: 10000 } In case any of the required query parameters are omitted or the requested role is not configured as an offline role, the request will result in an error:\nGET /api/v1/users-info?role={{online_role}} -H 'Cookie: AuthSession=OFFLINE_USER_SESSION;' HTTP/1.1 400 Bad Request Content-Type: application/json { \"code\": 400, \"error\": \"Missing required query params: role and/or facility_id\" }","example-3#Example":"POST /api/v1/upgrade { \"build\": { \"namespace\": \"medic\", \"application\": \"medic\", \"version\": \"3.0.0-beta.1\" } } For potential forwards compatibility, you must pass the namespace and application as medic.\nThe version should correspond to a release, pre-release or branch that has been pushed to our builds server, which is currently hard-coded to https://staging.dev.medicmobile.org/builds. This happens automatically upon a successful Continuous Integration run.\nCalling this endpoint will eventually cause api and sentinel to restart.\nIt is expected that the caller ensures forwards or backwards compatibility is maintained between deployed versions. This endpoint does not stop you from “upgrading” to an earlier version, or a branch that is incompatible with your current state.","example-4#Example":"GET /api/v1/hydrate?doc_ids=[\"id1\",\"missingId\",\"id3\"] HTTP/1.1 200 OK Content-Type: application/json [ { \"id\": \"id1\", \"doc\": { \u003c...the hydrated document...\u003e } }, { \"id\": \"missingId1\", \"error\": \"not_found\" }, { \"id\": \"id3\", \"doc\": { \u003c...the hydrated document...\u003e } }, ]","example-5#Example":"POST /api/v1/hydrate Content-Type: application/json { \"doc_ids\": [\"id1\",\"missingId\",\"id3\"] } HTTP/1.1 200 OK Content-Type: application/json [ { \"id\": \"id1\", \"doc\": { \u003c...the hydrated document...\u003e } }, { \"id\": \"missingId\", \"error\": \"not_found\" }, { \"id\": \"id3\", \"doc\": { \u003c...the hydrated document...\u003e } }, ]","example-6#Example":"GET /api/v1/contacts-by-phone?phone=\"%2B40-(744)-999-999\" HTTP/1.1 200 OK Content-Type: application/json { \"ok\": true, \"docs\": { { \u003c... first hydrated matching contact found ...\u003e }, { \u003c... second hydrated matching contact found ...\u003e }, ... } }","example-7#Example":"POST /api/v1/contacts-by-phone Content-Type: application/json { \"phone\": \"+40 (21) 222-3333\" } HTTP/1.1 200 OK Content-Type: application/json { \"ok\": true, \"docs\": { { \u003c... first hydrated matching contact found ...\u003e }, { \u003c... second hydrated matching contact found ...\u003e }, ... } }","example-8#Example":"GET /api/v1/users-doc-count?user=mary\" HTTP/1.1 200 OK Content-Type: application/json { \"limit\": 10000, \"users\": { \"_id\": \"replication-count-mary\", \"_rev\": \"5-cd3252e852ae075da216c3c3fe461291\", \"user\": \"mary\", \"date\": 1595328973273, \"count\": 58 } }","example-response#Example response":"[ { \"user\": \"org.couchdb.user:demo\", \"deviceId\": \"8d2acf57-202d-4359-9abe-9ff7b78ed328\", \"date\": \"2025-09-11\", \"browser\": { \"name\": \"Chrome\", \"version\": \"109.0.0.0\" }, \"android\": \"11\", \"apk\": \"v1.9.0-local\", \"cht\": \"5.0.0\", \"settings\": \"4-75d6279cd125fc47d86eb30c1fcc748f\", \"storageFree\": 16713310208, \"storageTotal\": 26544680960 } ]","examples#Examples":"2011-10-10T14:48:00-0300 2016-07-01T13:48:24+00:00 2016-07-01T13:48:24Z 1467383343484 (MS since Epoch)","examples-1#Examples":"/api/v2/export/messages","examples-10#Examples":"Create new person and place hierarchy.\nPOST /api/v1/people Content-Type: application/json { \"name\": \"Hannah\", \"phone\": \"+2548277210095\", \"type\": \"contact\", \"contact_type\": \"patient\", \"place\": { \"name\": \"CHP Area One\", \"type\": \"health_center\", \"parent\": { \"name\": \"CHP Branch One\", \"type\": \"district_hospital\" } } } Create new person and assign existing place.\nPOST /api/v1/people Content-Type: application/json { \"name\": \"Samuel\", \"place\": \"1d83f2b4a27eceb40df9e9f9ad06d137\", \"type\": \"contact\", \"contact_type\": \"chp\" } Example response:\nHTTP/1.1 200 OK Content-Type: application/json { \"id\": \"71df9d25ed6732ea3b4435862510d115\", \"rev\": \"1-a4060843d78f46a60a6f41051e40e3b5\" }","examples-11#Examples":"Get a place by uuid:\nGET /api/v1/place/d9153705-4574-43c3-b945-71aa2164d1d6 HTTP/1.1 200 OK Content-Type: application/json; charset=utf-8 { \"_id\": \"d9153705-4574-43c3-b945-71aa2164d1d6\", \"_rev\": \"2-5f5fde4a8def0f40f89bd164d93bed4f\", \"parent\": { \"_id\": \"b935ef10-0339-4263-99fc-34d4f8d72891\" }, \"type\": \"health_center\", \"name\": \"Example Health Center\", \"contact\": { \"_id\": \"f512e1d8-841b-4bc1-8154-b6794755f45b\", \"parent\": { \"_id\": \"d9153705-4574-43c3-b945-71aa2164d1d6\", \"parent\": { \"_id\": \"b935ef10-0339-4263-99fc-34d4f8d72891\" } } }, \"reported_date\": 1708453778059, \"place_id\": \"17437\" } Get a place by uuid with lineage:\nGET /api/v1/place/d9153705-4574-43c3-b945-71aa2164d1d6?with_lineage=true HTTP/1.1 200 OK Content-Type: application/json; charset=utf-8 { \"_id\": \"d9153705-4574-43c3-b945-71aa2164d1d6\", \"_rev\": \"2-5f5fde4a8def0f40f89bd164d93bed4f\", \"parent\": { \"_id\": \"b935ef10-0339-4263-99fc-34d4f8d72891\", \"_rev\": \"2-bdea703bfec184085c31a6bab022764f\", \"parent\": \"\", \"type\": \"district_hospital\", \"name\": \"Example Health Facility\", \"contact\": { \"_id\": \"e5237f20-2d28-4272-8006-c4903e032ab4\", \"_rev\": \"3-5a0a8e95cef8bafc186a9494c75afb3c\", \"type\": \"person\", \"name\": \"Example Supervisor\", \"date_of_birth\": \"2002-02-20\", \"phone\": \"+254712345678\", \"sex\": \"female\", \"role\": \"chw_supervisor\", \"reported_date\": 1708453756441, \"parent\": { \"_id\": \"b935ef10-0339-4263-99fc-34d4f8d72891\" }, \"patient_id\": \"20424\" }, \"reported_date\": 1708453756440, \"place_id\": \"54380\" }, \"type\": \"health_center\", \"name\": \"Example Health Center\", \"contact\": { \"_id\": \"f512e1d8-841b-4bc1-8154-b6794755f45b\", \"_rev\": \"3-9dbc362b262f88d63f270fe06a94dfe8\", \"type\": \"person\", \"name\": \"Example CHW\", \"date_of_birth\": \"2002-02-20\", \"phone\": \"+254712345679\", \"sex\": \"female\", \"role\": \"chw\", \"reported_date\": 1708453778059, \"parent\": { \"_id\": \"d9153705-4574-43c3-b945-71aa2164d1d6\", \"parent\": { \"_id\": \"b935ef10-0339-4263-99fc-34d4f8d72891\" } }, \"patient_id\": \"74615\" }, \"reported_date\": 1708453778059, \"place_id\": \"17437\" }","examples-12#Examples":"Get places of type clinic. GET /api/v1/place?type=clinic HTTP/1.1 200 OK Content-Type: application/json; charset=utf-8 { \"data\": [ { \"_id\": \"1c5c9538-4832-47f4-9398-e113ec0bc856\", \"_rev\": \"1-ec14166e5a1b0014d923a6c0aef85362\", \"parent\": { \"_id\": \"8f98977e-8475-4bef-a064-2ba305b93f3f\", \"parent\": { \"_id\": \"a7922ef9-ea7a-47d9-b3eb-b78b13d31460\" } }, \"type\": \"clinic\", \"is_name_generated\": \"true\", \"name\": \"A clinic\", \"external_id\": \"\", \"notes\": \"\", \"contact\": { \"_id\": \"a4e075ce-66cb-47bf-afe8-4c72d1674852\" }, \"geolocation\": \"\", \"meta\": { \"created_by\": \"medic\", \"created_by_person_uuid\": \"\", \"created_by_place_uuid\": \"\" }, \"reported_date\": 1722842989644, \"form_version\": { \"time\": 1720158606678, \"sha256\": \"c533208263cb5892a50ede65acd31553863a1b9ac84d2b19e993ddc6f9690e1b\" } }, { \"_id\": \"be9eb905-1dd3-4957-89ed-b74d080a8246\", \"_rev\": \"1-d1444e92bd1973e9d8366c0a55346c0a\", \"parent\": { \"_id\": \"b132829c-6267-4d4f-aa8e-11862828e65f\", \"parent\": { \"_id\": \"a7922ef9-ea7a-47d9-b3eb-b78b13d31460\" } }, \"type\": \"clinic\", \"is_name_generated\": \"true\", \"name\": \"B clinic\", \"external_id\": \"\", \"notes\": \"\", \"contact\": { \"_id\": \"99ea9cf6-8bef-475c-a769-3db0d1888f22\" }, \"geolocation\": \"\", \"meta\": { \"created_by\": \"medic\", \"created_by_person_uuid\": \"\", \"created_by_place_uuid\": \"\" }, \"reported_date\": 1722004087809, \"form_version\": { \"time\": 1720158606678, \"sha256\": \"c533208263cb5892a50ede65acd31553863a1b9ac84d2b19e993ddc6f9690e1b\" } }, ... // 98 more records or less if database has less than 100 records ], \"cursor\": null } Get 2 places of type clinic by using cursor 1. GET /api/v1/place?type=clinic\u0026cursor=1\u0026limit=2 HTTP/1.1 200 OK Content-Type: application/json; charset=utf-8 { \"data\": [ { \"_id\": \"1c5c9538-4832-47f4-9398-e113ec0bc856\", \"_rev\": \"1-ec14166e5a1b0014d923a6c0aef85362\", \"parent\": { \"_id\": \"8f98977e-8475-4bef-a064-2ba305b93f3f\", \"parent\": { \"_id\": \"a7922ef9-ea7a-47d9-b3eb-b78b13d31460\" } }, \"type\": \"clinic\", \"is_name_generated\": \"true\", \"name\": \"A clinic\", \"external_id\": \"\", \"notes\": \"\", \"contact\": { \"_id\": \"a4e075ce-66cb-47bf-afe8-4c72d1674852\" }, \"geolocation\": \"\", \"meta\": { \"created_by\": \"medic\", \"created_by_person_uuid\": \"\", \"created_by_place_uuid\": \"\" }, \"reported_date\": 1722842989644, \"form_version\": { \"time\": 1720158606678, \"sha256\": \"c533208263cb5892a50ede65acd31553863a1b9ac84d2b19e993ddc6f9690e1b\" } }, { \"_id\": \"be9eb905-1dd3-4957-89ed-b74d080a8246\", \"_rev\": \"1-d1444e92bd1973e9d8366c0a55346c0a\", \"parent\": { \"_id\": \"b132829c-6267-4d4f-aa8e-11862828e65f\", \"parent\": { \"_id\": \"a7922ef9-ea7a-47d9-b3eb-b78b13d31460\" } }, \"type\": \"clinic\", \"is_name_generated\": \"true\", \"name\": \"B clinic\", \"external_id\": \"\", \"notes\": \"\", \"contact\": { \"_id\": \"99ea9cf6-8bef-475c-a769-3db0d1888f22\" }, \"geolocation\": \"\", \"meta\": { \"created_by\": \"medic\", \"created_by_person_uuid\": \"\", \"created_by_place_uuid\": \"\" }, \"reported_date\": 1722004087809, \"form_version\": { \"time\": 1720158606678, \"sha256\": \"c533208263cb5892a50ede65acd31553863a1b9ac84d2b19e993ddc6f9690e1b\" } } ], \"cursor\": \"3\" }","examples-13#Examples":"Create new place referencing existing parent.\nPOST /api/v1/places Content-Type: application/json { \"name\": \"Busia Clinic\", \"type\": \"clinic\", \"parent\": \"1d83f2b4a27eceb40df9e9f9ad06d137\" } Create child and parent places.\nPOST /api/v1/places Content-Type: application/json { \"name\": \"CHP Area One\", \"type\": \"health_center\", \"parent\": { \"name\": \"CHP Branch One\", \"type\": \"district_hospital\" } } Also creates contact (person).\nPOST /api/v1/places Content-Type: application/json { \"name\": \"CHP Area One\", \"type\": \"health_center\", \"parent\": { \"name\": \"CHP Branch One\", \"type\": \"district_hospital\" }, \"contact\": { \"name\": \"Paul\", \"phone\": \"+254883720611\" } } Or assigns them.\nPOST /api/v1/places Content-Type: application/json { \"name\": \"CHP Area One\", \"type\": \"health_center\", \"parent\": { \"name\": \"CHP Branch One\", \"type\": \"district_hospital\" }, \"contact\": \"71df9d25ed6732ea3b4435862510ef8e\" } Example success response:\nHTTP/1.1 200 OK Content-Type: application/json { \"id\": \"71df9d25ed6732ea3b4435862510d115\", \"rev\": \"1-a4060843d78f46a60a6f41051e40e3b5\" } Error response if facility structure is not correct:\nHTTP/1.1 400 Bad Request Content-Type: text/plain Health Centers should have \"district_hospital\" parent type.","examples-14#Examples":"Update a place’s contact.\nPOST /api/v1/places/1d83f2b4a27eceb40df9e9f9ad06d137 Content-Type: application/json { \"contact\": \"71df9d25ed6732ea3b4435862505f7a9\" } HTTP/1.1 200 OK Content-Type: application/json { \"id\": \"1d83f2b4a27eceb40df9e9f9ad06d137\", \"rev\": \"12-a4060843d78f46a60a6f41051e40e3b5\" }","examples-15#Examples":"Get a report by uuid:\nGET /api/v1/report/232a3938-9b1c-4d88-bbd8-8ebd6a688b2d HTTP/1.1 200 OK Content-Type: application/json; charset=utf-8 { \"_id\": \"232a3938-9b1c-4d88-bbd8-8ebd6a688b2d\", \"_rev\": \"1-68ec4e77bbba238ef09dab5e8c8131e7\", \"form\": \"pregnancy_danger_sign\", \"type\": \"data_record\", \"content_type\": \"xml\", \"reported_date\": 1742380956176, \"fields\": { \"patient_uuid\": \"1f605fc1-ec99-44e3-af38-055d47b72991\", \"patient_age_in_years\": 34, \"patient_name\": \"Della Runolfsdottir\", \"t_danger_signs_referral_follow_up_date\": \"2025-03-18T13:14:08.030Z\", \"t_danger_signs_referral_follow_up\": \"yes\", \"danger_signs\": { \"danger_signs_note\": \"\", \"danger_signs_question_note\": \"\", \"vaginal_bleeding\": \"yes\", \"fits\": \"no\", \"severe_abdominal_pain\": \"yes\", \"severe_headache\": \"no\", \"very_pale\": \"yes\", \"fever\": \"yes\", \"reduced_or_no_fetal_movements\": \"yes\", \"breaking_water\": \"yes\", \"easily_tired\": \"no\", \"face_hand_swelling\": \"yes\", \"breathlessness\": \"no\", \"r_danger_sign_present\": \"yes\", \"refer_patient_note_1\": \"\", \"refer_patient_note_2\": \"\" } }, \"contact\": { \"_id\": \"1f605fc1-ec99-44e3-af38-055d47b72991\", \"parent\": { \"_id\": \"637756e8-6f4d-4f96-8971-23e930fb0562\", \"parent\": { \"_id\": \"9246ada7-85c6-427a-8a48-7790f56b8c44\", \"parent\": { \"_id\": \"e795199a-924d-4901-8bff-46cb7db2fc34\" } } } } } Get a report by uuid with lineage:\nGET /api/v1/report/232a3938-9b1c-4d88-bbd8-8ebd6a688b2d?with_lineage=true HTTP/1.1 200 OK Content-Type: application/json; charset=utf-8 { \"_id\": \"232a3938-9b1c-4d88-bbd8-8ebd6a688b2d\", \"_rev\": \"1-68ec4e77bbba238ef09dab5e8c8131e7\", \"form\": \"pregnancy_danger_sign\", \"type\": \"data_record\", \"content_type\": \"xml\", \"reported_date\": 1742380956176, \"fields\": { \"patient_id\": \"74615\", \"place_id\": \"54380\", \"patient_age_in_years\": 34, \"t_danger_signs_referral_follow_up_date\": \"2025-03-18T13:14:08.030Z\", \"t_danger_signs_referral_follow_up\": \"yes\", \"danger_signs\": { \"danger_signs_note\": \"\", \"danger_signs_question_note\": \"\", \"vaginal_bleeding\": \"yes\", \"fits\": \"no\", \"severe_abdominal_pain\": \"yes\", \"severe_headache\": \"no\", \"very_pale\": \"yes\", \"fever\": \"yes\", \"reduced_or_no_fetal_movements\": \"yes\", \"breaking_water\": \"yes\", \"easily_tired\": \"no\", \"face_hand_swelling\": \"yes\", \"breathlessness\": \"no\", \"r_danger_sign_present\": \"yes\", \"refer_patient_note_1\": \"\", \"refer_patient_note_2\": \"\" } }, \"contact\": { \"_id\": \"f512e1d8-841b-4bc1-8154-b6794755f45b\", \"_rev\": \"3-9dbc362b262f88d63f270fe06a94dfe8\", \"type\": \"person\", \"name\": \"Example CHW\", \"date_of_birth\": \"2002-02-20\", \"phone\": \"+254712345679\", \"sex\": \"female\", \"role\": \"chw\", \"reported_date\": 1708453778059, \"parent\": { \"_id\": \"d9153705-4574-43c3-b945-71aa2164d1d6\", \"parent\": { \"_id\": \"b935ef10-0339-4263-99fc-34d4f8d72891\" } } }, \"patient\": { \"_id\": \"0c9cc77d-7858-44dd-bf44-a25b14334801\", \"_rev\": \"1-5fd1e08353c3d102e9b6710eed98dd65\", \"type\": \"person\", \"name\": \"A\", \"date_of_birth\": \"1961-09-15\", \"sex\": \"male\", \"reported_date\": 1722840232495, \"patient_id\": \"74615\", \"parent\": { \"_id\": \"d828971b-d796-45b5-ab1a-943622d906a1\", \"_rev\": \"1-1c8e9ae54655e1892686e854e7d404ea\", \"type\": \"health_center\", \"name\": \"Health Center\", \"external_id\": \"GlghB\", \"notes\": \"Turbo amor utilis surgo vomica cedo.\\nAlveus tabella tondeo itaque.\", \"reported_date\": 1742160968002, \"parent\": { \"_id\": \"3bb8af4d-ee91-4889-9e11-5ba09a833b2e\", \"_rev\": \"1-6b109ceccdfcd13f9f78968262d8c82a\", \"type\": \"district_hospital\", \"name\": \"Hospital\", \"external_id\": \"Xge4N\", \"notes\": \"Attonbitus sperno cernuus.\\nVarius temeritas suadeo cimentarius tum.\", \"reported_date\": 1741973509708 } } }, \"place\": { \"_id\": \"b935ef10-0339-4263-99fc-34d4f8d72891\", \"_rev\": \"2-bdea703bfec184085c31a6bab022764f\", \"parent\": \"\", \"type\": \"district_hospital\", \"name\": \"Example Health Facility\", \"contact\": { \"_id\": \"e5237f20-2d28-4272-8006-c4903e032ab4\", \"_rev\": \"3-5a0a8e95cef8bafc186a9494c75afb3c\", \"type\": \"person\", \"name\": \"Example Supervisor\", \"date_of_birth\": \"2002-02-20\", \"phone\": \"+254712345678\", \"sex\": \"female\", \"role\": \"chw_supervisor\", \"reported_date\": 1708453756441, \"parent\": { \"_id\": \"b935ef10-0339-4263-99fc-34d4f8d72891\" } }, \"reported_date\": 1708453756440, \"place_id\": \"54380\" }, }","examples-16#Examples":"Get an array of report UUIDs with freetext abc. GET /api/v1/report/uuid?freetext=abc HTTP/1.1 200 OK Content-Type: application/json; charset=utf-8 { \"data\": [ \"0003d4cd-1f52-48ad-9238-bbbddd1c022f\", \"00078d1a-687f-49d0-8930-21d79f2e05a9\", \"000f3c80-e22b-4738-a1a9-3212756d00d9\", \"001b6346-c8be-48b3-8bc1-1ef8ea4ed907\", \"003d4976-fe39-4ad8-b530-3878fbf0746f\", \"00405b80-070e-4adf-9b15-52399380307b\", \"0058269a-061c-4e51-a854-583d5a34ea3e\", \"005a840b-fa9f-440e-be68-235e50870639\", \"00afc504-cd27-4b05-b9d7-b50765802314\", \"00d35973-3365-4653-a0bb-ba8c2d00099d\" ], \"cursor\": null } Get an array of 10 report UUIDs with freetext abc after skipping some amount of reports. GET /api/v1/report/uuid?type=person\u0026freetext=abc\u0026limit=10\u0026cursor=W1t7InZhbHVlIjoyLjczNTQ2MTIsIkB0eXBlIjoiZmxvY5nIn1dXQ== HTTP/1.1 200 OK Content-Type: application/json; charset=utf-8 { \"data\": [ \"00f8d77a-c672-48ee-b6e4-d508ee207e83\", \"010a727b-7251-4d48-8a0f-4d711429f661\", \"01192e60-b7f6-4423-a37f-53e458f3d8b3\", \"012c6ab4-e0ad-4e36-9984-905b02b82607\", \"014a4b49-7a4f-460e-9718-c64e5754010d\", \"0162a9c9-9b91-4e83-b296-3095d5c5dd21\", \"018bbfd2-ac0b-41a7-a0b6-0ab50a5950c4\", \"01be86c2-1638-4a60-af2e-3857e806e84a\", \"01c3db83-b27c-46de-b709-21032a170642\", \"01fbd96b-bd77-40aa-bc08-a1d3a877b9e2\" ], \"cursor\": \"W1t7InZhbHVlIjoyLjczNTQ2MTIsIkB0eXBlIjoiZmxvYXQifSx73LTEzOGYyZjljOWRhMiIsIkB0eXBlIjoic3RyaW5nIn1dXQ==\" }","examples-17#Examples":"Get list of users:\nGET /api/v1/users HTTP/1.1 200 OK Content-Type: application/json; charset=utf-8 [ { \"id\": \"org.couchdb.user:admin\", \"rev\": \"10-6486428924d11781c107ea74de6b63b6\", \"type\": \"admin\", \"username\": \"admin\" }, { \"id\": \"org.couchdb.user:demo\", \"rev\": \"14-8758c8493edcc6dac50366173fc3e24a\", \"type\": \"district-manager\", \"fullname\": \"Example User\", \"username\": \"demo\", \"place\": { \"_id\": \"eeb17d6d-5dde-c2c0-62c4a1a0ca17d38b\", \"type\": \"district_hospital\", \"name\": \"Sample District\", \"contact\": { \"_id\": \"eeb17d6d-5dde-c2c0-62c4a1a0ca17fd17\", \"type\": \"person\", \"name\": \"Paul\", \"phone\": \"+2868917046\" } }, \"contact\": { \"_id\": \"eeb17d6d-5dde-c2c0-62c4a1a0ca17fd17\", \"type\": \"person\", \"name\": \"Paul\", \"phone\": \"+2868917046\" } } ]","examples-18#Examples":"Get list of users:\nGET /api/v2/users HTTP/1.1 200 OK Content-Type: application/json; charset=utf-8 [ { \"id\": \"org.couchdb.user:admin\", \"rev\": \"10-6486428924d11781c107ea74de6b63b6\", \"roles\": [ \"admin\" ], \"username\": \"admin\" }, { \"id\": \"org.couchdb.user:demo\", \"rev\": \"14-8758c8493edcc6dac50366173fc3e24a\", \"roles\": [ \"district_admin\", \"data_user\" ], \"fullname\": \"Example User\", \"username\": \"demo\", \"oidc_username\": \"demo@email.com\", \"place\": { \"_id\": \"eeb17d6d-5dde-c2c0-62c4a1a0ca17d38b\", \"type\": \"district_hospital\", \"name\": \"Sample District\", \"contact\": { \"_id\": \"eeb17d6d-5dde-c2c0-62c4a1a0ca17fd17\", \"type\": \"person\", \"name\": \"Paul\", \"phone\": \"+2868917046\" } }, \"contact\": { \"_id\": \"eeb17d6d-5dde-c2c0-62c4a1a0ca17fd17\", \"type\": \"person\", \"name\": \"Paul\", \"phone\": \"+2868917046\" } } ] Get users with a specific facility_id:\nGET /api/v2/users?facility_id=eeb17d6d-5dde-c2c0-62c4a1a0ca17d38b HTTP/1.1 200 OK Content-Type: application/json; charset=utf-8 [ { \"id\": \"org.couchdb.user:demo\", \"rev\": \"14-8758c8493edcc6dac50366173fc3e24a\", \"roles\": [ \"district_admin\", \"data_user\" ], \"fullname\": \"Example User\", \"username\": \"demo\", \"oidc_username\": \"demo@email.com\", \"place\": { \"_id\": \"eeb17d6d-5dde-c2c0-62c4a1a0ca17d38b\", \"type\": \"district_hospital\", \"name\": \"Sample District\", \"contact\": { \"_id\": \"eeb17d6d-5dde-c2c0-62c4a1a0ca17fd17\", \"type\": \"person\", \"name\": \"Paul\", \"phone\": \"+2868917046\" } }, \"contact\": { \"_id\": \"eeb17d6d-5dde-c2c0-62c4a1a0ca17fd17\", \"type\": \"person\", \"name\": \"Paul\", \"phone\": \"+2868917046\" } } ] Get users with a specific contact_id:\nGET /api/v2/users?contact_id=eeb17d6d-5dde-c2c0-62c4a1a0ca17fd17 HTTP/1.1 200 OK Content-Type: application/json; charset=utf-8 [ { \"id\": \"org.couchdb.user:demo\", \"rev\": \"14-8758c8493edcc6dac50366173fc3e24a\", \"roles\": [ \"district_admin\", \"data_user\" ], \"fullname\": \"Example User\", \"username\": \"demo\", \"oidc_username\": \"demo@email.com\", \"place\": { \"_id\": \"eeb17d6d-5dde-c2c0-62c4a1a0ca17d38b\", \"type\": \"district_hospital\", \"name\": \"Sample District\", \"contact\": { \"_id\": \"eeb17d6d-5dde-c2c0-62c4a1a0ca17fd17\", \"type\": \"person\", \"name\": \"Paul\", \"phone\": \"+2868917046\" } }, \"contact\": { \"_id\": \"eeb17d6d-5dde-c2c0-62c4a1a0ca17fd17\", \"type\": \"person\", \"name\": \"Paul\", \"phone\": \"+2868917046\" } } ]","examples-19#Examples":"Get a user by username:\nGET /api/v2/users/demo HTTP/1.1 200 OK Content-Type: application/json; charset=utf-8 { \"id\": \"org.couchdb.user:demo\", \"rev\": \"14-8758c8493edcc6dac50366173fc3e24a\", \"type\": \"district-manager\", \"fullname\": \"Example User\", \"username\": \"demo\", \"oidc_username\": \"demo@email.com\", \"place\": { \"_id\": \"eeb17d6d-5dde-c2c0-62c4a1a0ca17d38b\", \"type\": \"district_hospital\", \"name\": \"Sample District\", \"contact\": { \"_id\": \"eeb17d6d-5dde-c2c0-62c4a1a0ca17fd17\", \"type\": \"person\", \"name\": \"Paul\", \"phone\": \"+2868917046\" } }, \"contact\": { \"_id\": \"eeb17d6d-5dde-c2c0-62c4a1a0ca17fd17\", \"type\": \"person\", \"name\": \"Paul\", \"phone\": \"+2868917046\" } }","examples-2#Examples":"Get list of forms currently installed.\nGET /api/v1/forms HTTP/1.1 200 Content-Type: application/json; charset=utf-8 [\"anc_visit.xml\",\"anc_registration.xml\",\"off.xml\", \"off.json\"] Get OpenRosa XForms compatible forms installed in XML format.\nGET /api/v1/forms Host: medic.local X-OpenRosa-Version: 1.0 HTTP/1.1 200 OK Content-Type: text/xml; charset=utf-8 X-OpenRosa-Version: 1.0 \u003c?xml version=\"1.0\" encoding=\"UTF-8\"?\u003e Visit ANCVisit md5:1f0f096602ed794a264ab67224608cf4 http://medic.local/api/v1/forms/anc_visit.xml Registration with LMP PregnancyRegistration md5:1f0f096602ed794a264ab67224608cf4 http://medic.local/api/v1/forms/anc_registration.xml Stop Stop md5:1f0f096602ed794a264ab67224608cf4 http://medic.local/api/v1/forms/off.xml","examples-20#Examples":"","examples-21#Examples":"POST /api/v1/users/mary Content-Type: application/json { \"password\": \"secret\", \"place\": \"eeb17d6d-5dde-c2c0-62c4a1a0ca17e342\" } HTTP/1.1 200 OK Content-Type: application/json { \"user\": { \"id\": \"org.couchdb.user:mary\", \"rev\": \"23-858e01fafdfa0d367d798fe5b44751ff\" }, \"user-settings\": { \"id\": \"org.couchdb.user:mary\", \"rev\": \"17-c6d03b86d2d5d70f7270c85e67fea96d\" } }","examples-22#Examples":"DELETE /api/v1/users/mary HTTP/1.1 200 OK","examples-23#Examples":"POST /api/v1/bulk-delete Content-Type: application/json { \"docs\": [ { \"_id\": \"id1\" }, { \"_id\": \"id2\" }, ... { \"_id\": \"id150\" } ] } HTTP/1.1 200 OK Content-Type: application/json [ [ { \"ok\": true, \"id\": \"id1\", \"rev\": \"1-rev1\" }, { \"ok\": true, \"id\": \"id2\", \"rev\": \"1-rev2\" }, ... { \"ok\": true, \"id\": \"id100\", \"rev\": \"1-rev100\" } ], [ { \"ok\": true, \"id\": \"id101\", \"rev\": \"1-rev101\" }, { \"ok\": true, \"id\": \"id102\", \"rev\": \"1-rev102\" }, ... { \"ok\": true, \"id\": \"id150\", \"rev\": \"1-rev150\" } ] ]","examples-24#Examples":"","examples-25#Examples":"","examples-3#Examples":"Get latest version of the PregnancyRegistration form in xml (XForms) format.\nGET /api/v1/forms/pregnancyregistration.xml Get the latest version of the NPYY form in JSON format.\nGET /api/v1/forms/NPYY.json","examples-4#Examples":"POST /api/v1/forms/validate HTTP/1.1 Content-Type: application/xml Authorization: Basic XXXXXXXXXX \u003c?xml version=\"1.0\" encoding=\"UTF-8\"?\u003e Visit ANCVisit md5:1f0f096602ed794a264ab67224608cf4 http://medic.local/api/v1/forms/anc_visit.xml Registration with LMP PregnancyRegistration md5:1f0f096602ed794a264ab67224608cf4 http://medic.local/api/v1/forms/anc_registration.xml Stop Stop md5:1f0f096602ed794a264ab67224608cf4 http://medic.local/api/v1/forms/off.xml Example response when the form passed the validations:\nHTTP/1.1 200 OK Content-Type: application/json {ok: true} Example response when the form failed the validations:\nHTTP/1.1 400 Bad Request Content-Type: application/json {error: \"Error transforming xml. xsltproc return ...\"}","examples-5#Examples":"Creating new record using message field.\nPOST /api/v2/records Content-Type: application/x-www-form-urlencoded message=1!YYYZ!Sam#23#2015#ANC\u0026from=+5511943348031\u0026sent_timestamp=1352399720000 HTTP/1.1 200 OK Content-Type: application/json; charset=utf-8 { \"success\": true, \"id\": \"364c796a843fbe0a73476f9153012733\" } Creating new record with JSON.\nPOST /api/v2/records Content-Type: application/json { \"nurse\": \"Sam\", \"week\": 23, \"year\": 2015, \"visit\": \"ANC\", \"_meta\": { \"form\": \"YYYZ\", \"reported_date\": 1352399720000 } } HTTP/1.1 200 OK Content-Type: application/json; charset=utf-8 { \"success\": true, \"id\": \"364c796a843fbe0a73476f9153012733\" }","examples-6#Examples":"Get a contact by uuid:\nGET /api/v1/contact/d1c560e2-a07b-4562-a775-a2c7d0a9766f HTTP/1.1 200 OK Content-Type: application/json; charset=utf-8 { \"_id\": \"d1c560e2-a07b-4562-a775-a2c7d0a9766f\", \"_rev\": \"1-d13970de1501783cc52de0fd6db8beaf\", \"type\": \"person\", \"name\": \"Person Person\", \"short_name\": \"August\", \"date_of_birth\": \"1990-3-0\", \"date_of_birth_method\": \"\", \"ephemeral_dob\": { \"dob_calendar\": \"1990-3-0\", \"dob_method\": \"\", \"dob_approx\": \"1990-04-01T02:12:34.933Z\", \"dob_raw\": \"1990-3-0\", \"dob_iso\": \"1990-3-0\" }, \"sex\": \"female\", \"phone\": \"+254777205792\", \"phone_alternate\": \"\", \"role\": \"patient\", \"external_id\": \"\", \"notes\": \"\", \"meta\": { \"created_by\": \"medic\", \"created_by_person_uuid\": \"\", \"created_by_place_uuid\": \"\" }, \"reported_date\": 1742012068469, \"parent\": { \"_id\": \"a048aa9d-3fd0-4182-a7c1-ed65cbf29aa0\", \"parent\": { \"_id\": \"d828971b-d796-45b5-ab1a-943622d906a1\", \"parent\": { \"_id\": \"3bb8af4d-ee91-4889-9e11-5ba09a833b2e\" } } } } Get a contact with their lineage by uuid:\nGET /api/v1/contact/d1c560e2-a07b-4562-a775-a2c7d0a9766f?with_lineage=true { \"_id\": \"d1c560e2-a07b-4562-a775-a2c7d0a9766f\", \"_rev\": \"1-d13970de1501783cc52de0fd6db8beaf\", \"type\": \"person\", \"name\": \"Person\", \"short_name\": \"August\", \"date_of_birth\": \"1990-3-0\", \"date_of_birth_method\": \"\", \"ephemeral_dob\": { \"dob_calendar\": \"1990-3-0\", \"dob_method\": \"\", \"dob_approx\": \"1990-04-01T02:12:34.933Z\", \"dob_raw\": \"1990-3-0\", \"dob_iso\": \"1990-3-0\" }, \"sex\": \"female\", \"phone\": \"+254777205792\", \"phone_alternate\": \"\", \"role\": \"patient\", \"external_id\": \"\", \"notes\": \"\", \"meta\": { \"created_by\": \"medic\", \"created_by_person_uuid\": \"\", \"created_by_place_uuid\": \"\" }, \"reported_date\": 1742012068469, \"parent\": { \"_id\": \"a048aa9d-3fd0-4182-a7c1-ed65cbf29aa0\", \"_rev\": \"1-bc7ed2cf5e5997734513faab5f818c3e\", \"type\": \"clinic\", \"name\": \"Household\", \"external_id\": \"rR9Ul\", \"notes\": \"Atque non carmen patruus rem toties ceno uredo ad.\\nPossimus aro victoria nam terra clamo campana.\", \"meta\": { \"created_by\": \"medic\", \"created_by_person_uuid\": \"\", \"created_by_place_uuid\": \"\" }, \"reported_date\": 1740727312910, \"parent\": { \"_id\": \"d828971b-d796-45b5-ab1a-943622d906a1\", \"_rev\": \"1-1c8e9ae54655e1892686e854e7d404ea\", \"type\": \"health_center\", \"name\": \"Health Center\", \"external_id\": \"GlghB\", \"notes\": \"Turbo amor utilis surgo vomica cedo.\\nAlveus tabella tondeo itaque.\", \"meta\": { \"created_by\": \"medic\", \"created_by_person_uuid\": \"\", \"created_by_place_uuid\": \"\" }, \"reported_date\": 1742160968002, \"parent\": { \"_id\": \"3bb8af4d-ee91-4889-9e11-5ba09a833b2e\", \"_rev\": \"1-6b109ceccdfcd13f9f78968262d8c82a\", \"type\": \"district_hospital\", \"name\": \"Hospital\", \"external_id\": \"Xge4N\", \"notes\": \"Attonbitus sperno cernuus.\\nVarius temeritas suadeo cimentarius tum.\", \"meta\": { \"created_by\": \"medic\", \"created_by_person_uuid\": \"\", \"created_by_place_uuid\": \"\" }, \"reported_date\": 1741973509708 } } } }","examples-7#Examples":"Get an array of contact UUIDs of type person. GET /api/v1/contact/uuid?type=person HTTP/1.1 200 OK Content-Type: application/json; charset=utf-8 { \"data\": [ \"0003d4cd-1f52-48ad-9238-bbbddd1c022f\", \"00078d1a-687f-49d0-8930-21d79f2e05a9\", \"000f3c80-e22b-4738-a1a9-3212756d00d9\", \"001b6346-c8be-48b3-8bc1-1ef8ea4ed907\", \"003d4976-fe39-4ad8-b530-3878fbf0746f\", \"00405b80-070e-4adf-9b15-52399380307b\", \"0058269a-061c-4e51-a854-583d5a34ea3e\", \"005a840b-fa9f-440e-be68-235e50870639\", \"00afc504-cd27-4b05-b9d7-b50765802314\", \"00d35973-3365-4653-a0bb-ba8c2d00099d\" ], \"cursor\": null } Get an array of contact UUIDs with freetext abc. GET /api/v1/contact/uuid?freetext=abc HTTP/1.1 200 OK Content-Type: application/json; charset=utf-8 { \"data\": [ \"0003d4cd-1f52-48ad-9238-bbbddd1c022f\", \"00078d1a-687f-49d0-8930-21d79f2e05a9\", \"000f3c80-e22b-4738-a1a9-3212756d00d9\", \"001b6346-c8be-48b3-8bc1-1ef8ea4ed907\", \"003d4976-fe39-4ad8-b530-3878fbf0746f\", \"00405b80-070e-4adf-9b15-52399380307b\", \"0058269a-061c-4e51-a854-583d5a34ea3e\", \"005a840b-fa9f-440e-be68-235e50870639\", \"00afc504-cd27-4b05-b9d7-b50765802314\", \"00d35973-3365-4653-a0bb-ba8c2d00099d\" ], \"cursor\": null } Get an array of 10 contact UUIDs with type person and freetext abc after skipping some amount of contacts. GET /api/v1/contact/uuid?type=person\u0026freetext=abc\u0026limit=10\u0026cursor=W1t7InZhbHVlIjoyLjc5MzE5LCJAdHlwZSI6ImZ1dXQ== HTTP/1.1 200 OK Content-Type: application/json; charset=utf-8 { \"data\": [ \"00f8d77a-c672-48ee-b6e4-d508ee207e83\", \"010a727b-7251-4d48-8a0f-4d711429f661\", \"01192e60-b7f6-4423-a37f-53e458f3d8b3\", \"012c6ab4-e0ad-4e36-9984-905b02b82607\", \"014a4b49-7a4f-460e-9718-c64e5754010d\", \"0162a9c9-9b91-4e83-b296-3095d5c5dd21\", \"018bbfd2-ac0b-41a7-a0b6-0ab50a5950c4\", \"01be86c2-1638-4a60-af2e-3857e806e84a\", \"01c3db83-b27c-46de-b709-21032a170642\", \"01fbd96b-bd77-40aa-bc08-a1d3a877b9e2\" ], \"cursor\": \"W1t7InZhbHVlIjoyLjc5MzE5LCJAdHlwZSI6ImZsb2F0In0seyjoic3RyaW5nIn1dXQ==\" }","examples-8#Examples":"Get a person by uuid:\nGET /api/v1/person/f512e1d8-841b-4bc1-8154-b6794755f45b HTTP/1.1 200 OK Content-Type: application/json; charset=utf-8 { \"_id\": \"f512e1d8-841b-4bc1-8154-b6794755f45b\", \"_rev\": \"3-9dbc362b262f88d63f270fe06a94dfe8\", \"type\": \"person\", \"name\": \"Example CHW\", \"date_of_birth\": \"2002-02-20\", \"phone\": \"+254712345679\", \"sex\": \"female\", \"role\": \"chw\", \"reported_date\": 1708453778059, \"parent\": { \"_id\": \"d9153705-4574-43c3-b945-71aa2164d1d6\", \"parent\": { \"_id\": \"b935ef10-0339-4263-99fc-34d4f8d72891\" } }, \"patient_id\": \"74615\" } Get a person by uuid with lineage:\nGET /api/v1/person/f512e1d8-841b-4bc1-8154-b6794755f45b?with_lineage=true HTTP/1.1 200 OK Content-Type: application/json; charset=utf-8 { \"_id\": \"f512e1d8-841b-4bc1-8154-b6794755f45b\", \"_rev\": \"3-9dbc362b262f88d63f270fe06a94dfe8\", \"type\": \"person\", \"name\": \"Example CHW\", \"date_of_birth\": \"2002-02-20\", \"phone\": \"+254712345679\", \"sex\": \"female\", \"role\": \"chw\", \"reported_date\": 1708453778059, \"parent\": { \"_id\": \"d9153705-4574-43c3-b945-71aa2164d1d6\", \"_rev\": \"2-5f5fde4a8def0f40f89bd164d93bed4f\", \"parent\": { \"_id\": \"b935ef10-0339-4263-99fc-34d4f8d72891\", \"_rev\": \"2-bdea703bfec184085c31a6bab022764f\", \"type\": \"district_hospital\", \"name\": \"Example Health Facility\", \"contact\": { \"_id\": \"e5237f20-2d28-4272-8006-c4903e032ab4\", \"_rev\": \"3-5a0a8e95cef8bafc186a9494c75afb3c\", \"type\": \"person\", \"name\": \"Example Supervisor\", \"date_of_birth\": \"2002-02-20\", \"phone\": \"+254712345678\", \"sex\": \"female\", \"role\": \"chw_supervisor\", \"reported_date\": 1708453756441, \"parent\": { \"_id\": \"b935ef10-0339-4263-99fc-34d4f8d72891\" }, \"patient_id\": \"20424\" }, \"reported_date\": 1708453756440, \"place_id\": \"54380\" }, \"type\": \"health_center\", \"name\": \"Example Health Center\", \"contact\": { \"_id\": \"f512e1d8-841b-4bc1-8154-b6794755f45b\", \"_rev\": \"3-9dbc362b262f88d63f270fe06a94dfe8\", \"type\": \"person\", \"name\": \"Example CHW\", \"date_of_birth\": \"2002-02-20\", \"phone\": \"+254712345679\", \"sex\": \"female\", \"role\": \"chw\", \"reported_date\": 1708453778059, \"parent\": { \"_id\": \"d9153705-4574-43c3-b945-71aa2164d1d6\", \"parent\": { \"_id\": \"b935ef10-0339-4263-99fc-34d4f8d72891\" } }, \"patient_id\": \"74615\" }, \"reported_date\": 1708453778059, \"place_id\": \"17437\" }, \"patient_id\": \"74615\" }","examples-9#Examples":"Get people of type person. GET /api/v1/person?type=person HTTP/1.1 200 OK Content-Type: application/json; charset=utf-8 { \"data\": [ { \"_id\": \"0c9cc77d-7858-44dd-bf44-a25b14334801\", \"_rev\": \"1-5fd1e08353c3d102e9b6710eed98dd65\", \"type\": \"person\", \"name\": \"A\", \"short_name\": \"\", \"date_of_birth\": \"1961-09-15\", \"date_of_birth_method\": \"\", \"ephemeral_dob\": { \"dob_calendar\": \"1961-09-15\", \"dob_method\": \"\", \"dob_approx\": \"2024-08-05T00:00:00.000+06:45\", \"dob_raw\": \"1961-09-15\", \"dob_iso\": \"1961-09-15\" }, \"phone\": \"\", \"phone_alternate\": \"\", \"sex\": \"male\", \"role\": \"manager\", \"external_id\": \"\", \"notes\": \"\", \"user_for_contact\": { \"create\": \"false\" }, \"meta\": { \"created_by\": \"medic\", \"created_by_person_uuid\": \"\", \"created_by_place_uuid\": \"\" }, \"reported_date\": 1722840232495, \"parent\": { \"_id\": \"8f98977e-8475-4bef-a064-2ba305b93f3f\", \"parent\": { \"_id\": \"a7922ef9-ea7a-47d9-b3eb-b78b13d31460\" } }, \"form_version\": { \"time\": 1720158606681, \"sha256\": \"b76e6304218d7e5d7f63c044da514784f0db4b293c1b35ac301ac7ec99876824\" } }, { \"_id\": \"6fbd5d57-28aa-4a2a-93aa-e9b9f4a3dde3\", \"_rev\": \"1-3824f633dda834f676d7d27622ed9371\", \"type\": \"person\", \"name\": \"B\", \"short_name\": \"\", \"date_of_birth\": \"1989-02-10\", \"date_of_birth_method\": \"\", \"ephemeral_dob\": { \"dob_calendar\": \"1989-02-10\", \"dob_method\": \"\", \"dob_approx\": \"2024-07-26T00:00:00.000+06:45\", \"dob_raw\": \"1989-02-10\", \"dob_iso\": \"1989-02-10\" }, \"phone\": \"\", \"phone_alternate\": \"\", \"sex\": \"male\", \"role\": \"manager\", \"external_id\": \"\", \"notes\": \"\", \"user_for_contact\": { \"create\": \"false\" }, \"meta\": { \"created_by\": \"medic\", \"created_by_person_uuid\": \"\", \"created_by_place_uuid\": \"\" }, \"reported_date\": 1722004033697, \"parent\": { \"_id\": \"a7922ef9-ea7a-47d9-b3eb-b78b13d31460\" }, \"form_version\": { \"time\": 1720158606680, \"sha256\": \"a2bce7debe191964d6f0a26e0d9cce2ca4437c87a59753688cefac6d2edc9873\" } }, { \"_id\": \"99ea9cf6-8bef-475c-a769-3db0d1888f22\", \"_rev\": \"1-2eea14e985aeffd40b33552b33db55a9\", \"type\": \"person\", \"name\": \"C\", \"short_name\": \"\", \"date_of_birth\": \"1989-02-11\", \"date_of_birth_method\": \"\", \"ephemeral_dob\": { \"dob_calendar\": \"1989-02-11\", \"dob_method\": \"\", \"dob_approx\": \"2024-07-26T00:00:00.000+06:45\", \"dob_raw\": \"1989-02-11\", \"dob_iso\": \"1989-02-11\" }, \"phone\": \"\", \"phone_alternate\": \"\", \"sex\": \"male\", \"role\": \"patient\", \"external_id\": \"\", \"notes\": \"\", \"user_for_contact\": { \"create\": \"false\" }, \"meta\": { \"created_by\": \"medic\", \"created_by_person_uuid\": \"\", \"created_by_place_uuid\": \"\" }, \"reported_date\": 1722004087809, \"parent\": { \"_id\": \"be9eb905-1dd3-4957-89ed-b74d080a8246\", \"parent\": { \"_id\": \"b132829c-6267-4d4f-aa8e-11862828e65f\", \"parent\": { \"_id\": \"a7922ef9-ea7a-47d9-b3eb-b78b13d31460\" } } }, \"form_version\": { \"time\": 1720158606678, \"sha256\": \"c533208263cb5892a50ede65acd31553863a1b9ac84d2b19e993ddc6f9690e1b\" } }, { \"_id\": \"a4e075ce-66cb-47bf-afe8-4c72d1674852\", \"_rev\": \"1-4a5920ecc73521905fa6661b9b142346\", \"type\": \"person\", \"name\": \"D\", \"short_name\": \"\", \"date_of_birth\": \"1991-03-05\", \"date_of_birth_method\": \"\", \"ephemeral_dob\": { \"dob_calendar\": \"1991-03-05\", \"dob_method\": \"\", \"dob_approx\": \"2024-08-05T00:00:00.000+06:45\", \"dob_raw\": \"1991-03-05\", \"dob_iso\": \"1991-03-05\" }, \"phone\": \"\", \"phone_alternate\": \"\", \"sex\": \"male\", \"role\": \"patient\", \"external_id\": \"\", \"notes\": \"\", \"user_for_contact\": { \"create\": \"false\" }, \"meta\": { \"created_by\": \"medic\", \"created_by_person_uuid\": \"\", \"created_by_place_uuid\": \"\" }, \"reported_date\": 1722842989644, \"parent\": { \"_id\": \"1c5c9538-4832-47f4-9398-e113ec0bc856\", \"parent\": { \"_id\": \"8f98977e-8475-4bef-a064-2ba305b93f3f\", \"parent\": { \"_id\": \"a7922ef9-ea7a-47d9-b3eb-b78b13d31460\" } } }, \"form_version\": { \"time\": 1720158606678, \"sha256\": \"c533208263cb5892a50ede65acd31553863a1b9ac84d2b19e993ddc6f9690e1b\" } }, { \"_id\": \"dc2506e6-55c0-4874-a4a1-334fabef3044\", \"_rev\": \"1-a9fa456db5b1aff444819ca91cd07c5b\", \"type\": \"person\", \"name\": \"E\", \"short_name\": \"\", \"date_of_birth\": \"1916-06-14\", \"date_of_birth_method\": \"\", \"ephemeral_dob\": { \"dob_calendar\": \"1916-06-14\", \"dob_method\": \"\", \"dob_approx\": \"2024-07-26T00:00:00.000+06:45\", \"dob_raw\": \"1916-06-14\", \"dob_iso\": \"1916-06-14\" }, \"phone\": \"\", \"phone_alternate\": \"\", \"sex\": \"male\", \"role\": \"manager\", \"external_id\": \"\", \"notes\": \"\", \"user_for_contact\": { \"create\": \"false\" }, \"meta\": { \"created_by\": \"medic\", \"created_by_person_uuid\": \"\", \"created_by_place_uuid\": \"\" }, \"reported_date\": 1722004065958, \"parent\": { \"_id\": \"b132829c-6267-4d4f-aa8e-11862828e65f\", \"parent\": { \"_id\": \"a7922ef9-ea7a-47d9-b3eb-b78b13d31460\" } }, \"form_version\": { \"time\": 1720158606681, \"sha256\": \"b76e6304218d7e5d7f63c044da514784f0db4b293c1b35ac301ac7ec99876824\" } }, ... // 95 more records or less if database has less than 100 records ], \"cursor\": null } Get the second set of 100 people of type person by using cursor 100. GET /api/v1/person?type=person\u0026cursor=100\u0026limit=100 HTTP/1.1 200 OK Content-Type: application/json; charset=utf-8 { \"data\": [ { \"_id\": \"6fbd5d57-28aa-4a2a-93aa-e9b9f4a3dde3\", \"_rev\": \"1-3824f633dda834f676d7d27622ed9371\", \"type\": \"person\", \"name\": \"X\", \"short_name\": \"x\", \"date_of_birth\": \"1989-02-10\", \"date_of_birth_method\": \"\", \"ephemeral_dob\": { \"dob_calendar\": \"1989-02-10\", \"dob_method\": \"\", \"dob_approx\": \"2024-07-26T00:00:00.000+06:45\", \"dob_raw\": \"1989-02-10\", \"dob_iso\": \"1989-02-10\" }, \"phone\": \"\", \"phone_alternate\": \"\", \"sex\": \"male\", \"role\": \"manager\", \"external_id\": \"\", \"notes\": \"\", \"user_for_contact\": { \"create\": \"false\" }, \"meta\": { \"created_by\": \"medic\", \"created_by_person_uuid\": \"\", \"created_by_place_uuid\": \"\" }, \"reported_date\": 1722004033697, \"parent\": { \"_id\": \"a7922ef9-ea7a-47d9-b3eb-b78b13d31460\" }, \"form_version\": { \"time\": 1720158606680, \"sha256\": \"a2bce7debe191964d6f0a26e0d9cce2ca4437c87a59753688cefac6d2edc9873\" } }, { \"_id\": \"99ea9cf6-8bef-475c-a769-3db0d1888f22\", \"_rev\": \"1-2eea14e985aeffd40b33552b33db55a9\", \"type\": \"person\", \"name\": \"Y\", \"short_name\": \"y\", \"date_of_birth\": \"1989-02-11\", \"date_of_birth_method\": \"\", \"ephemeral_dob\": { \"dob_calendar\": \"1989-02-11\", \"dob_method\": \"\", \"dob_approx\": \"2024-07-26T00:00:00.000+06:45\", \"dob_raw\": \"1989-02-11\", \"dob_iso\": \"1989-02-11\" }, \"phone\": \"\", \"phone_alternate\": \"\", \"sex\": \"male\", \"role\": \"patient\", \"external_id\": \"\", \"notes\": \"\", \"user_for_contact\": { \"create\": \"false\" }, \"meta\": { \"created_by\": \"medic\", \"created_by_person_uuid\": \"\", \"created_by_place_uuid\": \"\" }, \"reported_date\": 1722004087809, \"parent\": { \"_id\": \"be9eb905-1dd3-4957-89ed-b74d080a8246\", \"parent\": { \"_id\": \"b132829c-6267-4d4f-aa8e-11862828e65f\", \"parent\": { \"_id\": \"a7922ef9-ea7a-47d9-b3eb-b78b13d31460\" } } }, \"form_version\": { \"time\": 1720158606678, \"sha256\": \"c533208263cb5892a50ede65acd31553863a1b9ac84d2b19e993ddc6f9690e1b\" } }, { \"_id\": \"a4e075ce-66cb-47bf-afe8-4c72d1674852\", \"_rev\": \"1-4a5920ecc73521905fa6661b9b142346\", \"type\": \"person\", \"name\": \"Z\", \"short_name\": \"z\", \"date_of_birth\": \"1991-03-05\", \"date_of_birth_method\": \"\", \"ephemeral_dob\": { \"dob_calendar\": \"1991-03-05\", \"dob_method\": \"\", \"dob_approx\": \"2024-08-05T00:00:00.000+06:45\", \"dob_raw\": \"1991-03-05\", \"dob_iso\": \"1991-03-05\" }, \"phone\": \"\", \"phone_alternate\": \"\", \"sex\": \"male\", \"role\": \"patient\", \"external_id\": \"\", \"notes\": \"\", \"user_for_contact\": { \"create\": \"false\" }, \"meta\": { \"created_by\": \"medic\", \"created_by_person_uuid\": \"\", \"created_by_place_uuid\": \"\" }, \"reported_date\": 1722842989644, \"parent\": { \"_id\": \"1c5c9538-4832-47f4-9398-e113ec0bc856\", \"parent\": { \"_id\": \"8f98977e-8475-4bef-a064-2ba305b93f3f\", \"parent\": { \"_id\": \"a7922ef9-ea7a-47d9-b3eb-b78b13d31460\" } } }, \"form_version\": { \"time\": 1720158606678, \"sha256\": \"c533208263cb5892a50ede65acd31553863a1b9ac84d2b19e993ddc6f9690e1b\" } } ], \"cursor\": \"4\" }","export#Export":"Request different types of data in various formats.\nEach of the export endpoints except contacts, feedback, and user-devices supports a parameter which returns date formatted in human readable form (ISO 8601). Setting this parameter to false or leaving it out will return dates formatted as an epoch timestamp.\nTo set this parameter for a GET request use:\nhttp://admin:pass@localhost:5988/api/v2/export/messages?options[humanReadable]=true To set this parameter for a POST request submit this as the request body:\n{ \"options\": { \"humanReadable\": true } }","form-parameters#Form Parameters":"Variable Description message Message string in a supported format like Muvuku or Textforms. Depending if your CHT instance is configured in forms-only mode or not you might receive an error if the form is not found. from Reporting phone number. sent_timestamp Timestamp in MS since Unix Epoch of when the message was received on the gateway. Defaults to now.","forms#Forms":"","get-apiv1contacts-by-phone#GET /api/v1/contacts-by-phone":"","get-apiv1contactuuid#GET /api/v1/contact/uuid":"Added in 4.18.0\nReturns a JSON array of strings of UUID’s of contacts based on the specified page parameters.","get-apiv1express-metrics#GET /api/v1/express-metrics":"Added in 4.3.0\nUsed to retrieve a range of metrics for monitoring CHT API’s performance and internals. This API is used by CHT Watchdog.\nThe response is formatted for the Prometheus Data Model. The metrics exposed are defined by the prometheus-api-metrics package and include optional default metrics and garbage collection metrics.","get-apiv1forms#GET /api/v1/forms":"Returns a list of currently installed forms (in all available formats) in JSON format.","get-apiv1formsidformat#GET /api/v1/forms/{{id}}.{{format}}":"Return form definition for a given form ID and format.","get-apiv1hydrate#GET /api/v1/hydrate":"","get-apiv1monitoring#GET /api/v1/monitoring":"DEPRECATED: use /api/v2/monitoring\nUsed to retrieve a range of metrics about the instance. While the output is human-readable this is intended for automated monitoring allowing for tracking trends over time and alerting about potential issues.","get-apiv1person#GET /api/v1/person":"Added in 4.11.0\nReturns a JSON array of people based on the specified page parameters.","get-apiv1personuuid#GET /api/v1/person/{{uuid}}":"Added in 4.9.0\nReturns a person’s data in JSON format.","get-apiv1place#GET /api/v1/place":"Added in 4.12.0\nReturns a JSON array of places based on the specified page parameters.","get-apiv1placeuuid#GET /api/v1/place/{{uuid}}":"Added in 4.10.0\nReturns a place’s data in JSON format.","get-apiv1reportuuid#GET /api/v1/report/uuid":"Added in 4.18.0\nReturns a JSON array of strings of UUID’s of reports based on the specified page parameters.","get-apiv1settings#GET /api/v1/settings":"Returns the settings in JSON format.","get-apiv1users#GET /api/v1/users":"DEPRECATED: use /api/v2/users\nReturns a list of users and their profile data in JSON format.","get-apiv1users-doc-count#GET /api/v1/users-doc-count":"","get-apiv1users-info#GET /api/v1/users-info":"Returns the total number of documents an offline user would replicate (total_docs), the number of docs excluding tasks the user would replicate (warn_docs), along with a warn flag if this number exceeds the recommended limit (now set at 10 000).\nWhen the authenticated requester has an offline role, it returns the requester doc count.","get-apiv2exportcontacts#GET /api/v2/export/contacts":"Returns a JSON array of contacts.","get-apiv2exportdhis#GET /api/v2/export/dhis":"Exports target data formatted as a DHIS2 dataValueSet. The data can be filtered to a specific section of the contact hierarchy or for a given time interval.\nParameter Description dataSet A DHIS2 dataSet ID. Targets associated with this dataSet will have their data aggregated. (required) date.from Filter the target data to be aggregated to be within the month of this timestamp. (required) orgUnit Filter the target data to only that associated with contacts with attribute { dhis: { orgUnit } }. (optional) { \"filters\": { \"dataSet\": \"VMuFODsyWaO\", \"date\": { \"from\": 949392000000, }, \"orgUnit\": \"KbY9DJ8mBkx\" } }","get-apiv2exportfeedback#GET /api/v2/export/feedback":"Export a file containing the user feedback.","get-apiv2exportmessages#GET /api/v2/export/messages":"Download messages.","get-apiv2exportreports#GET /api/v2/export/reports":"It uses the search shared library to ensure identical results in the export and the front-end. It also only supports exporting CSV so we can efficiently stream infinitely large exports.","get-apiv2exportuser-devices#GET /api/v2/export/user-devices":"Added in 4.7.0\nReturns a JSON array of CHT-related software versions and device information for each user device. This information is derived from the latest telemetry entry for each user device. If a particular user has used multiple devices, an entry will be included for each device. You can reference the date value to determine which devices have been recently used. If multiple users used the same physical device (e.g. they were logged into the same phone at different times), an entry will be included for each user.","get-apiv2monitoring#GET /api/v2/monitoring":"Available as of 3.12.x. Used to retrieve a range of metrics about the instance. While the output is human-readable this is intended for automated monitoring allowing for tracking trends over time and alerting about potential issues.","get-apiv2users#GET /api/v2/users":"Added in 4.1.0\nReturns a list of users and their profile data in JSON format.","get-apiv2usersusername#GET /api/v2/users/{{username}}":"Added in 4.7.0\nReturns a user’s profile data in JSON format.","getapiv1contactuuid#GET/api/v1/contact/{{uuid}}":"Added in 4.18.0\nReturns a contact’s data in JSON format.","getapiv1reportuuid#GET/api/v1/report/{{uuid}}":"Added in 4.18.0\nReturns a report’s data in JSON format.","headers#Headers":"Key Value Description X-OpenRosa-Version 1.0 If this header is specified returns XML formatted forms list. See OpenRosa FormListAPI.","headers-1#Headers":"Key Value Description Content-Type application/xml The form is sent in XML format Authorization Basic KEY KEY is the “basic” token","headers-2#Headers":"Key Value Description Content-Type application/x-www-form-urlencoded Processes form parameters. Content-Type application/json Processes form data in request body as JSON. Only one variant of the Content-Type header may be provided; RFC 2616 does not allow multiple content types to appear in a single Content-Type header.","headers-3#Headers":"Key Value Description Content-Type text/csv Processes form data in request body as JSON.","hydrate#Hydrate":"Accepts a JSON array of document uuids and returns fully hydrated documents, in the same order in which they were requested. When documents are not found, an entry with the missing uuid and an error is added instead. Supports both GET and POST. Only allowed for users with “online” roles.","json-format#JSON format":"curl http://localhost:5988/api/v1/monitoring {\"version\":{\"app\":\"3.9.0\",\"node\":\"v10.16.0\",\"couchdb\":\"2.3.1\"},\"couchdb\":{\"medic\":{\"name\":\"medic\",\"update_sequence\":5733,\"doc_count\":278,\"doc_del_count\":32,\"fragmentation\":1.0283517758420173}...","json-format-1#JSON format":"curl http://localhost:5988/api/v2/monitoring {\"version\":{\"app\":\"3.12.0\",\"node\":\"v10.16.0\",\"couchdb\":\"2.3.1\"},\"couchdb\":{\"medic\":{\"name\":\"medic\",\"update_sequence\":5733,\"doc_count\":278,\"doc_del_count\":32,\"fragmentation\":1.0283517758420173}...","json-properties#JSON Properties":"Special values reside in the property _meta, so you can’t have a form field named _meta. Only strings and numbers are currently support as field values.\nAll property names will be lowercased.\nKey Description _meta.form The form code. _meta.from Reporting phone number. Optional. _meta.reported_date Timestamp in MS since Unix Epoch of when the message was received on the gateway. Defaults to now. _meta.locale Optional locale string. Example: ‘fr’","locale-for-sso-users#Locale for SSO users":"When a user logs in via SSO, the CHT app will attempt to localize the interface based on the locale claim returned by the OIDC Provider (otherwise it will fall back to the default locale configured as the first languages entry in the app_settings.json).\nSee Also: Single Sign-On","logging#Logging":"A log entry is created with each bulk import that contains the import status for each user and the import progress status that gets updated throughout the import and finalized upon completion. These entries are saved in the medic-logs database and you can access them by querying documents with a key that starts with bulk-user-upload-.","login-by-oidc#Login by OIDC":"Introduced in 4.20.0. This feature is only compatible with cht-android version v1.5.2 or greater. When SSO Login is enabled (by configuring the oidc_provider settings), a CHT user must be provisioned for each SSO user prior to them logging in. The CHT user’s oidc_username property must be set to the value of the user’s email claim from the OIDC Provider.\nTwo CHT users cannot share the same oidc_username value. Setting the oidc_username property for a user will cause the user’s password (in the CHT) to be set to a random value, preventing them from logging in with other authentication methods. Instead, the user must log in using the “Login with SSO” button.\nWhen creating/editing users via the App Management interface, the “SSO Email Address” field is used to set the oidc_username property.\n(Note: it is possible to have a mixed environment where some users log in with SSO and others log in with other authentication methods. In this case, the oidc_username property is only set for those users who log in with SSO.)","login-by-sms#Login by SMS":"When creating or updating a user, sending a truthy value for the field token_login will enable Login by SMS for this user. This action resets the user’s password to an unknown string and generates a complex 64 character token, that is used to generate a token-login URL. The URL is sent to the user’s phone number by SMS, along with another (configurable) SMS that can contain additional information. Accessing this link, before its expiration time, will log the user in directly - without the need of any other credentials. The link can only be accessed once, the token becomes invalid after being used for one login. The token expires in 24 hours, after which logging in is only possible by either generating a new token, or disabling token_login and manually setting a password.\nThe SMS messages are stored in a doc of a new type login_token. These docs cannot be viewed as reports from the webapp, and can only be edited by admins, but their messages are visible in the Admin Message Queue page.\nTo disable login by SMS for a user, update the user sending token_login with a false value. To regenerate the token, update the user sending token_login with a true value.\ntoken_login user state action undefined new None undefined existent, no token None undefined existent, with token None. Login by SMS remains enabled. Token is unchanged. true new Login by SMS enabled. Token is generated and SMS is sent. true existent, no token Password is reset. Login by SMS enabled. Token is generated and SMS is sent. Existent sessions are invalidated. true existent, with token Password is reset. Login by SMS enabled. New token is generated and SMS is sent. Old token is invalid. Existent sessions are invalidated. false new None. false existent, no token None. false existent, with token Request requires a password. Login by SMS is disabled. Old token is invalidated. Existent sessions are invalidated. This feature uses app_settings.app_url and app_settings.token_login to be defined and enabled. If app_settings.app_url is not defined, the generated token-login URL will use the Host request header, which may not always be correct.\nSee Also: Logging into CHT Apps","monitoring#Monitoring":"See the Monitoring and alerting on the CHT page for how to use this API in production.","optional#Optional":"Key Description place String that references a place or object that defines a new place. reported_date Timestamp of when the record was reported or created. Defaults to now.","optional-properties#Optional Properties":"Key Description contact String identifier for a person or object that defines a new person. reported_date Timestamp of when the record was reported or created. Defaults to now.","output#Output":"Column Description Record UUID The unique ID for the message in the database. Patient ID The generated short patient ID for use in SMS. Reported Date The date the message was received or generated. From This phone number the message is or will be sent from. Contact Name The name of the user this message is assigned to. Message Type The type of the message Message State The state of the message at the time this export was generated Received Timestamp The datetime the message was received. Only applies to incoming messages. Other Timestamps The datetime the message transitioned to each state. Sent By The phone number the message was sent from. Only applies to incoming messages. To Phone The phone number the message is or will be sent to. Only applies to outgoing messages. Message Body The content of the message.","output-1#Output":"Column Description id The unique ID for the contact in the database. rev The current CouchDb revision of contact in the database. name The name of the user this message is assigned to. patient_id The generated short patient ID for use in SMS. type The contact type. For configurable hierarchies, this will always be contact. contact_type The configurable contact type. Will be empty if using the default hierarchy. place_id The generated short place ID for use in SMS.","output-2#Output":"Column Description Added in user The user’s name. CHT 4.7.0 deviceId The unique key for the user’s device. CHT 4.7.0 date The date the telemetry entry was taken in YYYY-MM-DD, see relevant docs. CHT 4.7.0 browser.name The name of the browser used. CHT 4.7.0 browser.version The version of the browser used. CHT 4.7.0 apk The Internal version code of the Android app. CHT 4.7.0 android The version of Android OS. CHT 4.7.0 cht The version of CHT the user was on at time the telemetry entry was generated. CHT 4.7.0 settings The revision of the App Settings document stored in CouchDB. CHT 4.7.0 storageFree The amount of free storage space on the device in bytes. CHT 5.0.0 storageTotal The total storage capacity of the device in bytes. CHT 5.0.0","parameters#Parameters":"Variable Description id Form identifier format Format string or file extension. e.g. xml, json","parameters-1#Parameters":"Parameter Description docs Array of JSON objects with _id properties An array of objects each with an _id property is required (rather than an array of strings representing ids) to ensure forwards compatibility if we choose to require that any additional document information (such as _rev) also be passed in to this endpoint.","parameters-2#Parameters":"Name Required Description doc_ids true A JSON array of document uuids","parameters-3#Parameters":"Name Required Description phone true A string representing a phone number","people#People":"","permissions#Permissions":"can_view_contacts","permissions-1#Permissions":"can_view_contacts","permissions-10#Permissions":"can_view_users","permissions-11#Permissions":"can_view_users","permissions-12#Permissions":"can_view_users","permissions-13#Permissions":"can_create_users","permissions-14#Permissions":"can_create_users","permissions-15#Permissions":"can_update_users, can_update_places, can_update_people","permissions-16#Permissions":"can_delete_users","permissions-17#Permissions":"Only available to online users.","permissions-18#Permissions":"No permissions required.","permissions-19#Permissions":"No permissions required.","permissions-2#Permissions":"can_view_contacts","permissions-20#Permissions":"No permissions required.","permissions-3#Permissions":"can_view_contacts","permissions-4#Permissions":"By default any user can create or modify a place. Use these permissions to restrict access:\ncan_create_people, can_create_places","permissions-5#Permissions":"can_view_contacts","permissions-6#Permissions":"By default any user can create new places. Use these permissions to restrict access:\ncan_create_places, can_create_people","permissions-7#Permissions":"By default any user can update a place. Use these permissions to restrict access:\ncan_update_places","permissions-8#Permissions":"can_view_reports","permissions-9#Permissions":"can_view_reports","person#Person":"","place#Place":"","place-types#Place Types":"Key Description clinic Clinic health_center Health Center district_hospital District Hospital national_office National Office","places#Places":"By default any user can create or modify a place.","post-apisms#POST /api/sms":"Endpoint used by cht-gateway to send sms messages. More documentation in the cht-gateway repo.","post-apiv1bulk-delete#POST /api/v1/bulk-delete":"Bulk delete endpoint for deleting large numbers of documents. Docs will be batched into groups of 100 and will be sent sequentially to couch (new batch sent after the previous one has returned). The response will be chunked JSON (one batch at a time), so if you wish to get an indication of progress you will need to parse incomplete JSON (with a library such as partial-json-parser.","post-apiv1contacts-by-phone#POST /api/v1/contacts-by-phone":"","post-apiv1formsvalidate#POST /api/v1/forms/validate":"Added in 3.12.0\nValidate the XForm passed. Require the can_configure permission.","post-apiv1hydrate#POST /api/v1/hydrate":"","post-apiv1people#POST /api/v1/people":"Create new people.","post-apiv1places#POST /api/v1/places":"Create a new place and optionally a contact.","post-apiv1placesid#POST /api/v1/places/{{id}}":"Update a place and optionally its contact.","post-apiv1smsaggregatorendpoint#POST /api/v1/sms/{aggregator}/{endpoint}":"Endpoint for integration with SMS aggregators. More details on the RapidPro and Africa’s Talking pages.","post-apiv1upgrade#POST /api/v1/upgrade":"Performs a complete upgrade to the provided version. This is equivalent of calling /api/v1/upgrade/stage and then /api/v1/upgrade/complete once staging has finished.","post-apiv1upgradecomplete#POST /api/v1/upgrade/complete":"Completes a staged upgrade. Throws a 404 if there is no upgrade in the staged position.","post-apiv1upgradestage#POST /api/v1/upgrade/stage":"Stages an upgrade to the provided version. Does as much of the upgrade as possible without actually swapping versions over and restarting.\nParameters are the same as /api/v1/upgrade.\nYou know that an upgrade has been staged when the horti-upgrade document in CouchDB has \"action\": \"stage\" and \"staging_complete\": true.","post-apiv1users#POST /api/v1/users":"Create new users with a place and a contact.\nCreating multiple users at once by passing an array of users was introduced in version 3.15. All users need to meet the following requirements before any of them are created:\nAll required fields are filled in The password is at least 8 characters long and difficult to guess The phone number is valid when token_login is enabled Users are created in parallel and the creation is not aborted even if one of the users fails to be created.\nPassing a single user in the request’s body will return a single object whereas passing an array of users will return an array of objects as shown in the examples below.","post-apiv1usersusername#POST /api/v1/users/{{username}}":"Allows you to change property values on a user account. Properties listed above are supported except for contact.parent. Creating or modifying people through the user is not supported, see the People section.","post-apiv2records#POST /api/v2/records":"Create a new record based on a JSON form that has been configured.\nRecords can be created one of two ways, parsing the form data yourself and submitting a JSON object or by submitting the raw message string.","post-apiv2users#POST /api/v2/users":"Added in 3.16.0\nCreate new users with a place and a contact from a CSV file.\nCreating users from a CSV file behaves the same as passing a JSON array of users into the POST /api/v1/users where a row represents a user object and a column represents a user object property. Columns with a :excluded suffix will be ignored, this allows providing a more user-friendly experience with autocompletion on fields or dealing with names instead of long, unreadable ids.\nIn order to facilitate this process, we have made available a spreadsheet compatible with the default configuration of the CHT. Click here to make a copy of the spreadsheet in Google Sheets. A guide on how to import users with this spreadsheet from within the Admin Console is available in case you don’t want to interact with this API yourself.","put-apiv1credentials#PUT /api/v1/credentials":"Added in 4.0.0\nProvide the credential key as a URL parameter and the password in the request body, for example, to set a credential with key “mykey” and password “my pass” use the following command.\ncurl -X PUT -H \"Content-Type: text/plain\" https://:@/api/v1/credentials/mykey -d 'my pass'","put-apiv1settings#PUT /api/v1/settings":"","query-parameters#Query Parameters":"Variable Description overwrite Whether to replace settings document with input document. If both replace and overwrite are set, then it overwrites only. Defaults to replace. replace Whether to replace existing settings for the given properties or to merge. Defaults to false (merging). Returns a JSON object with two fields:\n{ \"success\": true, \"upgraded\": false } Variable Type Description success Boolean Always true upgraded Boolean Whether the settings doc was updated or not","query-parameters-1#Query parameters":"These are identical to the JS objects passed to the shared library, as if you were using it directly in Javascript.\nYou may either pass JSON in the request body using POST:\nPOST /api/v2/export/reports { \"filters\": { \"forms\": { \"selected\": [ { \"code\": \"immunization_visit\" } ] } } } Or using form-style parameters as GET:\nGET /api/v2/export/reports?filters[search]=\u0026filters[forms][selected][0][code]=immunization_visit NB: this API is bound directly to this library. For more information on what queries you can perform with the search library, see its documentation.","query-parameters-10#Query parameters":"Name Required Description with_lineage false Added in 4.22.0. If “true”, the report’s contact, patient, and/or place lineage will be included in the returned data. Default is “false”.","query-parameters-11#Query Parameters":"Name Required Description freetext true A string search term for filtering the reports to fetch. The string value should be at least 3 characters in length and not contain whitespace. cursor false The token identifying which page to retrieve. A null value indicates the first page should be returned. Subsequent pages can be retrieved by providing the cursor returned with the previous page. Defaults to null. limit false The total number of reports to fetch. Defaults to 10000.","query-parameters-12#Query Parameters":"Variable Description facility_id Added in 4.7.0. String identifier representing the uuid of the user’s facility. contact_id Added in 4.7.0. String identifier representing the uuid of the user’s associated contact.","query-parameters-13#Query Parameters":"Variable Description Required facility_id String identifier representing the uuid of the user’s facility true role String identifier representing the user role - must be configured as an offline role. Accepts valid UTF-8 JSON array for multiple of roles. true contact_id String identifier representing the uuid of the user’s associated contact false When requested as an online user, the number of tasks are never counted and never returned, so warn_docs is always equal to total_docs.","query-parameters-14#Query parameters":"Name Required Description doc_ids true A JSON array of document uuids","query-parameters-15#Query parameters":"Name Required Description phone true A URL encoded string representing a phone number","query-parameters-16#Query parameters":"Name Required Description user false User’s name","query-parameters-2#Query Parameters":"Variable Description format The format of the returned file, either ‘csv’ or ‘xml’. Defaults to ‘csv’. locale Locale for translatable data. Defaults to ’en’. tz The timezone to show date values in, as an offset in minutes from GMT, for example ‘-120’. skip_header_row ’true’ to omit the column headings. Defaults to ‘false’.","query-parameters-3#Query parameters":"These are identical to the JS objects passed to the shared library, as if you were using it directly in Javascript.\nYou may either pass JSON in the request body using POST:\nPOST /api/v2/export/contacts { \"filters\": { \"search\": \"jim\" } } Or using form-style parameters as GET:\nGET /api/v2/export/contacts?filters[search]=jim","query-parameters-4#Query parameters":"Name Required Description with_lineage false If “true”, the contact’s parent lineage will be included in the returned data. Default is “false”.","query-parameters-5#Query Parameters":"Name Required Description type true if freetext is not provided ID of the contact_type for the contacts to fetch. freetext true if type is not provided A string search term for filtering the contacts to fetch. The string value should be at least 3 characters in length and not contain whitespace. cursor false The token identifying which page to retrieve. A null value indicates the first page should be returned. Subsequent pages can be retrieved by providing the cursor returned with the previous page. Defaults to null. limit false The total number of contacts to fetch. Defaults to 10000.","query-parameters-6#Query parameters":"Name Required Description with_lineage false If “true”, the person’s parent lineage will be included in the returned data. Default is “false”.","query-parameters-7#Query Parameters":"Name Required Description type true ID of the contact_type for the people to fetch. cursor false The token identifying which page to retrieve. A null value indicates the first page should be returned. Subsequent pages can be retrieved by providing the cursor returned with the previous page. Defaults to null. limit false The total number of people to fetch. Defaults to 100.","query-parameters-8#Query parameters":"Name Required Description with_lineage false If “true”, the place’s parent lineage will be included in the returned data. Default is “false”.","query-parameters-9#Query Parameters":"Name Required Description type true ID of the contact_type for the places to fetch. cursor false The token identifying which page to retrieve. A null value indicates the first page should be returned. Subsequent pages can be retrieved by providing the cursor returned with the previous page. Defaults to null. limit false The total number of places to fetch. Defaults to 100.","records#Records":"","replication-limit#Replication Limit":"Added in 3.11.0\nReturns the quantity of documents that were replicated by each user. Accepts filtering by user name, when not provided, it returns all users. Supports GET. Only allowed for users with “_admin” role.","report#Report":"","required#Required":"Key Description name String used to describe the person. type ID of the contact_type for the new person. Defaults to ‘person’ for backwards compatibility.","required-properties#Required Properties":"Key Description name String used to describe the place. type Place type parent String that references a place or object that defines a new place. Optional for District Hospital and National Office types.","response-content#Response content":"JSON path Type Description version.app String The version of the webapp. version.node String The version of NodeJS. version.couchdb String The version of CouchDB. couchdb..name String The name of the db, usually one of “medic”, “medic-sentinel”, “medic-users-meta”, “_users”. couchdb..update_sequence Number The number of changes in the db. couchdb..doc_count Number The number of docs in the db. couchdb..doc_del_count Number The number of deleted docs in the db. couchdb..fragmentation Number The fragmentation of the entire db (including view indexes) as stored on disk. A lower value is better. 1 is no fragmentation. couchdb..sizes.active Number The size in bytes of live data inside the database. This includes documents, metadata, and attachments, but does not include view indexes. Requires CHT Core 4.11.0 or later. couchdb..sizes.file Number The size in bytes of the database file on disk. This includes documents, metadata, and attachments, but does not include view indexes. Requires CHT Core 4.11.0 or later. couchdb..view_indexes[*].name String The name of the view index (the design). See the table below for which view indexes are tracked for each db. Requires CHT Core 4.11.0 or later. couchdb..view_indexes[*].sizes.active Number The size in bytes of live data inside the view. Requires CHT Core 4.11.0 or later. couchdb..view_indexes[*].sizes.file Number The size in bytes of the view as stored on disk. Requires CHT Core 4.11.0 or later. date.current Number The current server date in millis since the epoch, useful for ensuring the server time is correct. date.uptime Number How long API has been running in seconds. sentinel.backlog Number Number of changes yet to be processed by Sentinel. messaging.outgoing.state.due Number The number of messages due to be sent. messaging.outgoing.state.scheduled Number The number of messages scheduled to be sent in the future. messaging.outgoing.state.muted Number The number of messages that are muted and therefore will not be sent. messaging.outgoing.state.delivered Number The number of messages that have been delivered or sent. As of 3.12.x. messaging.outgoing.state.failed Number The number of messages have failed to be delivered. As of 3.12.x outbound_push.backlog Number Number of changes yet to be processed by Outbound Push. feedback.count Number Number of feedback docs created usually indicative of client side errors. conflict.count Number Number of doc conflicts which need to be resolved manually. replication_limit.count Number Number of users that exceeded the replication limit of documents. connected_users.count Number Number of users that have connected to the api in a given number of days. The period defaults to 7 days but this can be changed by adding connected_user_interval as a query parameter e.g. http://localhost:5988/api/v1/monitoring?connected_user_interval=14","response-content-1#Response content":"JSON path Type Description version.app String The version of the webapp. version.node String The version of NodeJS. version.couchdb String The version of CouchDB. couchdb..name String The name of the db, usually one of “medic”, “medic-sentinel”, “medic-users-meta”, “_users”. couchdb..update_sequence Number The number of changes in the db. couchdb..doc_count Number The number of docs in the db. couchdb..doc_del_count Number The number of deleted docs in the db. couchdb..fragmentation Number The fragmentation of the entire db (including view indexes) as stored on disk. A lower value is better. 1 is no fragmentation. couchdb..sizes.active Number The size in bytes of live data inside the database. This includes documents, metadata, and attachments, but does not include view indexes. Requires CHT Core 4.11.0 or later. couchdb..sizes.file Number The size in bytes of the database file on disk. This includes documents, metadata, and attachments, but does not include view indexes. Requires CHT Core 4.11.0 or later. couchdb..view_indexes[*].name String The name of the view index (the design). See the table below for which view indexes are tracked for each db. Requires CHT Core 4.11.0 or later. couchdb..view_indexes[*].sizes.active Number The size in bytes of live data inside the view. Requires CHT Core 4.11.0 or later. couchdb..view_indexes[*].sizes.file Number The size in bytes of the view as stored on disk. Requires CHT Core 4.11.0 or later. date.current Number The current server date in millis since the epoch, useful for ensuring the server time is correct. date.uptime Number How long API has been running. sentinel.backlog Number Number of changes yet to be processed by Sentinel. messaging.outgoing.total.due Number The number of messages due to be sent. messaging.outgoing.total.scheduled Number The number of messages scheduled to be sent in the future. messaging.outgoing.total.muted Number The number of messages that are muted and therefore will not be sent. messaging.outgoing.total.delivered Number The number of messages that have been delivered or sent. messaging.outgoing.total.failed Number The number of messages have failed to be delivered. messaging.outgoing.seven_days.due Number The number of messages due to be sent in the last seven days. messaging.outgoing.seven_days.scheduled Number The number of messages that were scheduled to be sent in the last seven days. messaging.outgoing.seven_days.muted Number The number of messages that were due in the last seven days and are muted. messaging.outgoing.seven_days.delivered Number The number of messages that were due in the last seven days and have been delivered or sent. messaging.outgoing.seven_days.failed Number The number of messages that were due in the last seven days and have failed to be delivered. messaging.outgoing.last_hundred.pending Object Counts within last 100 messages that have received status updates, and are one of the “pending” group statuses messaging.outgoing.last_hundred.pending.pending Number Number of messages that are pending messaging.outgoing.last_hundred.pending.forwarded-to-gateway Number Number of messages that are forwarded-to-gateway messaging.outgoing.last_hundred.pending.received-by-gateway Number Number of messages that are received-by-gateway messaging.outgoing.last_hundred.pending.forwarded-by-gateway Number Number of messages that are forwarded-by-gateway messaging.outgoing.last_hundred.final Object Counts within last 100 messages that have received status updates, and are in one of the “final” group statuses messaging.outgoing.last_hundred.final.sent Number Number of messages that are sent messaging.outgoing.last_hundred.final.delivered Number Number of messages that are delivered messaging.outgoing.last_hundred.final.failed Number Number of messages that are failed messaging.outgoing.last_hundred.muted Object Counts within last 100 messages that have received status updates, and are in one of the “muted” group statuses messaging.outgoing.last_hundred.final.denied Number Number of messages that are denied messaging.outgoing.last_hundred.final.cleared Number Number of messages that are cleared messaging.outgoing.last_hundred.final.muted Number Number of messages that are muted messaging.outgoing.last_hundred.final.duplicate Number Number of messages that are duplicate outbound_push.backlog Number Number of changes yet to be processed by Outbound Push. feedback.count Number Number of feedback docs created usually indicative of client side errors. conflict.count Number Number of doc conflicts which need to be resolved manually. replication_limit.count Number Number of users that exceeded the replication limit of documents. connected_users.count Number Number of users that have connected to the api in a given number of days. The period defaults to 7 days but this can be changed by adding connected_user_interval as a query parameter e.g. http://localhost:5988/api/v2/monitoring?connected_user_interval=14","response-when-some-users-failed-to-be-created#Response when some users failed to be created":"HTTP/1.1 200 Content-Type: application/json [ { \"contact\": { \"id\": \"65416b8ceb53ff88ac1847654501aeb3\", \"rev\": \"1-0b74d219ae13137c1a06f03a0a52e187\" }, \"user-settings\": { \"id\": \"org.couchdb.user:mary\", \"rev\": \"1-6ac1d36b775143835f4af53f9895d7ae\" }, \"user\": { \"id\": \"org.couchdb.user:mary\", \"rev\": \"1-c3b82a0b47cfe68edd9284c89bebbae4\" } }, { \"error\": \"Failed to find place.\" } ]","response-when-some-users-failed-to-be-created-1#Response when some users failed to be created":"HTTP/1.1 200 Content-Type: application/json [ { \"contact\": { \"id\": \"65416b8ceb53ff88ac1847654501aeb3\", \"rev\": \"1-0b74d219ae13137c1a06f03a0a52e187\" }, \"user-settings\": { \"id\": \"org.couchdb.user:mary\", \"rev\": \"1-6ac1d36b775143835f4af53f9895d7ae\" }, \"user\": { \"id\": \"org.couchdb.user:mary\", \"rev\": \"1-c3b82a0b47cfe68edd9284c89bebbae4\" } }, { \"error\": \"Failed to find place.\" } ]","response-when-the-username-already-exists#Response when the username already exists":"HTTP/1.1 400 Bad Request Content-Type: application/json { \"code\": 400, \"error\": { \"message\": \"Username \\\"mary\\\" already taken.\", \"translationKey\": \"username.taken\", \"translationParams\": { \"username\": \"mary\" } } }","response-when-the-username-already-exists-1#Response when the username already exists":"HTTP/1.1 400 Bad Request Content-Type: application/json [ { \"error\": \"Missing required fields: username\" } ]","response-when-users-are-missing-required-fields#Response when users are missing required fields":"HTTP/1.1 400 Bad Request Content-Type: application/json { \"code\": 400, \"error\": \"Missing required fields:\\n\\Missing fields username, password, type or roles for user at index 0\\nMissing fields password, type or roles for user at index 1\", \"details\": { \"failingIndexes\": [ { \"fields\": [ \"username\", \"password\", \"type or roles\" ], \"index\": 0 }, { \"fields\": [ \"password\", \"type or roles\" ], \"index\": 1 } ] } }","response-when-users-are-missing-required-fields-1#Response when users are missing required fields":"HTTP/1.1 400 Bad Request Content-Type: application/json [ { \"error\": \"Missing required fields: username\" }, { \"error\": \"Missing required fields: password\" } ]","settings#Settings":"Get and update the app settings.","sms#SMS":"","supported-properties#Supported Properties":"Use JSON in the request body to specify a person’s details.\nNote: this does not accommodate having a place field on your form and will likely be revised soon.","supported-properties-1#Supported Properties":"Use JSON in the request body to specify a place’s details.","supported-properties-2#Supported Properties":"Use JSON in the request body to specify user details. Any properties submitted that are not on the list below will be ignored. Any properties not included will be undefined.\nName Required Type Description Version username yes String identifier used for authentication roles yes Array place yes, if the roles contain an offline role string or object Place identifier string (UUID) or object this user resides in. contact yes, if the roles contain an offline role string or object A person identifier string (UUID) or object based on the form configured in the app. password yes, if token_login or oidc_username is not set for the user String Password string used for authentication. Only allowed to be set, not retrieved. phone yes, if token_login is enabled for the user String Valid phone number token_login no Boolean A boolean representing whether or not the Login by SMS should be enabled for this user. 3.10.0 fullname no String Full name email no String Email address known no Boolean Boolean to define if the user has logged in before. password_change_required no Boolean Set false to avoid the user being prompted to reset their password the next time they log in. 4.17.0 oidc_username no String A unique username for authenticating via OIDC. This value must match the email claim returned for the user by the OIDC provider. 4.20.0","supported-view-indexes#Supported view indexes":"Requires CHT Core 4.11.0 or later.\nmedic database: medic medic-admin medic-client medic-conflicts medic-scripts medic-sms medic-sentinel database: sentinel medic-users-meta database: users-meta _users database: users","updating-yourself#Updating yourself":"You do not need any of the above permissions if the user you are modifying is yourself. However, you are not allowed to modify your type, roles, contact or place.\nFurther more, if you’re updating your password you must be authenticating via Basic Auth (either the header or in the URL). This is to ensure the password is known at time of request, and no one is hijacking a cookie.","upgrades#Upgrades":"All of these endpoints require the can_configure permission.\nAll of these endpoints are asynchronous. Progress can be followed by watching the horti-upgrade document and looking at the log property.","url-parameters#URL Parameters":"Variable Description username String identifier used for authentication.","url-parameters-1#URL Parameters":"Variable Description username String identifier used for authentication.","users#Users":"All user related requests are limited to users with admin privileges by default."},"title":"API"},"/building/reference/app-settings/":{"data":{"":"The settings which control CHT apps are defined in the app_settings.json file, and stored in the settings doc in the database. Some settings can be modified in the App Management app, which updates the same settings file in the database.\nThe settings get compiled into the app_settings.json file with the compile-app-settings action in the cht-conf tool. Manually configurable settings are added to the app_settings folder at the root of the config folder. The app_settings/base_settings.json file can be manually edited to modify individual settings. forms, schedules, and assetlinks sections can be defined in separate files named app_settings/forms.json, app_settings/schedules.json, and app_settings/assetlinks.json respectively with the settings in the files overriding what might be already present in the app_settings/base_settings.json or app_settings.json files.\nMost sections are described on their own in the Reference Documentation.","app_settingsjson#\u003ccode\u003eapp_settings.json\u003c/code\u003e":"Setting Description Default Version phone_validation “full”: full validation of a phone number for a region using length and prefix information.“partial”: quickly guesses whether a number is a possible phone number by using only the length information, much faster than a full validation.“none”: allows almost any values but still fails for any phone that contains a-z chars. “full” 3.1.0 uhc.contacts_default_sort “alpha”: Sort contacts alphanumerically“last_visited_date”: sort contacts by the date they were most recently visited. “alpha” 2.18.0 uhc.visit_count.month_start_date The date of each month when the visit count is reset to 0. 1 2.18.0 uhc.visit_count.visit_count_goal The monthly visit count goal. 0 2.18.0 outgoing_deny_list All outgoing messages will be denied (unsent) if the recipient phone number starts with an entry in this list. A comma delimited list. (eg. outgoing_deny_list=\"253,ORANGE\" will deny all messages sent to 253 543 4448 and ORANGE NET) \"\" outgoing_deny_shorter_than Deny all messages to recipient phone numbers which are shorter than this value. Intended to avoid message loops with short codes used by gateways (eg. 60396). An integer. 6 3.3.0 outgoing_deny_with_alphas When true, deny all messages to recipient phone numbers containing letters (eg. Safaricom). Intended to avoid message loops with non-numeric senders used by gateways. A boolean. true 3.3.0 outgoing_deny_with_alphas When true, deny all messages to recipient phone numbers containing letters (eg. Safaricom). Intended to avoid message loops with non-numeric senders used by gateways. A boolean. true 3.3.0 task_day_limit The number of days before a task is due to show the due date. 4 3.9.0 app_url The URL of the app, eg: “https://demo.app.medicmobile.org” 3.10.0 task_days_overdue Display number of overdue days in tasks list false 3.13.0 languages Array of objects with locale and enabled properties representing respectively the 2 or 3 letter language code and whether that language should be enabled. If unset it falls back to the previous behavior of relying on the enabled property of each translation document messages-XX.properties. This fallback behavior is now deprecated and will be removed in the next major version (5.0). This languages configuration property will be required for CHT 5.0+. 4.2.0 place_hierarchy_types Array of contact types’ IDs, should match the ones defined in contact_types. This is used to define the Place Filter’s options in Reports tab. 2.15.0 assetlinks Array of Digital Asset Links definitions. This is used to associate your CHT instance’s domain to your Android app to verify app links. 4.7.0","build#Build":"To include your settings into your app, you must compile them to include modular components, then upload them to your instance.\ncht --local compile-app-settings backup-app-settings upload-app-settings","code-sample#Code sample":"The following translation label includes the name field of contact, along with the submitted patient_name field, and the generated patient_id field.","combining-rules#Combining rules":"Prior to 4.15.0 you could not combine certain rules. Check this bug report for more information.\nContent in this section .accept_case_reports .assetlinks .contact_types .dhis_data_sets .forms .header_tabs .oidc_provider .outbound .patient_reports .permissions .registrations .reminders .replication_depth .replications [deprecated] .roles .schedules .sms .token_login .transitions","date-format-filters#Date Format Filters":"The following filter functions are available for formatting dates.\nfilter description date Displays dates according to the date_format specified in app_settings. See doc for Moment.js format for details. datetime Displays dates according to the reported_date_format specified in app_settings. See doc for Moment.js format for details. bikram_sambat_date Displays dates in Bikram Sambat calendar (most commonly used calendar in Nepal). Currently display format is hardcoded to e.g. “१५ चैत २०७३”.","message-context#Message context":"The message context object consists of:\nproperty value description every property from the original report unchanged unless specified below every fields property from the original report eg: if the report has fields.test = 'test' then context.test = 'test' patient deeply hydrated patient contact (resolved from patient_id, fields.patient_id or fields.patient_uuid) patient_name patient’s name place deeply hydrated place document (resolved from place_id or fields.place_id) contact deeply hydrated submitter contact parent deeply hydrated health_center type document from the subject’s or submitter’s lineage grandparent deeply hydrated district_hospital type document from the subject’s or submitter’s lineage clinic deeply hydrated clinic type document from the subject’s or submitter’s lineage health_center deeply hydrated health_center type document from the subject’s or submitter’s lineage district_hospital deeply hydrated district_hospital type document from the subject’s or submitter’s lineage","operators#Operators":"The available operators are:\nOperator Description \u0026\u0026 and || or ! not a ? b : c ternary, ie: if ‘a’ is true, then check ‘b’, otherwise check ‘c’ () nested blocks, eg: a \u0026\u0026 (b || c)","optional-settings#Optional Settings":"The following settings do not need to be specified. They should only be defined when the default implementation needs to be changed.","recipient-values-and-resolutions#\u003ccode\u003erecipient\u003c/code\u003e values and resolutions:":"value resolves to empty submitter reporting_unit submitter parent primary contact of the subject’s/submitter’s place’s parent (patient.parent.parent.contact) grandparent primary contact of the subject’s/submitter’s place’s grandparent (patient.parent.parent.parent.contact) clinic primary contact of the clinic in the subject’s/submitter’s lineage health_center primary contact of the health_center in the subject’s/submitter’s lineage district primary contact of the district_hospital in the subject’s/submitter’s lineage ancestor: Walks up the subject’s/submitter’s hierarchy to find the primary contact of a place with the given contact type. link: Tries to find a directly linked document with the given tag; if not found, walks up the lineage (but not limited to primary contact). Available since v3.10.x link: primary contact of the place of the requested contact_type in the subject’s/submitter’s lineage. As of 3.10.x custom object path a direct object path in the message context object eg: patient.parent.contact.other_phone valid phone number requested phone number Note\nif recipient resolution does not yield a phone number, it will default to submitter’s phone number if there is no submitter phone number available, the actual recipient property value will be used when mapping a contact phone number, subject (patient and/or place) lineage and linked_docs take precedence over submitter lineage and linked_docs. except for link:, phone numbers are resolved to the primary contacts of the requested places. linked_docs hydration is shallow, so the primary contact of the linked doc will not be available.","rules#Rules":"The following functions are available by default:\nFunction Description equals Comparison iEquals Case insensitive comparison sEquals Type sensitive equals siEquals Type sensitive case insensitive equals lenMin Minimum length lenMax Maximum length lenEquals Exact length min Minimum value max Maximum value between Minimum and maximum value in One of the provided values required Must have a value optional Always valid numeric Numbers only integer Integer numbers only alpha Letters only alphaNumeric Numbers and letters only email Email address format regex A custom regular expression equalsTo Compare to another field by its key unique(*fields) Returns true if no existing valid report has the same value for all of the listed fields. Fields are compared to those at the top level and within fields for every report doc. To include the form type use 'form' as one of the fields. Eg unique('form', 'patient_id') checks that this form was never submitted for this patient. uniquePhone(field) Returns true if contact with the phone number already exists. Added in 4.3.0 validPhone(field) Returns true if the field is a valid phone number else returns false. Added in 4.3.1 uniqueWithin(*fields, time_period) Same as unique but the last argument is the time period in which to search. Eg uniqueWithin('form', 'patient_id', '1 week') checks that the same form wasn’t submitted for this patient in the past week. exists(form_id, field) Returns true if a report matches the form_id and value for field. This is useful to check that a patient was registered for a service before reporting about it. Eg exists('REG', 'patient_id') checks that a REG form was already submitted for a patient. As of 2.12 most uses of this function are obsolete because checking for a valid patient_id is done automatically by the accept_patient_report transition using registration_not_found in the messages.event_type. isISOWeek(weekFieldName[, yearFieldName]) Returns true if the current report has a week value that is less or equal to the number of ISO weeks of the current year or the year value of the same report. The first parameter is the field name for the week and the second parameter is the field name for the year: isISOWeek('week', 'year'). If the second parameter is not specified, then the current year is used: isISOWeek('week'). isAfter(duration) Returns true if the date property comes after today plus the duration. For this to work, the property should be a date type. e.g. isAfter('2 weeks') checks that the date property is at least two weeks in the future from today. Negative values are also supported. isBefore(duration) Returns true if the date property comes before today minus the duration. For this to work, the property should be a date type. e.g. isBefore('2 weeks') checks that the date property is at least two weeks in the past from today. Negative values are also supported.","sample-usage#Sample usage":"To ensure the patient_id is 5 digits and not already registered.\n[ { \"property\": \"patient_id\", \"rule\": \"regex(\\d{5}) \u0026\u0026 unique('patient_id')\", \"translation_key\": \"patient_id_invalid\" } ] For case-insensitive comparison, use iEquals function, and you can use || for logical OR. So the rule iEquals(\"mary\") || iEquals(\"john\") matches “mary”, “Mary”, “john”, “John”, and “JOhN”, but not “maryjohn”","sms-recipient-resolution#SMS recipient resolution":"An outgoing SMS message configuration has the following fields:\nproperty description required translation_key The translation key of the message to send out. Available in 2.15+. yes messages (deprecated) Array of message objects, each with content and locale properties. From 2.15 on use translation_key instead. no recipient Recipient of the message. no","sms-workflows#SMS Workflows":"Workflows involving SMS are configured by defining schedules, registrations, patient reports, and case reports. Schedules of automated messages can be sent from the server at specified times in the future, and reports can be associated to contacts. Forms can also be configured to clear the schedule, or silence it for a period of time. As of 3.11.0, places are valid subjects for any SMS workflows.","translationsmessages-enproperties#\u003ccode\u003etranslations/messages-en.properties\u003c/code\u003e":"messages.registration.report_accepted = Thank you {{contact.name}} for registering {{patient_name}}. Their ID is {{patient_id}}.","validations#Validations":"Validation rules are code fragments used to determine if some input is valid. For example, to say a field is only valid if the value has at least five characters, you would use the lenMin(5). They are used in registrations[].validations.list[].rule and patient_reports[].validations.list[].rule to determine if an incoming report is accepted. A report is accepted as valid only if all rules return true. If any validation rule returns false then the report is marked as invalid, and a message is automatically sent to the submitter. The content for the message is set in the translation_key associated to each rule. If a report fails multiple validations then each message will be sent. These can be combined into a single SMS by specifying \"*.validations.join_responses\" : true.\nThe syntax aims to mimic C-like languages. You can use logical operators, ternaries, nested “blocks” (rule \u0026\u0026 (some || nested || rules)) and validation functions (validationFunction(\"arg1\", \"arg2\")).\nString parameters for validation functions, such as the regex in the “regex” function, should be quoted.\nNon-quoted parameters will be cast to floats (numbers with decimals).\nFor each validation function, there is also a matching function prepended by other that allows you to run functions on other values than the one the rule string is for. This can be useful for fields that have differing requirements depending on another field. For example:\n{ \"state\": \"otherEquals('country', 'US') ? lenMin(2) : lenMin(0)\" } This rule validates the length state property if the country is set to “US”, but skips validation otherwise.\nValidation function arguments can be either strings or numerical values. Numerical arguments should not be wrapped in quotation marks or apostrophes: lenMin(5).","variables#Variables":"Outgoing messages can use Mustache templating to insert variables and specify data formats. All message context fields are available as variables."},"title":"app_settings.json"},"/building/reference/app-settings/accept_case_reports/":{"data":{"":"The accept_case_reports key contains the actions to take when reports about cases are received.","app_settingsjson-accept_case_reports#\u003ccode\u003eapp_settings.json .accept_case_reports[]\u003c/code\u003e":"property description required form Form ID of the case form. yes silence_type A comma separated list of schedules to mute. no silence_for Duration from when the report was submitted for which messages should be muted. It is structured as a string with an integer value followed by a space and the time unit. For instance 8 weeks or 2 days. The units available are seconds, minutes, hours, days, weeks, months, years, and their singular forms as well. When a message is muted all messages belonging to the same group will be muted, even if it falls outside of this time period. See messages[].group in Schedules for related info. no validations A set of validations to perform on incoming reports. Read more information about configuring validation rules. no validations.join_responses A boolean specifying whether validation messages should be combined into one message. no validations.list[] An array of validation rules a report should pass to be considered valid. no validations.list[].property Report field for which this validation rule will be applied. no validations.list[].rule Validation condition to be applied to the property field. no validations.list[].translation_key Translation key for the message reply to be sent if a report fails this rule. no messages An array of automated responses to incoming reports. no messages[].translation_key Translation key for the message text associated with this event no messages[].event_type An event that will trigger sending of this message. Typical values are: report_accepted when the report has been successfully validated, registration_not_found when the case ID supplied in the report doesn’t match any case ID issued by Medic. Read the documentation on muting. no messages[].recipient Who the message should be sent to. Use reporting_unit for the sender of the report, clinic for clinic contact, and parent for the parent contact. no","code-sample#Code sample":"\"accept_case_reports\": [{ \"form\": \"SIGNOFF\", \"validations\": {}, \"messages\": [{ \"event_type\": \"report_accepted\", \"bool_expr\": \"some expression\", \"message\": \"some message\", \"recipient\": \"some recipients\" }] }]"},"title":".accept_case_reports"},"/building/reference/app-settings/assetlinks/":{"data":{"":"Requires CHT Core 4.7.0+, CHT Conf 3.22.0+, and CHT Android 1.3.0+\nWhen using a custom flavor of cht-android to connect to your CHT instance, the ecosystem supports using deep links to open specific content in the app. (E.g. token login links). Security measures in Android require these deep links be verified either automatically or manually. This assetlinks configuration enables auto-verification for your CHT links in your Android app. The provided JSON file will be served at https:///.well-known/assetlinks.json. If you do not provide this configuration, users will be prompted to manually associate the CHT domain with your app.\nFor more information, see the docs for building a new CHT Android flavor.\nSpecify your digital asset links in the app_settings/assetlinks.json file. The compile-app-settings action in the cht-conf will automatically include this configuration in your app_settings.json file. Then, running the upload-app-settings action will deploy it to the server.","app_settingsjson-assetlinks#\u003ccode\u003eapp_settings.json .assetlinks[]\u003c/code\u003e":"property type description required relation[] Array The array should contain only one element: the string delegate_permission/common.handle_all_urls. yes target object Contains fields to identify associated apps. yes target.namespace string Must be set to android_app. yes target.package_name string The application ID declared in the app’s build.gradle file. yes target.sha256_cert_fingerprints Array The SHA256 fingerprints of your app’s signing certificate. You can get it with the Java utility keytool, see how exactly in our Android guide. yes","code-sample#Code Sample":"This sample associates the Android app org.medicmobile.webapp.mobile to a CHT instance and grants it link-opening rights to the Android app:\n[{ \"relation\": [\"delegate_permission/common.handle_all_urls\"], \"target\": { \"namespace\": \"android_app\", \"package_name\": \"org.medicmobile.webapp.mobile\", \"sha256_cert_fingerprints\": [\"62:BF:C1:78:24:D8:4D:5C:B4:E1:8B:66:98:EA:14:16:57:6F:A4:E5:96:CD:93:81:B2:65:19:71:A7:80:EA:4D\"] } }]"},"title":".assetlinks"},"/building/reference/app-settings/dhis2/":{"data":{"":"From 3.9.0 it is possible to integrate with DHIS2 by modifying the dhis_data_sets property in app_settings.json.\nSee Also: DHIS2 Integration","app_settingsjs#\u003ccode\u003eapp_settings.js\u003c/code\u003e":"\"dhis_data_sets\": [ { \"id\": \"VMuFODsyWaO\", \"translation_key\": \"dhis.dataset.moh515\" } ],","app_settingsjs-dhis_data_sets#\u003ccode\u003eapp_settings.js .dhis_data_sets[]\u003c/code\u003e":"Property Type Description Required id string The data set id from DHIS2 with which to integrate Yes translation_key string The translation key of the DHIS2 data set name to be displayed Yes","code-samples#Code samples":"Configure the id and translation_key of the DHIS2 data set. The id corresponds to the id of the data set in the DHIS2 instance you want to integrate with. The translation_key corresponds to the name of the DHIS2 data set as it appears in the dropdown in the App Management app."},"title":".dhis_data_sets"},"/building/reference/app-settings/forms/":{"data":{"":"JSON forms are defined in either the base_settings.json or the app_settings/forms.json file and compiled in to the app_settings.json file with the compile-app-settings action in the cht-conf tool. JSON Forms are used for parsing reports from formatted SMS, SIM applications, and Medic Collect. JSON form definitions are also used for interoperability with third-party systems. Each form is defined as an JSON form object according to the following schema. The key for each object must be unique and all characters must be uppercase.","app_settingsjson#\u003ccode\u003eapp_settings.json\u003c/code\u003e":"\"forms\": { \"F\": { \"meta\": { \"code\": \"F\", \"icon\": \"risk\", \"translation_key\": \"form.flag.title\" // displayed in the webapp }, \"fields\": { \"patient_id\": { // this is used for the property name when the report doc is created \"labels\": { \"short\": { \"translation_key\": \"form.flag.patient_id.short\" }, // displayed in the webapp \"tiny\": \"pid\" // used in form submission to bind values to fields - not required for all submission formats }, \"position\": 0, // specifies where in the SMS this value should be \"type\": \"string\", \"length\": [ 5, 13 ], \"required\": true }, \"notes\": { \"labels\": { \"short\": { \"translation_key\": \"form.flag.notes.short\" }, \"tiny\": \"form.flag.notes.tiny\" }, \"position\": 1, \"type\": \"string\", \"length\": [ 1, 100 ], \"required\": false } }, \"public_form\": true } }","app_settingsjson-forms#\u003ccode\u003eapp_settings.json .forms{}\u003c/code\u003e":"property type description required meta object Information about the report. yes meta.code string The unique form identifier, which will be sent with all reports of this form. Must be the same as the form’s key. yes meta.icon string Name of the icon resource shown in the app. no meta.translation_key string Name of the form shown in the app. no meta.subject_key string A translation key to display in the report list instead of the subject name (default). The translation is provided with a summary of the report which can be used for evaluation, eg: Case registration {{case_id}}. Useful properties available in the summary include: from (the phone number of the sender), phone (the phone number of the report contact), form (the form code), subject.name (the name of the subject), and case_id (the generated case id). Added in 3.9.0 no fields object Collection of field objects included in the form. yes fields.${field} object Field that is part of the form. yes fields.${field}.type string Data type of field:\n- \"integer\": a whole number\n- \"string\": any collection of characters\n- \"date\": a date in the format YYYY-mm-dd, for example “2019-01-28”\n- \"bsDate\": a Bikram Sambat date in the form YYYY-mm-dd, for example “2078-02-32”\n- \"bsYear\": a Bikram Sambat year in the form YYYY, for example “2078”\n- \"bsMonth\": a Bikram Sambat month, for example “9”\n- \"bsDay\": a Bikram Sambat day, for example “8”\n- \"boolean\": true or false, represented by the digit 1 and 0 respectively (native JSON booleans are also supported if sending via JSON)\n- \"custom\": Only possible for JSON forms that are passed as actual JSON (not an SMS that gets parsed into JSON). Effectively any non-specific data structure, which will be taken without validation. yes fields.${field}.labels object no fields.${field}.labels.short string, object with translation_key field, or translation object Label shown for field in the app, seen when report is viewed in Reports tab. If missing, label will default to a translation key of report.${form_name}.${field_name} (eg report.f.patient_id) which can be translated in the app languages. no fields.${field}.labels.tiny string Unique identifier within the form for this field. Used in form submission to bind values to fields. Not required for all submission formats. no fields.${field}.position integer Zero based order of this field for incoming reports. no fields.${field}.flags object Additional instructions that could be used by form renderers. For instance { \"input_digits_only\": true } indicated to SIM applications to show the number keyboard. Obsolete. no fields.${field}.length array with two integers Inclusive range accepted for length of the field. no fields.${field}.required boolean Determines if a report without this field is considered valid. no public_form boolean Determines if reports will be accepted from phone numbers not associated to a contact. Set to false if you want to reject reports from unknown senders. Default: true. no facility_reference string The form field whose value is to be used to match the incoming report to a contact’s rc_code. Useful when reports are sent on behalf of a facility by unknown or various phone numbers. Requires the update_clinics transition. no","code-sample#Code Sample":"The following form has two fields, one for the patient ID, another for notes."},"title":".forms"},"/building/reference/app-settings/header_tabs/":{"data":{"":"app_settings.js .header_tabs As of 3.10.0, app header tabs icons can be configured by modifying the header_tabs section in the app settings. The header_tabs section consists of key:value pairs, where the key is the name of the tab to configure. These values can also be changed from the Admin console, on the Images page under the “Header tabs icons” tab.\n{ \"messages\": { \"icon\": \"fa-user\" }, \"tasks\": { \"resource_icon\": \"medic-health-center\" }, \"analytics\": { \"icon\": \"fa-flag\", \"resource_icon\": \"icon-treatment\" } }","app_settingsjs-header_tabs#\u003ccode\u003eapp_settings.js .header_tabs\u003c/code\u003e":"","app_settingsjs-header_tabstab_name#\u003ccode\u003eapp_settings.js .header_tabs.\u0026lt;tab_name\u0026gt;\u003c/code\u003e":"property type required description icon string no FontAwesome icon name resource_icon string no Resource icon name. Note\nSelected Resource icons take precedence over selected FontAwesome icons.\nIf the selected Resource icon does not exist, the default icon will be displayed.\nIf the selected FontAwesome icon does not exist, the default icon will be displayed. If the selected Resource icon is not an svg that supports css color filling, the icon will have a static color for every state (inactive, active and hovered). Colors will change only for \u003e FontAwesome icons and css fillable svg icons. The Admin console Resource icon dropdowns only supports selecting svg icons. If mismatched Resource Icons are selected, they will be deselected upon saving. Resource icons images will be sized to 24 x 24px when displayed.","available-tabs#Available tabs":"tab name default FontAwesome icon messages fa-envelope tasks fa-flag reports fa-list-alt contacts fa-user analytics fa-bar-chart-o"},"title":".header_tabs"},"/building/reference/app-settings/hierarchy/":{"data":{"":"From 3.7.0 it is possible to configure what types of places and people are available by modifying the contact_types array in the app settings. Each type has the following properties.\nNote\nPrior to version 3.7.0, CHT Core supported 4 contact types - 3 place types (clinic, health_center, district_hospital) and one person type (person).","app_settingsjson-contact_types#\u003ccode\u003eapp_settings.json .contact_types[]\u003c/code\u003e":"Property Description Required id String identifier for the type. At times this will be used to sort the contacts in the UI so it is recommended to using a number prefix with gaps between numbers, eg: 10-district, 20-region, etc. Yes. name_key The translation key used for the title for the contact profile. No, defaults to ‘contact.profile’. group_key The translation key used for the title of a list of contacts of this type. Yes. create_key The translation key used on the button for creating new contacts of this type. Yes. edit_key The translation key used on the button for editing contacts of this type. Yes. primary_contact_key The translation key used to identify a person as the primary contact of contacts of this type. No, defaults to ‘Primary contact’. parents An array of strings of IDs of parent types. If more than one then this type can appear in different places in the hierarchy. If more than one type lists the same type as a parent then a user will get a dropdown of places to create. If no parents then contacts of this type will be at the top of the hierarchy and cannot be added as a child of any contact. No, defaults to no parents. icon The string ID for the icon to show beside contacts of this type. Yes. create_form The string ID for the xform used to create contacts of this type. Yes. edit_form The string ID for the xform used to edit contacts of this type. No, defaults to the create_form. count_visits Whether or not to show a count of visits for contacts of this type. Requires UHC to be enabled. No, defaults to false. sort_by_dob Whether or not to sort contacts by date of birth in the contact detail page. By default, contacts are sorted alphabetically. No, defaults to false. person Whether this is a person type or a place type. No, defaults to false.","changing-the-configuration#Changing the configuration":"You can change any contact type configuration easily except for the IDs. To change the ID of a contact type in configuration of a project which already has contact data the contact docs will also have be updated to have a type of “contact” and a contact_type with the new ID of the contact type.","forms#Forms":"When creating contacts the type will be automatically assigned based on the button the user clicked. However if the form also creates sibling or child contacts these nested sections must specify a type field with a hardcoded value of “contact” and a contact_type field with the ID of the desired contact type.","migration#Migration":"If you already have person and place documents, switching from using the fixed hierarchy requires that you also update all the existing docs. Each contact and report holds the IDs of ancestors in their hierarchy so they will all need to be updated to be consistent with the changes you’ve made. You can use the cht-conf move-contacts command to help with this migration."},"title":".contact_types"},"/building/reference/app-settings/oidc_provider/":{"data":{"":"Introduced in 4.20.0. This feature is only compatible with cht-android version v1.5.2 or greater. To support authenticating users with Single Sign-On (SSO) credentials (instead of CHT-specific usernames/passwords), the CHT can integrate with an external authorization server that supports the OpenID Connect (OIDC) protocol. Configure the OIDC Provider connection settings under the oidc_provider key:","app_settingsjson-oidc_provider#\u003ccode\u003eapp_settings.json .oidc_provider\u003c/code\u003e":"property type required description client_id String yes The unique key identifying your CHT application in your OIDC Provider. discovery_url String yes The URL to the .well-known OIDC configuration discovery endpoint for your OIDC Provider. Must be HTTPS unless allow_insecure_requests is true. allow_insecure_requests Boolean no Optional configuration (NOT for production use). If true, the discovery_url can use the HTTP protocol (instead of HTTPS). Default is false. When using SSO Login, the app_url setting must also be defined. Also, your CHT application’s client secret from the OIDC Provider must be securely configured in your CHT instance with the Credentials API using the key oidc:client-secret.\nOnly users with the oidc_username property can log in with SSO.","code-sample#Code sample":"The definition takes the typical form below:\n\"oidc_provider\": { \"client_id\": \"60f18991-1eae-4825-a579-44190cbbe51d\", \"discovery_url\": \"https://my.oidc-provider.org/realms/master/.well-known/openid-configuration\" }, \"app_url\": \"https://my.cht.org\""},"title":".oidc_provider"},"/building/reference/app-settings/outbound/":{"data":{"":"Outbound is only available in CHT Core 3.5.0 and above\nOutbound push allows configurers to have the creation or editing of CouchDB documents trigger outbound REST requests using the data in that document. For example, upon receiving a referral report you could send that referral to an external facility system that will manage and process that event.\nThese triggers can apply to all document types (not just common types such as reports or contacts) and as such care should be taken to only send the documents you intend (see configuration of relevant_to below).","a-mapping-example#A mapping example":"Given the following example (incomplete) report:\n{ \"id\": \"abc-1234\", \"type\": \"data_record\", \"form\": \"referral\", \"reported_date\": 1555069530966, \"fields\": { \"patient_id\": \"12345\", \"patient_temp_deg_F\": 100, \"danger_signs\": [\"V\", \"BL\", \"D\", \"IG\"] }, \"contact\": { \"_id\": \"def-5678\", \"name\": \"Jane CHW\", \"parent\": { \"_id\": \"hij-9012\", \"name\": \"...\" } } } The following mapping configuration:\n{ \"mapping\": { \"patient_id\": \"doc.fields.patient_id\", \"chw_id\": \"doc.contact._id\", \"event.temp_c\": { \"expr\": \"((doc.fields.patient_temp_deg_F - 32) * (5.0/9.0)).toFixed(2)\" }, \"event.in_danger\": { \"expr\": \"doc.fields.danger_signs.length \u003e= 3 ? true : undefined\", \"optional\": true }, \"event.additional_notes\": { \"path\": \"doc.fields.notes\", \"optional\": true } } } Would create the following JSON payload to send:\n{ \"patient_id\": \"12345\", \"chw_id\": \"def-5678\", \"event\": { \"temp_c\": 37.78, \"in_danger\": true } } This example makes a few points:\nThe report that is being used to generate the outbound push is referenced as doc in both path and expr properties To define a property that is itself an object, you can make the mapping key a JSON path. If you define a property as optional, it won’t exist at all in the payload if the resulting value is undefined, either because that is the result of executing the expr, or the path doesn’t exist. Note that if the event.in_danger expression was instead doc.fields.danger_signs.length \u003e= 3 the property in_danger would always exist and would either be true or false","configuration#Configuration":"For outbound pushes to occur, you must enable the mark_for_outbound transition in config:\n{ \"transitions\": { \"mark_for_outbound\": true } } The rest of the configuration is against the outbound configuration property, which allows you to configure as many outbound pushes as you like, keyed off a unique name:\n{ \"outbound\": { \"first config\": { \"relevant_to\": \"...\", \"destination\": {}, \"mapping\": {}, \"cron\": \"...\" }, \"second config\": { } } } Each outbound push configuration contains the following properties: relevant_to, destination and mapping.","cron#cron":"An optional cron expression for setting the cron rule in the outbound object. A cron expression is a string consisting of five fields that describe individual details of the schedule:\nThe transition verifies if a cron field exists in the configuration. If a cron field is present, it checks if the document is due for push. If it is due, the new document is pushed. If it is not yet due for push, the document is added to the outbound queue. If the cron field isn’t present, then it goes ahead with the previous flow.\nExample: you want the system to send outbound pushes based on a cron schedule every day at 1:05.\n{ \"cron\": \"5 1 * * *\" } Note: Schedule Outbound is only available in CHT Core 4.5.0 and above.","destination#destination":"A complex property that defines the details of the connection to the external service. It currently supports several authentication types: basic authentication, HTTP authorization request header, and a custom authentication mode for Muso SIH.\nBasic auth example:\n{ \"destination\": { \"base_url\": \"https://example.com\", \"auth\": { \"type\": \"basic\", \"username\": \"admin\", \"password_key\": \"example.com\" }, \"path\": \"/api/v1/referral\" } } Here password_key is a key used to find the password in CHT credentials. For more information about how to store credentials, refer to the API documentation.\nIf you don’t provide an authentication parameter then the request will be sent without authentication.\nAs of 3.9, the header type is also supported, which sends authentication credentials via a HTTP request header: Authorization: ''. The value is set in CHT credentials configuration, and referred to by the value_key, similarly to the password_key. The value must match the credentials needed for the third party tool, and is generally formatted as . For instance, to send data to RapidPro, the value in the configuration would be set to the complete RapidPro API Token: eg Token 123456789abcdef.\nHeader auth example:\n{ \"destination\": { \"base_url\": \"https://example.com\", \"auth\": { \"type\": \"header\", \"name\": \"Authorization\", \"value_key\": \"example.com\" }, \"path\": \"/api/v1/referral\" } }","how-outbound-messages-are-sent#How Outbound messages are sent":"Send semantics have changed over the course of developing this feature, and are important to understand for your deployment to be successful.","in-310-and-above#In 3.10 and above":"Outbound messages are sent immediately If there is an error in sending it will be added to a send queue to be retried every 5 minutes. If you update your outbound configuration while messages are present in the send queue, only the messages that match with the new configuration will be retried. When it does finally send it will include any new changes to the document that have occurred in that time. Documents can be sent again, as long as the resulting payload (as defined in the configuration’s mapping property) is different from the most recent outbound push performed for this document and configuration. It’s important to understand that if your mapping configuration produces a different result every time it’s run you may experience Outbound sending the “same” data many more times than you’d expect.\nFor example, if you want a timestamp in your payload you could configure it like this:\n{ \"timestamp\": {\"expr\": \"new Date()\"} } Outbound may send your request multiple times even if the user just hit save once. If this is a problem for your deployment, consider using values on the document itself that will not change every time your mapping is executed:\n{ \"timestamp\": \"doc.timestamp\" }","in-34-38#In 3.4-3.8":"Outbound messages are added to a send queue that is executed once every 5 minutes or so. If there is an error in sending it will be kept in the queue to be retried in another 5 minutes. When it does finally send it will include any new changes to the document that have occurred in that time. Once the document has successfully sent if the document is changed again it will be sent again, using the same rules as above.","in-39#In 3.9":"Outbound messages are sent immediately If there is an error in sending it will be added to a send queue to be retried every 5 minutes. When it does finally send it will include any new changes to the document that have occurred in that time. Documents are only ever sent once for configuration","inbound#Inbound?":"The outbound feature is used for sending data to an external service. If you are looking to receive data from an external service, take a look at the records api.","mapping#mapping":"A complex property that declares how the payload to be sent to the destination should be created.\nEach key is a string object path to a location in the payload, and each value is either:\na string object path to the location of the source data in the report being processed, where the value is required to exist an object with either a path property that represents a string object path as above, or an expr property which is an expression similar to relevant_to to determine the resulting value. If you wish for the value to be optional (that is to say it’s OK if path or expr evaluate to undefined) you may also set optional to true","other-notes#Other Notes":"Your report will be hydrated before being passed to the mapper. This gives you access to the contact and its parents object paths that may have undefined properties need to be dealt with differently depending on if you are using a path or an expr. Given doc.foo.bar.smang as a path where any of those properties may not exist in the doc: If you’re using path just use the path as is, if any part of the path is undefined the resulting value will safely be undefined However, in expr you do need to handle this situation: doc.foo \u0026\u0026 doc.foo.bar \u0026\u0026 doc.foo.bar.smang If any of your expr expressions throw an exception (for example because you didn’t handle potentially undefined properties as noted above) your push will fail If any of your path declarations result in an undefined value and you have not also declared that property optional your push will fail","relevant_to#relevant_to":"An “expression” (some JS code that resolves to a truthy or falsy value) that determines whether this configuration is relevant to a document. The document is passed to the expression as doc, and if relevant is fully hydrated before being passed (i.e. the attached contact, its parents etc are fully attached instead of just being stubs).\nExample: you want to send a referral to a facility’s EMR system when a CHW refers a patient:\n{ \"relevant_to\": \"doc.type === 'data_record' \u0026\u0026 doc.form === 'referral'\" } Note: all documents that Sentinel processes can be picked up by your configuration, so it’s important to correctly configure relevant_to. Checking the document type as shown above is probably a good start.","troubleshooting#Troubleshooting":"By default, Sentinel will log a message each time an outbound request is sent indicating if the request was successful or not. If you are having trouble getting your outbound requests to work, you can enable debug logging to get more information about the exact contents of the request/response."},"title":".outbound"},"/building/reference/app-settings/patient_reports/":{"data":{"":"The patient_reports key contains the actions to take when reports about people are received.","app_settingsjson-patient_reports#\u003ccode\u003eapp_settings.json .patient_reports[]\u003c/code\u003e":"property description required form Form ID of the form. yes name Descriptive name of the form. This is not currently used in the app, but can be a helpful annotation. no format Guide of how the form can be used. This is not currently used in the app, but can be a helpful annotation. no silence_type A comma separated list of schedules to mute. no silence_for Duration from when the report was submitted for which messages should be muted. It is structured as a string with an integer value followed by a space and the time unit. For instance 8 weeks or 2 days. The units available are seconds, minutes, hours, days, weeks, months, years, and their singular forms as well. When a message is muted all messages belonging to the same group will be muted, even if it falls outside of this time period. See messages[].group in Schedules for related info. no fields Descriptive list of form fields. This is not currently used in the app, but can be a helpful annotation. no validations A set of validations to perform on incoming reports. More information about validation rules can be found here. no validations.join_responses A boolean specifying whether validation messages should be combined into one message. no validations.list[] An array of validation rules a report should pass to be considered valid. no validations.list[].property Report field for which this validation rule will be applied. no validations.list[].rule Validation condition to be applied to the property field. More information about rules can be found here. no validations.list[].translation_key Translation key for the message reply to be sent if a report fails this rule. no messages An array of automated responses to incoming reports. no messages[].translation_key Translation key for the message text associated with this event no messages[].event_type An event that will trigger sending of this message. Typical values are: report_accepted when the report has been successfully validated, registration_not_found when the shortcode (patient ID or place ID) supplied in the report doesn’t match any shortcode issued by Medic. on_mute and on_unmute are used in the context of muting as described here no messages[].recipient Who the message should be sent to. Use reporting_unit for the sender of the report, clinic for clinic contact, and parent for the parent contact. See SMS Recipients no","code-sample#Code sample":"This sample shows a V report clearing schedules that have messages within 8 days of the report being received. The sample also defines the response messages if the report is accepted or if the patient is not found.\n\"patient_reports\": [ { \"form\": \"V\", \"name\": \"Visit (SMS)\", \"format\": \"V \", \"silence_type\": \"ANC Reminders, ANC Reminders LMP, ANC Reminders LMP from App\", \"silence_for\": \"8 days\", \"fields\": [ { \"field_name\": \"\", \"title\": \"\" } ], \"validations\": { \"join_responses\": true, \"list\": [ { \"property\": \"patient_id\", \"rule\": \"regex('^[0-9]{5,13}$')\", \"translation_key\": \"messages.generic.validation.patient_id\" } ] }, \"messages\": [ { \"translation_key\": \"messages.v.report_accepted\", \"event_type\": \"report_accepted\", \"recipient\": \"reporting_unit\" }, { \"translation_key\": \"messages.generic.registration_not_found\", \"event_type\": \"registration_not_found\", \"recipient\": \"reporting_unit\" } ] } ]"},"title":".patient_reports"},"/building/reference/app-settings/registrations/":{"data":{"":"The registrations key contains actions that need to be performed for incoming reports of the specified form.","app_settingsjson-registrations#\u003ccode\u003eapp_settings.json .registrations[]\u003c/code\u003e":"property description required form Form ID that should trigger the schedule. yes events An array of event object definitions of what should happen when this form is received. yes event[].name Name of the event that has happened. The only supported event is on_create which happens when a form is received. yes event[].trigger What should happen after the named event. assign_schedule will assign the schedule named in params to this report. Similarly clear_schedule will permanently clear all messages for a patient or place that are part of schedules listed in the params field. The full set of trigger configuration directives are described here. yes event[].params Any useful information for the event. In our case, it holds the name of the schedule to be triggered. no event[].bool_expr A JavaScript expression that will be cast to boolean to qualify execution of the event. Leaving blank will default to always true. CouchDB document fields can be accessed using doc.key.subkey. Regular expressions can be tested using pattern.test(value) e.g. /^[0-9]+$/.test(doc.fields.last_menstrual_period). In our example above, we’re making sure the form has an LMP date. no validations A set of validations to perform on incoming reports. More information about validation rules can be found here. no validations.join_responses A boolean specifying whether validation messages should be combined into one message. no validations.list[] An array of validation rules a report should pass to be considered valid. no validations.list[].property Report field for which this validation rule will be applied. no validations.list[].rule Validation condition to be applied to the property field. More information about rules can be found here. no validations.list[].translation_key Translation key for the message reply to be sent if a report fails this rule. no messages An array of automated responses to incoming reports. no messages[].translation_key Translation key for the message text associated with this event. no messages[].event_type An event that will trigger sending of this message. Typical values are: report_accepted when the report has been successfully validated and registration_not_found when the shortcode (patient ID or place ID) supplied in the report doesn’t match any shortcode issued by Medic. no messages[].recipient Who the message should be sent to. Use reporting_unit for the sender of the report, clinic for clinic contact, and parent for the parent contact. See SMS Recipients no","code-sample#Code sample":"This sample shows how a schedule would be triggered by a pregnancy report if the last_menstrual_period value is set.\n\"registrations\": [ { \"form\": \"pregnancy\", \"events\": [ { \"name\": \"on_create\", \"trigger\": \"assign_schedule\", \"params\": \"ANC Visit Reminders\", \"bool_expr\": \"doc.fields.last_menstrual_period\" } ], \"validations\": {}, \"messages\": [] } ]"},"title":".registrations"},"/building/reference/app-settings/reminders/":{"data":{"":"Configure SMS reminders to notify primary contacts to submit reports for their places.","app_settingsjs#\u003ccode\u003eapp_settings.js\u003c/code\u003e":"\"reminders\": [ { \"form\": \"stock\", \"translation_key\": \"sms.reminder.stock\", \"text_expression\": \"on the first day of the week\", \"contact_types\": [ \"health_center\", \"hospital\" ] } ],","app_settingsjs-reminders#\u003ccode\u003eapp_settings.js .reminders[]\u003c/code\u003e":"Property Type Description Required form string If a report with this ID is submitted for this place then the SMS will not be sent. Yes translation_key string The translation key to use to look up the SMS message content. Yes message array or string Deprecated. The SMS content. Use translation_key instead. No text_expression string The later text expression to use to set the frequency of this reminder. Yes (unless cron is defined) cron string The cron expression to use to set the frequency of this reminder Yes (unless text_expression is defined) contact_types array All contact type IDs that should receive the SMS. Defaults to the lowest level places. Added in 3.10.0 No","code-samples#Code samples":""},"title":".reminders"},"/building/reference/app-settings/replication_depth/":{"data":{"":"Replication depth is defined under replication_depth as an array of objects. It grants the ability to limit document replication depending on user roles.\napp_settings.json .replication_depth property description required role The configured user role the depth applies to. yes depth The replication depth value. Must be a positive integer or 0. yes report_depth As of 3.10. Replication depth applied to reports submitted by other users no","app_settingsjson-replication_depth#\u003ccode\u003eapp_settings.json .replication_depth\u003c/code\u003e":"","code-sample#Code sample:":"{ \"replication_depth\": [ { \"role\": \"district_manager\", \"depth\": 1, \"report_depth\": 1 }, { \"role\": \"national_manager\", \"depth\": 2 } ] }"},"title":".replication_depth"},"/building/reference/app-settings/replications/":{"data":{"":"Important\nThe replications field is only available in versions 3.5.0 to 3.9.0. As of 3.10.0 this field is ignored, and replication happens nightly for user meta databases to a central meta data database.\nReplications are defined under the app_settings.replications key as an array of replication objects. The definition takes the typical form below:\n\"replications\": [ { \"fromSuffix\": \"user-[^\\\\-]+-meta\", \"toSuffix\": \"users-meta\", \"text_expression\": \"\", \"cron\": \"0 2 * * *\" } ] property description required fromSuffix The suffix of the source table(s). Regular expression may be used. yes toSuffix The suffix of the target table. yes text_expression Any valid text expression. For more information, see LaterJS no if cron provided cron Any valid Cron expression. For more information, see LaterJS no if text_expression provided"},"title":".replications"},"/building/reference/app-settings/schedules/":{"data":{"":"Schedules are defined in either the base_settings.json or the app_settings/schedules.json file and compiled in to the app_settings.json file with the compile-app-settings action in the cht-conf tool.\nThe schedules key contains an array of schedule objects, each representing the messages to send based on a registration.","app_settingsjson-schedules#\u003ccode\u003eapp_settings.json .schedules[]\u003c/code\u003e":"property description required name A unique string label that is used to identify the schedule. Spaces are allowed. yes summary Short description of the of the schedule. no description A narrative for the schedule. no start_from The base date from which the messages[].offset is added to determine when to send individual messages. You could specify any property on the report that contains a date value. Starting from 4.5.0, an array of property names is also supported; in this case, the first defined field is used. The default is reported_date, which is when the report was submitted. no start_mid_group Whether or not a schedule can start mid-group. If not present, the schedule will not start mid-group. In other terms, the default value is false no messages Array of objects, each containing a message to send out and its properties. yes messages[].translation_key The translation key of the message to send out. Available in 2.15+. yes messages[].messages Array of message objects, each with content and locale properties. From 2.15 on use translation_key instead. no messages[].group Integer identifier to group messages that belong together so that they can be cleared together as a group by future reports. For instance a series of messages announcing a visit, and following up for a missed visit could be grouped together and cleared by a single visit report. yes messages[].offset Time interval from the start_from date for when the message should be sent. It is structured as a string with an integer value followed by a space and the time unit. For instance 8 weeks or 2 days. The units available are seconds, minutes, hours, days, weeks, months, years, and their singular forms as well. Note that although you can specify seconds, the accuracy of the sending time will be determined by delays in the processing the message on the server and on the gateway. yes messages[].send_day String value of the day of the week on which the message should be sent. For instance, to send a message at the beginning of the week setting it to \"Monday\" will make sure the message goes out on the closest Monday after the start_date + offset. no messages[].send_time Time of day that the message should be sent in 24 hour format. no messages[].recipient Recipient of the message. It can be set to reporting_unit (sender of the form), clinic (clinic that the sender of the form is attached to), parent (parent of the sender of the form), or a specific phone number. See SMS Recipients no","code-sample#Code Sample":"This sample shows a schedule with a single message, which will be sent on Monday 9am 4 weeks after the LMP date on the report that triggers this schedule:\n\"schedules\": [ { \"name\": \"ANC Visit Reminders\", \"summary\": \"\", \"description\": \"\", \"start_from\": \"lmp_date\", \"start_mid_group\": true, \"messages\": [ { \"translation_key\": \"messages.schedule.registration.followup_anc_pnc\", \"group\": 1, \"offset\": \"4 weeks\", \"send_day\": \"monday\", \"send_time\": \"09:00\", \"recipient\": \"reporting_unit\" } ] } ] The following sample schedules a message for 270 days from lmp_date. If lmp_date doesn’t exist on report, it will schedule a message for 270 days from fields.lmp_date. If neither field exists, it will not create a schedule. Using an array for start_from is supported from CHT 4.5.0+.\n\"schedules\": [ { \"name\": \"Delivery Reminder\", \"summary\": \"\", \"description\": \"\", \"start_from\": [\"lmp_date\", \"fields.lmp_date\"], \"start_mid_group\": true, \"messages\": [ { \"translation_key\": \"messages.schedule.deliery\", \"group\": 1, \"offset\": \"270 days\", \"recipient\": \"reporting_unit\" } ] } ]"},"title":".schedules"},"/building/reference/app-settings/sms/":{"data":{"":"SMS settings are defined under the sms key, as an object supporting the following properties:\napp_settings.json .sms property default description outgoing_service medic-gateway Defines the service to use to send SMS messages. Currently supports “medic-gateway”, “africas-talking” or “rapidpro”. For more information read the documentation on “africas-talking” configuration and “rapidpro” configuration. duplicate_limit 5 The number of identical sms message allowed to be sent to the same recipient. Code sample The definition takes the typical form below:\n\"sms\": { \"outgoing_service\": \"medic-gateway\", \"duplicate_limit\": \"2\" }","app_settingsjson-sms#\u003ccode\u003eapp_settings.json .sms\u003c/code\u003e":"","code-sample#Code sample":"","duplicate-sms-messages-handling#Duplicate SMS messages handling":"Every time a service (API or Sentinel) creates an SMS, we cache the recipient, and the message content, along with the current timestamp. When more than duplicate_limit messages have been created for the same pair of recipient+content, within the cache time limit, we mark the new message with a “duplicate” status. Such messages are never sent. The cache is cleared 30 minutes after the last SMS message for a specific pair was generated."},"title":".sms"},"/building/reference/app-settings/token_login/":{"data":{"":"Login via SMS settings are defined under the token_login key, as an object supporting the following properties:\nAs of CHT 5.0.0, the app_url config is required when enabling token login. If token_login.enabled is true and app_url is not set, token login will not work and errors will be thrown.","app_settingsjson-token_login#\u003ccode\u003eapp_settings.json .token_login\u003c/code\u003e":"property type required description enabled Boolean yes Enables or disables token_login deployment-wide. When this is false, users can’t be updated to use token_login and any requests to login with a token link will fail. translation_key String yes Translation key for the information (helper) sms message that the user receives, along with their token-login link","code-sample#Code sample":"The definition takes the typical form below:\n\"app_url\": \"https://example.org\", \"token_login\": { \"enabled\": true, \"translation_key\": \"sms.token.login.help\" }"},"title":".token_login"},"/building/reference/app-settings/transitions/":{"data":{"":"When sentinel detects a document has changed it runs transitions against the doc. These transitions can be used to generate a short form patient id or assign a report to a facility.\nHow transitions work A transition is a Javascript code that runs when a document is changed. A transition can edit the changed doc or do anything server-side code can do for that matter.\nTransitions are run in series, not in parallel:\nFor a given change, you can expect one transition to be finished before the next runs.\nYou can expect one change to be fully processed by all transitions before the next starts being processed.\nTransitions obey the following rules:\nhas a filter({ id, doc, info }) function that accepts the changed document as an argument and returns true if it needs to run/be applied.\na onMatch({ id, doc, info }) function that will run on changes that pass the filter. Should return true when the transition has run successfully.\ncan have an init() function to do any required setup and throw Errors on invalid configuration.\nIt is not necessary for an individual transition to save the changes made to doc to the DB, the doc will be saved once all the transitions have been edited. If an individual transition saves the document provided at doc, it takes responsibility for re-attaching the newly saved document (with new seq etc) at doc\nguarantees the consistency of a document.\nruns serially and in specific order. A transition is free to make async calls but the next transition will only run after the previous transition’s match function executed. If your transition is dependent on another transition, it should be sorted so it runs after the dependee transition.\nis repeatable, it can run multiple times on the same document without negative effect. You can use the transitions property on a document’s infodoc to determine if a transition has run.\nRegardless of whether the doc is saved or not, the transitions will all be run (unless one crashes).\nWhen your transition encounters an error, there are different ways to deal with it. You can :\nfinish your transition by throwing an error that has a truthy changed property. This will save the error to doc. finish your transition by throwing an error. The error will be logged to the sentinel log. This will not save the error on the doc, so there will be no record that this transition ran. That particular change will not go through transitions again, but if the same doc has another change in the future since there is no record of the erroring transition having run, it will be rerun. crash sentinel. When sentinel restarts, since that change did not record successful processing, it will be reprocessed. Transitions that did not save anything to the doc will be rerun. Configuration By default all transitions are disabled. They can be enabled by configuring the transitions property to have a key with the transitions name and a truthy value. As of version 3.12.0 some transitions will partially run on the client for offline users. To opt out from client-side transitions, add a \"client_side: false\" property to the transition configuration.\n{ \"transitions\": { \"a\": { }, \"b\": true, \"c\": { \"disable\": false }, \"d\": { \"disable\": true }, \"e\": { \"client_side\": false } } } In the example above, the d transition will not be applied, a, b c will be applied on the server and on the client, while e will only be applied on the server.\nAvailable transitions The following transitions are available and executed in order.\nKey Description maintain_info_document Records metadata about the document such as when it was replicated. Enabled by default. update_clinics Adds a contact’s info to a new data record. This is used to attribute an incoming SMS message or report to the appropriate contact. The rc_code value on the contact is used to match to the value of the form field set as the facility_reference in the JSON form definition. This matching is useful when reports are sent on behalf of a facility by unknown or various phone numbers. If facility_reference is not set for a form, the contact match is attempted using the sender’s phone number. If a form is not public and a match is not found then the sys.facility_not_found error is raised. A message will be sent out whenever this error is raised. registration For registering a patient or place to a schedule. Performs some validation and creates the patient document if the patient does not already exist. Can create places (as of 3.8.x). Can assign schedules to places (as of 3.11.x) accept_patient_reports Validates reports about a patient or place and silences relevant reminders. accept_case_reports Validates reports about a case, assigns the associated place_uuid, and silences relevant reminders. Available since 3.9.0 generate_shortcode_on_contacts Automatically generates the patient_id on all person documents and the place_id on all place documents. Available since 3.8.x. generate_patient_id_on_people Deprecated in 3.8.x Automatically generates the patient_id on all person documents. As of 3.8.x, also generates the place_id on all place documents and is an alias for generate_shortcode_on_contacts. default_responses Responds to the message with a confirmation or validation error. update_sent_by Sets the sent_by field of the report based on the sender’s phone number. update_sent_forms Deprecated in 3.7.x Update sent_forms property on facilities so we can setup reminders for specific forms. As of 3.7.x, reminders no longer require this transition death_reporting Updates the deceased status of patients. conditional_alerts Executes the configured condition and sends an alert if the condition is met. multi_report_alerts Similar to conditional_alerts, with more flexible configuration, including using different form types for the same alert. update_notifications Deprecated in 3.2.x Mutes or unmutes scheduled messages based on configuration. update_scheduled_reports If a report has a month/week/week_number, year and clinic then look for duplicates and update those instead. resolve_pending Sets the state of pending messages to sent. It is useful during builds where we don’t want any outgoing messages queued for sending. muting Implements muting/unmuting actions of people and places. Available since 3.2.x. Is partially applied on the client, as of 3.12.0. mark_for_outbound Enables outbound pushes. Available since 3.5.x self_report Maps patient to sender. Available since 3.9.x create_user_for_contacts Allows for automatically creating or replacing users based on data from their associated contact. Available since 4.1.x Below are guides to setup specific transitions.\nmulti_report_alerts Send alert messages by SMS when specific conditions are received through reports. More flexible than simple Alerts.\nExample: send SMS to the district manager when 2 CHWs within the same district report cholera or diarrhea symptoms within the last week.\nUnderstanding the different types of reports used in the configuration:\nprevious suspected_cholera alert was sent | | latest_report comes in, suspected_cholera alert is sent | | v v ---[---*-o---*--*--o-o---*]-------\u003e time 1 0 [] : time window\n* and o : reports : any report that came in to the server.\n* : counted_reports : reports that came in that passed the is_report_counted filter function.\n0, 1 : new_reports : counted_reports that came in since the previous alert was sent. They haven’t been messaged about yet.\nConfiguration \"multi_report_alerts\" : [ { \"name\": \"suspected_cholera\", \"is_report_counted\": \"function(report, latest_report) { return latest_report.contact.parent.parent._id === report.contact.parent.parent._id; }\", \"num_reports_threshold\": 2, \"message\": \"{{num_counted_reports}} patients with {{alert_name}} in {{time_window_in_days}} days reported at {{new_reports.0.contact.parent.name}}. New reports from: {{new_reports.0.contact.name}}, {{new_reports.1.contact.name}}, {{new_reports.2.contact.name}}.\", \"recipients\": [ \"+123456\", \"new_report.contact.phone\", // sender of each report in new_reports \"new_report.contact.parent.parent.contact.phone\", // contact person for the parent place of the sender of each report in new_reports. // If it's the same for several reports, only one message will be sent (recipient phone numbers are deduplicated before generating messages). ], \"time_window_in_days\": 7, \"forms\": [\"C\", \"D\"] // Only Cholera and Diarrhea forms. } ] Note that we are using Mustache templates for our message templates (anything with {{}}), and they use a . notation to access items in an array (e.g. new_reports.1) rather than a [] notation as in conventional javascript (new_reports[1]).\nFor performance reasons the num_reports_threshold cannot exceed 100.\ndeath_reporting Updates patient documents with a date_of_death field which updates how the patient is displayed in the UI.\nConfiguration Configuration is stored in the death_reporting field of the settings.\nProperty Description mark_deceased_forms An array of form codes which will cause patients to be recorded as deceased. undo_deceased_forms An array of form codes which will remove the deceased date from the patient. Optional. date_field The path to the field in the report document which has the date the patient died. Optional: if not configured it defaults to the reported_date of the report. Example \"death_reporting\": { \"mark_deceased_forms\": [ \"death\" ], \"undo_deceased_forms\": [ \"undo-death\" ], \"date_field\": \"fields.death_date\" } registration Configuration is held at app_settings.registrations, as a list of objects connecting forms to validations, events and messages.\nEvents Lists different events.\non_create This is the only supported event.\nTriggers add_patient Sets the patient_id on the root of the registration document and creates the person doc if required. Can be configured to either use a provided ID or generate a new unique one.\nExternal Patient ID If you are providing the patient ID instead of having Sentinel generate you one, name the field in a patient_id_field key in \"params\":\n{ \"name\": \"on_create\", \"trigger\": \"add_patient\", \"params\": \"{\\\"patient_id_field\\\": \\\"external_id\\\"}\", \"bool_expr\": \"\" } In this example the provided ID would be in fields.external_id on the registration document. This field must not be called patient_id.\nNote\nThe JSON passed in \"params\" should be a string. Support for raw JSON as shown below exists, but is in beta and may not always work correctly in all situations, because kanso.json does not support it:\n{ \"params\": {\"patient_id_field\": \"external_id\"}, } Alternative Name Location To provide an alternative location for the patient name, either provide a patient_name_field in \"params\" or provide it directly into the \"params\" field as a String:\n{ \"params\": \"{\\\"patient_name_field\\\": \\\"full_name\\\"}\", } { \"params\": \"full_name\", } The first format is required if you wish to also provide other params:\nContact Type If you have changed from the default contact hierarchy you will need to specify which type of contact the registration should create.\n{ \"params\": \"{ \\\"contact_type\\\": \\\"patient\\\" }\" } Specific Parent as of 3.8.0 By default, the newly created person will have the same parent as the report submitter. A different parent may be selected by providing a location for the parent id. This field should contain the place_id of the place in question. If the selected parent is invalid - does not exist or does not respect the configured hierarchy\nthe report is rejected as invalid and the person document is not created. As such , report_accepted event should check if the report has a patient property (or similar). { \"params\": \"{ \\\"parent_id\\\": \\\"parent_id\\\" }\" } Events parent_field_not_provided - triggered when the report does not have the required parent_id field parent_invalid - triggered when selected parent is invalid (parent document is found and either does not have a configured type or its type is not configured to be a parent to the person type to be created) parent_not_found - triggered when selected parent is not found The selected parent (if found) can be accessed by using the parent path in error messages: Cannot create a person type \"patient\" under parent {{parent.place_id}}({{parent.contact_type}})\nadd_patient_id Deprecated in favour of add_patient. Previously this only added a patient_id to the root of the registration form. This functionality has been merged into add_patient. Now, using this event will result in the same functionality as described in add_patient above.\nadd_expected_date add_birth_date assign_schedule clear_schedule add_place as of 3.8.0 Sets the place_id on the root of the registration document and creates the place doc with the provided type.\nBy default, the created place would have the same parent as the submitter. If such a combination is invalid - for example a contact under a “clinic” attempts to create a new “health_center” - the report will be rejected as errored and the place document will not be created. As such, report_accepted event should check if the report has a place property (or similar).\nThe created place does not have a primary contact. The created place can be accessed by the place path in messages: Place {{place.name}}({{place.place_id}}) added to {{place.parent.name}}({{place.parent.place_id}})\nContact Type Specifying the contact type is required, even if not using configurable hierarchies. The selected contact type must be a configured place type.\n{ \"params\": \"{ \\\"contact_type\\\": \\\"clinic\\\" }\" } Specific Parent By default, the newly created place will have the same parent as the report submitter. A different parent may be selected by providing a location for the parent id. This field should contain the place_id of the place in question. If the selected parent is invalid - does not exist or is not an acceptable parent to the selected type in the configured hierarchy - the report will be rejected as errored.\n{ \"params\": \"{ \\\"parent_id\\\": \\\"parent_id\\\" }\" } Events parent_field_not_provided - triggered when the report does not have the required parent_id field parent_invalid - triggered when selected parent is invalid (parent document is found and either does not have a configured type or its type is not configured to be a parent to the place type to be created) parent_not_found - triggered when selected parent is not found The selected parent (if found) can be accessed by using the parent path in error messages: 'Cannot create a place type \"health_center\" under parent {{parent.place_id}}({{parent.contact_type}})'\nAlternative Name Location The created place’s name is provided in the place_name field by default. To provide an alternative location for the place name, provide a place_name_field in \"params\":\n{ \"params\": \"{\\\"place_name_field\\\": \\\"clinic_name\\\"}\", } add_case as of 3.9.0 Sets the case_id on the root of the registration document.\ngenerate_shortcode_on_contacts There is no custom configuration for generate_shortcode_on_contacts.\ngenerate_patient_id_on_people Deprecated since 3.8.x in favor of generate_shortcode_on_contacts\nThere is no custom configuration for generate_patient_id_on_people.\nupdate_notifications Deprecated in favor of Muting\nConfiguration \"notifications\": { \"off_form\": \"OFF\", \"on_form\": \"ON\", \"validations\": { \"join_responses\": true, \"list\": [] }, \"messages\": [ { \"translation_key\": \"\", \"event_type\": \"on_mute\", \"recipient\": \"reporting_unit\" }, { \"translation_key\": \"\", \"event_type\": \"on_unmute\", \"recipient\": \"reporting_unit\" }, { \"translation_key\": \"\", \"event_type\": \"patient_not_found\", \"recipient\": \"reporting_unit\" } ] } muting Implements muting/unmuting of persons and places. Supports multiple forms for each action, for webapp and sms workflows.\nMuting action Updates the target contact and all its descendants, setting the muted property equal to the current date in ISO format.\nClient-side Added in 3.12.0\nClient-side muting runs offline on a user’s device. Only the contacts and reports available on the device will be updated.\nSets the muted property on the target contact and all its descendants to the device’s current date (the moment the report is processed). Adds/updates the muting_history property on every updated contact, to keep track of all the updates that have been processed client-side, as well as the last known server-side state of the contact and sets the last_update property to client_side Updates the report doc to add a client_side_transitions property to track which transitions have run client-side Server-side Server-side muting runs as a typical Sentinel transition. Contacts that are already in the correct state are skipped. This applies to updates to the contact itself, updates to the Sentinel muting_history and to the connected registrations (registrations of a contact that is already in the correct state will not be updated).\nSets the muted property on the target contact and all its descendants to the moment Sentinel processed the muting action. If the contact was already muted by a client, the muted date will be overwritten. The client-side muting_history will have a copy of the client-side muting date. Adds a muting_history entry to Sentinel info docs for every updated contact Updates all connected registrations (for the target contact and descendants), changing the state of all unsent scheduled_tasks to muted Unsent scheduled_tasks have either a scheduled or pending state Updates the contact’s client-side muting_history to set the last_update property to server_side and update the server_side section with the current date and muted state. If the report was processed client-side, all “following” muting/unmuting events that have affected the same contacts will be replayed. This means the transition could end up running multiple times over the same report. Replaying is required due to how PouchDB \u003c-\u003e CouchDB synchronization does not respect the order in which the documents have been created, to ensure that contacts end up in the correct muted state. Unmuting action Updates the target contact’s topmost muted ancestor and all its descendants, removing the muted property. Because the muted state is inherited, unmuting cascades upwards to the highest level muted ancestor. If none of the ancestors is muted, unmuting cascades downwards only.\nClient-side Added in 3.12.0\nClient-side unmuting runs offline on a user’s device. Only the contacts and reports available on the device will be updated.\nAdds/updates the muting_history property on every updated contact, sets the last known server-side state of the contact and sets the last_update property to client_side Updates the report doc to add a client_side_transitions property to track which transitions have run client-side Server-side Server-side unmuting runs as a typical Sentinel transition. Contacts that are already in the correct state are skipped. This applies to updates to the contact itself, updates to the Sentinel muting_history and to the connected registrations (registrations of a contact that is already in the correct state will not be updated).\nAdds a muting_history entry to Sentinel info docs for every updated contact Updates all connected registrations (for the target contact and descendants), changing the state of all present/future scheduled_tasks (ones due today or in the future) with the muted state to have the scheduled state. All scheduled_tasks with a due date in the past will remain unchanged. Updates the contact’s client-side muting_history to set the last_update property to server_side and update the server_side section with the current date and muted state. If the report was processed client-side, all “following” muting/unmuting events that have affected the same contacts will be replayed. This means the transition could end up running multiple times over the same report. Replaying is required due to how PouchDB \u003c-\u003e CouchDB synchronization does not respect the order in which the documents have been created, to ensure that contacts end up in the correct muted state. Muting history Server-side muting history Each time the muted state of a contact changes, an entry is added to a muting_history list saved in Sentinel info docs (stored as an array property with the same name). Entries in muting_history contain the following information:\nProperty Description muted Boolean representing the muted state date Date in ISO Format report_id An _id reference to the report that triggered the action Client-side muting history Added in 3.12.0\nEach time the client changes the muted state of a contact, an entry is added to a muting_history property on the contact’s doc. The last_update entry is also changed to client_side. The muting_history property contains the following information:\nProperty Values Description last_update server_side or client_side Updated every time a service updates the contact, with the corresponding value server_side Object server_side.muted true or false Last known server-side muting state server_side.date Date in ISO format Last known server-side muting/unmuting date client_side Array Client-side muting/unmuting events list. New events are pushed at the end of this list and it should never be re-ordered. The list represents the “chronological” order in which the reports that triggered muting were created. client_side[].muted true or false Client-side muting state client_side[].date Date in ISO format Client-side muting/unmuting date client_side[].report_id uuid The uuid of the muting/unmuting report that triggered the update Configuration Configuration is stored in the muting field of app_settings.json.\nProperty Description mute_forms An array of form codes which will trigger muting. Required unmute_forms An array of form codes which will trigger unmuting. Optional. validations List of form fields validations. All mute \u0026 unmute forms will be subjected to these validation rules. Invalid forms will not trigger muting/unmuting actions. Optional. messages List of tasks/errors that will be created, determined by event_type. Optional. Important\nContact forms cannot trigger muting or unmuting, but any data_record that has a form property (typically a Report) can.\nSupported events_types are:\nEvent Type Trigger mute On successful mute action unmute On successful unmute action already_muted On mute action, when target contact is already muted already_unmuted On unmute action, when target contact is already unmuted contact_not_found Either mute or unmute actions when target contact is not found Note\nWhen muting events are processed both client-side and server-side, there is no guarantee that the state of the database will be the same between the two processing events. Some possible cases where the data is changed in significant ways, that will affect the final muting state are:\nupdated muting settings between client and server processing of the same report / contact editing the muting/unmuting reports before they are synced, but after the transition ran locally, that either change the target contact or change the validity of the report deleting muting/unmuting reports before they are synced validation rules that depend on database data (for example using the “exists” rule, which will run over different data sets, a report could be valid for the client but invalid for the server and the other way around). conflicts that overwrite muting_history for contacts delayed sync for some docs (either contacts or reports) could exacerbate the above because of the “replay” behavior. Example \"muting\": { \"mute_forms\": [\"mute_person\", \"mute_clinic\"], \"unmute_forms\": [\"unmute_person\", \"unmute_clinic\"], \"validations\": { \"join_responses\": true, \"list\": [] }, \"messages\": [ { \"translation_key\": \"\", \"event_type\": \"mute\", \"recipient\": \"reporting_unit\" }, { \"translation_key\": \"\", \"event_type\": \"unmute\", \"recipient\": \"reporting_unit\" }, { \"translation_key\": \"\", \"event_type\": \"already_muted\", \"recipient\": \"reporting_unit\" }, { \"translation_key\": \"\", \"event_type\": \"already_unmuted\", \"recipient\": \"reporting_unit\" }, { \"translation_key\": \"\", \"event_type\": \"contact_not_found\", \"recipient\": \"reporting_unit\" } ] } accept_patient_reports Allow reporting about patient and place centric workflows by\nvalidating the report assigning the relevant subject (patient or place) to the report if a registration with the given shortcode (patient_id or place_id) exists clearing messages on the registration generating response messages on the report Example \"transitions\": { \"accept_patient_reports\": true }, \"registrations\": [{ \"form\": \"P\", \"events\": [{ \"name\": \"on_create\", \"trigger\": \"assign_schedule\", \"params\": \"ANC Reminders\", \"bool_expr\": \"!doc.fields.last_menstrual_period || !(/^[0-9]+$/.test(doc.fields.last_menstrual_period))\" }] }], \"schedules\": [{ \"name\": \"ANC Reminders\", \"translation_key\": \"schedule.anc_no_lmp\", \"summary\": \"\", \"description\": \"\", \"start_from\": \"reported_date\", \"messages\": [] }], \"patient_reports\": [{ \"form\": \"pregnancy_visit\", \"silence_type\": \"ANC Reminders\", \"silence_for\": \"8 days\", \"fields\": [], \"validations\": {}, \"messages\": [{ \"translation_key\": \"messages.pregnancy_visit\", \"event_type\": \"report_accepted\", \"recipient\": \"clinic\" }] }] accept_case_reports Allow reporting about case centric workflows by\nvalidating the report configuration documentation, assigning the relevant place to the report if a registration with the given case_id exists, clearing messages on the registration, and generating response messages on the report. Example \"registrations\": [{ \"form\": \"8\", \"events\": [{ \"name\": \"on_create\", \"trigger\": \"add_case\" }] }], \"accept_case_reports\": [{ \"form\": \"SIGNOFF\", \"validations\": {}, \"messages\": [{ \"event_type\": \"report_accepted\", \"bool_expr\": \"some expression\", \"message\": \"some message\", \"recipient\": \"some recipients\" }] }] self_report Updates a data_record to set its patient to its sender. The resulting doc will have fields.patient_uuid and fields.patient_id filled with the sender’s information. Provides hydrated patient information to subsequent transitions. The sender is the contact associated with the phone number that sent the original SMS.\nIf a doc already contains a patient field, does not have a sender or its form is not configured to be enabled for this transition, it will be ignored.\nConfiguration Configuration is stored in the self_report field of app_settings.json as a list of objects connecting forms to messages. Every object should have this structure:\nProperty Description form Form code. Required messages List of tasks/errors that will be created, determined by event_type. Optional. Supported events_types are:\nEvent Type Trigger report_accepted On successful sender updating sender_not_found Sender not found Example \"self_report\": [ { \"form\": \"FORM\", \"messages\": [ { \"event_type\": \"report_accepted\", \"recipient\": \"reporting_unit\", \"translation_key\": \"messages.form.report_accepted\" }, { \"event_type\": \"sender_not_found\", \"recipient\": \"reporting_unit\", \"translation_key\": \"messages.form.sender_not_found\" } ] }, { \"form\": \"OTHER\", \"messages\": [ { \"event_type\": \"report_accepted\", \"recipient\": \"reporting_unit\", \"translation_key\": \"messages.other.report_accepted\" }, { \"event_type\": \"sender_not_found\", \"recipient\": \"reporting_unit\", \"translation_key\": \"messages.other.sender_not_found\" } ] } ] update_clinics Adds a contact’s info to a data record so as to attribute an incoming SMS message or report to the appropriate contact.\nConfiguration As of version 3.12 you can add configuration to send a message whenever a contact match fails while running this transition. Configuration is stored in the update_clinics field of app_settings.json as a list of objects connecting forms to messages. Every object should have this structure:\nProperty Description form Form code. messages List of tasks/errors that will be created, determined by event_type. Supported events_types are:\nEvent Type Trigger sys.facility_not_found Facility not found If this configuration is not set then the message defaults to what is set in the messages.generic.sys.facility_not_found key.\nExample \"update_clinics\": [ { \"form\": \"FORM\", \"messages\": [ { \"event_type\": \"sys.facility_not_found\", \"recipient\": \"reporting_unit\", \"translation_key\": \"sys.facility_not_found\" } ] }, { \"form\": \"OTHER\", \"messages\": [ { \"event_type\": \"sys.facility_not_found\", \"recipient\": \"reporting_unit\", \"translation_key\": \"messages.other.facility_not_found\" } ] } ] create_user_for_contacts Users are automatically created for certain contacts. Both creating a new user for a new contact and replacing an existing user with a new user are supported.\nConfiguration Several configurations are required in app_settings to enable the create_user_for_contacts transition.\nLogin by SMS must be enabled by setting the token_login configuration.\nThe app_url property must be set to the URL of the application. This is used to generate the token login link for the new user.\nExample \"app_url\": \"https://demo.app.medicmobile.org\", \"token_login\": { \"enabled\": true, \"translation_key\": \"sms.token.login.help\" }, \"transitions\": { \"create_user_for_contacts\": true } When adding a new person contact, the create_user_for_contacts transition can be triggered to create a new user associated with that contact. Available since 4.2.x.\nExample scenario A supervisor can onboard a CHW just by creating a new person contact for the CHW with a “create contact” form.\nOnce the new contact is synced with the server and has been processed by Sentinel, a user will be automatically created and the new CHW will receive an SMS message (at the phone number specified in the contact) containing a token login link. This link will allow them to login as the newly created user. For security reasons, the token login link is valid for only one use and can only be used within 24 hours.\nForm Configuration When the create_user_for_contacts transition is enabled, Sentinel will attempt to create a user for any newly created person contacts with the user_for_contact.create field set to 'true'. So, contact forms and app forms for adding persons that should trigger new user creation need to include a user_for_contact group that contains a create field. The calculation for the value of the create field should evaluate to 'true' when a new user is desired. Any other value for that field will not trigger user creation.\nOnce Sentinel has generated a user for the contact, the user_for_contact.create field will be automatically removed from the contact document.\nUsers are only generated for newly created contacts. Editing an existing contact will not trigger user creation regardless of the value set for the user_for_contact.create field.\nRequired contact fields The new person contacts must have the following fields set:\nname phone - must be set to a valid number roles - must contain the desired roles for the new user (if just a single role is needed, the role field on the contact may be used instead) See the person-create contact form provided in the Default config as an example. This form will trigger the creation of a new user for the contact when the role is set to chw or chw_supervisor and a phone number is provided.\nReplace User An existing offline user can be replaced on a device so that a new user can use that device without needing to immediately sync with the server. Available since 4.1.x.","accept_case_reports#accept_case_reports":"","accept_patient_reports#accept_patient_reports":"","add_birth_date#\u003ccode\u003eadd_birth_date\u003c/code\u003e":"","add_case-as-of-390#\u003ccode\u003eadd_case\u003c/code\u003e \u003cem\u003eas of 3.9.0\u003c/em\u003e":"","add_expected_date#\u003ccode\u003eadd_expected_date\u003c/code\u003e":"","add_patient#\u003ccode\u003eadd_patient\u003c/code\u003e":"","add_patient_id#\u003ccode\u003eadd_patient_id\u003c/code\u003e":"","add_place-as-of-380#\u003ccode\u003eadd_place\u003c/code\u003e \u003cem\u003eas of 3.8.0\u003c/em\u003e":"","alternative-name-location#Alternative Name Location":"","alternative-name-location-1#Alternative Name Location":"","assign_schedule#\u003ccode\u003eassign_schedule\u003c/code\u003e":"","available-transitions#Available transitions":"","clear_schedule#\u003ccode\u003eclear_schedule\u003c/code\u003e":"","client-side#Client-side":"","client-side-1#Client-side":"","client-side-muting-history#Client-side muting history":"","configuration#Configuration":"","configuration-1#Configuration":"","configuration-2#Configuration":"","configuration-3#Configuration":"","configuration-4#Configuration":"","configuration-5#Configuration":"","configuration-6#Configuration":"","configuration-7#Configuration":"","contact-type#Contact Type":"","contact-type-1#Contact Type":"","create_user_for_contacts#create_user_for_contacts":"","death_reporting#death_reporting":"","details#Details":"This process does not actually delete the original user, but just resets the password to a random value. To recover the original user, a server administrator should update the user’s password to a known value or re-issue a token login link for the user (if enabled).\nBecause the server-side transition immediately invalidates any remaining sessions for the original user, it is not recommended to use this process for replacing users that are logged in on multiple devices simultaneously. The data on the device used to replace the user will always be completely synchronized before the user is replaced. However, un-synced data from other devices can be left on those devices when the user is replaced using a separate device.","events#Events":"","events-1#Events":"","events-2#Events":"","example#Example":"","example-1#Example":"","example-2#Example":"","example-3#Example":"","example-4#Example":"","example-5#Example":"","example-6#Example":"","example-app_settings#Example \u003ccode\u003eapp_settings\u003c/code\u003e":"\"create_user_for_contacts\": { \"replace_forms\": [ \"replace_user\" ] }","example-scenario#Example scenario":"","example-scenario-1#Example scenario":"Imagine a CHW is leaving the program, and the CHW’s device is returned to their supervisor. The supervisor wants to transfer the device to a new CHW immediately without having the device online to sync with the server.\nTo do this, when the create_user_for_contacts transition is enabled, the supervisor would submit a configured user replacement form for the original user’s contact on the device. This form can create a new contact for the new CHW and will trigger a client-side transition to mark the original contact as replaced. After that, the supervisor can give the device to the new CHW, and they can begin using it.\nSubsequent reports submitted on the device by the new CHW will be associated with the new contact. When the device is eventually able to synchronize with the server, it will be automatically logged out so the transition to the new user can be completed. A server-side transition will be triggered to initialize the new user for the new CHW. An SMS message containing a token login link will be sent to the new CHW allowing them to login as the initialized user. The password for the original user will be automatically reset by the server-side transition causing any remaining sessions for the original user (e.g. on other devices) to be logged out.","external-patient-id#External Patient ID":"","form-configuration#Form Configuration":"","generate_patient_id_on_people#generate_patient_id_on_people":"","generate_shortcode_on_contacts#generate_shortcode_on_contacts":"","how-transitions-work#How transitions work":"","multi_report_alerts#multi_report_alerts":"","muting#muting":"","muting-action#Muting action":"","muting-history#Muting history":"","on_create#\u003ccode\u003eon_create\u003c/code\u003e":"","registration#registration":"","replace-user#Replace User":"","replace_forms-configuration#\u003ccode\u003ereplace_forms\u003c/code\u003e Configuration":"User replacement via the create_user_for_contacts transition is triggered by submitting a configured app form for the original user’s contact.\nThe IDs of the app forms that should trigger the transition must be configured in the create_user_for_contacts.replace_forms array in the app_settings.\nThen, the actual forms must set the replacement_contact_id property to the id of the contact that should be associated with the new user.\nThese forms should only be submitted for the original user’s contact. You can control the form visibility by including user._id === contact._id in the form properties expression.\nThese forms should only be accessible to offline users (replacing online users is not currently supported). This is the default in the example app form properties file (see replace_user.properties.json).\nYou can prevent a user from being replaced multiple times by including !contact.user_for_contact || !contact.user_for_contact.replace in the form properties expression. (This expression is not recommended for situations where multiple users can be associated with the same contact since replacing one of the users would prevent any of the other users for that contact from accessing the form.)\nSee the replace_user app form provided in the Default config as an example.","required-contact-fields#Required contact fields":"","resetting-the-sentinel-sequence-id-to-skip-a-large-backlog#Resetting the sentinel sequence ID to skip a large backlog":"In some cases, a CHT instance may develop a very large sentinel backlog that would take too long to process, preventing new transitions from being applied to incoming reports. In these situations, you can reset the sentinel sequence ID to skip processing the backlog.\nFollow these steps to reset the sentinel sequence ID:\nConfirm you have a sentinel backlog in watchdog. This will likely be in the thousands or millions. While it may be decreasing, you’ll notice that it could take weeks or months to reach zero. During this backlog processing, no new sentinel transitions will be processed:\nGet the current sequence ID for the medic database via a curl call. Be sure to replace and with the correct values:\ncurl -qs https://medic:@/medic/ | jq \".update_seq\" This will show a long string (approximately 400 characters) starting with a number, for example:\n307933-g1AAAAO1eJyV0j1OwzAUB3CLIiEQUsXAJRiQP2I7ZoErQGsxMMV2oigqMDFzil4BUk-sTJyCKzAwMtOGZ8cLUlXJ9vCGJ__k97cXCKHjduLQiX18sq0zV4TKcwybLKC197CPXr3_hjLA6tqJQcgd3kProOSmFLzYdnQ3eKP1J5QXcBN4FEHJqeSK5oPrYfiAcg3uCNa3EaywZI0j-WDvvYfyC2664XsEi6bCWDX54Ezr5RilT-BFBJlzkjKWCZrnYdiMQS5Hzr5FjsqS1kzmcp33q2CuE_YVMaNajNtcTGs9D2Kfj5pzijMqcrFL-HRBnKV3vYuYsbUqRHZqZ5B-EDfpCabjmJRWxGWPeQq2CuPqXmSC8pCXPxCoUuHmSfqJkCVaF2Tpj9wfVKv_m In Fauxton, go to the transitions-seq document by navigating to:\nhttps://your-instance-url:port/_utils/#database/medic-sentinel/_local/transitions-seq You’ll notice that before editing, the leading integer in the “value” field is lower than what you found in step 2.\nStop the sentinel container. This step is critical - if you don’t stop sentinel, it may overwrite your changes to the sequence ID, and the backlog will not be cleared.\nEdit the value field to paste in the string you got from step 2 and click “Save Changes”:\nRestart the Sentinel container.\nCheck watchdog which should now show a sharp drop in the backlog to zero:\nNote that this will skip processing all reports in the backlog. Only use this approach when you’re confident that skipping the backlog processing is acceptable for your deployment.","self_report#self_report":"","server-side#Server-side":"","server-side-1#Server-side":"","server-side-muting-history#Server-side muting history":"","specific-parent#Specific Parent":"","specific-parent-as-of-380#Specific Parent \u003cem\u003eas of 3.8.0\u003c/em\u003e":"","triggers#Triggers":"","troubleshooting#Troubleshooting":"Configuration is validated when Sentinel starts. Issues with the configuration will be show in the Sentinel logs.\nErrors occurring during the client-side transition will be recorded in the browser’s console. This is where problems with processing reports from the replace forms will be logged.\nErrors occurring during the server-side transition will be recorded in the Sentinel logs and on the contact doc for the original user. So, if the client-side transition marks the original user for replacement, but Sentinel fails to create the new user, the failure will be recorded on the original contact doc in the errors array.","unmuting-action#Unmuting action":"","update_clinics#update_clinics":"","update_notifications#update_notifications":""},"title":".transitions"},"/building/reference/app-settings/user-permissions/":{"data":{"":"Permissions are defined by the permissions object in the base_settings.json file. The list below illustrates the available system defined permissions. To utilize a permission, you will need to first add the permission as a property of the permissions object, and then associate the permission to user role(s).\nPermissions can be assigned to user roles either directly in base_settings.json as an array of user role identifiers, or configured in the App Management app.\nSee Also: User roles","code-sample#Code sample":"This sample shows how to define the permissions object in the base_settings.json file. Observe how can_edit permission has been associated to supervisor_role and chw_role user roles.\n\"permissions\": { \"can_edit\": [ \"supervisor_role\", \"chw_role\" ], \"can_access_gateway_api\": [ \"supervisor_role\" ], \"can_aggregate_targets\": [ \"supervisor_role\", \"chw_role\" ], ... ... }","legacy-permissions#Legacy Permissions":"Property Description Removed can_view_old_filter_and_search Allows users to see the old filter and search in Reports Tab and Contact Tab which is considered deprecated. Admin user will always see the new redesigned filter. See Feature Flags for more info. 4.12.0 can_view_old_action_bar Allows users to see the old action bar in Message Tab, Reports Tab and Contact Tab which is considered deprecated. The More Options menu will be hidden when this permission is enabled. The Admin user will always see the new More Options menu. See Feature Flags for more info. 4.12.0","system-defined-permissions#System defined permissions":"Property Description can_edit This is probably one of the most important permissions in CHT Framework. It allows creating, editing and deleting documents in CouchDB’s medic database. This permission overrides any other permission in this list. can_access_gateway_api Allows access to gateway API can_aggregate_targets Allows access to Target Aggregates page can_bulk_delete_reports Allows users to select multiple reports and delete can_configure Allows update of configuration parameters can_upgrade Allows upgrades of the CHT Core Framework version via the API or admin interface can_create_people Allows creation \u0026 editing of person contacts can_create_places Allows creation \u0026 editing of place contacts can_create_records Allows creation of reports can_create_users Allows creation of user logins can_delete_contacts Allows deletion of people and places can_delete_messages Allows deletion of messages can_delete_reports Allows deletion of reports can_delete_users Allows deletion of users can_edit_profile Allows editing of their own user profile can_edit_verification Allows setting and editing of report verification status. To block the user from updating the existing status, use can_verify_reports instead. can_export_all Allows export of data including data they do not have access to can_export_contacts Allows export of contacts can_export_dhis Allows export of DHIS2 metrics can_export_feedback Allows export of user feedback can_export_messages Allows export of reports and messages can_log_out_on_android Displays logout menu item in hamburger menu for Android users and can be used to log out from the application can_update_places Allows editing of place documents can_update_reports Allows editing of report documents can_update_users Allows editing of user documents can_verify_reports Allows setting report verification status if no status is currently set. To allow the user to update the existing status, use can_edit_verification instead. can_view_analytics Allows access to in-app analytics can_view_analytics_tab Displays analytics tab on the application can_view_call_action Displays a button to call the selected person can_view_contacts Allows viewing contacts can_view_contacts_tab Displays the contacts tab in the application can_view_last_visited_date Enable display of the date a family was last visited can_view_message_action Displays a button to send a message to the selected contact can_view_messages Allows viewing messages can_view_messages_tab Displays the messages tab in the application can_view_outgoing_messages Allows viewing outgoing messages when logged in as an administrator can_view_reports Allows viewing reports can_view_reports_tab Displays the reports tab in the application can_view_tasks Allows viewing tasks can_view_tasks_tab Displays tasks tab in the application can_view_tasks_group Displays all available tasks within same place after submitting can_view_uhc_stats Allows users to view UHC metrics can_view_unallocated_data_records Allows viewing reports that have no associated contact can_view_users Allows viewing all user accounts can_write_wealth_quintiles Allows updating contacts with wealth quintile information can_default_facility_filter Defaults the Place Filter in Reports tab to the user’s associated facility. The user should have a contact associated that belongs to a facility. This feature is not available for Admin and Offline type of users. Use with caution, online users that can access thousands of reports can experience slow performance especially where the network is slow. Added in 4.3. can_have_multiple_places Allows users to be assigned more than one facility_id. Helps support health systems where offline Supervisors manage CHWs from different geographical areas. Each facility_id must be at the same level in the hierarchy. Added in 4.9.0 can_skip_password_change Turns off the password change prompt for users logging in for the first time or who have had their password reset. Added in 4.17.0 can_view_old_navigation Allows users to see the old CHT navigation interface, prior to the updates made to align with Material Design standards. See the release notes for more details. Added in 4.12.0."},"title":".permissions"},"/building/reference/app-settings/user-roles/":{"data":{"":"Each user is assigned one of the defined roles. Roles can be defined using the App Management app, which is represented by the roles object of the app-settings.json file. Each role is defined by an identifier as the key, and an object with the following properties:","app_settingsjson-roles#\u003ccode\u003eapp_settings.json .roles{}\u003c/code\u003e":"Property Description Required name The translation key for this role Yes offline Determines if user will be an online or offline user. Set to false for users to be “online” users. No, default true"},"title":".roles"},"/building/reference/extension-libs/":{"data":{"":"Introduced in v4.2.0","advanced-usage#Advanced usage":"Extension libraries are simply JavaScript functions executed in the context of the CHT web application. This means technically they can be used to do things like manipulating the DOM for fine-grained control of how elements are displayed in a form.\nAdvanced integrations like this are not explicitly supported (they may break in future versions of the CHT). However, they can be a powerful tool for developers looking to extend the CHT without having to fork the entire project.\nSee this blog post from a community member for more information and inspiration on the kinds of things that can be achieved with extension libs!","cht-api#CHT API":"The function will now be available via the CHT API for tasks, targets, and contact summary configurations.","cht-xpath-functions#CHT xPath functions":"To execute the function from within an xform use the cht:extension-lib xpath function.","introduction#Introduction":"Extension libraries are blocks of code that are cached with the CHT web application giving app developers a powerful tool to extend the CHT. This is an advanced feature and requires an app developer with some software development experience.\nAn example of a use for this feature is to provide a function to calculate a risk score based on a machine learning model. The function can then be called passing in values from app forms and return the result to be stored with the report.","invoking-the-function#Invoking the function":"","library#Library":"The first step is to create the js file to return the function that will be called by the web application. Create a new file using this template:\nmodule.exports = function(/* parameters */) { return result; } Now populate the function as needed. For complex functions, it is recommended to use third party libraries (such as momentjs, lodash, etc) and use a bundler (eg: webpack) to make it easy to build a single file. It’s recommended to use development best practices such as linting, unit tests, and minification to ensure quality and small download size.","uploading-to-the-cht#Uploading to the CHT":"Create a folder within the project configuration to contain the libraries, for example:\n./extension-libs average.js calculate-risk-score.js Now run the command: cht upload-extension-libs\nThis will create or update a document to CouchDB with an ID of extension-libs with each of the configured scripts attached. Once this is created the webapp service worker will be updated so the libraries are cached on the phone ready for use offline.","xpath-functions#xpath functions":"To call the function from within a form the parameters and return value will need to have a very specific structure to work with Enketo xforms.\n{ \"t\": , \"v\": } Where the type is one of “bool”, “num”, “str”, “date”, or “arr”. For example, to calculate the average of two inputs, you would use:\nconst getValue = function(obj) { let val; if (obj.t === 'arr') { val = obj.v \u0026\u0026 obj.v.length \u0026\u0026 obj.v[0]; } else { val = obj.v; } if (!val) { return 0; } const parsed = parseInt(val.textContent); return isNaN(parsed) ? 0 : parsed; }; module.exports = function(first, second) { const average = (getValue(first) + getValue(second)) / 2; return { t: 'num', v: average }; }"},"title":"extension-libs/"},"/building/reports/":{"data":{"":"Content in this section Overview Defining reports"},"title":"Reports"},"/building/reports/defining-reports/":{"data":{"":"The reports shown in your app are the completed and submitted forms. These forms must be defined and included with the application. There are two types of form definitions for reports:\nApp forms: actions within the app, such as a completed task, or an action on a contact’s profile or reports tab. App forms are defined as XForms. JSON forms: data coming from external channels such as SMS, or via interoperability with other tools. JSON forms are defined using a JavaScript Object Notation schema."},"title":"Defining reports"},"/building/reports/reports-overview/":{"data":{"":"The Reports tab is where you can access submitted data. Depending on how often you anticipate a user needing to access this tab, you can configure it to show in the main tabs list (preferable for admin users) or in the secondary hamburger menu (preferable for CHW users).\nThe permissions set for your role and your placement in the hierarchy will determine which reports you’re able to see on this tab. As a rule, you can only view reports submitted by yourself or those below you in the hierarchy. Therefore, CHWs will only see reports that they submitted on this tab, while supervisors will see reports that they submitted as well as those submitted by their CHWs. Advanced configuration options are available for a specific off-line user role to manage what level of report data is copied to their device.","action-buttons#Action Buttons":"The action buttons at the bottom of the screen are configurable using permissions. Options include submit, edit, delete, review and export reports.\nClicking on the “Export” button will download a CSV file with all the data from the reports. And clicking the “+ Submit report” button opens a menu of forms a user can choose to complete.","bulk-delete-reports#Bulk Delete Reports":"Allows the user to select multiple reports and delete them. Please Note: This action cannot be undone. If in doubt, do not delete! You can restrict a user’s access to this feature by disabling the permission can_bulk_delete_reports.","detail-pages#Detail Pages":"You can click on any report to view a report detail page. Here you’ll find the name and phone number of the user who submitted the report as well as responses to the questions within it. If the report initiated a schedule of SMS messages, you will see the messages queued to send.\nThe buttons at the bottom are configurable. The ones you see will depend on your user role, permissions, and hierarchy.\nSend a Message​: Opens the Messages page to send a message to the person who submitted the report Review: Mark as “correct” or “has errors” Edit: Opens the form to edit it Delete: Deletes a report ( cannot be undone)","filters--search#Filters \u0026amp; Search":"The toolbar at the top of the page includes filters and search to help users narrow down the list or search for and find a specific report. These filters are configurable and could include:\nReport Types (e.g. pregnancy registration, visits, delivery report) Places (e.g. districts, health centers or CHW areas) Date of Submission Status (e.g. not reviewed, has errors, correct, valid SMS, invalid SMS) Using the search box, you can search for reports by patient name, phone number, ID number and more. To reset the filters and view the full list of forms, click on “Reset” located in the filter sidebar.\nNote\nA new user experience for Filter and Search was introduced in v3.17. The previous version can be re-enabled for users by adding the permission can_view_old_filter_and_search to the user’s role; however, the old version should be considered deprecated and will be completely removed in a future release. See Feature Flags documentation for more info","main-list#Main List":"The first line of bold text is the name of the person whom the report is about. The second line of text is the name of the report, and the third line of text is the hierarchy of place to which that person belongs. In the upper right corner, a timestamp displays when the report was submitted. Reports are sorted by submission date, with the most recent reports at the top. If a report is unread, the timestamp will be bold blue and there will be a horizontal blue line above it.\nApps built with the Core Framework have a “review” feature that allows managers to indicate whether a report has been reviewed and if it contains errors. If a manager has marked a report as “correct,” a green checkmark will show below the timestamp. If a report is marked as “has errors,” a red ‘X’ will show. This same icon is used for invalid SMS messages."},"title":"Overview"},"/building/supervision/":{"data":{"":"Content in this section Overview CHW Aggregate Targets User and Area Management Dashboards and Reporting"},"title":"Supervision"},"/building/supervision/chw-aggregate-targets/":{"data":{"":"For CHW Supervisors, the Targets tab provides important insights into their community unit. It presents Supervisors with actionable information about their CHWs, by aggregating data for each of the CHWs that a Supervisor manages and presenting it in an easily digestible format. This enables Supervisors to gain insight into how well their team of CHWs is working together to meet common goals.\nSelecting an aggregate widget opens the detailed view with the data for each individual CHW. If a CHW is performing below the target goal, their value will be highlighted in red, making it easier for Supervisors to know with which CHWs to follow up for coaching and performance management.\nNote\nAggregate targets were introduced in v3.9, and can be configured for both online and offline users. Aggregate targets are based on the widgets seen by CHWs, and dependent on the data that has been synced. If a CHW or the supervisor has not synced, then the aggregate target will not be up to date.","filtering-aggregate-targets#Filtering Aggregate Targets":"The ability for one user to manage multiple areas / facilities was introduced in v4.9.0. With that change it was important for users who manage multiple areas to filter aggregate targets by the respective facilities. The ability for users to filter Aggregate Targets was introduced in v4.10.0.\nThe following images show the various screens CHW supervisors see in Aggregate Targets. The example user in this illustration manages two facilities: First Health Facility and Second Health Facility.\nThis is the landing page for the Aggregate Targets for a user who manages multiple areas / facilities.\nThe name of the facility appears in the breadcrumbs of the aggregate widgets on the Left Hand Side list and underneath the Target Title.\nOn the Top Right the user can click the Filter button to open the sidebar and change the Aggregate Targets of the other facilities.\nClicking the Filter button opens the sidebar, which allows the user to filter the Aggregate Targets by Facility or Reporting Period\nSelecting the Second Health Facility in the filter updates the Facility name in the breadcrumbs of the aggregate widgets on the Left Hand Side list and underneath the Target Title.\nFiltering the Aggregate Targets by Reporting Period adds the name of the previous month to the breadcrumbs of the aggregate widgets on the Left Hand Side list and in the Target details.\nUsers who manage one area / facility can only filter their Aggregate Targets by Reporting Period.\nThe name of the facility does not appear in the breadcrumbs of the aggregate widgets on the Left Hand Side list or underneath the Target Title.\nFiltering the Aggregate Targets by Reporting Period adds the name of the previous month to the breadcrumbs of the aggregate widgets on the Left Hand Side list and in the Target Details.\nNote\nThe list of facilities in the sidebar are sorted in alphabetic order. The default filter option for the facilities filter is the first facility in the sorted array of user Facilities. The default filter option for the reporting period is This month. The facility filter label in this example (Health Facility) is the name_key of the facility contact_type configured in the the app-settings The reporting period label in this example (Reporting Period) is added as a translation key analytics.target.aggregates.reporting_period."},"title":"CHW Aggregate Targets"},"/building/supervision/dashboards-reporting/":{"data":{"":"","dhis2-data-verification#DHIS2 Data Verification":"Supervisors often provide a critical bridge between CHWs and broader health system reporting. Using the CHT’s DHIS2 integration, Supervisors can see the aggregate of each DHIS2 Data Value across all CHWs in their area. By tapping on a target, they can also see each CHW’s contribution towards that total. Once the Supervisor has verified data accuracy with CHWs, they can communicate with Health Records Information Officers to feed data into the national health information system.\nDHIS2 integration was introduced in v3.9.","supervisor-dashboards#Supervisor Dashboards":"Program dashboards track, visualize, and share health progress with stakeholders more broadly. Supervisors can use program dashboards to help articulate their CHW cohorts activities and how they align with program impact standards and indicators. Summary statistics of CHW service area performance (e.g. number of home visits, number of protocol errors, etc) help to identify areas for continued improvement and deeper audits of care data.\nThe data that can be visualized is highly configurable, and depends on what data fields are configured in a particular CHT app’s forms. Dashboards can be built using any software that supports visualizing data with the widely used PostgreSQL database. Examples include the open source tool Superset, as well as proprietary technologies like Klipfolio and Tableau."},"title":"Dashboards and Reporting"},"/building/supervision/supervision-overview/":{"data":{"":"Supervision and workforce management are important aspects to building and maintaining high-performing community health systems. Supervisors help Community Health Workers deliver quality healthcare services to their patients through building CHW care delivery knowledge and skills, fostering a supportive work environment, and supporting continuity of care between home-based care and community health centers or facilities.\nThe importance of regular and systematic CHW supervision is emphasized by the WHO’s guidelines on health policy and system support, which is formulated to optimize community-based health worker programs. Following these guidelines, the CHT is designed to enable Supervisors to provide personalized performance feedback during CHW supervision as well as track aggregate statistics. Data collected from completed Care Guides produce granular information which can be used to provide coaching that promotes compliance with health program standards of practice and closer monitoring of outcomes."},"title":"Overview"},"/building/supervision/user-area-management/":{"data":{"":"","managing-multiple-areas#Managing Multiple Areas":"CHT hierarchies tend to mimic geographical areas but Supervisors often manage CHWs across multiple geographical areas. (Offline) Supervisors who manage multiple areas can see data for all the different areas they manage from one app.\nNote\nThe ability for one user to replicate data from multiple areas was introduced in v4.9.0. A video demonstration of setting up a multi-facility user and what this looks like from a user’s perspective can be found on the forum and in the June 2024 CHT Round-up.","user-management#User Management":"Supervisors are able to set up users in the CHT without contacting a system administrator. They can create new CHW user accounts or replace CHWs on an existing device.\nWhen creating a new user account, Supervisors fill out the necessary details, including the CHW’s phone number, from their own device. They can do this while offline, but must sync before the actual user account is created. Once the Supervisor syncs, the CHT will send an SMS to the new CHW with a magic link that enables them to login and start using the app.\nWhen replacing a CHW, Supervisors access the existing device and provide details about the new CHW. The new CHW can start using the app immediately, even while offline, and will see all of the existing household data. Once the new CHW syncs, the records on the server will be updated to reflect the new CHWs details.\nThis can be used to manage both CHW and CHW supervisor roles."},"title":"User and Area Management"},"/building/targets/":{"data":{"":"Content in this section Overview Target Widgets targets.js"},"title":"Targets"},"/building/targets/target-widgets/":{"data":{"":"This tutorial will take you through how to build target widgets.\nTarget widgets provide a summary or analysis of the data in submitted reports.\nYou will be adding target widgets that will allow Community Health Workers (CHWs) to track various metrics based on assessment reports submitted.","1-define-an-all-time-target-widget#1. Define an All-Time Target Widget":"This widget counts the total number of assessment reports that have been submitted by the user from the time that they started reporting. Edit the targets.js file to define the total assessments all-time widget as shown below:\n{ id: 'assessments-all-time', type: 'count', icon: 'icon-healthcare-assessment', goal: -1, translation_key: 'targets.assessments.title', subtitle_translation_key: 'targets.all_time.subtitle', appliesTo: 'reports', appliesToType: ['assessment'], date: 'now' }","10-target-icons#10. Target icons":"You may add icons to your target widgets to enhance their appearance and to help users locate specific widgets more quickly. Use the icons in the targets icon library, or icons of your choice for the target widgets. Add your selected icons to the resources folder in your project folder. In your resources.json file, add key/value pairs for your icon resources.\n{ \"icon-healthcare-assessment\": \"icon-healthcare-assessment.svg\", \"icon-household\": \"icon-places-household.svg\", \"icon-cough\": \"icon-condition-cough.svg\" } Note\nThe key in the resources.json file is the value of the icon property in the target widget configuration.\nSee Also: Icon Library\nTo upload resources to your local instance, run the following command:\ncht --url=https://:@localhost --accept-self-signed-certs upload-resources The image shows the expected final appearance of the target widgets on adding and uploading resources. The figures on the widgets will depend on the number of reports submitted for contacts and the number of contacts you have created on your instance.","2-define-the-total-assessments-monthly-target-widget#2. Define the Total Assessments Monthly Target Widget":"This widget counts the total number of assessment reports that have been submitted by the user for this month. Edit the targets.js file and add another target widget definition object to define the total assessments monthly widget as shown below:\n{ id: 'assessments-this-month', type: 'count', icon: 'icon-healthcare-assessment', goal: 2, translation_key: 'targets.assessments.title', subtitle_translation_key: 'targets.this_month.subtitle', appliesTo: 'reports', appliesToType: ['assessment'], date: 'reported' } Note\nAll-time widgets have the date property set to now while monthly widgets have the date property set to reported.\nThe image shows the monthly and all-time target widgets, respectively, with the resulting figures varying depending on the number of assessment reports submitted within the respective durations.","3-define-the-cough-count-widget#3. Define the Cough Count Widget":"This widget calculates the total number of patients assessed that have been indicated to have a cough this month, regardless of the number of reports submitted for them. Note that idType counts the contact IDs. Edit the targets.js file and add the target widget as shown below:\n{ id: 'total-contacts-with-cough-this-month', type: 'count', icon: 'icon-cough', goal: -1, translation_key: 'targets.assessments.total.cough.title', subtitle_translation_key: 'targets.this_month.subtitle', appliesTo: 'reports', appliesToType: ['assessment'], appliesIf: function (contact, report) { return Utils.getField(report, 'group_assessment.cough') === 'yes'; }, idType: 'contact', date: 'reported' }","4-define-the-cough-percentage-widget#4. Define the Cough Percentage Widget":"This widget calculates the percentage patients assessed that have been indicated to have a cough this month, regardless of the number of reports submitted for them. Edit the targets.js file and add the target widget as shown below:\n{ id: 'percentage-contacts-with-cough-this-month', type: 'percent', icon: 'icon-cough', goal: -1, translation_key: 'targets.assessments.percentage.cough.title', percentage_count_translation_key: 'targets.assessments.percentage.with.cough', subtitle_translation_key: 'targets.this_month.subtitle', appliesTo: 'reports', appliesToType: ['assessment'], appliesIf: function (contact) { return contact.contact \u0026\u0026 contact.contact.parent \u0026\u0026 contact.contact.parent.parent \u0026\u0026 contact.contact.parent.parent.parent; }, passesIf: function(contact, report) { return Utils.getField(report, 'group_assessment.cough') === 'yes'; }, idType: 'contact', date: 'reported' }","5-define-total-households-with-assessments-widget#5. Define Total Households with Assessments Widget":"This widget calculates the number of households that have patients assessed this month. Note that emitCustom emits a target with custom conditions that may otherwise not be directly configurable through the target schema. Filter based on reports, and use the contact information from the reports to emit targets. The target ID is the household ID. Edit the targets.js file and add the target widget as shown below:\n{ id: 'households-with-assessments-this-month', type: 'count', icon: 'icon-household', goal: 2, translation_key: 'targets.households.with.assessments.title', subtitle_translation_key: 'targets.this_month.subtitle', appliesTo: 'reports', appliesToType: ['assessment'], date: 'reported', emitCustom: (emit, original, contact) =\u003e { const householdId = contact.contact \u0026\u0026 contact.contact.parent._id; emit(Object.assign({}, original, { _id: householdId, pass: true })); } }, Note the difference in appearance on the resulting count target widgets based on whether the goal is achieved. The figures vary depending on the number of assessment reports submitted for household members.","6-define-percentage-households-with-2-assessments-widget#6. Define Percentage Households with \u0026gt;=2 Assessments Widget":"This widget calculates the percentage of households that have two or more patients assessed all time. Use emitCustom to emit a custom target instance. The target instance ID is the household ID. Edit the targets.js file and add the target widget as shown below:\n//Define a function to get the household ID based on the hierarchy configuration const getHouseholdId = (contact) =\u003e contact.contact \u0026\u0026 contact.contact.type === 'clinic' ? contact.contact._id : contact.contact.parent \u0026\u0026 contact.contact.parent._id; //Define a function to determine if contact is patient const isPatient = (contact) =\u003e contact.contact \u0026\u0026 contact.contact.type === 'person' \u0026\u0026 contact.contact.parent \u0026\u0026 contact.contact.parent.parent \u0026\u0026 contact.contact.parent.parent.parent; { id: 'households-with-gt2-assessments-this-month', type: 'percent', icon: 'icon-household', goal: 60, translation_key: 'targets.households.with.gt2.assessments.title', subtitle_translation_key: 'targets.all_time.subtitle', appliesTo: 'contacts', appliesToType: ['person', 'clinic'], //Need the total number of households as denominator date: 'now', emitCustom: (emit, original, contact) =\u003e { const householdId = getHouseholdId(contact); if (isPatient(contact)) { if (contact.reports.some(report =\u003e report.form === 'assessment')) { emit(Object.assign({}, original, const targetInstance = { _id: householdId, //Emits a passing target instance with the household ID as the target instance ID pass: true })); } } if(contact.contact \u0026\u0026 contact.contact.type === 'clinic') { //This represents the denominator, which is the total number of households emit(Object.assign({}, original, _id: householdId, pass: false, //Set to false so that it is counted in the denominator })); } }, groupBy: contact =\u003e getHouseholdId(contact), passesIfGroupCount: { gte: 2 } } See Also: Hierarchies\nThe images show the resulting percent target widgets, with the figures varying depending on the number of assessment reports submitted for household members. Note the difference in appearance based on whether the goal is achieved.","7-final-targetsjs-file#7. Final \u003ccode\u003etargets.js\u003c/code\u003e file":"Include the functions and replace appropriately in the file. The final content of the targets file should be similar the one below:\n//Define a function to get the household ID based on the hierarchy configuration const getHouseholdId = (contact) =\u003e contact.contact \u0026\u0026 contact.contact.type === 'clinic' ? contact.contact._id : contact.contact.parent \u0026\u0026 contact.contact.parent._id; //Define a function to determine if contact is patient const isPatient = (contact) =\u003e contact.contact \u0026\u0026 contact.contact.type === 'person' \u0026\u0026 contact.contact.parent \u0026\u0026 contact.contact.parent.parent \u0026\u0026 contact.contact.parent.parent.parent; module.exports = [ { id: 'assessments-all-time', type: 'count', icon: 'icon-healthcare-assessment', goal: -1, translation_key: 'targets.assessments.title', subtitle_translation_key: 'targets.all_time.subtitle', appliesTo: 'reports', appliesToType: ['assessment'], date: 'now' }, { id: 'assessments-this-month', type: 'count', icon: 'icon-healthcare-assessment', goal: 2, translation_key: 'targets.assessments.title', subtitle_translation_key: 'targets.this_month.subtitle', appliesTo: 'reports', appliesToType: ['assessment'], date: 'reported' }, { id: 'total-contacts-with-cough-this-month', type: 'count', icon: 'icon-cough', goal: -1, translation_key: 'targets.assessments.total.cough.title', subtitle_translation_key: 'targets.this_month.subtitle', appliesTo: 'reports', appliesToType: ['assessment'], appliesIf: function (contact, report) { return Utils.getField(report, 'group_assessment.cough') === 'yes'; }, idType: 'contact', date: 'reported' }, { id: 'percentage-contacts-with-cough-this-month', type: 'percent', icon: 'icon-cough', goal: -1, translation_key: 'targets.assessments.percentage.cough.title', subtitle_translation_key: 'targets.this_month.subtitle', percentage_count_translation_key: 'targets.assessments.percentage.with.cough', appliesTo: 'reports', appliesToType: ['assessment'], appliesIf: function (contact) { return isPatient(contact); }, passesIf: function(contact, report) { return Utils.getField(report, 'group_assessment.cough') === 'yes'; }, idType: 'contact', date: 'reported' }, { id: 'households-with-assessments-this-month', type: 'count', icon: 'icon-household', goal: 2, translation_key: 'targets.households.with.assessments.title', subtitle_translation_key: 'targets.this_month.subtitle', appliesTo: 'reports', appliesToType: ['assessment'], date: 'reported', emitCustom: (emit, original, contact) =\u003e { const householdId = getHouseholdId(contact); emit(Object.assign({}, original, { _id: householdId, pass: true })); } }, { id: 'households-with-gt2-assessments-this-month', type: 'percent', icon: 'icon-household', goal: 60, translation_key: 'targets.households.with.gt2.assessments.title', subtitle_translation_key: 'targets.all_time.subtitle', appliesTo: 'contacts', appliesToType: ['person', 'clinic'], //Need the total number of households as denominator date: 'now', emitCustom: (emit, original, contact) =\u003e { const householdId = getHouseholdId(contact); if (isPatient(contact)) { if (contact.reports.some(report =\u003e report.form === 'assessment')) { emit(Object.assign({}, original, const targetInstance = { _id: householdId, //Emits a passing target instance with the household ID as the target instance ID pass: true })); } } if(contact.contact \u0026\u0026 contact.contact.type === 'clinic') { //This represents the denominator, which is the total number of households emit(Object.assign({}, original, _id: householdId, pass: false, //Set to false so that it is counted in the denominator })); } }, groupBy: contact =\u003e getHouseholdId(contact), passesIfGroupCount: { gte: 2 }, } ]; See Also: Targets overview","8-compile-and-upload-app-settings#8. Compile and Upload App Settings":"To compile and upload app settings to your local instance, run the following command:\ncht --url=https://:@localhost --accept-self-signed-certs compile-app-settings upload-app-settings Important\nBe sure to replace the values and with the actual username and password of your test instance.\nThe image shows the expected outcome on the analytics tab, with figures varying depending on the number of reports submitted on your instance.","9-upload-translations#9. Upload translations":"To update the titles of the target widgets, ensure that the translation keys are in the translations file. Add the following translation keys and their values in the messages-en.properties file. You may word your translation keys and values differently.\ntargets.assessments.title = Total assessments targets.assessments.total.cough.title = Total population with cough targets.assessments.percentage.cough.title = % Population with cough targets.households.with.assessments.title = Total households with assessments targets.households.with.gt2.assessments.title = % Household with \u003e=2 assessments To upload translations to your local instance, run the following command:\ncht --url=https://:@localhost --accept-self-signed-certs upload-custom-translations The image shows the updated target titles. Your image may be different depending on your wording.\nImportant\nBe sure to have the correct translation key in your target widget’s translation_key property.","brief-overview-of-key-concepts#Brief Overview of Key Concepts":"Targets is the user dashboard or analytics tab.\nTarget widgets provide a summary or analysis of the data in submitted reports.\nCount widgets show a tally of a particular report that has been submitted or data within a report that matches a set of criteria.\nPercent widgets display a ratio, which helps to provide insight into the proportion that matches a defined criteria.\nTarget schema details a set of properties for targets.\nTarget instance is an object emitted and counted or aggregated based on target configuration.","frequently-asked-questions#Frequently Asked Questions":"How are targets ordered? What types of users can see target widgets?","implementation-steps#Implementation Steps":"It is good practice to set up a reference document outlining the specifications of the target widgets similar to the one below. Other formats may also be used.\nSource UI Label Definition Type Reporting Period Goal Assessment form Total assessments Total number of assessment reports submitted Count All time _ Assessment form Total assessments Total number of assessment reports submitted this month Count This month 2 Assessment form Total population with cough Total number of household members with cough Count This month _ Assessment form % Population with cough Total number of contacts with cough/Total number of contacts assessed Percent This month _ Assessment form Total households with assessments Total number of households with at least one submitted assessment form Count This month 2 Assessment form % Household with \u003e=2 assessments Total number of households with at least two patients assessed/Total number of households Percent All time 60 Create a targets.js file (this may have already been created by the initialise-project-layout command).","required-resources#Required Resources":"You should have a functioning CHT instance with cht-conf installed locally, completed a project folder setup, and an assessment form."},"title":"Target Widgets"},"/building/targets/targets-js/":{"data":{"":"All targets are defined in the targets.js file as an array of objects according to the Targets schema defined below. Each object corresponds to a target widget that shows in the app. The order of objects in the array defines the display order of widgets on the Targets tab. The properties of the object are used to define when the target should appear, what it should look like, and the values it will display.\nSee Also: Targets Overview","build#Build":"To build your targets into your app, you must compile them into app-settings, then upload them to your instance.\ncht --local compile-app-settings backup-app-settings upload-app-settings","cht-api#CHT API":"Introduced in v3.12.0\nProvides CHT-Core Framework’s functions to contact summary, targets and tasks. The API is available in the cht reserved variable under the v1 version.\nFunction Arguments Description hasPermissions(permissions, userRoles, chtPermissionsSettings) permissions: String or array of permission name(s).\nuserRoles: (Optional) Array of user roles. Default to the current logged in user.\nchtPermissionsSettings: (Optional) Object of configured permissions in CHT-Core’s settings. Default to the current instance’s configured permissions. Returns true if the user has the permission(s), otherwise returns false. hasAnyPermission(permissionsGroups, userRoles, chtPermissionsSettings) permissionsGroups: Array of groups of permission name(s).\nuserRoles: (Optional) Array of user roles. Default to the current logged in user.\nchtPermissionsSettings: (Optional) Object of configured permissions in CHT-Core’s settings. Default to the current instance’s configured permissions. Returns true if the user has all the permissions of any of the provided groups, otherwise returns false. getExtensionLib(name) name: String of script name Returns an executable function identified by the given name configured as extension-libs. analytics.getTargetDocs() Returns three target documents of the contact, calculated for the last three reporting intervals, including the current one. When viewing one of the current logged in user’s associated facilities, returns the target documents for the contact associated with the current logged in user. Returns an empty array if no target documents are found (for example when viewing a contact that does not upload targets). Introduced in v4.11.0 CHT API’s code samples const canEdit = cht.v1.hasPermissions('can_edit'); const canManagePlaces = cht.v1.hasPermissions(['can_create_places', 'can_update_places']); const hasAnyGroup = cht.v1.hasAnyPermission([ ['can_view_messages', 'can_view_message_action'], ['can_view_reports', 'can_verify_reports'] ]); const averageFn = cht.v1.getExtensionLib('average.js'); const targetDocs = cht.v1.analytics.getTargetDocs();","code-samples#Code Samples":"This sample targets.js generates three widgets, and uses functions written in the targets-extras.js file.","targets-extrasjs#\u003ccode\u003etargets-extras.js\u003c/code\u003e":"module.exports = { isHealthyDelivery(c, r) { return r.form === 'D' || (r.form === 'delivery' \u0026\u0026 r.fields.pregnancy_outcome === 'healthy'); }, countReportsSubmittedInWindow(reports, form, start, end) { var reportsFound = 0; reports.forEach(function(r) { if (form.indexOf(r.form) \u003e= 0) { if (r.reported_date \u003e= start \u0026\u0026 r.reported_date \u003c= end) { reportsFound++; } } }); return reportsFound; }, };","targetsjs#\u003ccode\u003etargets.js\u003c/code\u003e":"property type description required id string An identifier for the target. yes, unique icon string The icon to show alongside the target. Should correspond with a value defined in resources.json. no translation_key translation key Translation key for the title of this target. no, but recommended subtitle_translation_key translation key Translation key for the subtitle of this target. If none supplied the subtitle will be blank. no percentage_count_translation_key translation key Translation key for the percentage value detail shown at the bottom of the target, eg “(5 of 6 deliveries)”. The translation context has pass and total variables available. If none supplied this defaults to targets.count.default. no context string A string containing a JavaScript expression. This widget will only be shown if the expression evaluates to true. Details of the current user is available through the variable user. no type 'count' or 'percent' The type of the widget. yes goal integer For targets with type: 'percent', an integer from 0 to 100. For type: 'count', any positive number. If there is no goal, put -1. yes appliesTo 'contacts' or 'reports' Do you want to count reports or contacts? This attribute controls the behavior of other attributes herein. yes appliesToType If appliesTo: 'reports', an array of form codes. If appliesTo: 'contacts', an array of contact types. Filters the contacts or reports for which appliesIf will be evaluated. For example, ['person'] or ['clinic', 'health_center']. For example, ['pregnancy'] or ['P', 'pregnancy']. no appliesIf function(contact, report) If appliesTo: 'contacts', this function is invoked once per contact and report is undefined. If appliesTo: 'reports', this function is invoked once per report. Return true to count this document. For type: 'percent', this controls the denominator. no passesIf function(contact, report) For type: 'percent', return true to increment the numerator. yes, if type: 'percent'. Forbidden when groupBy is defined. date 'reported' or 'now' or function(contact, report) When 'reported', the target will count documents with a reported_date within the current month. When 'now', target includes all documents. A function can be used to indicate when the document should be counted. When this property is undefined or the value is null the default is ’now'. no idType 'report' or 'contact' or function(contact, report) The target’s values are incremented once per unique ID. To count individual contacts that have one or more reports that apply, use 'contact'. Use 'report' to count all reports, even if there are multiple that apply for a single contact. If you need more than a single count for each applying contact or report then a custom function can be used returning an array with unique IDs — one element for each count. no groupBy function(contact, report) returning string Allows for target ids to be aggregated and scored in groups. Not required for most targets. Use with passesIfGroupCount. no passesIfGroupCount object The criteria to determine if the target ids within a group should be counted as passing yes when groupBy is defined passesIfGroupCount.gte number The group should be counted as passing if the number of target ids in the group is greater-than-or-equal-to this value yes when groupBy is defined dhis object or object[] Settings relevant to the DHIS2 Integration no dhis[n].dataElement string The hash id of a data element configured in the DHIS2 data set you’re integrating with yes dhis[n].dataSet string The hash id of the data set that contains the data element you’re integrating with. If this is left undefined, the data element will appear in all data sets. no visible boolean Whether the target is visible in the targets page. Default: true no aggregate boolean As of 3.9, defines whether the target will be displayed on the TargetAggregates page no","targetsjs-1#\u003ccode\u003etargets.js\u003c/code\u003e":"const { isHealthyDelivery, countReportsSubmittedInWindow } = require('./targets-extras'); module.exports = [ // BIRTHS THIS MONTH { id: 'births-this-month', type: 'count', icon: 'infant', goal: -1, translation_key: 'targets.births.title', subtitle_translation_key: 'targets.this_month.subtitle', appliesTo: 'reports', appliesIf: isHealthyDelivery, date: 'reported', }, // % DELIVERIES ALL TIME WITH 1+ VISITS { id: 'delivery-with-min-1-visit', type: 'percent', icon: 'nurse', goal: 100, translation_key: 'targets.delivery_1_visit.title', subtitle_translation_key: 'targets.all_time.subtitle', appliesTo: 'reports', idType: 'report', appliesIf: isHealthyDelivery, passesIf: function(c, r) { var visits = countReportsSubmittedInWindow(c.reports, antenatalForms, r.reported_date - MAX_DAYS_IN_PREGNANCY*MS_IN_DAY, r.reported_date); return visits \u003e 0; }, date: 'now', }, { id: '2-home-visits-per-family', icon: 'home-visit', type: 'percent', goal: 100, translation_key: `target.2-home-visits-per-family`, context: 'user.role === \"chw\"', date: 'reported', appliesTo: 'contacts', appliesToType: 'person', idType: contact =\u003e { // Determines the target ids which will be in the group. // eg. \"family1~2000-02-15\" and \"family1~2000-02-16\" const householdVisitDates = new Set(contact.reports.map(report =\u003e toDateString(report.reported_date))); const familyId = contact.contact.parent._id; return Array.from(householdVisitDates).map(date =\u003e `${familyId}~${date}`); }, groupBy: contact =\u003e contact.contact.parent._id, passesIfGroupCount: { gte: 2 }, } ]","utils#Utils":"Utility functions in the Core Framework can make common tasks much easier. These are available only for Tasks and Targets. To use the function call Utils.(), for example Utils.addDate(report.reported_date, 10).\nName Description isTimely(date, event) Returns true if the given date is after the start date and before the end date of the event. addDate(date, days) Returns a new Date set to midnight the given number of days after the given date. If no date is given the date defaults to today. getLmpDate(doc) Attempts to work out the LMP from the given doc. If no LMP is given it defaults to four weeks before the reported_date. getSchedule(name) Returns the task schedule with the given name from the configuration. getMostRecentTimestamp(reports, form) Returns the reported_date of the most recent of the reports with form ID matching the given form. getMostRecentReport(reports, form) Like getMostRecentTimestamp but returns the report, not just the reported_date. From CHT v3.14.0, it also accepts an array of forms. isFormSubmittedInWindow(reports, form, start, end) Returns true if any of the given reports are for the given form and were reported after start and before end. isFirstReportNewer(firstReport, secondReport) Returns true if the firstReport was reported before the secondReport. isDateValid(date) Returns true if the given date is a validate JavaScript Date. now() Returns the current Date. getField(report, fieldPath) Returns the value of the specified fieldPath. The fieldPath is a period separated json path. MS_IN_DAY A constant for the number of milliseconds in a day. Open an issue if you’d like other functions included."},"title":"targets.js"},"/building/targets/targets-overview/":{"data":{"":"Targets is the user dashboard or analytics tab. The widgets on this tab provide a summary or analysis of the data in submitted reports. These widgets can be configured to track metrics for an individual CHW, for a Supervisor overseeing a group of CHWs, or for an entire health facility.\nFor CHWs, the Targets tab provides a quick summary of their progress towards their individual goals. For Supervisors, Nurses, and facility-based users, the Targets tab provides important insights into how their community unit is performing.\nImportant\nTargets or goals can be configured for any user that has offline capabilities. A user must have access to the report in order to generate the widget with its data.","count-widgets#Count Widgets":"Count widgets show a tally of a particular report that has been submitted or data within a report that matches a set of criteria. For example, a count can be done for the number of new pregnancies, the number of facility-based deliveries, or the number of households registered that month.\nA count without a goal displays a simple green number count. A count with a goal displays the value of the goal on the right side and a colored count in the center indicating progress towards achieving the goal. Progress is displayed in green if the count is equal to or above the goal, or in black if the count is below the goal.","percent-widgets#Percent Widgets":"Percent widgets display a ratio, which helps to provide insight into the proportion that matches a defined criteria. For example, the proportion of newborns delivered in a facility can be presented as a percent with respect to all registered deliveries.\nAn optional goal can be set, such as “100% of patients with a fever should be given a malaria Rapid Diagnostic Test (mRDT),” to visualize progress towards achieving a target. Widget styling is configured to show green if the goal has been met and black if the goal has not been met. Next to the percent with a goal, the count of reports used in the calculation are shown (e.g. “16 of 20 with mRDT”). CHWs have found this helpful in interpreting target information.","types-of-widgets#Types of Widgets":"There are two basic types of widgets: count and percent. Count widgets display a numeric sum while percent widgets display progress towards achieving a target.\nThe text, icon, goal, and time frame of each widget is easily configured. The time frame is set per widget, and set to show values for “this month” (resets back to zero at the beginning of each month) or “all time” (a cumulative total)."},"title":"Overview"},"/building/tasks/":{"data":{"":"Content in this section Overview Building A Simple Task Building A Complex Task (Optional) Building A Simple Priority Score Function tasks.js"},"title":"Tasks"},"/building/tasks/complex-tasks/":{"data":{"":"Tasks prompt users to complete activities on a programmatic schedule. This tutorial will guide you through the development of an advanced task. This is an optional tutorial and is not required to get started with CHT Application development.\nCreate a task with a complex follow-up schedule Use a 3rd party JavaScript library luxon to make Date/Time calculations easier Pass information from the task into the action app form Custom logic for resolving a task","actions#Actions":"5. The first pregnancy visit should prompt the CHW to ask some additional questions The modifyContent attribute allows the task to pass data from the task (in JavaScript) into the action app form (xlsx). Check out the guide for Passing data from a task into the app form.","appliesif#AppliesIf":"1. Only CHW users should be prompted to complete pregnancy visits 2. Pregnancy visits should appear for pregnant patients after their pregnancy registration This function starts with the standard stuff from the Configuring Tasks Tutorial. We want to confirm the user is a CHW, and the patient is alive and unmuted.\nThen, the code searches through each contact’s reports to find the most recent (newest) pregnancy registration using the Utils helper library. It gets that report’s value for report.fields.g_details.estimated_lmp, which is a date string calculated by the app form. It parses that string using the luxon library and returns true if it is a valid date.\nDefining lmp as a property of this, stores the LMP DateTime and we will use that value later.","developing-the-task#Developing the task":"This solution relies on the library luxon for parsing and manipulating dates and times. Let’s start by installing it locally:\nnpm install --save-dev luxon And then in tasks.js we can analyse this solution:\nconst { DateTime } = require('luxon'); module.exports = { name: 'pnc-after-pregnancy', icon: 'icon-follow-up', title: 'task.pnc_followup', appliesTo: 'contacts', appliesToType: ['patient'], appliesIf: function (contact) { const userIsChw = user.parent \u0026\u0026 user.parent.contact_type === 'chw_area'; const isDead = contact.contact.date_of_death; const isMuted = contact.contact.muted; if (userIsChw \u0026\u0026 !isDead \u0026\u0026 !isMuted) { const mostRecentPregnancy = Utils.getMostRecentReport(contact.reports, 'pregnancy'); const calculatedLmp = mostRecentPregnancy \u0026\u0026 Utils.getField(mostRecentPregnancy, 'g_details.estimated_lmp'); this.lmp = calculatedLmp \u0026\u0026 DateTime.fromFormat(calculatedLmp, 'yyyy-MM-dd'); return this.lmp \u0026\u0026 this.lmp.isValid; } }, events: [12, 20, 26, 30, 34, 36, 38, 40] // follow-up weeks after LMP .map(weekAfterLmp =\u003e ({ id: `pnc-week-${weekAfterLmp}`, start: weekAfterLmp \u003e 30 ? 6 : 7, end: weekAfterLmp \u003e 30 ? 7 : 14, dueDate: function () { return this.lmp.plus({ weeks: weekAfterLmp }).toJsDate(); } })), resolvedIf: function (contact, report, event, dueDate) { const start = Utils.addDate(dueDate, -event.start).getTime(); const end = Utils.addDate(dueDate, event.end + 1).getTime(); const pncInWindow = Utils.isFormSubmittedInWindow(contact.reports, 'pnc_followup', start, end); const assessmentInWindow = Utils.isFormSubmittedInWindow(contact.reports, 'assessment_followup', start, end); return pncInWindow || assessmentInWindow; }, actions: [{ form: 'pnc_followup', modifyContent: function (content, contact, report, event) { const followupCount = this.definition.events.findIndex(e =\u003e event.id === e.id) + 1; content.t_followup_count = followupCount.toString(); } }] };","events#Events":"3. Pregnancy visits should be scheduled eight times between the last mentrual period (LMP) and delivery. This is a recurring task, unlike the one-time task we wrote in Configuring Tasks Tutorial. This task is going to appear once 12 weeks after the estimated LMP date, again after 20 weeks, and again 6 more times. The dueDate on the event says that the task event is due a variable number of weeks after the estimated LMP. The time the CHW has to complete the visit is shorter toward the end of the schedule.\nWe’re using the this.lmp value which was calculated and saved in the appliesIf function.","prerequisites#Prerequisites":"Building a simple task Maternal and Newborn Health Reference App","resolvedif#ResolvedIf":"4. A pregnancy visit should be skipped if an _assessment followup_ is completed within the scheduled window for the pregancy visit. resolvedIf captures the conditions when the task event should disappear because it has been completed. Since we want the task schedule to appear if the user completes an assessment followup or the pnc followup, we can’t use the default resolvedIf definition.\nThis function calculates timestamps for the start and end of each event. Then, it uses the Utils helper library to see if either a pnc or an assessment followup is present within those timestamps.\nThe concept of task completion is covered in more depth in Task Completion vs Cancellation.","scenario#Scenario":"This scenario is loosely based on the Pregnancy Visit Task from the Maternal and Newborn Health Reference App.\nWe expectations for the task are:\nOnly CHW users should be prompted to complete pregnancy visits Pregnancy visits should appear for pregnant patients after their pregnancy registration Pregnancy visits should be scheduled eight times between the last mentrual period (LMP) and delivery. A pregnancy visit should be skipped if an assessment followup is completed within the scheduled window for the pregancy visit. The first pregnancy visit should prompt the CHW to ask some additional questions","what-is-this-code-doing#What is this code doing?":""},"title":"Complex Tasks"},"/building/tasks/managing-tasks/":{"data":{"":"Content in this section Launching a contact form from a task Passing data from a task into the app form Querying Task Documents Understanding the parameters in the Task Schema"},"title":"Managing tasks"},"/building/tasks/managing-tasks/launch-contact-form/":{"data":{"":"Task actions with type: 'contact' can be configured to redirect the user to the contact form to create/edit a contact.\nNote that submitting the contact form does not automatically resolve the task.","create-contact#Create contact":"To configure a task action to redirect the user to a create contact form, use the modifyContent function to set the type and parent_id values for the new contact in the action content. When the user selects the action, they will automatically be redirected to the create contact form (located at contacts/{{parent_id}}/add/{{type}}).\nThe following example task config will create a task for all new households (clinic contacts), prompting the user to add new members to the household. When the user selects the task, they will be presented with two actions. The “Add person to household” action will redirect the user to the create contact form for a new person contact, with the parent_id set to the household contact. This action can be performed as many times as needed to add multiple members to the household. The second action, “No more household members to add”, will open an app form to confirm all members have been added to the household. Submitting that form will resolve the task.\n{ name: 'add_household_members_task', title: 'Add Household Members', appliesTo: 'contacts', appliesToType: ['clinic'], events: [{ id: 'add_household_members_task_event_id', days: 0, start: 0, end: 1, }], actions: [ { type: 'contact', label: 'Add person to household', modifyContent: (content, { contact }) =\u003e { content.type = 'person'; content.parent_id = contact._id; }, }, { type: 'report', form: 'mark_household_complete', label: 'No more household members to add', } ], } A task action can also be configured to redirect the user to the create contact form of a top-level contact by setting only the type field in the modifyContent function (and not the parent_id).","edit-contact#Edit contact":"Added in CHT 4.21.0. To configure a task action to redirect the user to an edit contact form, use the modifyContent function to set the edit_id field in the action content to the identifier of the contact to edit. When the user selects the action, they will automatically be redirected to the edit contact form for the identified contact (located at contacts/{{edit_id}}/edit).\nThe following example task config will create a task for new person contacts that do not have a role value. When the user selects the task, they will be redirected to the edit contact form for the person (where they can set the role value). Populating the role value for the person will cause the task to be cancelled and no longer displayed.\n{ name: 'add_role_task', title: 'Add Role', appliesTo: 'contacts', appliesToType: ['person'], events: [{ id: 'add_role_event_id', days: 0, start: 0, end: 1, }], appliesIf: ({ contact }) =\u003e { return !contact.role; }, resolvedIf: () =\u003e false, actions: [{ type: 'contact', modifyContent: (content, { contact }) =\u003e { content.edit_id = contact._id; }, }], }","navigate-to-contact-profile#Navigate to contact profile":"Added in CHT 4.21.0. If a task action with type: 'contact' does not set a value in the action content for parent_id, type, or edit_id, then selecting the action will simply redirect the user to the contact profile page for the contact associated with the task."},"title":"Launching a contact form from a task"},"/building/tasks/managing-tasks/pass-data-to-form/":{"data":{"":"This guide explains how to pass data from a task into the action application form.","developing-the-task#Developing the task":"From the Complex Tasks Tutorial, here is the task.\nconst { DateTime } = require('luxon'); module.exports = { name: 'pnc-after-pregnancy', icon: 'icon-follow-up', title: 'task.pnc_followup', appliesTo: 'contacts', appliesToType: ['patient'], appliesIf: function (contact) { const userIsChw = user.parent \u0026\u0026 user.parent.contact_type === 'chw_area'; const isDead = contact.contact.date_of_death; const isMuted = contact.contact.muted; if (userIsChw \u0026\u0026 !isDead \u0026\u0026 !isMuted) { const mostRecentPregnancy = Utils.getMostRecentReport(contact.reports, 'pregnancy'); const calculatedLmp = mostRecentPregnancy \u0026\u0026 Utils.getField(mostRecentPregnancy, 'g_details.estimated_lmp'); this.lmp = calculatedLmp \u0026\u0026 DateTime.fromFormat(calculatedLmp, 'yyyy-MM-dd'); return this.lmp \u0026\u0026 this.lmp.isValid; } }, events: [12, 20, 26, 30, 34, 36, 38, 40] // follow-up weeks after LMP .map(weekAfterLmp =\u003e ({ id: `pnc-week-${weekAfterLmp}`, start: weekAfterLmp \u003e 30 ? 6 : 7, end: weekAfterLmp \u003e 30 ? 7 : 14, dueDate: function () { return this.lmp.plus({ weeks: weekAfterLmp }).toJsDate(); } })), resolvedIf: function (contact, report, event, dueDate) { const start = Utils.addDate(dueDate, -event.start).getTime(); const end = Utils.addDate(dueDate, event.end + 1).getTime(); const pncInWindow = Utils.isFormSubmittedInWindow(contact.reports, 'pnc_followup', start, end); const assessmentInWindow = Utils.isFormSubmittedInWindow(contact.reports, 'assessment_followup', start, end); return pncInWindow || assessmentInWindow; }, actions: [{ form: 'pnc_followup', modifyContent: function (content, contact, report, event) { const followupCount = this.definition.events.findIndex(e =\u003e event.id === e.id) + 1; content.t_followup_count = followupCount.toString(); } }] };","modifycontent#modifyContent":"Let’s take a look at the actions section and specifically the modifyContent attribute. This modifyContent attribute allows the task to pass data from the task (in JavaScript) into the action app form (xlsx). The content object is the object which binds to the inputs section in the app form. You can pass data into the app form by assigning values onto this object.\nThis function calculates t_followup_count to be the index of the event which is being completed. So the first task event (which appears after 12 weeks) is followup 1, and the task event after 34 weeks is followup 5.","prerequisites#Prerequisites":"Complex Tasks Tutorial Application Forms Tutorial","scenario#Scenario":"Let’s look deeper at the scenario from the Complex Tasks Tutorial where we have an ANC follow-up task which recurs eight times, and we want to ask the user different questions on the first and last follow-up.","the-action-form#The action form":"In this sample app form survey, the value of t_followup_count is listed in the inputs section and the CHT binds the data passed by the task onto this hidden variable. An example calculation is_first_followup demonstrates how to use the value in the form’s logic. is_first_followup will be true 12 weeks after the LMP date, and false on all other followups.\ntype name label required relevant appearance constraint constraint_message calculation begin group inputs field-list hidden t_followup_count Data from task end group calculate is_first_followup if(${t_follow_up_count}=‘1’,true,false)"},"title":"Passing Data from Tasks to Forms"},"/building/tasks/managing-tasks/query-task-data/":{"data":{"":"This guide explains the data which results from tasks and how to query it.\nWrite a PostgreSQL query to examine task data Build deeper understanding of task data Present some data considerations of which task authors should remain mindful","completion-vs-cancellation#Completion vs Cancellation":"A task can “disappear” because appliesIf returns false or because resolvedIf returns true. To the user the experience is identical - but the difference is in the data.\nresolvedIf should contain only your programmatic task success criteria. Everything else should be in appliesIf.\nResultant State appliesIf resolvedIf Draft/Ready/Failed true false Completed true true Cancelled false -","first-assessment-completion-rate#First Assessment Completion Rate":"Working with the First Assessment task from the Configuring Tasks Tutorial, let’s try to answer the question What percentage of the scheduled first assessment events have been completed?.\nLet’s query data from the last three months to see how the first assessment task is behaving in production:\nSELECT date_trunc('month', duedate) AS due_date_month, task_state, count(*) FROM useview_task WHERE title = 'assessment-after-registration' and duedate \u003e= date_trunc('month', now()) - '3 months'::interval and duedate \u003c date_trunc('month', now()) + '1 months'::interval GROUP BY 1, 2 ORDER BY 1, 2 ; For convenience, here is the task definition from the First Assessment task in the tutorial:\nmodule.exports = [{ name: 'assessment-after-registration', title: 'First Assessment', icon: 'icon-healthcare', appliesTo: 'contacts', appliesToType: ['patient'], appliesIf: c =\u003e user.parent \u0026\u0026 user.parent.contact_type === 'chw_area' \u0026\u0026 !c.contact.date_of_death \u0026\u0026 !c.contact.muted, actions: [{ form: 'assessment' }], events: [{ start: 7, days: 7, end: 0, }], }]; What is this code doing?\nuseview_task - This is a materialized view of the data from the task document schema. task_state - The meaning of each task state is explained in the task document schema. WHERE title - The name attribute in the task.js schema is used exclusively in the task’s backend data. Here we limit the query to task documents resulting from our named task. The title in postgres maps to the name in JavaScript not the title in JavaScript - which is confusing. WHERE duedate - One task document is created per event and this task has one event per contact which is due 7 days after the contact’s creation date. Here we limit the query to task documents which are due in the last 3 calendar months.","frequently-asked-questions#Frequently Asked Questions":"Are task documents indefinitely on user’s devices? “State” for tasks whose endDate is in the past","performance#Performance":"Performance of CHT Applications is a major factor for many users and partners. The CHT Core is designed and tested to work on low-cost devices, but tasks have the potential to cause performance problems by creating too many task documents or performing excessive computations. Be mindful of the task documents which will be created by your tasks. Monitor the number of task documents being created in production.","prerequisites#Prerequisites":"Data Flows for Analytics","querying-task-data#Querying task data":"The task system running on each user’s device is powered by task documents and those task documents sync to the server and to PostgreSQL just like a contact or a report. Having task documents in PostgreSQL allows system administrators to analyse how users are interacting with tasks.\nSee Also: Data flows for analytics","task-data-considerations#Task data considerations":"","testing-task-document-data#Testing task document data":"The medic-conf-test-harness is useful for making assertions about the expected behaviour of tasks in different user scenarios. The countTaskDocsByState interface is relevant for making assertions about task document creation and state.","understanding-the-data#Understanding the data":"Here is a sample output from that query above. The query was executed some day in July (07), 2021.\ndue_date_month task_state count 2021-05-01 Cancelled 6 2021-05-01 Completed 749 2021-05-01 Failed 226 2021-06-01 Cancelled 3 2021-06-01 Completed 769 2021-06-01 Draft 3 2021-06-01 Failed 177 2021-07-01 Completed 1135 2021-07-01 Draft 399 2021-07-01 Failed 193 2021-07-01 Ready 13 Task docs from May and June are mostly in states Completed or Failed. In May, you could say with high confidence that the completion rate for this task was 749/(749+226) or 76%. Task docs in July have end dates in the future still, so they are in state Draft or Ready.\nWhy are tasks Cancelled? - A task document is cancelled when tasks.js schedules the task event (appliesToType and appliesIf both pass), and later does not schedule the task event. So in this first assessment scenario, a likely cause of task cancellation would be that a contact was deleted, muted, or dead. The task document is created when appliesIf returns true. When the contact is muted, the task disappears from the UI, and the task document is moved to state Cancelled.\nHow can there be documents in state “Draft” in June? - The state Draft means that the task event is scheduled in the future. How can these documents with due dates in the past (June) be in a state which says they are in the future? Task documents are calculated and updated on the user’s device, so the most likely explanation is that the user hasn’t synced. Other potential explanations are possible."},"title":"Querying Task Documents"},"/building/tasks/managing-tasks/task-schema-parameters/":{"data":{"":"This guide explains the parameters available in the Task Schema and important constraints governing the design of tasks.\nUseful knowledge if you are stuck writing your first appliesIf predicate Understanding the data which is available in the task system and important constraints Understand the special significance of the appliesTo attribute Let’s synthesize some knowledge about CHT applications to help clarify what is happening within the task system:\nAll contacts in CHT applications are organised into hierarchies. For more information, read the Contact and User Management Tutorial or schema for contact documents.\nAll reports in the system are linked to one (and only one) contact. For more information, read App Forms Tutorial or the schema for report documents.\nDocuments are stored minified (not hydrated). All data that is passed into the tasks system is minified.\nSettings which control the documents which are available on the user’s device are an important considerations to remember (eg replication depth or purging) since both tasks can only process docs which are present on the device.\nImportant\nThe code in tasks.js runs on the user’s devices, not in the cloud and not on a server.","an-important-constraint-of-the-tasks-system#An important constraint of the tasks system":"Every contact and every report on the user’s device is processed by tasks. That said, it is important to remember that this processing is scoped to happen one contact at a time. The code in tasks.js knows about one contact, but it is not possible to simultaneously know about that contact’s siblings, descendents, ancestors, etc.\nWith this constraint in mind, we can infer that tasks cannot know the answer to questions like:\nIs the sibling of this patient ill? Does this family have active patients? Are there cases of tuberculosis in a neighbouring household?","appliesto-contacts#appliesTo: \u0026lsquo;contacts\u0026rsquo;":"algorithm appliesTo is 'contacts' for contact of contacts: if contact.type is in task.appliesToType: if task.appliesIf(contact): create task events appliesToType filters based on the contact document’s contact_type value appliesIf predicate is called once per contact (even if that contact has no reports) appliesIf(c) is passed information about the contact (c.contact), and an array of all the contact’s reports (c.reports) events[].dueDate defaults to the contact’s creation date Results in up to one task schedule per contact","appliesto-reports#appliesTo: \u0026lsquo;reports\u0026rsquo;":"algorithm appliesTo is 'reports' for contact of contacts: for report of contact.reports: if report.form is in task.appliesToType: if task.appliesIf(contact, report): create task events appliesToType filters based on the report document’s form value appliesIf predicate is called once per report appliesIf(c, report) is passed information about the contact (c.contact), an array of all the contact’s reports (c.reports), and the current report being iterated on report events[].dueDate defaults to the report’s creation date Can result in multiple, potentially overlapping task schedules per contact","the-special-significance-of-the-appliesto-attribute#The special significance of the appliesTo attribute":"The task.js schema includes the noteworthy attribute appliesTo which has two options: contacts and reports. This attribute is important! It changes the algorithm used to process the task, and the meaning of other attributes in the schema.\nTip\nappliesTo is important. When you’re ready to write a task, one of the first thing you must decide is the appliesTo value.\nThe below algorithmic pseudocode explains the relationship between appliesTo and the attributes appliesIf and appliesToType:"},"title":"Task Schema Parameters"},"/building/tasks/simple-priority-score/":{"data":{"":"Available from 4.21.0. This guide will take you through how to build a basic priority scoring module. The score is based on a task type and individual-person risk factor weights. Tasks with higher priority scores will appear at the top of the task list when priority.level is used in your task definitions.","create-a-scoring-module#Create a scoring module":"We will use this sample code in nools-extras.js:\nconst STRING_CONSTANTS = { first_postpartum_visit: 'first_postpartum_visit', first_postpartum_visit_title: 'task.title.first_postpartum_visit', infant_child_visit_action: 'task.action.infant_child_visit', infant_child_visit_event_one: 'infant_child_visit_event_one', infant_child_visit_event_two: 'infant_child_visit_event_two', high_priority_label: 'task.label.high_priority', medium_priority_label: 'task.label.medium_priority', low_priority_label: 'task.label.low_priority', unknown_priority_label: 'task.label.unknown_priority' }; function isAlive(contact) { return contact \u0026\u0026 contact.contact \u0026\u0026 !contact.contact.date_of_death; } const getField = (report, fieldPath) =\u003e ['fields', ...(fieldPath || '').split('.')] .reduce((prev, fieldName) =\u003e { if (prev === undefined) { return undefined; } return prev[fieldName]; }, report); function isFormArraySubmittedInWindow(reports, formArray, start, end, count) { let found = false; let reportCount = 0; reports.forEach(function (report) { if (formArray.includes(report.form)) { if (report.reported_date \u003e= start \u0026\u0026 report.reported_date \u003c= end) { found = true; if (count) { reportCount++; } } } }); if (count) { return reportCount \u003e= count; } return found; } function getMostRecentReport(reports, form) { let result; reports.forEach(function (report) { if (form.includes(report.form) \u0026\u0026 !report.deleted \u0026\u0026 (!result || report.reported_date \u003e result.reported_date)) { result = report; } }); return result; } const getNewestReport = function (reports, forms) { let result; reports.forEach(function (report) { if (!forms.includes(report.form)) { return; } if (!result || report.reported_date \u003e result.reported_date) { result = report; } }); return result; }; function completedCheckup(contact, forms, field, visit) { const latestVisit = getNewestReport(contact.reports, forms); if (!latestVisit) return false; return getField(latestVisit, field) === visit; } module.exports = { STRING_CONSTANTS, isAlive, isFormArraySubmittedInWindow, getMostRecentReport, getField, completedCheckup }; Create a priority-score.js file, preferrably in the same location as tasks.js and add the following code:\nconst { completedCheckup, STRING_CONSTANTS } = require('./nools-extras'); // task type base weights const taskWeights = { first_postpartum_visit: 5, }; // individual risk factor weights const riskFactors = { low_birth_weight: 3, known_birth_or_delivery_complications: 2, missed_24_hours_checkup: 3, missed_3_days_checkup: 2, missed_7_14_days_checkup: 1 }; // priority thresholds const PRIORITY_THRESHOLDS = { HIGH: 8, MEDIUM: 6, LOW: 0, }; // priority labels const priorityLabels = [ { min: PRIORITY_THRESHOLDS.HIGH, label: STRING_CONSTANTS.high_priority_label }, { min: PRIORITY_THRESHOLDS.MEDIUM, label: STRING_CONSTANTS.medium_priority_label }, { min: PRIORITY_THRESHOLDS.LOW, label: STRING_CONSTANTS.low_priority_label } ]; // adjust accordingly to suit your use case const MAX_SCORE = 16; const LOW_WEIGHT_THRESHOLD = 2.5; // map to check events-related risk factors const eventCheckupMap = { infant_child_visit_event_one: { visit: '24_hours', weight: riskFactors.missed_24_hours_checkup }, infant_child_visit_event_two: { visit: '3_days', weight: riskFactors.missed_3_days_checkup } }; // define your score calculation logic function getPriorityScore(taskName, contact, report, event) { let score = taskWeights[taskName] || 0; const checkupInfo = eventCheckupMap[event.id]; if (checkupInfo \u0026\u0026 !completedCheckup(contact, ['infant_child'], 'checkup_type', checkupInfo.visit)) { score += checkupInfo.weight; } const conditions = [ { condition: () =\u003e report?.fields?.baby_weight_kg \u003c LOW_WEIGHT_THRESHOLD, weight: riskFactors.low_birth_weight }, { condition: () =\u003e report?.fields?.birth_complications === 'yes', weight: riskFactors.known_birth_or_delivery_complications } ]; for (const { condition, weight } of conditions) { if (condition()) {score += weight;} } const normalizedScore = parseFloat(((score / MAX_SCORE) * 10).toFixed(2)); // normalized to a 0–10 scale const label = (priorityLabels.find(p =\u003e normalizedScore \u003e= p.min) || {}).label || STRING_CONSTANTS.unknown_priority_label; return { level: normalizedScore, label }; } module.exports = { getPriorityScore, STRING_CONSTANTS, PRIORITY_THRESHOLDS };","implementation-steps#Implementation Steps":"","overview#Overview":"You will define:\nA base weight for each task type, such as visits, referrals and follow-ups, e.g. first_postpartum_visit A set of weighted risk scores for individual contacts, such as pregnant under 18. A scoring function that normalises these to return a priority level. An optional label that can be used to indicate high-priority tasks.","prerequisites#Prerequisites":"You have already defined the relevant task types in task.js. If not, review the Tasks tutorial to learn how to structure tasks. Read Understanding the data available in tasks and targets","test-and-iterate#Test and iterate":"Compile and deploy your application. Inspect the task list to ensure that tasks having higher weights and risk score appear at the top. Adjust your weights and thresholds accordingly, to suit your use cases. Below is an accompanying priority-score.spec.js to test sample above.\nconst { expect } = require('chai'); const { getPriorityScore, STRING_CONSTANTS, PRIORITY_THRESHOLDS } = require('../../priority-score'); describe('Priority Score relates tests', () =\u003e { const contactTemplate = { name: 'Test Infant', date_of_birth: Date.now() - 3 * 24 * 60 * 60 * 1000 }; const reportWithRisk = { _id: 'r1', reported_date: Date.now(), form: 'infant_child', fields: { baby_weight_kg: 2.0, birth_complications: 'yes', checkup_type: 'none' } }; const reportWith3DayVisit = { _id: 'r2', reported_date: Date.now(), form: 'infant_child', fields: { baby_weight_kg: 2.0, birth_complications: 'yes', checkup_type: '3_days' } }; const reportWithoutRisk = { _id: 'r3', reported_date: Date.now(), form: 'infant_child', fields: { baby_weight_kg: 3.5, birth_complications: 'no', checkup_type: '24_hours' } }; const visit3Days = { id: STRING_CONSTANTS.infant_child_visit_event_one }; const visit14Days = { id: STRING_CONSTANTS.infant_child_visit_event_two }; it('should assign high priority when no 24-hour checkup and high-risk birth in 3-day checkup', () =\u003e { const contact = { ...contactTemplate, reports: [reportWithRisk] }; const score = getPriorityScore(STRING_CONSTANTS.first_postpartum_visit, contact, reportWithRisk, visit3Days); expect(score.level).to.be.greaterThan(PRIORITY_THRESHOLDS.HIGH); expect(score.label).to.equal(STRING_CONSTANTS.high_priority_label); }); it('should assign medium priority in 7-14 days check up with 3-day checkup completed', () =\u003e { const contact = { ...contactTemplate, reports: [reportWith3DayVisit] }; const score = getPriorityScore(STRING_CONSTANTS.first_postpartum_visit, contact, reportWith3DayVisit, visit14Days); expect(score.level).to.be.greaterThan(PRIORITY_THRESHOLDS.MEDIUM); expect(score.level).to.be.lessThan(PRIORITY_THRESHOLDS.HIGH); expect(score.label).to.equal(STRING_CONSTANTS.medium_priority_label); }); it('should assign low priority when 24-hour checkup was completed and no risks', () =\u003e { const contact = { ...contactTemplate, reports: [reportWithoutRisk] }; const score = getPriorityScore(STRING_CONSTANTS.first_postpartum_visit, contact, reportWithoutRisk, visit3Days); expect(score.level).to.be.at.lessThan(PRIORITY_THRESHOLDS.MEDIUM); expect(score.label).to.equal(STRING_CONSTANTS.low_priority_label); }); it('should assign low priority for unknown event', () =\u003e { const contact = { ...contactTemplate, reports: [reportWithoutRisk] }; const event = { id: 'some_other_event' }; const score = getPriorityScore(STRING_CONSTANTS.first_postpartum_visit, contact, reportWithoutRisk, event); expect(score.label).to.equal(STRING_CONSTANTS.low_priority_label); }); });","use-the-priority-score-function-in-your-task-definition#Use the priority score function in your task definition":"Use the priority.level attribute to return the corresponding score. In this example, the priority function also receives the event, to show that two events can have different priorities.\nconst { STRING_CONSTANTS, isAlive, isFormArraySubmittedInWindow} = require('./nools-extras'); const { getPriorityScore } = require('./priority-score'); module.exports = [{ name: STRING_CONSTANTS.first_postpartum_visit, title: STRING_CONSTANTS.first_postpartum_visit_title, appliesTo: 'contacts', appliesToType: ['person'], appliesIf: function (contact) { return isAlive(contact) \u0026\u0026 contact.contact.date_of_birth; }, priority: (contact, report, event) =\u003e getPriorityScore(STRING_CONSTANTS.first_postpartum_visit, contact, report, event), resolvedIf: function (contact, report, event, dueDate) { return isFormArraySubmittedInWindow(contact.reports, ['infant_child'], Utils.addDate(dueDate, -event.start).getTime(), Utils.addDate(dueDate, event.end+1).getTime()); }, actions: [ { type: 'report', form: 'infant_child', label: STRING_CONSTANTS.infant_child_visit_action, modifyContent: (content, contact) =\u003e { content.patient_id = contact.contact.uuid; } } ], events: [ { id: STRING_CONSTANTS.infant_child_visit_event_one, start: 0, end: 0, dueDate: function (event, contact) { return Utils.addDate(new Date(contact.contact.date_of_birth), 3); } }, { id: STRING_CONSTANTS.infant_child_visit_event_two, start: 0, end: 7, dueDate: function (event, contact) { return Utils.addDate(new Date(contact.contact.date_of_birth), 7); } } ] }];"},"title":"Simple Priority Score Functions"},"/building/tasks/simple-tasks/":{"data":{"":"Tasks prompt users to complete activities on a programmatic schedule. This guide will explain how to write a task which prompts CHW users to complete an assessment app form for new patients within 7 days of registration.\nCreating a straight-forward task Running and testing that task","1-define-a-simple-task#1. Define a Simple Task":"The appearance, behaviour, and schedule of tasks are all controlled through the JavaScript in the tasks.js file. Let’s start in that file with a simple first task:\nmodule.exports = [{ name: 'assessment-after-registration', title: 'First Assessment', icon: 'icon-healthcare', appliesTo: 'contacts', appliesToType: ['patient'], appliesIf: c =\u003e user.parent \u0026\u0026 user.parent.contact_type === 'chw_area' \u0026\u0026 !c.contact.date_of_death \u0026\u0026 !c.contact.muted, actions: [{ form: 'assessment' }], events: [{ start: 7, days: 7, end: 0, }], }]; What is this code doing?\nThe tasks.js file follows the JavaScript ES6 Module syntax and exports an array of objects matching the task.js schema*. In the code above, the tasks.js file is exporting one task object with the following:\nname - This is used exclusively in the task’s backend data. The name isn’t controlling any element of the tasks’s behaviour, appearance, or schedule. title - This is controlling the “Task title” as defined in the anatomy of a task. icon - This references a resource to be used as the task’s icon. Refer to anatomy of a task. appliesTo - We use contacts because we want one task per contact. For more details, read Understanding the data available in tasks and targets. appliesToType - The task should only show for contacts with contact_type equal to patient. This appliesToType is a short-hand equivalent to appliesIf: c =\u003e c.contact.contact_type === 'patient'. appliesIf - A predicate which gates the creation of the task’s event schedule. For more details, read Understanding the data available in tasks and targets. user.parent.contact_type - The user is a CHW iff their parent is of type chw_area. The user object is hydrated. !c.contact.date_of_death - The contact must be alive !c.contact.muted - The contact must be unmuted actions - Actions control what happens when the user “selects” the task (clicks on it or touches it). We want to have the single option of completing the assessment form. events - This controls the task’s schedule. We want a single event because this is a one-time follow-up. events[0].days - The task event is due 7 days after the contact’s creation date. events[0].start - The task event should appear 7 days before the due date, or immediately when the contact is created. events[0].end - The task event should disappear the day after the due date.","2-uploading-the-task#2. Uploading the Task":"To run the tasks.js code, you’ll need to load the code into your running CHT application.\ncht --url=https://:@localhost or for a faster experience, compile and upload only the relevant changes:\ncht --url=https://:@localhost compile-app-settings upload-app-settings","3-testing-the-task#3. Testing the Task":"Tasks are only available to offline users. To view and test this simple task, you’ll need to login as an offline user like the CHW-level user created in the Contact and User Management - Part 1 Tutorial. Once logged in, sync to make sure you have the latest configuration. You may be prompted to reload the application.\nCreate a new contact in the hierarchy and navigate to the Tasks tab. You should see the new assessment-after-registration task!\nNext, test a few of the expected behaviours for the task:\nConfirm that clicking on the task causes the assessment app form to load. Confirm that completing the assessment app form causes the task to disappear. Move your system clock forward 7 days and reload the tasks tab. You should see that the task is now “Due Today”. Move your system clock forward 8 days and reload the tasks tab. The task should disappear since the 7 day window has expired. Login as a supervisor user. You should not be able to see the task. The task should not appear only for patients - not for places or CHWs. If you mute a contact or report the contact dead, the task should disappear. Important\nRemember to reset your system clock to be accurate when you are done testing.","frequently-asked-questions#Frequently Asked Questions":"“Error fetching tasks” - Tasks not appearing Tasks for online users How can I debug task rules?","implementation-steps#Implementation Steps":"Create a tasks.js file (this may have already been created by the initialise-project-layout command).","prerequisites#Prerequisites":"Complete the App Forms Tutorial - Tasks prompt users to complete activities by opening an app form. The app forms tutorial produces an assessment app form which we will use here. You can also elect to substitute that with any example app form. Complete the Contact and User Management - Part 1 Tutorial to create a hierarchy of contacts and an offline CHW user. Read Understanding the data available in tasks and targets"},"title":"Simple Tasks"},"/building/tasks/tasks-js/":{"data":{"":"task\nTask generation is configured in the tasks.js file. This file is a JavaScript module which defines an array of objects conforming to the Task schema detailed below. When defining tasks, all the data about contacts on the device (both people and places) along with all their reports are available. Tasks are available only for users of type “restricted to their place”. Tasks can pull in fields from reports and pass data as inputs to the form that opens when the task is selected, enabling richer user experiences.\nTask generation occurs on the client periodically and creates documents which track the status of the task over time. To avoid performance issues the developer needs to be conscious about generating too many tasks. For example, to remind a user to do something every day, you could generate one task for each day and fill up the user’s device. The recommended approach is to only generate the tasks for the near future, or only once the previous task is resolved. To limit the impact of this misconfiguration, the CHT will only generate tasks that can be completed between 60 days in the past, and (as of 4.0.0) 180 days in the future.\nSee Also: Tasks Overview","basic-task#Basic task":"This sample tasks.js generates two postnatal-visit tasks for each delivery form. The tasks are due 7 and 14 days after the delivery report was submitted. Each task is displayed for 2 days before the due date and 2 days after the due date.","build#Build":"To build your tasks into your app, you must compile them into app-settings, then upload them to your instance.\ncht --local compile-app-settings backup-app-settings upload-app-settings","cht-api#CHT API":"Introduced in v3.12.0\nProvides CHT-Core Framework’s functions to contact summary, targets and tasks. The API is available in the cht reserved variable under the v1 version.\nFunction Arguments Description hasPermissions(permissions, userRoles, chtPermissionsSettings) permissions: String or array of permission name(s).\nuserRoles: (Optional) Array of user roles. Default to the current logged in user.\nchtPermissionsSettings: (Optional) Object of configured permissions in CHT-Core’s settings. Default to the current instance’s configured permissions. Returns true if the user has the permission(s), otherwise returns false. hasAnyPermission(permissionsGroups, userRoles, chtPermissionsSettings) permissionsGroups: Array of groups of permission name(s).\nuserRoles: (Optional) Array of user roles. Default to the current logged in user.\nchtPermissionsSettings: (Optional) Object of configured permissions in CHT-Core’s settings. Default to the current instance’s configured permissions. Returns true if the user has all the permissions of any of the provided groups, otherwise returns false. getExtensionLib(name) name: String of script name Returns an executable function identified by the given name configured as extension-libs. analytics.getTargetDocs() Returns three target documents of the contact, calculated for the last three reporting intervals, including the current one. When viewing one of the current logged in user’s associated facilities, returns the target documents for the contact associated with the current logged in user. Returns an empty array if no target documents are found (for example when viewing a contact that does not upload targets). Introduced in v4.11.0 CHT API’s code samples const canEdit = cht.v1.hasPermissions('can_edit'); const canManagePlaces = cht.v1.hasPermissions(['can_create_places', 'can_update_places']); const hasAnyGroup = cht.v1.hasAnyPermission([ ['can_view_messages', 'can_view_message_action'], ['can_view_reports', 'can_verify_reports'] ]); const averageFn = cht.v1.getExtensionLib('average.js'); const targetDocs = cht.v1.analytics.getTargetDocs();","code-samples#Code samples":"","default-resolvedif-method#Default resolvedIf method":"If the resolvedIf is undefined in an action of type report, then resolvedIf is going to default to defaultResolvedIf method.\nThe defaultResolvedIf method returns true if it finds any report assigned to the contact that matches the form defined in the action of type report. Only the reports submitted during a specific time period are considered:\nFor a contact-based task, the period is the same as the task window period i.e. when the task is visible. For a report based task, the period is determined between start and end as: start: the latest date between start of the task window and one millisecond after the report’s reported date end: end of the task window You can also use this.definition.defaultResolvedIf inside the resolvedIf definition and optionally add more conditions:\nresolvedIf: function (contact, report, event, dueDate) { return this.definition.defaultResolvedIf(contact, report, event, dueDate) \u0026\u0026 otherConditions; }","nools-extrasjs#\u003ccode\u003enools-extras.js\u003c/code\u003e":"module.exports = { isCoveredByUseCase: function (contact, usecase) { // ... }, getNewestDeliveryTimestamp: function (c) { // ... }, getNewestPregnancyTimestamp: function (c) { // ... }, isFormFromArraySubmittedInWindow: function (reports, formsArray, startTime, endTime) { // ... }, };","tasks-with-functions#Tasks with functions":"These samples show more complex tasks which use functions kept in a separate nools-extras.js file","tasksjs#\u003ccode\u003etasks.js\u003c/code\u003e":"property type description required name string A unique identifier for the task. Used for querying task completeness. yes, unique icon string The icon to show alongside the task. Should correspond with a value defined in resources.json. no title translation key The title of the task (labeled above). yes appliesTo 'contacts' or 'reports' Do you want to emit one task per report, or one task per contact? See Understanding the Parameters in the Task Schema. yes appliesIf function(contact, report) If appliesTo: 'contacts', this function is invoked once per contact and report is undefined. If appliesTo: 'reports', this function is invoked once per report. Return true if the task should appear for the given documents. See Understanding the Parameters in the Task Schema. no appliesToType string[] Filters the contacts or reports for which appliesIf will be evaluated. If appliesTo: 'reports', this is an array of form codes. For example, ['pregnancy'] or ['P', 'pregnancy']. If appliesTo: 'contacts', this is an array of contact types. For example, ['person'] or ['clinic', 'health_center']. See Understanding the Parameters in the Task Schema. no contactLabel string or function(contact, report) Controls the label describing the subject of the task. Defaults to the name of the contact (contact.contact.name). no resolvedIf function(contact, report, event, dueDate) Return true to mark the task as “resolved”. A resolved task uses memory on the phone, but is not displayed. no, if any actions[n].type is 'report' events object[] An event is used to specify the timing of the task. yes events[n].id string A descriptive identifier. Used for querying task completeness. yes if task has multiple events, unique events[n].days integer Number of days after the doc’s reported_date that the event is due yes, if dueDate is not set events[n].dueDate function(event, contact, report) Returns a Date object for the day when this event is due. yes, if days is not set events[n].start integer Number of days to show the task before it is due. yes events[n].end integer Number of days to show the task after it is due. yes actions object[] The actions (forms) that a user can access after clicking on a task. If you put multiple forms here, the user will see a task summary screen where they can select which action they would like to complete. yes actions[n].type 'report' or 'contact' When 'report', the action opens the given form. When 'contact', the action redirects to a contact’s profile page or opens a contact form. See Launching a contact form from a task. Defaults to ‘report’. no actions[n].form string The code of the form that should open when you select the action. yes, if actions[n].type is 'report' actions[n].label translation key The label that should appear on the task summary screen if multiple actions are present. no actions[n].modifyContent function (content, contact, report, event) Set the values on the content object to control the data which will be passed as inputs to the form which opens when the action is selected. See Passing data from a task into the app form. no priority object or function(contact, report) returning object of same schema Controls the “high risk” line seen above. no priority.level integer A positive number representing a task’s urgency. Tasks with a higher level will appear at the top of the list. no priority.label translation key Text shown with the task associated to the risk level. no","tasksjs-1#tasks.js":"module.exports = [ { icon: 'mother-child', title: 'task.postnatal_followup', appliesTo: 'reports', appliesToType: [ 'delivery' ], actions: [ { form: 'postnatal_visit' } ], events: [ { id: 'postnatal-followup-1', days:7, start:2, end:2, }, { id: 'postnatal-followup-2', days:14, start:2, end:2, } ], resolvedIf: function (contact, report, event, dueDate) { return Utils.isFormSubmittedInWindow( contact.reports, 'delivery', Utils.addDate(dueDate, -event.start).getTime(), Utils.addDate(dueDate, event.end + 1).getTime() ); } } ];","tasksjs-2#\u003ccode\u003etasks.js\u003c/code\u003e":"const extras = require('./nools-extras'); const { isFormFromArraySubmittedInWindow } = extras; module.exports = [ // PNC TASK 1: If a home delivery, needs clinic tasks { icon: 'mother-child', title: 'task.postnatal_followup.title', appliesTo: 'reports', appliesToType: [ 'D', 'delivery' ], appliesIf: function(c, r) { return isCoveredByUseCase(c.contact, 'pnc') \u0026\u0026 r.fields \u0026\u0026 r.fields.delivery_code \u0026\u0026 r.fields.delivery_code.toUpperCase() !== 'F'; }, actions: [{ form:'postnatal_visit', // Pass content that will be used within the task form modifyContent: function(content, c, r, event) { content.delivery_place = 'home'; content.event_id = event.id; } }], events: [ { id: 'postnatal-visit', days:0, start:0, end:4, } ], priority: { level: 'high', label: 'task.priority.label.home_birth', }, resolvedIf: function(c, r, event, dueDate) { // Resolved if there a visit report received in time window or a newer pregnancy return r.reported_date \u003c extras.getNewestDeliveryTimestamp(c) || r.reported_date \u003c extras.getNewestPregnancyTimestamp(c) || isFormFromArraySubmittedInWindow(c.reports, extras.postnatalForms, Utils.addDate(dueDate, -event.start).getTime(), Utils.addDate(dueDate, event.end+1).getTime()); }, }, // Option 1a: Place-based task: Family survey when place is created, then every 6 months { icon: 'family', title: 'task.family_survey.title', appliesTo: 'contacts', appliesToType: [ 'clinic' ], actions: [ { form:'family_survey' } ], events: [ { id: 'family-survey', days:0, start:0, end:14, } ], resolvedIf: function(c, r, event, dueDate) { // Resolved if there a family survey received in time window return isFormFromArraySubmittedInWindow(c.reports, 'family_survey', Utils.addDate(dueDate, -event.start).getTime(), Utils.addDate(dueDate, event.end+1).getTime()); }, }, // Regular check for infants { icon: 'infant', title: 'task.infant.title', appliesTo: 'contacts', appliesToType: [ 'person' ], actions: [ { form:'infant_assessment' } ], events: [ { id: 'infant_asssessment-q1', days:91, start:7, end:14, }, { id: 'infant_asssessment-q2', days:182, start:7, end:14, }, { id: 'infant_asssessment-q3', days:273, start:7, end:14, }, { id: 'infant_asssessment-q4', days:365, start:7, end:14, } ] }, // Option 2: Place-based task: Family survey every 6 months { icon: 'family', title: 'task.family_survey.title', appliesTo: 'contacts', appliesToType: [ 'clinic' ], appliesIf: extras.needsFamilySurvey, // function returns true if family doesn't have survey in previous 6 months actions: [ { form:'family_survey' } ], events: [ { id: 'family-survey', start:0, end:14, dueDate: extras.getNextFamilySurveyDate // function gets expected date of next family survey } ], resolvedIf: function(c, r, event, dueDate) { // Resolved if there a family survey received in time window return isFormFromArraySubmittedInWindow(c.reports, 'family_survey', Utils.addDate(dueDate, -event.start).getTime(), Utils.addDate(dueDate, event.end+1).getTime()); }, }, ]","utils#Utils":"Utility functions in the Core Framework can make common tasks much easier. These are available only for Tasks and Targets. To use the function call Utils.(), for example Utils.addDate(report.reported_date, 10).\nName Description isTimely(date, event) Returns true if the given date is after the start date and before the end date of the event. addDate(date, days) Returns a new Date set to midnight the given number of days after the given date. If no date is given the date defaults to today. getLmpDate(doc) Attempts to work out the LMP from the given doc. If no LMP is given it defaults to four weeks before the reported_date. getSchedule(name) Returns the task schedule with the given name from the configuration. getMostRecentTimestamp(reports, form) Returns the reported_date of the most recent of the reports with form ID matching the given form. getMostRecentReport(reports, form) Like getMostRecentTimestamp but returns the report, not just the reported_date. From CHT v3.14.0, it also accepts an array of forms. isFormSubmittedInWindow(reports, form, start, end) Returns true if any of the given reports are for the given form and were reported after start and before end. isFirstReportNewer(firstReport, secondReport) Returns true if the firstReport was reported before the secondReport. isDateValid(date) Returns true if the given date is a validate JavaScript Date. now() Returns the current Date. getField(report, fieldPath) Returns the value of the specified fieldPath. The fieldPath is a period separated json path. MS_IN_DAY A constant for the number of milliseconds in a day. Open an issue if you’d like other functions included."},"title":"tasks.js"},"/building/tasks/tasks-overview/":{"data":{"":"Tasks help CHWs plan their day by prompting them to complete follow-up visits and other activities. The list might include upcoming scheduled ANC or Immunization visits, treatment or referral follow-ups, or other required activities such as a household survey.","care-guides#Care Guides":"When a CHW clicks on a task, the care guide configured for that task displays. CHWs are then guided through questions for that specific workflow.\nFind more information on how care guides provide decision support for healthcare workers.\nWhen the user completes the care guide, the task will be cleared from the Tasks tab, and the report will be accessible from the Reports page or on the profile of the person or place whom the report is about.","household-tasks#Household Tasks":"Alternatively, there is an option to configure Household Tasks. When this permission is enabled, once a CHW has completed a task, they are taken to the Other Household Tasks page. This page shows the CHW all the additional outstanding tasks within the same household in which the initial task was completed.\nCHWs are able to complete tasks directly from this page, or exit by tapping on the “X”. If the household has no additional tasks, they will return directly to the main task list.","main-list#Main List":"On the Tasks tab is a consolidated list of tasks for all people and families that the user looks after. The task definition determines how long the task will show on this list before and after it is due.\nEach task has an icon on the left side which indicates which type of task it is. The first bold line of text is the person or family that the task is about. The second line of text is the title of the task. The due date for the task is located in the upper right-hand corner. If a task is overdue, the due date will be red.\nTasks are listed in order of due date. Tasks that are past due will appear at the top of the list. CHWs should strive to complete tasks before they are overdue. Many programs add targets to track task completion and timeliness.","profile-page#Profile Page":"Tasks are also accessed from the People tab in the app.\nTasks for a particular person or place can be viewed on the contact’s profile in the “Tasks” section. Filters allow you to choose how many tasks you’d like to view for each due date.","quick-guides#Quick guides":"For more details and guides, see the following sections:\nPriority PropertyUsing a Numerical Score for Task Sorting Sample Priority Score FunctionPriority Scoring using Weights","task-prioritization#Task prioritization":"Available from 4.21.0. Prioritization enhances task sorting to help CHWs focus on urgent tasks first. Previously, tasks were sorted only by due date, requiring users to manually scan for urgent cases. This feature introduces a priority score that is based on clinical or operational urgency such as danger signs, referral follow-ups, or high-risk conditions. The priority score should be a positive integer, any other value, including the legacy “high” or “medium” levels will be considered invalid. Tasks are now sorted using the following logic:\nTasks with higher priority scores appear first. When scores tie, tasks are sorted by due date. Tasks without or invalid priority scores appear last, sorted by due date. Older configurations that do not implement the new priority score will continue sorting tasks by due date."},"title":"Overview"},"/building/training/":{"data":{"":"CHT Training ResourcesComprehensive guide for training CHT users and healthcare workers Onboarding Using a Training AppBest practices for using a Training App to keep training and production data apart Training CardsRemotely train health workers directly in their CHT app Training Cards ResourcesTemplate training content and best practices for Training Cards"},"title":"Training"},"/building/training/onboarding/":{"data":{"":"When onboarding new users, having a dedicated CHT app and instance for training can be helpful; it allows new users to do training exercises with mock data to get familiar with the app, while not having the data from their training interfering with the future use of their CHT app. Different approaches are possible, such as only entering real patient data during training, or manually deleting all the training data, but these methods are less practical for large deployments.\nNote\nThe suggestions in this guide should be assessed and adapted as needed to benefit a deployment. It is important that users don’t accidentally use the wrong app. The troubleshooting guide can help to monitor and remediate training data being in the production instance, or the opposite.","setting-up-a-training-app#Setting up a training app":"A separate Android App can be created for training, which would point to a CHT instance dedicated to training. The training instance should have the same configuration as the production instance, and have users created for training. To differentiate the Android app used for training from the production one, create a duplicate of your flavor and modify the following aspects\nBorder \u0026 Message: Consider adding a distinctive border and message when using the training app. This can be done by setting the build config field IS_TRAINING_APP to true, as seen in build.gradle for the training version of the Gamma app. CHT Instance: In your flavor’s res/values/strings.xml file set the app_host string to be the URL of your training instance, as seen in the Gamma Training app. If left the same as the production app both training and production data will end up in your production instance. Launcher icons: Consider using completely different icons, or at least change the color of the launcher icons. App name: Provide a noticeably different name to the training app. Since app names are often cut short on Android devices, make the change at beginning of the text. For example, CHW App [TRAINING VERSION] may display as CHW App... so it would be better to use [TRAINING] CHW App. The app name is set in the flavor’s res/values/strings.xml file, as seen in the Gamma training app. App ID: If you want to allow both apps to be on a device at once you will need to make sure your training app has a different applicationId, as seen in build.gradle for the Gamma training app. Note\nKeeping the applicationId values the same will make it impossible to have both the training and production apps installed at the same time on a device. If you have a way to install the production app after the training is complete then you may choose to do this to prevent users from using the wrong app.","switching-from-training-to-production-app#Switching from training to production app":"To avoid having production data in the training app, it is encouraged to remove the training app from the device once training is complete.\nIf the production app can always be installed after the use of the training is complete, then using the same applicationId guarantees that only one of the apps is installed at any given time.\nChanging passwords for the training users in an attempt to lock them out is not recommended. In some circumstances a user would be able to continue to use the training app for production use and not have the data sync back to the server.\nIt is preferable to remove the training app from devices, and monitor the training instance for unexpected activity that can be brought over to the production instance if needed."},"title":"Onboarding"},"/building/training/securely-onboarding-users-at-scale/":{"data":{"":"This document shows how to achieve a high level of credential management security for a CHT deployment. Implementers need to know when ease of use is more important than a more secure system. By reading this document you should be able to know when to make the “more secure” vs “easier to use” trade off.\nNo system is perfectly secure - be prepared to remediate a security breach!\nWhen a CHT deployment will support hundreds of users or more, secure credential management becomes critical. Patient data is sensitive and should never be accessed in any way by unauthorized parties. By following best practices and preparing for the worst case scenario of a password breach, patient data can be kept safe and CHWs can be kept online and able to deliver care.","acceptable-practice-shared-list-limited-access-unique-passwords#Acceptable practice: Shared list, limited access, unique passwords":"For deployments that are centrally provisioning devices, it is acceptable for generate a strong password per user in a centrally accessible, secure spreadsheet. Working off a computer to view the spreadsheet, provision each device. Do not to print the list of credentials.","audit-who-has-changed-their-password#Audit who has changed their password":"If you have instructed all users to manually change their password, CHT administrators can search their server logs to see which users have made the update. First find a list of all running services that have the word haproxy in it:\ndocker ps --filter \"name=haproxy\" --format '{{.Names}}' Then, assuming your service is called cht_haproxy_1, run this command to find all password changes in the past 24 hours:\ndocker logs cht_haproxy_1 --since 24h 2\u003e\u00261 | grep password_scheme Here is an example event showing user mary having changed their password on Feb 9 18:47:\nFeb 9 18:47:08 haproxy[12]: 172.22.0.2,couchdb,201,15,0,0,PUT,/_users/org.couchdb.user%3Amary,api,medic,'{\"_id\":\"org.couchdb.user:mary\",\"_rev\":\"3-d3dd14f3026942245ce3881adfcd513e\",\"name\":\"mary\",\"type\":\"user\",\"roles\":[\"chw\"],\"facility_id\":\"14046008-f796-4418-9ff2-12c2ef77b478\",\"password_scheme\":\"***\",\"iterations\":10,\"derived_key\":\"f846a7a20209592c613c09ea4405170735c7a557\",\"salt\":\"bbb089e5fc459c2ca1088c8316e0cc99\",\"password\":\"***\"}',411,15,86,'node-fetch/1.0 (+https://github.com/bitinn/node-fetch)'","before-starting#Before starting":"","credential-list-shared-on-internet#Credential list shared on internet":"If an online list of credentials is leaked to unauthorized parties, or worse, the Internet at large in the form of being indexed by a search engine, you need to change all passwords as soon as possible for any user on the leaked list. Per the note above, changing a password will log the user out immediately unless they are offline. Having supervisors encourage a user to switch their device to offline mode (turn off all data) is a good way to ensure they can continue to deliver care so they’re not locked out.","example-scenarios#Example scenarios":"","frequently-asked-questions#Frequently Asked Questions":"Best practices for user management at scale? Is it possible to send Magic Link to users using their own mobile bundles instead of setting up a messaging gateway?","ideal-practice-1-only-magic-links#Ideal practice 1: Only Magic Links":"Create a spreadsheet with all your users’ data. Included is a username but NOT a password. When users are created in bulk via the command line or bulk user upload, have a token login sent to the user via an SMS gateway. This avoids the problem of passwords being stored in clear text in the spreadsheet or on a printed version. The token login links can only be used once and are only valid for 24 hours.","ideal-practice-2-unknown-passwords-reset-during-provision#Ideal practice 2: Unknown passwords, reset during provision":"An alternate and also secure approach, is to bulk create the users as described above, not use magic links, and use random passwords that you do not save after giving users the credentials. Train the users on changing their password after they’ve logged in for the first time. This makes it harder for a password to be leaked because the password list isn’t kept. Additionally, as users are trained to change their password, a leaked list is likely not useful as all passwords have changed.","programmatic-password-reset#Programmatic password reset":"Medic has published a script to easily change all passwords for a list of users. Administrators will then be responsible to log CHWs back in by securely sending them their password.\nAdditionally, this script could be updated to immediately send a token login link to the user. There would be no need to change the password as this is done automatically for you. Note that users would need their phone numbers recorded in the CHT to receive a token login link. Here’s an example curl command to send a token login link for the mary user:\ncurl https://medic:password@cht.example.com/api/v1/users/mary \\ -X POST -H \"Content-Type: application/json\" \\ -d '{\"token_login\":true}'","remediation-of-security-failure#Remediation of security failure":"By knowing what the security threats are you can know the most helpful steps to remediate them to limit the damage done to the CHT deployment, the privacy of the patients and the security of CHWs.\nNote\nUsers who have their password changed can continue to use the CHT to deliver care. They need to keep their device offline though. After a password change, when a CHW attempts to sync, they will be prompted to log in. At that point, they will not be able to continue using the CHT until they log in. No data will be lost if they log in as the same user.","secure-administrative-users#Secure administrative users":"CHT administrators have the ability to create and delete users and push new configurations to the CHT so they should take extra precautions in managing their password. They should use a strong passphrase (instead of a password) that is unique to their CHT login. They should use a password manager to store this passphrase. By following these steps, unauthorized people are less likely to be able to access administrator accounts.","secure-devices#Secure devices":"Firstly, ensure that the CHWs’ devices are secure: they all employ disk encryption and require a password or PIN to unlock and use. See our Securing Android Devices document for more information. As well, an MDM may be used to enforce disk encryption and device unlock protocols.","secure-passwords#Secure passwords":"When generating passwords for CHWs, do not use a formula which repeats itself (eg password123 for user A, password234 for user B etc.). Do not use the CHW information such as username, email or phone number in the password. Train CHWs to not re-use passwords.\nFor a reference application showing secure password generation, see generatePassword() in the CHT Core scripts directory. This will generate a truly random 14 character password with uppercase (A-Z), lowercase (a-z), numerical (0-9) and one special character (-).\nTo generate a password that is easier to remember, type and speak over a phone, consider using Diceware passphrases. For added accessibility, use a word list from the CHWs native language if it is not English. This will make the words easier to spell and more likely to be remembered, but still secure.","spreadsheet-use#Spreadsheet use":"Most deployments manage users in a spreadsheet shared either in Google Docs or other cloud service. It is convenient to have a canonical shared location to access the data. This is an acceptable, but not ideal, solution as it ensures changes are instantly shared while still ensuring a number of key security requirements. For an ideal solution, see “Ideal” below.\nOf paramount importance:\nNever enable anonymous access to the URL for the spreadsheet. You must always require authentication to access user credential lists Audit regularly who has access to the shared spreadsheet. Consider setting up an alert every time a new person is granted access Reduce the total number of users that need access by breaking up user lists by logical group. For example, each sub-county could have its own user spreadsheet. That way the user credentials are only shared with the local administrators who need it Refrain from printing spreadsheets of users and passwords. They can be lost, stolen or easily photographed when shown in public If you ever need to download a plaintext CSV with username and password, ensure the computer also has disk encryption enabled and requires a password to unlock Do not keep downloaded CSV plaintext copies of credentials. Instead, delete and re-download them from the authorized, authenticated cloud server as needed","transmitting-credentials#Transmitting credentials":"When it comes time get a username and password onto a device or to a remote user, be sure to use mediums that are secure. One of the main concerns is credentials being found long after they were sent.\nA best practice is for the sender to add a credential to a shared password manager. The person receiving the credentials can then securely open the password manager. If no password manager is available, consider sending the password via One Time Secret To send credentials in to many CHWs, consider using token login. For sending large lists of credentials, as mentioned above, using a cloud provider like Google Sheets, is a good way to have an audit trail and still provide easy, remote access.","worst-practice-shared-list-anonymous-access-similar-passwords#Worst practice: Shared list, anonymous access, similar passwords":"Create all users with near identical passwords (eg password123, passord234, password345 etc.) that are then printed out, shared via email or posted to a public URL which requires no authentication. Send an SMS to the CHW with username, password and URL of the device.\nThere’s many failures here:\nPasswords are predictable and easy to guess Credential lists are shared too widely Users will have their credentials in SMS which may be easily discovered weeks or months later by an unauthorized party"},"title":"Securely Onboarding Users"},"/building/training/training-cards-resources/":{"data":{"":"","best-practices#Best practices":"If you are deploying new trainings cards, here are some best practices to follow:\nWhen deploying training cards for the first time, provide guidance in advance as to what users should expect from the cards and how to use them Test training card content with a small set of users to ensure learnability and understanding before deploying to your live instance Test on a physical device to see what content will look like on different screen sizes Keep content to a minimum and try to have as few cards as possible Ensure images aren’t confused with UI elements: Add outlines or shadows indicating they’re for demonstrative purposes only. Never include navigation buttons in your screenshots (e.g., “Next” or “Cancel”). Make sure users know who to contact if they run into issues Establish success criteria for the training cards Some examples of data to monitor include:\nUsers who have completed the training within X days Outliers, ex. users who have seen the cards multiple times and not completed the training The intended users have received the training","examples#Examples":"Below is a list of training cards that you can use in your project to train users about new updates in CHT. Read the step by step guide to deploy the training cards.","floating-action-button#Floating Action Button":"Introduced in 4.2.0\nThe additive actions (creating reports, places, people, etc…) have moved from the bottom action bar to a Floating Action Button. Use this training to introduce the change to your users.\nGet the training card files here.","more-options-menu#More Options Menu":"Introduced in 4.2.0\nThe Edit, Delete and Export actions have been moved to the More Options menu. Use this training to introduce the change to your users.\nGet the training card files here.\nOnce you have downloaded the training card files, follow the step by step guide to learn how to edit the properties file to configure:\nThe roles of users who can view the training cards The start_date to define the training start day (when the training cards should show)"},"title":"Training Cards Resources"},"/building/training/training-cards/":{"data":{"":"Introduced in 4.2.0\nTraining Cards help health workers learn about changes to CHT apps remotely, directly in their app. Training content might include information about a newly deployed feature, changes to a care guide, or simply a reminder about an underused feature or workflow. They are perfect for training on a very specific topic and are not meant to replace a comprehensive onboarding program.\nTemplate training content for new CHT features is made available from time to time. These templates can be customized to the local context.","accessing#Accessing":"When health workers open or reload their app, configured training cards will automatically show on top of all other content in the app. If it is not a convenient time to complete the training, they can cancel out at any time and will be prompted again the next day they open their app (training will start from the beginning).\nNote\nIf there are multiple training sets configured to start on the same day, the CHT will determine the order alphabetically based on the form ID. Subsequent training sets will only be displayed once the previous ones are either completed or no longer valid the next day the app is opened.\nTraining materials can also be accessed in the training page found in the auxiliary menu for users to revisit as needed. Completed training is displayed with a green checkmark. Added in 4.15.0.","completing#Completing":"Health workers read through each card one by one in a predefined sequence, tapping “Next” on each card. When they are finished reading all cards, they tap “Submit” on the last card. The training set is now considered complete and they can continue using their app. Completed training sets show up on the main list of the Reports tab and they won’t be asked to complete this set again. If there are additional training sets to complete, they will be shown the next day the app is opened.","configurability#Configurability":"Training cards can be shown to any user associated to a contact. A “set” of training cards represents a collection of individual training cards, generally covering a single training topic. The list below highlights some of the key areas of customization:\nNumber of sets Number of cards in a set Content of each individual card (text, images, etc…) When health workers will start seeing a set (specific start date) How long the set will be available (# of days, relative to the start date) Which users will see the set (based on user roles)","monitoring#Monitoring":"As mentioned above, completed training sets will show up on the main list of the Reports tab. These reports are available in analytics, aggregate targets , and can trigger supervision workflows and tasks."},"title":"Training Cards"},"/building/training/training-cards/training-cards-configuration/":{"data":{"step-1-create-the-training-form#Step 1: Create the training form":"Training Cards enable remote training from within the CHT by showing a sequence of “cards” containing content provided by App Developers. The content might include information about a newly deployed feature, changes to a care guide, or simply a reminder about an underused feature or workflow. Enketo forms are used to display the content, and App Developers can specify a start date, duration, and to which user roles the cards should be shown. Like app forms, forms used by training cards will automatically be downloaded to the user’s devices.\nNote\nExample training forms are available here and provide a good starting point.\nStep 1: Create the training formCreate an XLS Form. In the following example, the training form is called my_new_feature, it has some text in the label::en column, and some images in the column media::images to illustrate the feature.","step-2-add-the-forms-id#Step 2: Add the form’s ID":"Important, define the form_id located in the settings sheet with the prefix training: and add the form name, otherwise the training card won’t display. In our example, the form_id should be training:my_new_feature.","step-3-configure-the-training-form#Step 3: Configure the training form":"Create a properties file to define the starting date of the training, the number of days it will be active, and the user roles that can access the training. In our example, the file name is my_new_feature.properties.json and contains the following properties:\n{ \"title\": \"New workflow\", \"context\": { \"start_date\": \"2023-07-13\", \"duration\": 60, \"user_roles\": [ \"nurse\" ] } } In the example above, the training cards could be shown to any user with the “nurse” role between July 13, 2023 and September 11, 2023 (inclusive). See more information about these configuration settings below:\nProperty Description “title” Enketo’s form title that is displayed in the modal’s header section. “start_date” Optional. Define the training start day using yyyy-mm-dd format. If not defined then the training will start immediately. “duration” Optional. Number of days this training should be active. If not defined then the training will never expire. “user_roles” Optional. List of user roles that can access this training. If not defined then all users can access the training. Note\nUsers with an admin role can access training cards but they need to have a contact associated in the org.couchdb.user:[user-name] document from CouchDB.","step-4-add-multimedia-to-the-training-form#Step 4: Add multimedia to the training form":"If your training form has images, create a folder with the same name as the form and add -media suffix. In our example, the form name is my_new_feature, then the folder name should be my_new_feature-media.\nInside that new folder, make another one called images and put inside all the images that your form needs. See more about multimedia in forms.","step-5-put-everything-in-the-right-place#Step 5: Put everything in the right place":"In your project configuration folder, place the XLS form, the properties file, and the media folder inside /forms/training/. The file structure should look like this:","step-6-convert-and-upload-the-training-form#Step 6: Convert and upload the training form":"Open the terminal and use the latest version of the cht command line tool to convert and upload the training form:\nConvert the form by running this command:\ncht --url=[instance_url] convert-training-forms -- [form_name] Example:\ncht --url=http://admin-user:secretpass@my-xyz-project.org convert-training-forms -- my_new_feature Upload the form by running this command:\ncht --url=[instance_url] upload-training-forms -- [form_name] Example:\ncht --url=http://admin-user:secretpass@my-xyz-project.org upload-training-forms -- my_new_feature","step-7-verify-and-monitor#Step 7: Verify and monitor":"At this point the training cards are ready to use. You can verify by logging in with a user that has a valid role assigned for the training card, on the day that the training starts. Remember, to sync the app to see the results (the uncompleted training will display once a day).\nUsing telemetry you can monitor user interaction with each training card “set”. Some key metrics you can view include:\nNumber of times each user was presented with training cards The date(s) each user was presented with training cards Number of times each user completed a training card set* The min/max amount of time each user spent viewing the training cards The device_id of any device from which the user saw the training cards * Training Cards are designed to only be viewed once so this should normally only ever be 0 or 1. It is possible that a user deletes the training “report”, in which case they would be presented with training cards again.\nExample SQL:\nSELECT doc#\u003e\u003e'{metadata,user}' AS cht_user, doc#\u003e\u003e'{metadata,deviceId}' AS device_id, concat(doc#\u003e\u003e'{metadata,year}', '-', doc#\u003e\u003e'{metadata,month}', '-',doc#\u003e\u003e'{metadata,day}')::date AS telemetry_date, COALESCE(doc#\u003e\u003e'{metrics,enketo:training::add:render,count}','0')::int AS count_render_training, COALESCE(doc#\u003e\u003e'{metrics,enketo:training::add:user_edit_time,count}','0')::int AS count_submit_training, COALESCE(doc#\u003e\u003e'{metrics,enketo:training::add:user_edit_time,max}','0')::int/1000 AS max_seconds_on_form, COALESCE(doc#\u003e\u003e'{metrics,enketo:training::add:user_edit_time,min}','0')::int/1000 AS min_seconds_on_form FROM couchdb_users_meta WHERE doc-\u003e\u003e'type'='telemetry' AND doc#\u003e'{metadata}' ? 'day' AND doc#\u003e'{metrics}' ? 'enketo:training::add:render' ORDER BY telemetry_date DESC"},"title":"Configuring"},"/building/training/training-instance/":{"data":{"":"After onboarding CHWs, sometimes data ends up on the wrong CHT instance. There are some passive and active actions you can take to help deal with this situation.","centralized-database-checks#Centralized database checks":"From an administrative perspective, passive monitoring can be done by querying the Postgres instance that CHT Sync is populating. If 2020-09-14 was the date to stop use the training instance, this SQL query would show CHWs using the wrong instance after 2020-09-14:\nwith forms as ( select doc #\u003e\u003e '{fields,inputs,user,contact_id}' as chw_id, count(*) as n_forms from couchdb where to_timestamp((doc -\u003e\u003e 'reported_date' )::bigint / 1000) \u003e '2020-09-14 00:00:00' group by 1 ), chw_names as ( select doc -\u003e\u003e '_id' as chw_id, doc -\u003e\u003e 'name' as chw_name from couchdb where doc -\u003e\u003e 'role' = 'chw' and doc -\u003e\u003e 'name' not like 'ASC%' ) select n.chw_name, f.n_forms from forms f left join chw_names n using(chw_id) order by n_forms desc; A limitation of this technique is that CHWs who have not synchronized their device will not show up. In this case, a supervisor proactively checking per above is a better failsafe.","cht-based-supervisor-tasks#CHT based supervisor tasks":"Tasks for supervisors can also be used for the CHWs that report to them. This can be used to trigger a task when a CHW hasn’t submitted a task within a given period on production.","manual-device-checks#Manual device checks":"Supervisors can actively monitor CHWs as they register their first household. If each CHW is given a deadline to do this, the Supervisor can follow up promptly with CHWs who have not met the deadline.","monitoring#Monitoring``":"Monitoring is a good way to see if CHWs are sending forms to the wrong CHT server. By catching such a problem early, it may be easy to fix manually which avoids more laborious fixes on the command line for admins. ``","remediation#Remediation":"In the case that production data has been entered into a training instance, care must be used to ensure data is not lost or overwritten. These steps assume you’re on a Linux command line and have jq, curl and cat installed. The task is to carefully download all docs created after a certain date on a training, clean up extra docs not needed and then upload them to a production instance:\nSet the aliases and environment variables:\nalias ts='date -u +\"%Y-%m-%dT%H:%M:%SZ\"' alias curlj=\"curl -H 'content-type:application/json'\" alias curljz=\"curl --compressed -H 'content-type:application/json'\" export COUCH_URL=https://admin:pass@dev.example.org Ensure affected CHWs have synced their devices to the development instance one last time. If they have been offline for some time and gathered production data, signing out or deleting the app before synchronizing may result in lost data.\nFind the date when CHWs should have started using production. Convert this to epoch with milliseconds. For example if the time was “Tue, 01 Dec 2020 09:36:50 GMT” then the epoch would be “1606815410000”\nUsing Fauxton, create a view to show all documents created after this date:\nfunction (doc) { if(doc.reported_date \u003e 1606815410000) { emit(doc._id, 1); } } Creating a view in Fauxton\nDownload the UUIDs of the documents in the view, and convert it to raw format (uuids-2.txt):\ncurl \"$COUCH_URL/medic/_design/temp/_view/temp1\" \u003e uuids-1.txt cat uuids-1.txt | jq -r '.rows[].id' \u003e uuids-2.txt Download all the matching docs to docs.json:\ncat uuids-2.txt | jq --raw-input --slurp '{keys: split(\"\\n\") }' | curljz -d@- \"$COUCH_URL/medic/_all_docs?include_docs=true\" | jq '{docs: [ .rows[] | select(.doc).doc ]}' \u003e docs.json Change the fields by deleting “_rev” field and also “_attachments” if uploading in a different instance. This can be carefully done by manually editing the JSON locally before uploading.\nChange the COUCH_URL to be your production instance by setting another export:\nexport COUCH_URL=http://admin:pass@app.example.org Upload the docs, for example, the following command adds a field (updated=true) to the docs and uploads them:\ncat docs.json | jq '{\"docs\":[ .docs[] | .updated = true ]}' | curljz -d@- $COUCH_URL/medic/_bulk_docs \u003e results.json"},"title":"Training Instance"},"/building/training/training/":{"data":{"":"CHT training process In the implementation of CHT supported community health programs, health care workers such as CHWs, CHW supervisors and facility based health care providers need training to help equip them with the required knowledge and skills to effectively carry out their roles and responsibilities. For most deployments, program leads and ministry of health officials may also need training for them to perform their roles, oversee and supervise the community health programs. End user training needs to be well planned and implemented using standardized training methods and approaches which take into account the capacity of end users.\nFor most community health programs, CHW training is divided into two major sections consisting of basic modules and technical modules. For basic module training, CHWs are trained on basic skills such as leadership, communication and counselling, basic health promotion practices and basic lifesaving skills. For technical training, end users are trained in the following common areas to help improve their skills and delivery:\nThematic training - this training focuses on the health program areas of interest, this will vary from one program to another depending on the specific health areas users are expected to support. For example, for an MNCH program, users will be trained in ANC, PNC and immunization. Hardware and software training - users are trained on how they can operate an android phone, reboot the hardware, install and reinstall applications and how they can log into the CHT app. This training is critical for end users who have never interacted with a smart phone before. CHT tool training - this involves training users on how they can use different CHT tools (SMS, mobile and web applications) to guide them to deliver health care services. Skill development - users are trained on interpersonal communication, listening skills, capacity building skills and how they can promote healthy behaviour change. Behavioural - the users are taught how to build relations in the community and how to work within diverse communities. Proper training of health care workers leads to increased job satisfaction ensuring health care workers are able to provide high quality care.\nThis guide highlights some of the considerations and steps for planning and conducting end user training. It is based on the learnings from many collaborative trainings that have been conducted over the years. Some of the training resources have been co-created with various implementing partners and ministries of health. This guide can help partners learn how they can plan and conduct training.\nThe CHT training process comprises a series of steps highlighted below that need to be followed systematically to ensure an efficient training programme.\nTraining needs assessment - this is the first step prior to conducting the training to help understand the users needs, behaviour, roles and how they perform their responsibilities. At this stage, information on the literacy and numerical skills of end users, demographics (age, gender, language of instruction), potential program champions is collected, this information helps inform the training approach, duration and methods of training. To collect the needs assessment information, various methods can be used including observation, interviews,focused group discussions and surveys. Define the training objectives - In this step, the training outcomes are defined, these are things end users should be able to do as a result of the training. Develop a training plan or checklist - The checklist lists the tasks, activities and resources needed to train the end users Create the training materials and resources Conduct the training - Different training approaches can be adopted. Training can be done in person or virtually. It includes direct training of end users, training of trainers (ToT) model which involves training program champions to cascade the training, use of CHT training cards in which users are able to access training resources in-app, remote online training and self learning through a learning management system. Evaluate the training - In this stage, the training outcomes are assessed to determine if the training has achieved the expected outcomes. The learning objectives will help to determine the evaluation process that would be most appropriate. Pre training preparation Before training is done, a training preparation checklist is prepared to ensure all items listed below are catered to.","cht-training-process#CHT training process":"","conducting-a-training#Conducting a training":"Training should be approached in a cohesive and integrated manner, starting with the initial training of the end users, followed by regular refresher training, with continuous support, supervision and mentorship. Training is usually carried out collaboratively by the implementing partners, ministry of health officials and project implementers.\nDifferent training approaches can be used to train end users. Several factors determine the training approach that is to be used, this includes the number of trainees and facilitators, user demographics, learning objectives, training environment and the available resources. The training approaches include: the training of trainers (ToT) model, direct end-user training and remote training. The ToT model is used to train a large pool of end users. For this model, a cadre of end users are trained as ToTs and after the training they are expected to cascade, reinforce and support the training of other end users. Direct training involves a trainer conducting an in-person training of end users while for the remote training, end users are trained online or they can access the training resources on their devices.","evaluation#Evaluation":"Evaluation assesses whether the training objectives have been achieved. Evaluation of the training involves assessing the effect of the training observed against a set standard considered as an indication of learning. A common model used to evaluate the training consists of the following four levels:\nLevel 1 - this is the participants reaction towards the learning usually performed through a feedback survey, participants can evaluate the training content, facilitators, training approaches and the training venue. Trainers use this feedback to improve the training content and approach Level 2 - This measures what learners have learnt and what they are able to perform as a result of the training. This can be done during the training through pre and post tests, simulations, practical tests and tasks Level 3 - After the training event, the learners are evaluated if they are able to apply what they have learned when working. This can be done through observations, learning and interviews Level 4 - This is concerned with the extent to which changes in behaviour after the training contribute to improved results and increased impact. This can be done after a series of training and refresher trainings and it requires before and after the training comparison","logistics#Logistics":"Identify the total number of participants. It is recommended that the ratio of facilitators to participants should be 1:10 and each training class should have a maximum of 30 participants. Confirm and organize training venue. The venue should be well ventilated, have adequate lighting, good sanitation and security and be at a central location for easy access. It is recommended that the training of the CHWs takes place in a community setting such as schools, churches or mosques while training of CHAs and program teams can happen in a facility or hotel. Phone preparation Procure phones for the training with minimum specs requirements Ensure phones are fully charged prior to training Guide users on how to obtain and register SIM cards Load airtime into phones Pack phones, chargers and any other applicable hardware to take to the training venue Prepare the inventory with end-users names, SIM numbers and phone IMEI numbers Prepare the mobile and SIM handover form with a documented mobile and SIM Management guideline handout Confirm availability of electricity, mobile network and internet at the training venue Invite the partner or ministry of health to lead the training Organize a facilitators pre-planning meeting to assign each facilitator sessions they will be covering. Facilitators should visit the training site prior to the training to make sure the site is ready for the planned training. Organize and process payment forms, if applicable, for: Trainer and co-trainer allowance Participation allowance Travel allowance for participants Venue costs and other expenses","post-training-activities#Post training activities":"After every day of training, facilitators should conduct training evaluation to discuss what went well and the areas to improve on the subsequent training days. After the completion of the training, ministries of health, implementing partners and CHT users agree on a date when the project can go live. Below are the critical activities that take place before go-live.\nParticipants are informed when the project will go live. In most cases, the project goes live a few weeks after the training Participants are trained on how to install the production application Paricipants are reminded to uninstall the training application User accounts are created on the production instance and credentials shared Users are informed on technical support structure to support with post-training issues Users are sensitized on privacy and security best practices","pre-training-preparation#Pre training preparation":"","tech-preparation#Tech preparation":"Set up application instance (training \u0026 production instances) Create user accounts for all personas depending on the specific project Set up users’ phones to ensure applications like Playstore and other related tools are available","training#Training":"","training-delivery-methods#Training delivery methods":"There are a number of training methods that can be used to train end users. Blended training, participatory and interactive techniques can be used to make the training effective. The table below has a list of some of the delivery methods.\nMethod Description Role play Learners act out the different roles they are assigned. Following the skit, there are discussions and conclusions related to the topic. Presentations A facilitator delivers content through oral, video and visual aids. Demonstrations A skill is demonstrated with a goal of facilitating understanding, eliciting comments and explanations. Pair work Participants are able to work in pairs so that participants with low confidence are able to learn from other participants. Case studies A facilitator presents facts about a theoretical case or scenario and learners are asked to intervene and make suggestions, followed by a conclusion about the case. Interactive simulations This method provides an opportunity for learners to practise a certain task for example how to register a new households on CHT. Teachbacks Trainees pick a topic or a skill they have learned in one of the sessions and teach it to their peers. Question and answer The learners are provided with a set of questions which they are expected to answer so as to establish their prior level of understanding of a certain topic. Hands-on practice Learners get to experience and practise what they have learned, for example a learner will get the experience of navigating a digital app. Individual work and assessments Participants work individually to answer written or oral questions about a topic that has already been covered in the training. Flip charts These are wall and board hangings that can serve as visual aids to reinforce learning. Group assessments Learners work together to answer questions or complete assigned tasks aimed at assessing knowledge of topics already covered in the training.","training-materials#Training materials":"Prepare training materials Prepare training agenda with daily training schedule. This should contain the trainer responsibilities and activities - here is an example of a training schedule Prepare screenshots or posters of training materials as backup Finalize user guides - here is an example of a user guide Finalize on the trainer and co-trainer resources Translate training materials and arrange for a translator, if required Organize supplies and stationery (markers, pens, notebooks, meta cards, tape, newsprint, index cards, handouts, take-home guides, projector and other required training equipment) Print training materials such as the ones listed below: Posters as a backup in case there is no electricity User guides Evaluations which include pre-tests and post-tests - here is an example of a pre/post test"},"title":"Training CHT Users"},"/building/training/users-bulk-load/":{"data":{"":"The bulk user upload feature is available in 3.16.0 and later versions of the CHT. As of CHT 3.17.0, when creating both a contact and a place, the contact will be set as the default contact of the place. User creation can be scripted using the CHT API directly or using the cht-conf tool, which is detailed in the CSV-to-Docs guide. This feature can be used to load as many users as possible but works optimally with chunks of 1,000 users or less. Steps to bulk load users:\nUsing Google Sheets, populate a spreadsheet with the users to be imported. Import the new users using the Admin UI in the CHT. Handle any errors that may occur during importation. When done, you will have created new users, new contacts and new places, all of which are correctly associated in CouchDB with the correct UUIDs. Workbook Instructions The workbook contains a varying number of spreadsheets depending on the hierarchy in question. Users with different roles are placed in different spreadsheets as shown in the templates below. For example when creating users with chw and chw_supervisor roles, you will have “contact.chw”, “contact.chw_VLOOKUP”, “contact.chw_supervisor” and “contact.chw_supervisor_VLOOKUP” spreadsheets. These pair per role spreadsheets contain actual data on users and parent place data respectively.\nThere is another spreadsheet, “place.type_VLOOKUP”, which is required when creating user accounts, contacts and their places. This spreadsheet defines the name and type of places in your hierarchy and should match those in the app_settings.json file. Note that you will need to create the parent place before importing the users.\nTo get started, there are three different workbook templates available that are compatible with the default configuration of the CHT, they cater for use cases that you might encounter when creating users in bulk. You will notice some columns have an :excluded suffix. These are columns that are ignored by the API and allow addition of autocomplete and data validation within the spreadsheet to make it easier to work with.\nClick on any of the use cases below to make a copy of the spreadsheet for the use case in question:\nwhen you want to create user accounts only when you want to create user accounts and their contacts when you want to create user accounts, their contacts and their places We will use the second use case to create user accounts and their contacts in the example below.\nContact Spreadsheet Instructions The spreadsheet interfaces with the POST /api/v1/users API which works as though passing a JSON array of users. Rows in the spreadsheet represent a user while columns represent properties of the user. Each column in the spreadsheet maps to an object property understood by the API to insert the users into the database. These properties can be found in the Users API documentation.\nContact spreadsheets are named according to the user role, for example when creating users who are chws and others who are chw_supervisors, the following contact spreadsheets are populated respectively: “contact.chw” and “contact.chw_supervisor”.\nThere are three sections to the contact spreadsheet:\nBulk user import spreadsheet with areas labeled","access-denied#Access denied":"If a user you successfully created can not log in because they see an error:\nAccess denied - You have insufficient privileges to view this page. Talk to an administrator to increase your privileges\nA possible cause of this is you have a bad role defined in your spreadsheet that doesn’t match your configuration. For example, the the default role should be chw_supervisor, but here we see garbage characters were accidentally added. While the user was created without errors, they’ll see the above error when they try to log in:\nBad type declared in spreadsheet causes the user to have no role\nYou may manually fix any users you imported to have the correct role. To ensure future users have valid roles to log in with, check the /admin/#/authorization/roles area on your CHT instance for valid roles:\nCHT admin showing a list of valid roles in the Role column on the left","adding-new-places#Adding new places":"Over time, new places will be added to different levels of the hierarchy. You will need to manually add these new places to the spreadsheet so that you can add users to the new places.\nNavigate in the CHT to the new site. In this case, it is “Site Dieco” that has been added (item 1). Copy the 36 character UUID from the URL (item 2). navigate in the CHT to the new site\nOpen your existing Google Spreadsheet with your users. Find the hierarchy level you added your new site. In this case “Site Dieco” is a CHW place, so we’ll go to the “contact.c62_chw_VLOOKUP” spreadsheet. Add some new rows at the bottom (item 1), enter the new place name in column A (item 2) and paste the UUID in column B (item 3) open your existing spreadsheet","configuring-custom-places-types#Configuring custom places types":"The third use case mentioned in the workbook instructions section links to a Google Sheets to create user places alongside their account and their contact. This works out of the box with the default CHT configuration but will require adjustments to be made in the place.type_VLOOKUP spreadsheet when dealing with a CHT configuration with custom places types.\nThe place.type_VLOOKUP spreadsheet has two columns that contain the name of the places types set in the .contact_types[] property of your app_settings.json and their respective IDs. The place type name is used by the User-Place-Type:excluded column in the contact.chw spreadsheet to provide a user-friendly way to pick a place with autocompletion. You will want to keep this spreadsheet in sync with your CHT configuration to create users’ places.","contact-spreadsheet-instructions#Contact Spreadsheet Instructions":"","importing-users-example#Importing users example":"Create a copy of this spreadsheet. Give it a descriptive name and note its location in Google Drive. You will always come back to your copy of this Sheet whenever you want to add a set of users.\nCopy the “contact.chw” and “contact.chw_VLOOKUP” spreadsheets so that you have a set of the pair per level of your hierarchy. If your hierarchy was “Central -\u003e Supervisor -\u003e CHW”, you would have 3 pairs (6 spreadsheets total). Be sure each spreadsheet is named accurately.\nOpen the spreadsheet and populate your list of parent places that you’d like to use for your users. In this example the “Penda Ouedraogo” place has gotten an updated UUID starting with “bcc” populate your list of parent places\nAdd the users you would like to create entering data into the spreadsheet\nExport spreadsheet into CSV export spreadsheet into CSV\nAccess the Admin Console of your instance, go to “Users”, click “Import from file” and select your CSV file you just exported import CSV into CHT\nBe patient during import (testing showed ~0.4 seconds per record up to 500 records) progress feedback during CSV import\nDownload the status file download the status file\nTransfer errors back into spreadsheet. Make sure you copy all three columns A, B and C. The usernames in column C must match those in column D of the original spreadsheet. transfers errors back into spreadsheet\nFix the errors and export to CSV fix errors and export to CSV\nexport spreadsheet into CSV\nImport the fixed CSV, noting already import rows are skipped import the fixed CSV\nDeliver credentials to phone or to CHW, using care to not overshare the login and password","passwords#Passwords":"Passwords are automatically generated by the spreadsheet. Use caution when editing rows marked as imported in the Import.status:excluded column. For example, if a user was imported two weeks ago and the token_login is set to TRUE and then back to FALSE, the password will be regenerated and thus be different from the one the user is using to login. If a change is made, you can use Google Sheets history (“File” -\u003e “Version History”) to retrieve the old value.","spreadsheet-area-1#\u003cstrong\u003eSpreadsheet Area 1\u003c/strong\u003e":"These three columns are where you paste the results after running an import. See step 8 in “Importing users example” below.\nimport.status:excluded: This field can have three values. Over time, they should all be imported or skipped as you will have processed all users on the list: imported- This user has already been successfully imported skipped - This user was skipped error - Contains errors that were encountered during importation. See import.message:excluded field for more information import.message:excluded: The status of the last import. For example, Imported successfully or Username 'mrjones' already taken import.username:excluded: Use this column to ensure you’re matching the response with the correct user in the contact.username to the right","spreadsheet-area-2#\u003cstrong\u003eSpreadsheet Area 2\u003c/strong\u003e":"This is where you enter your user data and contains the following columns:\nusername: username used to log into the application Parent-Place:excluded: existing parent place of the new user place. A drop-down populated from contact vlookup spreadsheet User-Place-Type:excluded: type of user place to be created. A drop-down populated from place vlookup spreadsheet contact.first_name: first name of the new user contact.last_name: last name of the new user contact.sex: sex of the new user contact.phone: phone number of the new user email: email of the new user (optional field) contact.meta.created_by: this column contains metadata on the person who created the user (optional field) token_login: whether the user should be sent login credentials via SMS as a link contact.type or place.type: when creating a user, is logged as contact. In the case of the default config, possible values are district_hospital, health_center, clinic, and person contact.contact_type or place.contact_type: defines the type of contact being created depending on the deployment’s configuration. It should match one of the contact types defined in the config’s contact_types field type: role of the contact","spreadsheet-area-3#\u003cstrong\u003eSpreadsheet Area 3\u003c/strong\u003e":"Columns in this area are automatically populated by the spreadsheet logic. While this is needed to create a user, it is intentionally not editable and you will see this error when you try to edit data:\nBulk user import spreadsheet warning\nHowever, for the mapping to occur as expected, you may edit the fields contact.role, contact.contact_type, place.contact_type and type to match your deployment’s configuration.\nDo not edit column headers in row 1. They are needed by the CHT to identify which data is in it. Changing the names will result in errors or missing data in the CHT.","trouble-shooting#Trouble shooting":"","workbook-instructions#Workbook Instructions":"","wrong-type-this-is-not-a-person#\u0026ldquo;Wrong type, this is not a person.\u0026rdquo;":"If you have miss-matched contact types, you will get an error upon import:\nWrong type, this is not a person.\nAs of CHT 3.7.0, you’re allowed to declare different contact types in your app_settings.json. If you have populated the .contact_types[] property in your JSON, you will need to update the automatic value of the contact.contact_type column. The default value is:\n=if(NOT(ISBLANK(D2)),\"person\",\"\") Often times numbers are used in app_settings.json to declare contact_types matching numerical names from place_hierarchy_types. It might look like this:\n\"contact_types\": [ { \"id\": \"c52_supervisor\", \"name_key\": \"contact.type.c52_supervisor\", \"group_key\": \"contact.type.c52_supervisor.plural\", \"create_key\": \"contact.type.c52_supervisor.new\", \"edit_key\": \"contact.type.c52_supervisor.edit\", \"icon\": \"icon-manager\", \"create_form\": \"form:contact:c52_supervisor:create\", \"edit_form\": \"form:contact:c52_supervisor:edit\", \"person\": true }, { \"id\": \"c62_chw\", \"name_key\": \"contact.type.c62_chw\", \"group_key\": \"contact.type.c62_chw.plural\", \"create_key\": \"contact.type.c62_chw.new\", \"edit_key\": \"contact.type.c62_chw.edit\", \"parents\": [ \"c60_chw_site\" ], \"icon\": \"icon-chw\", \"create_form\": \"form:contact:c62_chw:create\", \"edit_form\": \"form:contact:c62_chw:edit\", \"person\": true } ] In this case, you would need to change the value of the contact.contact_type column to match your new types. Based on the contact.types above, a CHW would be declared like this now:\n=if(NOT(ISBLANK(D2)),\"c62_chw\",\"\") Be sure you copy this updated formula for all rows in the contact.contact_type column."},"title":"Bulk Load Users"},"/building/translations/":{"data":{"":"Content in this section Overview Configuring custom translations"},"title":"Translations"},"/building/translations/localizing/":{"data":{"":"This section will take you through translating the CHT to a custom language (in this guide, Swahili). This will include setting up the user interface labels as well as outgoing text messages.\nTip\nIf you need to translate the whole app into an entirely new language, please consider contributing those translations to the core project so they are available to the community.\nBy the end of the section you should be able to:\nChange the CHT user interface labels to a custom language. Change outgoing text messages to a custom language (Swahili). Prerequisites A local CHT instance with cht-conf installed locally A project folder CHT Swahili translations in a messages-sw.properties file. Localization Steps Create a translations/messages-sw.properties file in your project folder.\nPopulate the messages-sw.properties file with the appropriate translation and upload it onto your local CHT environment using the command below.\ncht --url=https://medic:password@localhost --upload-custom-translations or simply:\ncht --local upload-custom-translations 1. Add User Interface Label Translations For non-admin users, CHT Instance text refers to the text that falls under Messages, Tasks, Reports, People and Targets. To localize instance text to Swahili, change the default system language to Swahili.\nGo to App Management \u003e Display \u003e Languages \u003e Default Language(Change to Swahili)\nTo find out what the language code for Swahili is, go to the list of languages as illustrated in the screenshot, click Kiswahili (Swahili) to show the options dropdown and click Edit Name. The code will be in the text box under Language Code on the popup.\nFor this example, the language code is sw.\nAfter changing the CHT instance language to Swahili, the various elements will behave like this:","1-add-user-interface-label-translations#1. Add User Interface Label Translations":"","2-rtl-support#2. RTL support":"As of version 4.18.0, the CHT has support for Right to Left languages, and bundles Arabic translations. Setting the language to Arabic will automatically switch the UI to a mirrored design, to align with standard RTL writing and web elements.\nAny language can be set to be a RTL language via App Management \u003e Display \u003e Languages \u003e Add/Edit language","3-app-forms#3. App Forms":"To localize a CHT app form to Swahili, open the appropriate xlsx of the form and add a label::sw column which has the translation for the text. This will work in the Survey sheet or the choices sheet.\nNew Person app form XLS configuration\nDefault English translation\nForm after switching CHV’s language to Kiswahili\nThe App Management - Admin Area section will still remain in English even after changing the default language to Swahili.\nNote\nThe CHV can also choose the language of their choice when they login for the first time. A popup appears where they can choose their preferred language.","4-outgoing-texts#4. Outgoing Texts":"In projects that incorporate SMS workflows, there are SMS notifications/replies that go to CHVs and Supervisors phones.\nTo change the language of outgoing texts for a CHV or Supervisor to Swahili, follow the steps below.\nIn the app_settings.json, when configuring replies, add Swahili language code (sw) under locales: \"locales\": [ { \"code\": \"en\", \"name\": \"English\" }, { \"code\": \"es\", \"name\": \"Spanish\" }, { \"code\": \"fr\", \"name\": \"French\" }, { \"code\": \"ne\", \"name\": \"Nepali\" }, { \"code\": \"sw\", \"name\": \"Swahili\" } ] Set up the translation for the reply message: { \"messages\":[ { \"message\":[ { \"content\":\"Thank you, visit for {{patient_name}} ({{patient_id}}) has been recorded.\", \"locale\":\"en\" }, { \"content\":\"Asante, kuhudhuria kwa {{patient_name}} ({{patient_id}} kumerekodiwa.\", \"locale\":\"sw\" } ], \"event_type\":\"report_accepted\", \"recipient\":\"reporting_unit\" } ] }","localization-steps#Localization Steps":"","messages#Messages":"In the Messages tab, the time counter text and navigation text changes, as in the screenshots below.\nIn English\nIn Swahili\nTo change the title of the tab from the default title of the Messages tab from Jumbe in Kiswahili to Barua, add or edit the below value in the messages-sw.properties file:\nMessages = Jumbe to\nMessages = Barua","people#People":"To localize the People tab labels, add the appropriate translation in messages-sw.properties file.\nTo change the people name label translation from the default Swahili translation of Watu to Watu wa hili hapa eneo, in messages-sw.properties file, add the following values:\ncontact.type.person = Mtu wa hili hapa eneo contact.type.person.plural = Watu wa hili hapa eneo In English\nIn Swahili\nTo change the title of the People tab from Wasiliani in Kiswahili to Watu, add or edit the below code in the messages-sw.properties file.\nPeople = Wasiliani to\nPeople = Watu","prerequisites#Prerequisites":"","reports#Reports":"Localize the Reports tab field names by adding the appropriate translations in the messages-sw.properties file.\nFor example, to change the date of birth field to Swahili, in messages-sw.properties file, add this:\ncontact.type.date_of_birth = Siku ya Kuzaliwa In English\nIn Swahili\nTo change the title of the tab from the default title of the Reports tab from Ripoti in Kiswahili to Ripoti hizi, add or edit the below code in the messages-sw.properties file.\nReports = Ripoti to\nReports = Ripoti hizi","targets#Targets":"To localize the People tab labels, add the appropriate translation in messages-sw.properties file.\nTo add the Growth Monitoring target title in Swahili, add the appropriate translation in the messages-sw.properties file.\ntargets.growth_monitoring.title = Ufuatiliaji wa ukuaji Before\nIn Swahili\nTo change the title of the Targets tab from Grafu in Kiswahili to Lengo, add or edit the below code in the messages-sw.properties file.\nTargets = Grafu to\nTargets = Lengo","tasks#Tasks":"Localize the Tasks header by adding the appropriate translation in the messages-sw.properties file.\nFor example, to translate the below delivery task title to Swahili:\n{ name: 'anc-home-visit-delivery', icon: 'icon-pregnancy', title: 'task.anc.delivery.title', } Add the value below to the messages-sw.properties file:\ntask.anc.delivery.title = Kazi ya Kujifungua In English\nIn Swahili\nTo change the title of the tab from the default title of the Tasks tab from Kazi in Kiswahili to Fanya Hizi, add or edit the below code in the messages-sw.properties file:\nTasks = Kazi to\nTasks = Fanya Hizi"},"title":"Configuring"},"/building/translations/overview/":{"data":{"":"Given that CHT applications are used around the world, the Core Framework was designed with localization in mind. The Core Framework is available in English, French, Nepali, Swahili, Spanish, and more!","build#Build":"Custom translations from the properties files are added to the CHT app with the upload-custom-translations action.\ncht --local upload-custom-translations Updated translations from forms need to be added with the actions to upload forms.\ncht --local upload-contact-forms upload-app-forms","forms#Forms":"Translations for XForms are defined within the forms themselves. The XLSForm notation is documented here, and would use the corresponding 2-character language codes.","key-concepts#Key Concepts":"Localization refers to setting up the desired language in CHT for the end user. See an outline of how to change language settings for CHT users in the dedicated section.\nTranslations refers to manually setting up extra translations of instance tabs texts or outgoing SMS text. See an outline of how to add new translations to the CHT in the dedicated section.","localization#Localization":"In the app_settings.json file the default language for the application is set by the locale property, along with a separate default language for outgoing messages that are sent via SMS with the locale_outgoing property.\nAdditionally, languages available to the user can be enabled and disabled through the languages property which contains an array of objects. These objects should contain the locale and enabled properties representing respectively the 2 or 3 letter language code and whether that language should be enabled.","reports#Reports":"Submitted forms are shown on the Reports tab, with each value in the report displayed alongside a label. The label for each value is represented by a key in the report.{form-name}.{field-name} format, which can be translated by including the key and translation in the language files. If the label is omitted in the translation the full key will show in the app.\nNote\nTo hide report fields from showing on the Reports view altogether, the containing group or field must be included as hidden_fields, as per the form properties file."},"title":"Overview"},"/building/tutorials/":{"data":{"":"Content in this section Building SMS Forms CHT Application Settings Setting up Multi-facility users Building SMS Schedules Building App Forms Application Tests Local Docker Setup"},"title":"Tutorials"},"/building/tutorials/_partial_docker_setup/":{"data":{"":"Linux (Ubuntu)macOSWindows (WSL2) Download and install Docker Desktop.\nAlternatively, on Linux you can use the following commands to install Docker Engine. (This will reduce the layers of technical abstraction for running containers, but will not include a GUI application for managing your Docker resources.)\ncurl -fsSL get.docker.com -o get-docker.sh \u0026\u0026 sh get-docker.sh # OPTIONAL: Allow user to run Docker without sudo dockerd-rootless-setuptool.sh install echo \"export PATH=/usr/bin:$PATH\" \u003e\u003e ~/.$(basename $SHELL)rc echo \"export DOCKER_HOST=unix:///run/user/1000/docker.sock\" \u003e\u003e ~/.$(basename $SHELL)rc . ~/.$(basename $SHELL)rc Restart your entire machine to finish initializing Docker.\nDownload and install Docker Desktop or Colima.\nRestart your entire machine to finish initializing Docker.\nDownload and install Docker Desktop.\nRestart your entire machine to finish initializing Docker.\nAfter you have restarted, ensure that “Enable integration with my default WSL distro” is checked in Docker Desktop along with intgration to other distros:\nAfter restarting, verify Docker is running as expected. Run the simple hello-world Docker container. This should output “Hello from Docker!” as well as some other intro text:\ndocker run hello-world"},"title":"Local Docker Setup"},"/building/tutorials/app-forms/":{"data":{"":"App forms allow users to submit reports from Android devices.\nThis tutorial will take you through how to build App forms for CHT applications, including:\nAuthoring forms in Excel, Google sheets or other spreadsheet applications. Converting XLSForms to XForms Uploading XForms to CHT You will be building assessment workflow that allows Community Health Workers to conduct a health assessment for children under the age of 5.","1-define-xls-surveyform-fields#1. Define XLS Survey/Form Fields":"Create the following columns in the survey sheet and then add the following rows that are populated automatically before the form is rendered to the user. These fields are usually hidden by default but can be accessed to display certain information about the person being assessed:\ntype name label required relevant appearance constraint constraint_message calculation choice_filter hint default begin group inputs Patient ./source = ‘user’ field-list hidden source Source user hidden source_id Source_ID hidden task_id Task_ID begin group contact Contact string _id Patient ID select-contact type-person Select a person from the list hidden patient_id Medic ID hidden name Patient Name begin group parent Parent hidden _id Family UUID begin group parent Grandparent hidden _id CHW Area UUID hidden name CHW Name hidden phone CHW Phone begin group parent Great Grandparent hidden _id CU UUID end group end group end group end group end group calculate patient_id ../inputs/contact/_id calculate patient_name ../inputs/contact/name Add the following rows that define the data collection fields below the existing rows (leave out the column names):\ntype name label required relevant appearance constraint constraint_message calculation choice_filter hint default begin group group_assessment Assessment select_one yes_no cough Does ${patient_name} have a cough? yes select_one symptom_duration cough_duration How long has the cough lasted? yes ${cough} = ‘yes’ end group","2-define-the-choices#2. Define the Choices":"Add the following column names and rows to the choices sheet:\nlist_name name label yes_no yes Yes yes_no no No symptom_duration 3 3 days or less symptom_duration 7 4 - 7 days symptom_duration 13 8 - 13 days symptom_duration 14 14 days or more","3-define-the-xls-settings#3. Define the XLS Settings":"Add the following column names and rows to the settings sheet:\nform_title form_id version style path instance_name default_language Assess patient assessment 1 pages data en","4-convert-the-xlsform-and-upload-the-xform#4. Convert the XLSForm and Upload the XForm":"Add the file to the forms/app subfolder in your project.\nproject-name forms app assessment.xlsx To convert and upload the form to your local instance, run the following command from the root folder:\ncht --url=https://:@localhost --accept-self-signed-certs convert-app-forms upload-app-forms -- assessment Important\nBe sure to replace the values and with the actual username and password of your test instance.","brief-overview-of-key-concepts#Brief Overview of Key Concepts":"App forms serve as actions within the app.\nXLSForm is a form standard created to help simplify the authoring of forms in Excel.\nXForm is a CHT-enhanced version of the ODK XForm standard.","implementation-steps#Implementation Steps":"Create a new spread sheet in Google sheets or other preferred editor like Excel or Open Office. Name the spreadsheet assessment. The final file name should be assessment.xlsx.\nCreate 2 additional sheets. Rename the sheets survey, choices and settings.","next-steps#Next steps":"In the next tutorial, you will define the form .properties.json which will allow you to define the form’s title and icon, as well as when and where the form should be available.","required-resources#Required Resources":"You should have a functioning CHT instance with cht-conf installed locally and a project folder set up already."},"title":"App Forms"},"/building/tutorials/application-settings/":{"data":{"":"This tutorial will take you through how to manage the CHT application settings, including;\nSetting user roles and permissions Enabling and disabling transitions Configuring contact hierarchy and configuring replication. App settings allow you to both persist information that is critical to the application outside the code, and to create profiles that store the preferences for project deployments.","1-set-roles-and-permissions#1. Set Roles and Permissions":"To add a new role, edit the object corresponding to \"roles\" key in app_settings.json. Add the new role as a key and within it, have an object with key/value pairs indicating the translation key of the role and whether it is an online or offline role.\nConfigure a CHW role by adding the following snippet to the \"roles\" object:\n\"chw\": { \"name\": \"usertype.chw\", \"offline\": true } See Also: Roles\nSet permissions for the new role by adding the role to the relevant permission in the \"permissions\" object.\nFor instance, to grant the CHW role permission to create people, add the role to the array with the key \"can_create_people\".\n\"permissions\": { ... \"can_create_people\": [ \"program_officer\", \"chw_supervisor\", \"chw\" ], ... } See Also: Permissions","2-set-transitions#2. Set Transitions":"To enable or disable a transition, edit the object corresponding to the \"transitions\" key in app_settings.json. Enable the transition by setting its corresponding value to true, disable it by settings its value to false. See Also: Transitions\n\"transitions\": { \"accept_patient_reports\": false, \"conditional_alerts\": false, \"default_responses\": false, \"update_sent_by\": false, \"registration\": false, \"update_clinics\": false, \"update_notifications\": false, \"update_scheduled_reports\": false, \"update_sent_forms\": false, \"generate_patient_id_on_people\": true, \"death_reporting\": true } In this example, the generate_patient_id_on_people and death_reporting transitions are enabled while the rest are disabled.","3-set-hierarchy#3. Set Hierarchy":"You can configure hierarchies by editing the object corresponding to the \"contact_types\" key in app_settings.json. The following code sample represents the default hierarchy configuration. You can modify existing contact types by editing the objects within the array.\nWhen configuring a new deployment, it’s important to plan your hierarchy well. While there are no limits in the CHT to the hierarchical depth or breadth it will support, there are some trade-offs and caveats:\nWhile it is possible to update the hierarchy configuration after launch it can be difficult and potentially disruptive to users. Try and avoid this by planning ahead as best as possible. If your hierarchy is too shallow, users will download more docs than are necessary for their work which will impact the performance of the app. Taking the time to get the hierarchy configuration right makes it easy to give users access to only the docs they need. Important Note on Creating and Editing Contacts: The ability to create and edit contacts in the CHT, including person entities, is dependent on the presence of corresponding forms in the forms/contact directory. Each contact type, such as “person”, “clinic”, “health_center”, etc., must have associated create and edit forms defined. Without these forms, the functionality to add or modify these contact types in the CHT application will not be available. Ensure that the necessary forms are created and correctly referenced in the app_settings.json file under their respective contact type definitions. For guidance on creating these contact forms, refer to the CHT documentation on contact forms. For an example of where all the forms are represented in the default configuration, see the default config directory.\nSee Also: Hierarchy\n\"contact_types\": [ { \"id\": \"district_hospital\", \"name_key\": \"contact.type.district_hospital\", \"group_key\": \"contact.type.district_hospital.plural\", \"create_key\": \"contact.type.district_hospital.new\", \"edit_key\": \"contact.type.place.edit\", \"icon\": \"medic-district-hospital\", \"create_form\": \"form:contact:district_hospital:create\", \"edit_form\": \"form:contact:district_hospital:edit\" }, { \"id\": \"health_center\", \"name_key\": \"contact.type.health_center\", \"group_key\": \"contact.type.health_center.plural\", \"create_key\": \"contact.type.health_center.new\", \"edit_key\": \"contact.type.place.edit\", \"parents\": [ \"district_hospital\" ], \"icon\": \"medic-health-center\", \"create_form\": \"form:contact:health_center:create\", \"edit_form\": \"form:contact:health_center:edit\" }, { \"id\": \"clinic\", \"name_key\": \"contact.type.clinic\", \"group_key\": \"contact.type.clinic.plural\", \"create_key\": \"contact.type.clinic.new\", \"edit_key\": \"contact.type.place.edit\", \"parents\": [ \"health_center\" ], \"icon\": \"medic-clinic\", \"create_form\": \"form:contact:clinic:create\", \"edit_form\": \"form:contact:clinic:edit\", \"count_visits\": true }, { \"id\": \"person\", \"name_key\": \"contact.type.person\", \"group_key\": \"contact.type.person.plural\", \"create_key\": \"contact.type.person.new\", \"edit_key\": \"contact.type.person.edit\", \"primary_contact_key\": \"clinic.field.contact\", \"parents\": [ \"district_hospital\", \"health_center\", \"clinic\" ], \"icon\": \"medic-person\", \"create_form\": \"form:contact:person:create\", \"edit_form\": \"form:contact:person:edit\", \"person\": true } ]","4-set-replication-depth#4. Set Replication Depth":"To configure replication depth for a specific role, edit the object corresponding to the \"replication_depth\" key in app_settings.json.\n{ \"replication_depth\": [ { \"role\": \"district_manager\", \"depth\": 1 }, { \"role\": \"national_manager\", \"depth\": 2 } ] } Configure the CHW role’s depth to 2 by adding the following key/value pairs to the array above.\n{ \"role\": \"chw\", \"depth\": 2 } See Also: Replication Depth","5-upload-app-settings#5. Upload App Settings":"To upload app settings to your local instance, run the following command:\ncht --url=https://:@localhost --accept-self-signed-certs upload-app-settings Important\nBe sure to replace the values and with the actual username and password of your test instance.","brief-overview-of-key-concepts#Brief Overview of Key Concepts":"The settings which control CHT apps are defined in the app_settings.json file, and stored in the settings doc in the database.\nPermissions are settings that control access to specific app features and functionality.\nRoles define permissions for users to access a group of app features and functionality.\nReplication is when users download a copy of the data on to their device. Replication depth refers to the number of levels within a hierarchy a specific user role is able to replicate.\nTransitions are Javascript code that run when a document is changed. A transition can edit the changed doc or do anything server side code can do for that matter.","frequently-asked-questions#Frequently Asked Questions":"Compiling default app settings Documentation for role permissions Is it possible to prevent editing for some forms but allow it for others? Can one person belong to multiple places in the same hierarchy?","implementation-steps#Implementation Steps":"In this section, you will define a new role, set permissions for the role, set transitions, configure a hierarchy, and upload your modified app settings file to your local environment.","required-resources#Required Resources":"You should have a functioning CHT instance and have cht-conf installed locally. See Also: How to set up a CHT local configuration environment"},"title":"Application Settings"},"/building/tutorials/application-tests/":{"data":{"":"This tutorial takes you through testing the various configurable components of CHT applications using cht-conf-test-harness.","cht-application-testing#CHT Application Testing":"CHT applications are greatly configurable. Depending on the number and complexity of app components, it can take a lot of time and effort to test the components manually. Some components, such as tasks, behave differently over time and are particularly challenging to test. As the project evolves, the configuration is often updated with new components and changes are made to the existing components. After each change, you need to test not only the new components, but also the old ones to make sure that the app works as expected. To facilitate the testing process, app builders are encouraged to write automated tests for their app using cht-conf-test-harness.\nBecause it may be complicated to test with a real application, cht-conf-test-harness (also simply referred as harness), provides a platform that simulates the CHT application instance.\nUsing cht-conf-test-harness, you can write tests and run them with Mocha testing framework to test the behavior of different components in a CHT application. Mocha works with a variety of assertion libraries including chai, should.js, expect.js, better-assert, unexpected among others.","importance-of-testing-your-application#Importance of testing your application":"Testing your CHT application is important as it ensures you are consistently maintaining your application and defining implementation requirements. Testing also helps the user make better architectural decisions, optimizes the forms, tasks and other components of the application. Although it may seem tedious, testing your application ensures that you quickly discover issues that are introduced with changes or newer commits.","preparation#Preparation":"Writing tests for CHT apps requires a good understanding of the project workflows and requirements. To test using the harness, there are a few things you need to set up:\nFrom the previous tutorials, you should have a functioning CHT instance with cht-conf installed locally and a project folder set up. cht-conf which is short for CHT app configurer, is a command-line interface tool used to manage and configure your CHT apps. It is used for backup, conversion, validation, uploading and other actions which can be found by running cht --help.\nEnsure your package.json file has the required libraries. A package.json file is used to record important metadata about a project and defines functional attributes that npm uses to install dependencies and run scripts. This file should be at the root of your project folder. If your package.json file does not already have them, add cht-conf-test-harness, chai, and mocha by running this in your command-line:\nnpm install --save-dev cht-conf-test-harness chai mocha Also, add the following scripts to package.json, if not already present:\n\"scripts\": { \"test\": \"npm run compile-forms \u0026\u0026 npm run compile-app-settings \u0026\u0026 npm run unittest\", \"compile-app-settings\": \"npx cht --no-check compile-app-settings\", \"compile-forms\": \"npx cht --no-check convert-app-forms convert-contact-forms\", \"unittest\": \"mocha test/**/*.spec.js --timeout 20000\" } After adding these scripts, you are able to run the tests by running one of these commands from the command-line:\nCommand Description npm run test Compiles the app settings, converts the forms,then runs the tests (preferred solution). npm run unittest Only runs the unit tests. You can also run the test on a specific form by defining a test under the scripts section.\nFor example, to run the test on the death.spec.js file, define the test as death-form-unit-test: \"mocha test/forms/death.spec.js --timeout 20000\". Then run:\nnpm run death-form-unit-test npm also supports a shorter alias as npm test. There are recommended conventions on how to arrange tests by splitting into unit tests and integration tests so that each of them can be run independently. This can be best illustrated by this project code.\nCreate a folder in the project root where you keep the tests. You can name the folder yourself. In this case it is named ’test’. Create a file harness.defaults.json at the root of your project. This is the default configuration file for the harness. Here you can specify the default user, preloaded contacts and reports, and add other settings. Here’s an example file to get you started. You can read more about it here.","prerequisites#Prerequisites":"Complete the following tutorials:\nBuilding App Forms Building A Simple Task Building Target Widgets Building Contact Summary","testing-contact-summary#Testing Contact Summary":"What do you test? Minimum: Fill a contact form and count the number of fields in the contact summary Ideal: Targeted tests for calculations of context, fields, cards, etc. Contact summary consists of visible components such as cards, fields and a hidden component: context. All these can be tested with the test harness.\nUse harness.getContactSummary() method to get the ContactSummary object, which has these properties: fields, cards, and context.\nTo test the contact summary fields added in the previous tutorial, use the following test case:\nconst contactSummary = await harness.getContactSummary(); expect(contactSummary.fields).to.have.property('length', 5); expect(contactSummary.fields.filter(f =\u003e f.filter !== 'lineage')).to.deep.equal( [ { label: 'patient_id', value: 'patient_id', width: 4 }, { label: 'contact.age', value: '1970-07-09', width: 4, filter: 'age' }, { label: 'contact.sex', value: 'contact.sex.female', translate: true, width: 4 }, { label: 'person.field.phone', value: undefined, width: 4} ] ); Here, the contact summary being tested represents the contact that is being “acted on” or the “subject of the test”. To learn more about this, look at the subject property here.\nSimilarly, you can test the condition cards too. Here is an example for testing the assessment condition card added in this tutorial:\n// Load the assessment form and fill in 'yes' on the first page and '7' on the second page const result = await harness.fillForm('assessment', ['yes'], ['7']); // Verify that the form successfully got submitted expect(result.errors).to.be.empty; const contactSummary = await harness.getContactSummary(); // Verify that there is one card expect(contactSummary.cards).to.have.property('length', 1); // Verify the fields on the card expect(contactSummary.cards[0].fields).to.deep.equal( [ { label: 'contact.profile.most_recent_assessment.date', value: result.report.reported_date, width: 6, filter: 'simpleDate' }, { label: 'contact.profile.cough', value: 'yes', width: 6 }, ] ); If you follow this code sample to create the pregnancy condition card, the pregnancy context can be tested this way:\nconst summaryContext = harness.getContactSummary().context; expect(summaryContext).to.include({ pregnant: true });","testing-forms#Testing Forms":"What do you test? Minimum: Filling a form with the most common options should not result in any error. Ideal: All input combinations and constraints are tested with the report fields. Previous example demonstrates test for the app form. More test cases can be added by changing the inputs.\nYou can also test contact forms using test harness. To fill a contact form, use fillContactForm(contactType, …answers).\nExample:\nconst result = await harness.fillContactForm( 'district_hospital', ['new_person', 'William Mars', '1990-08-06', '+1234567891', 'female'], ['yes'] ); expect(result.errors).to.be.empty; expect(result.contacts).excluding(['_id', 'meta']).to.deep.eq([ { ... } ]); When filling a form, you can also test the field constraints. The example below asserts that a form does not accept birth date in the future:\nit(`Throws validation error when birth date is in future`, async () =\u003e { const result = await harness.fillForm('delivery', ['yes', '2090-01-02']); expect(result.errors.length).to.equal(1); expect(result.errors[0]).to.include({ msg: 'Date cannot be in the future!' }); }); Note: If a form triggers a task, some use cases of the form can be tested when testing the task later.","testing-targets#Testing Targets":"Testing a target is relatively straightforward. Add a report or contact that increments a target, then check the target values.\nWhat do you test? Minimum: Trigger incrementing of the targetEnsure target doesn’t increment when it shouldn’t Ideal: One test for each user scenarioEnsure proper deduplication (particularly for those with emitCustom) Use harness.getTargets to check the state of targets. It returns a Target object which corresponds to the targets schema.\nTo test the first two targets created in the targets tutorial, use this code:\nit('assessment this month and all time assessments should show correct counts', async () =\u003e { //set the current date harness.setNow('2000-01-30'); //assessment form filled const result = await harness.fillForm('assessment', ['yes'], ['7']); expect(result.errors).to.be.empty; const thisMonth = await harness.getTargets({ type: 'assessments-this-month' }); expect(thisMonth).to.have.property('length', 1); //The number of assessments in this month should be 1 expect(thisMonth[0]).to.nested.include({ 'value.pass': 1, 'value.total': 1 }); let allTime = await harness.getTargets({ type: 'assessments-all-time' }); expect(thisMonth).to.have.property('length', 1); //The number of all time assessments should be 1 expect(thisMonth[0]).to.nested.include({ 'value.pass': 1, 'value.total': 1 }); //Go to next month by adding 2 days (Jan 30 to Feb 1) harness.flush(2); const nextMonth = await harness.getTargets({ type: 'assessments-this-month' }); expect(nextMonth).to.have.property('length', 1); //The number of assessments this month now should be reset to 0 expect(nextMonth[0]).to.nested.include({ 'value.pass': 0, 'value.total': 0 }); allTime = await harness.getTargets({ type: 'assessments-all-time' }); expect(allTime).to.have.property('length', 1); //The number of all time assessments should still be 1 expect(allTime[0]).to.nested.include({ 'value.pass': 1, 'value.total': 1 }); }); For targets with type: 'percent', you might want to check for more properties:\nexpect(targets[0]).to.nested.include({ 'value.pass': 1, 'value.total': 1, 'value.percent': 100 });","testing-tasks#Testing Tasks":"What do you test? Minimum: Trigger and resolve the task Ideal: One test for each use scenarioCode coverage for any arc with an external dependencyNegative cases - confirm tasks don’t trigger When testing the tasks manually, you need to fill a form. Then to see the task, you need to either change the system date to move forward in time or change the reported date of the document accordingly. These are very tedious and unreliable methods. Using the test harness, you can quickly test the tasks under different scenarios and at different simulated dates.\nEvery task has a source document (contact or report). When testing, you can mock the source document. Yet, the recommended approach is to fill the source form and then proceed with checking the associated tasks.\nCommonly used harness methods when testing tasks are:\nharness.setNow(): Set the current mock-time of the harness.\nharness.flush(): Increment the current time by an amount\nharness.getTasks(): Check which tasks are visible\nharness.loadAction(): Simulates the user clicking on an action\nWith getTasks(), you get an array of Task objects which corresponds to the tasks schema.\nLet’s look back at the simple task from this tutorial: Building A Simple Task.\nAccording to the task configuration, these conditions need to be met for the assessment task to be visible:\nThe contact_type of the subject (patient) is: patient The contact_type of the user’s parent is: chw_area The current time is between the start and end dates of the task event. When testing with harness, the conditions 1 and 2 above can be set in the harness.defaults.json file. See the lines 31 and 26 respectively in the sample file further below.\nFor the condition 3, let’s look at the task event window in the task definition. As mentioned in the earlier tutorial, the task event is:\nDue 7 days after the contact’s creation date. Should appear 7 days before the due date, or immediately when the contact is created. Should disappear the day after the due date. So, to see the task, the contact should be created within the last 7 days. You can easily set the contact’s reported date so that it falls within the last 7 days (see line 36 below).\nharness.defaults.json: 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 { \"coreVersion\": \"3.14.0\", \"user\": \"chw_id\", \"subject\": \"patient_id\", \"ownedBySubject\": true, \"docs\": [ { \"_id\": \"chw_id\", \"name\": \"CHW\", \"date_of_birth\": \"1971-03-10\", \"phone\": \"+17782475555\", \"reported_date\": 1550559625153, \"type\": \"person\", \"parent\": { \"_id\": \"chw_area_id\", \"parent\": { \"_id\": \"district_id\" } } }, { \"_id\": \"chw_area_id\", \"type\": \"contact\", \"contact_type\": \"chw_area\" }, { \"_id\": \"patient_id\", \"type\": \"contact\", \"contact_type\": \"patient\", \"name\": \"Patient Name\", \"role\": \"patient\", \"date_of_birth\": \"1970-07-09\", \"sex\": \"female\", \"reported_date\": 1652868491000, \"patient_id\": \"patient_id\", \"parent\": { \"_id\": \"patient_parent_id\", \"parent\": { \"_id\": \"chw_area_id\", \"parent\": { \"_id\": \"district_id\" } } } } ] } Note that the reported_date above stores the epoch timestamp in milliseconds when the document was first created. You can use external website epochconverter to convert the timestamp to and from a human readable date.\nAfter setting the harness defaults, you can now test the task:\n// Get the task by title const tasks = await harness.getTasks({title: 'First Assessment'}); //Make sure that you have the task expect(tasks).to.have.property('length', 1); // Load the task action and fill it. const result = await harness.loadAction(tasks[0], ['yes'], ['7']); // Verify that the form successfully got submitted expect(result.errors).to.be.empty; // Verify that the task is no longer visible expect(await harness.getTasks()).to.be.empty; If a task is triggered by a report, then fill in the app form to create report before test:\nit('followup schedule', async () =\u003e { const result = await harness.fillForm(...pncFollowups.registerBirth('2000-01-01', '2000-02-01')); expect(result.errors).to.be.empty; /* Task should appear 7 days after birth for follow up */ await harness.flush(7); const tasks = await harness.getTasks(); expect(tasks).to.have.property('length', 1); /* Complete the task, task should disappear */ await harness.loadAction(tasks[0].emission.actions[0]); const followupResult = await harness.fillForm(...pncFollowups.followup.healthy); expect(followupResult.errors).to.be.empty; expect(await harness.getTasks()).to.be.empty; /* Confirm a task appears again on the schedule */ await harness.flush(21); expect(await harness.getTasks()).to.have.property('length', 1); }); You may pass other data from a task to the action form using modifyContent attribute of a task. You can also verify that these data are present in the task.\nexpect(tasks[0].emission.actions[0].content).to.include({ t_follow_up_count: '5', t_delivery_date:'2000-01-01', });","tests-for-bug-fixes#Tests for bug fixes":"When fixing a bug, write a test which captures the specific scenario being fixed.\nAt least one test should fail before the fix It should pass after the fix This prevents the regression and helps ensure that you’re fixing what you expect.","tests-for-helper-functions#Tests for helper functions":"If you have added helper functions, they can be tested separately.\nExample:\ndescribe('toISODateString', () =\u003e { const { toDateString } = noolsExtras; it('parses a valid date', () =\u003e { const actual = toISODateString('01/01/2000'); expect(actual).to.eq('2000-01-01'); });","tips-for-writing-tests#Tips for writing tests":"Every test needs to add value Use the scientific method: your test is a hypothesis and you’re running an experiment Follow these steps: Arrange - Prepare the experiment Act - Run the experiment. Take a measurement Assert - Assert the hypothesis Structure testing inputs into “classes”: if one member in a class works well then the class is considered to work Run mocha with --grep to only run tests that match a given string Debug tests and CHT components using breakpoints and debug console. For debugging the unit tests in VS Code, here is a sample configuration file (launch.json):\n{ \"version\": \"0.2.0\", \"configurations\": [ { \"type\": \"node\", \"request\": \"launch\", \"name\": \"Run Mocha Tests\", \"program\": \"${workspaceFolder}/node_modules/mocha/bin/_mocha\", \"args\": [ \"--timeout\", \"999999\", \"--colors\", \"${workspaceFolder}/test/tasks/assessment.spec.js\", \"--grep\", \"should show\" \"--dev\", ], \"internalConsoleOptions\": \"openOnSessionStart\" } ] }","writing-a-test-for-cht-app#Writing a test for CHT App":"Start by adding a file where a group of related tests are written. For example, in the default config, all tests for the pregnancy form are in the pregnancy.spec.js file. The common naming pattern for CHT applications test files is filename.spec.js. In JavaScript testing, spec is short for specifications which refers to technical details of a given application, that must be fulfilled.\nLet’s introduce some important sections from a typical test file:\nconst TestRunner = require('cht-conf-test-harness'); const harness = new TestRunner(); In the example above, we define variables TestRunner and harness. TestRunner imports the Harness class and harness creates an instance of the class that is used throughout the test file.\nYou can also pass parameters to the TestRunner() when instantiating:\n// For detailed console logs const harness = new TestRunner({ verbose: true }); Other useful options are:\n{ headless: false } - Passed to puppeteer, launches browser with GUI. Helpful to see how the form is getting filled. { harnessDataPath: 'harness.clinic.json'}: Specify different harness configuration You can find more harness options and examples here.\nYou need to start the harness before running tests and stop it after the use. To handle start and stop of harness, place following statements in before() and after() hooks of the test suite.\ndescribe('PNC form tests', () =\u003e { before(async () =\u003e { return await harness.start(); }); after(async () =\u003e { return await harness.stop(); }); Any logic that you want to execute before and after each test can be placed in the beforeEach() and afterEach() hooks. This section ensures that the harness is reset to default before or after each run.\nIn the example below, the logic is to clear the state of the harness and set the date to ‘2000-01-01’ before each test run:\nbeforeEach( async () =\u003e { await harness.clear(); await harness.setNow('2000-01-01'); }); After each test run, assert that there are no errors in the console.\nafterEach(() =\u003e { expect(harness.consoleErrors).to.be.empty; }); If you want to learn more about these hooks, refer to this Mocha resource. Feel free to customize the hooks as you see fit.\nLet’s look at a more detailed example. Here is a test case for the Assessment form that was covered in the previous tutorial:\nit('unit test confirming assessment with cough since 7 days', async () =\u003e { // Load the assessment form and fill 'yes' on the first page and '7' on the second page const result = await harness.fillForm('assessment', ['yes'], ['7']); // Verify that the form successfully got submitted expect(result.errors).to.be.empty; // Verify some attributes on the resulting report expect(result.report.fields).to.deep.include({ patient_name: 'Patient Name', group_assessment: { cough: 'yes', cough_duration: '7', } }); }); In line 4 above, the method harness.fillForm() fills the specified form with the given input (answers).\nDepending on the form design, the number of inputs to be filled can be large. The inputs are often repeated within a single test or across multiple tests with little or no variation. It is a good idea to keep them in a separate file and refer them from the tests as required. You can also introduce some variations in the inputs using function parameters.\nExample: form-inputs.js\nmodule.exports = { assessments: { no_cough: [ ['no'] ], cough: (days) =\u003e [ ['yes'], [ days ] ] } }; In the test below, the inputs are used from the form-inputs.js file above:\nconst { assessments } = require('../form-inputs'); ... const result = await harness.fillForm('assessment', ...assessments.cough('3')); The test files are usually grouped in folders to read and run them easily. One way of grouping them is by creating folders for each of the components that can be tested: forms, contact summary, tasks, and targets.\nTest directory structure"},"title":"Application Tests"},"/building/tutorials/multi-facility-users/":{"data":{"":"This tutorial will take you through how to create and assign users to multiple places in the CHT UI. Assigning users to multiple places is only available from CHT 4.9.0.\nThis tutorial covers:\nCreating contacts and their associated users Creating places and assign contacts to those places Assigning users to multiple places The CHT application settings allows you to both persist information that is critical to the application outside the code, and to create profiles that store the preferences for project deployments.","1-create-new-health-facility#1. Create New Health Facility.":"While logged into the CHT application, go to the People tab and select New Health Facility\nSelect the option that lets you create a new person within the form. This person will automatically become the primary contact for the created place.\nWhen filling in the required fields select CHW Supervisor as the role.\nOnce you have filled the required fields, click Next to go to the next section.\nSelect the option that lets you name the facility manually. Enter the Name of the Health Facility and submit the form.\nYou should see the newly created Health Facility appear on the left-hand side and when you select it, you should see the Health Facility name and the primary contact of the Health Facility.","2-create-chw-area-and-chw#2. Create CHW Area and CHW":"We will now create a CHW Area within the Health Facility that we previously created.\nSelect the Health Facility on the left-hand side. Click on the Blue Action Button and select New Area.\nSelect the option that lets you create a new person within the form. This person will automatically become the primary contact for the created place.\nWhen filling in the required fields select CHW as the role.\nOnce you have filled the required fields, click Next to go to the next section.\nYou will get an option to name the Place after the created contact person or name it yourself. If you select Yes, the new place will be named 's Area. For example Jane Doe's Area.\nOnce you submit, a new CHW Area will be created. On the right-hand you should see the CHW Area name, the primary contact of the CHW Area, and the Health Facility that the CHW Area belongs to.","3-create-second-health-facility#3. Create Second Health Facility.":"For the second Health Facility, we will skip creating or assigning a primary contact and focus on creating the second Health Facility.\nEnter the details of the Health Facility and submit the form.\nYou should see the two Health Facilities appear on the left-hand side.","4-create-the-chw-supervisor-user#4. Create the CHW Supervisor User":"Let’s create a CHW Supervisor user who’s linked to the CHW Supervisor contact we created earlier.\nGo to the hamburger menu and select App Management.\nWhen you are on the App Management page, select Users on the left-hand side and then select Add User on the right-hand side.\nYou should now see an Add User Form. Fill in the user name, then select the role as CHW Supervisor.\nIn the Place field, search for the first Health Facility by typing the first few letters of the Health Facility name. Once you have selected the first Health Facility, type the name of the Second Facility and select it as well.\nOnce that is done, under the Associate Contact field select the name of the CHW Supervisor whose user you are creating. Finally, input a password and hit Submit.\nOnce this is done, you have created a supervisor who is assigned to multiple Health Facilities. You can logout and log into the app using the username and password that you just created.\nNote\nThe new multi-facility feature be applied to any role in a hierarchy. It can also be applied to multiple roles in a hierarchy. You need to add the role to the array with the key \"can_have_multiple_places\". \"permissions\": { ... \"can_have_multiple_places\": [ \"program_officer\", \"chw_supervisor\", ], ... } The multi-facility feature supports a Contact belonging to Multiple Places. For instance, it is meant to support a CHW Supervisor belonging to multiple facilities. It is not meant to support One Facility having multiple CHW Supervisors.","brief-overview-of-key-concepts#Brief Overview of Key Concepts":"Permissions are settings that control access to specific app features and functionality.\nRoles define permissions for users to access a group of app features and functionality.\nContacts are people or places that are created in the CHT application.\nPeople are both patients in the system and users of the system, such as CHWs or Nurses.\nPlaces represent either an actual physical location such as a health facility, clinic, or a grouping such as a household or CHW Area.","creating-multi-facility-user-using-the-cht-default-config#Creating multi-facility user using the CHT default config.":"","frequently-asked-questions#Frequently Asked Questions":"Compiling default app settings Documentation for role permissions Where can I get more information about this feature","implementation-steps#Implementation Steps":"In this tutorial, you will work with the default contact forms and the default hierarchy.\nThe default app_settings.json in the CHT found in the /config/default folder has an existing chw_supervisor role and the \"can_have_multiple_places\": [] permission.\nWhile logged in as an admin user, you will create two Health Facilities, CHW Supervisor, and CHW Area. You will then create the user for the CHW Supervisor so that they can log in and see the facilities, and the CHW Areas they supervise.","pre-requisites#Pre-requisites":"You should be familiar with contact and user management. View detailed tutorial on How to create contacts and their associated users You should be familiar with managing CHT application settings. Read How to manage CHT application settings"},"title":"Multi Facility Users"},"/building/tutorials/sms-forms/":{"data":{"":"SMS forms allow users to submit reports from any device including feature phones without internet access. SMS forms are ideal in scenarios where targeted users have no way of accessing internet or where they are restricted to using feature phones.\nThis tutorial will take you through how to build SMS forms for CHT applications, including:\nDefining SMS forms Setting validation rules for SMS forms Setting automatic responses to SMS reports You will be building a pregnancy registration workflow that allows Community Health Workers to register households, register household members, and register new pregnancies for the household members.","1-enable-transitions#1. Enable Transitions":"To ensure SMS forms function as expected, you will first need to enable the following transitions in app_settings.json.\n\"update_clinics\": true, \"registration\": true, \"accept_patient_reports\": true, \"generate_shortcode_on_contacts\": true, \"death_reporting\": true See Also: Transitions","2-define-a-place-registration-form#2. Define a Place Registration Form":"To define a form, edit the object corresponding to the forms key in app_settings.json.\nAdd a household registration form by adding a key and object pair to the forms object as shown below.\n\"forms\": { \"HR\": { \"meta\": { \"code\": \"HR\", \"label\": { \"en\": \"New Household Registration\" } }, \"fields\": { \"place_name\": { \"labels\": { \"tiny\": { \"en\": \"household_name\" }, \"description\": { \"en\": \"Name of Household\" }, \"short\": { \"en\": \"Household name\" } }, \"position\": 0, \"type\": \"string\", \"length\": [ 3, 30 ], \"required\": true } } } } Note\nUsers will register new households by sending a text message in the format HR . For example, HR Mary will register Mary's Household.\nTo set the validation rules and autoresponses, edit the array corresponding to the registration key in app_settings.json. Add an object within the array as shown below.\n\"registrations\": [ { \"form\": \"HR\", \"events\": [ { \"name\": \"on_create\", \"trigger\": \"add_place\", \"params\": \"{ \\\"contact_type\\\": \\\"clinic\\\" }\", \"bool_expr\": \"\" } ], \"validations\": { \"join_responses\": false, \"list\": [ { \"property\": \"place_name\", \"rule\": \"!regex('household') \u0026\u0026 !regex('house hold')\", \"translation_key\": \"messages.hr.validation.no_household_in_name\" }, { \"property\": \"place_name\", \"rule\": \"lenMin(1) \u0026\u0026 lenMax(30)\", \"translation_key\": \"messages.hr.validation.household_name_length\" } ] }, \"messages\": [ { \"event_type\":\"report_accepted\", \"recipient\": \"reporting_unit\", \"translation_key\": \"messages.hr.report_accepted\" } ] } ] You can also define your own validation rules.\nNote\ntranslation_key represents the message that is sent out. This will be defined in a translations file.","3-define-a-person-registration-form#3. Define a Person Registration Form":"Add a person registration form by adding a key and object pair to the forms object as shown below.\n\"forms\": { \"N\": { \"meta\": { \"code\": \"N\", \"label\": { \"en\": \"New Person Registration\" } }, \"fields\": { \"place_id\": { \"labels\": { \"tiny\": { \"en\": \"place_id\" }, \"description\": { \"en\": \"Household ID\" }, \"short\": { \"en\": \"HH ID\" } }, \"position\": 0, \"type\": \"string\", \"length\": [ 1, 13 ], \"required\": true }, \"gender\": { \"labels\": { \"tiny\": { \"en\": \"gender\" }, \"description\": { \"en\": \"Gender\" }, \"short\": { \"en\": \"Gender\" } }, \"position\": 1, \"type\": \"string\", \"length\": [ 1, 6 ], \"required\": true }, \"age\": { \"labels\": { \"tiny\": { \"en\": \"age\" }, \"description\": { \"en\": \"Age\" }, \"short\": { \"en\": \"Age\" } }, \"position\": 2, \"type\": \"integer\", \"length\": [ 1, 2 ], \"required\": true }, \"patient_name\": { \"labels\": { \"tiny\": { \"en\": \"patient_name\" }, \"description\": { \"en\": \"Patient name\" }, \"short\": { \"en\": \"Patient name\" } }, \"position\": 3, \"type\": \"string\", \"length\": [ 3, 30 ], \"required\": true } } } } Note\nUsers will register a new person by sending a text message in the format N . For example, N 12345 F 20 Jane Cho will register Jane Cho who belongs to the household with household ID 12345.\nTo set the validation rules and autoresponses, edit the array corresponding to the registration key in app_settings.json. Add an object within the array as shown below.\n\"registrations\": [ { \"form\": \"N\", \"events\": [ { \"name\": \"on_create\", \"trigger\": \"add_patient\", \"params\": \"{ \\\"parent_id\\\": \\\"place_id\\\" }\", \"bool_expr\": \"\" } ], \"validations\": { \"join_responses\": false, \"list\": [ { \"property\": \"place_id\", \"rule\": \"regex('^[0-9]{5,13}$')\", \"translation_key\": \"messages.validation.household_id\" }, { \"property\": \"gender\", \"rule\": \"iEquals('m') || iEquals('f')\", \"translation_key\": \"messages.n.validation.gender\" }, { \"property\": \"age\", \"rule\": \"between(5,130)\", \"translation_key\": \"messages.n.validation.age\" } ] }, \"messages\": [ { \"event\": \"report_accepted\", \"translation_key\": \"messages.n.report_accepted\", \"recipient\": \"reporting_unit\" } ] } ]","4-define-a-report-submission-form#4. Define a Report Submission form":"Add a report submission form by adding a key and object pair to the forms object as shown below.\n\"forms\": { \"P\": { \"meta\": { \"code\": \"P\", \"label\": { \"en\": \"Pregnancy Registration\" } }, \"fields\": { \"patient_id\": { \"position\": 0, \"labels\": { \"tiny\": { \"en\": \"patient_id\" }, \"short\": { \"en\": \"Woman's ID\" }, \"description\": { \"en\": \"Woman's ID\" } }, \"type\": \"string\", \"length\": [ 5, 13 ], \"required\": true }, \"lmp\": { \"position\": 1, \"labels\": { \"tiny\": { \"en\": \"lmp\" }, \"short\": { \"en\": \"LMP in weeks\" }, \"description\": { \"en\": \"Last menstrual period - in weeks\" } }, \"type\": \"integer\", \"length\": [ 1, 2 ], \"required\": false } } } } Note\nUsers will pregnancy registration report by sending a text message in the format P . For example, P 23456 21 will register a pregnancy report for a person whose unique ID is 23456 and the last menstrual period was 21 weeks ago.\nTo set the validation rules and autoresponses, edit the array corresponding to the registration key in app_settings.json. Add an object within the array as shown below.\n\"registrations\": [ { \"form\": \"P\", \"events\": [ { \"name\": \"on_create\", \"trigger\": \"add_expected_date\", \"params\": \"lmp_date\", \"bool_expr\": \"doc.fields.lmp \u0026\u0026 /^[0-9]+$/.test(doc.fields.lmp)\" } ], \"validations\": { \"join_responses\": false, \"list\": [ { \"property\": \"patient_id\", \"rule\": \"regex('^[0-9]{5,13}$')\", \"translation_key\": \"messages.validation.patient_id\" }, { \"property\": \"lmp\", \"rule\": \"lenMin(1) ? (integer \u0026\u0026 between(4,42)) : optional\", \"translation_key\": \"messages.p.validation.weeks_since_last_lmp\" } ] }, \"messages\": [ { \"event_type\": \"report_accepted\", \"translation_key\": \"messages.p.report_accepted\", \"recipient\": \"reporting_unit\" }, { \"event_type\": \"registration_not_found\", \"translation_key\": \"messages.validation.woman_id\", \"recipient\": \"reporting_unit\" } ] } ]","5-upload-app-settings#5. Upload App Settings":"To upload app settings to your local instance, run the following command:\ncht --url=https://:@localhost --accept-self-signed-certs upload-app-settings Important\nBe sure to replace the values and with the actual username and password of your test instance.","brief-overview-of-key-concepts#Brief Overview of Key Concepts":"SMS forms are structured text messages that contain a form code representing a report type and some information associated with the report.\nSMS forms are defined in either the base_settings.json or the app_settings/forms.json file and compiled into the app_settings.json file with the compile-app-settings action in the cht-conf tool, then stored in the settings doc in the database.\nSMS gateways allow the CHT core framework to send and receive SMS transmission to or from a mobile network operator.\nSMS aggregators act as intermediaries between the mobile network operators and the CHT core framework. They allow for greater customization of SMS workflows in the CHT.\nInteroperability: CHT apps can receive data from other software when it is submitted as reports using the same JSON/SMS form notation.","implementation-steps#Implementation Steps":"SMS forms are defined using JSON in the app_settings.json file.","next-steps#Next steps":"In the next tutorial, you will define scheduled messages that can be triggered or cleared by submitting SMS forms.","required-resources#Required Resources":"You should have a functioning CHT instance with cht-conf installed locally.\nYou also need to have some prior knowledge on app_settings.json."},"title":"SMS Forms"},"/building/tutorials/sms-schedules/":{"data":{"":"SMS schedules allow you to send reminder messages at predetermined times. These reminders serve as useful prompts for end-users to take specific actions.\nThis tutorial takes you through how to set up SMS schedules for CHT applications. It uses a pregnancy registration workflow and follow-up reminders for a Community Health Worker as an example. The same methodology can be applied to other workflows and reminders as needed.","1-define-a-pregnancy-follow-up-schedule#1. Define a Pregnancy Follow Up Schedule":"To set the pregnancy follow up schedule, edit the array corresponding to the schedules key in app_settings.json. Add an object within the array as shown. This will set a schedule of reminders that will be sent after a time interval (offset) relative to a base date (start_from).\nschedules: [ { \"name\": \"Pregnancy Follow Up Reminders\", \"summary\": \"\", \"description\": \"\", \"start_from\": \"fields.lmp_date\", \"messages\": [ { \"message\": [ { \"content\": \"Hello {{contact.name}}, please remind {{patient_name}} ({{patient_id}}) to go for her clinic visit this week.\", \"locale\": \"en\" } ], \"group\": 1, \"offset\": \"23 days\", \"send_day\": \"\", \"send_time\": \"09:00\", \"recipient\": \"reporting_unit\" }, { \"message\": [ { \"content\": \"Hello {{contact.name}}, please remind {{patient_name}} ({{patient_id}}) to go for her clinic visit this week.\", \"locale\": \"en\" } ], \"group\": 2, \"offset\": \"51 days\", \"send_day\": \"\", \"send_time\": \"09:00\", \"recipient\": \"reporting_unit\" }, { \"message\": [ { \"content\": \"Hello {{contact.name}}, please remind {{patient_name}} ({{patient_id}}) to go for her clinic visit this week.\", \"locale\": \"en\" } ], \"group\": 3, \"offset\": \"79 days\", \"send_day\": \"\", \"send_time\": \"09:00\", \"recipient\": \"reporting_unit\" }, { \"message\": [ { \"content\": \"Hello {{contact.name}}, please remind {{patient_name}} ({{patient_id}}) to go for her clinic visit this week.\", \"locale\": \"en\" } ], \"group\": 4, \"offset\": \"107 days\", \"send_day\": \"\", \"send_time\": \"09:00\", \"recipient\": \"reporting_unit\" } ] } ] See Also: Schedule properties","2-assign-the-schedule#2. Assign the Schedule":"In the registrations array where you have defined the pregnancy registration events, add an event to assign the Pregnancy Follow Up Reminders schedule. This will assign a new schedule for every pregnancy that is registered.\n{ \"name\": \"on_create\", \"trigger\": \"assign_schedule\", \"params\": \"Pregnancy Follow Up Reminders\", \"bool_expr\": \"doc.fields.lmp \u0026\u0026 /^[0-9]+$/.test(doc.fields.lmp)\" } The final result should look like this:\n\"registrations\": [ { \"form\": \"P\", \"events\": [ { \"name\": \"on_create\", \"trigger\": \"add_expected_date\", \"params\": \"lmp_date\", \"bool_expr\": \"doc.fields.lmp \u0026\u0026 /^[0-9]+$/.test(doc.fields.lmp)\" }, { \"name\": \"on_create\", \"trigger\": \"assign_schedule\", \"params\": \"Pregnancy Follow Up Reminders\", \"bool_expr\": \"doc.fields.lmp \u0026\u0026 /^[0-9]+$/.test(doc.fields.lmp)\" } ], \"validations\": { \"join_responses\": false, \"list\": [ { \"property\": \"patient_id\", \"rule\": \"regex('^[0-9]{5,13}$')\", \"translation_key\": \"messages.validation.patient_id\" }, { \"property\": \"lmp\", \"rule\": \"lenMin(1) ? (integer \u0026\u0026 between(4,42)) : optional\", \"translation_key\": \"messages.p.validation.weeks_since_last_lmp\" } ] }, \"messages\": [ { \"event_type\": \"report_accepted\", \"translation_key\": \"messages.p.report_accepted\", \"recipient\": \"reporting_unit\" }, { \"event_type\": \"registration_not_found\", \"translation_key\": \"messages.validation.woman_id\", \"recipient\": \"reporting_unit\" } ] } ]","3-upload-app-settings#3. Upload App Settings":"To upload app settings to your local instance, run the following command:\ncht --url=https://:@localhost --accept-self-signed-certs upload-app-settings Note\nBe sure to replace the values and with the actual username and password of your test instance.","brief-overview-of-key-concepts#Brief Overview of Key Concepts":"SMS schedules are a series of SMS messages that are to be sent to specific contacts at future dates and times. They are defined in either the base_settings.json or the app_settings/schedules.json file and compiled into the app_settings.json file with the compile-app-settings action in the cht-conf tool.\nSMS schedules can be triggered by SMS forms or App forms.","frequenty-asked-questions#Frequenty Asked Questions":"Can you schedule SMS based on date field in report? Can SMS schedules be cleared based on a field in a form?","implementation-steps#Implementation Steps":"SMS schedules are defined using JSON in the app_settings.json file.","required-resources#Required Resources":"You should have built a pregnancy SMS form."},"title":"SMS Schedules"},"/building/uhc-mode/":{"data":{"":"Content in this section Overview Functionality Configurability"},"title":"UHC Mode"},"/building/uhc-mode/configuring/":{"data":{"":"The last visited date is calculated based on the number of days since an action was taken for that household, and the number of visits reflects the actions taken for that household in the current month. What constitutes as an action for a household, along with the start date for the reporting period, are configurable to CHT app developers."},"title":"Configurability"},"/building/uhc-mode/functionality/":{"data":{"":"","prioritizing-households#Prioritizing Households":"The UHC Mode in the CHT allows health workers to see when a household within their care area was last visited, and prioritize visits accordingly.\nWhen using the UHC Mode, the households in the contact list can be sorted by when they were last visited. The days since the last visit is also shown in the app, along with the number of visits made to a household in a month period."},"title":"Functionality"},"/building/uhc-mode/uhc-mode-overview/":{"data":{"":"Important\nCHT apps using the UHC Mode empower CHWs to provide equitable and timely care to families in their catchment area. This feature was codeveloped with Muso, and showed an increase in household coverage for both rural and peri-urban settings, thereby increasing the effectiveness of CHWs and improving access to care for the populations they serve.","uhc-with-the-cht#UHC with the CHT":"Apps built using the Community Health Toolkit can be used in support of community-based services, and increase Universal Health Coverage (UHC) by helping health workers regularly reach all the families that they care for. A Muso study in collaboration with Medic, showed an increase in household coverage:\nUHC Mode should be considered an effective tool that can improve minimum expected home visit coverage and promote progress towards UHC when implemented in the proactive community case management context."},"title":"Overview"},"/building/users/":{"data":{"":"Apps built with the Core Framework use roles and permissions to determine who has access to what data. User roles are general categories you can use to assign a collection of broad permissions to users. There are two classes of roles: online and offline. Generally speaking, CHWs are usually offline users, while managers and nurses are usually online users. SMS users do not use the app, and thus do not have a user role.","offline-users#Offline Users":"Offline roles are for users who need to be able to access data on-the-go in the field and don’t have a reliable internet connection. All the data they have access to will be synced to their device. System administrators cannot be offline users as they won’t have access to the app management tools offline.\nNote\nAdvanced configuration options are available for a specific offline user role to manage what level of data is synced to their device.","online-users#Online Users":"Online roles are for users who need access to a lot of data and need to maintain the system or update system settings. An internet connection is required.","permissions#Permissions":"User Permissions are settings that can be individually toggled on or off to allow users with a particular Role to do a certain action or see a certain thing. CHT app developers and administrators can add as many User Roles as needed to grant permissions to different groups of users.\nViewing permissions determine which page tabs a user sees in the app and which types of data they do and don’t have access to. User action permissions include who can create (e.g., create new users), who can delete (e.g., delete reports), who can edit (e.g., edit profiles), and who can export (e.g., export server logs).\nSee Also: Defining User Permissions","roles#Roles":"Differing levels of access and permissions are assigned to each persona. A user role is created to provide them with access to the information they need. Offline and online access, storage limitations, and data privacy are taken into account.\nPersona Hierarchy Device Permissions Program Officer Logs in as Admin Computer Admin users, usually Program Officers, are online-only admin users not associated to a particular level. They have access to all people, places, and records in the app, but since they are online-only users, they cannot view any tasks or targets. CHW Supervisors Logs in at Health Facility level Tablet User at this level have online and offline access to view CHWs, fill out reports about them, and view tasks and targets related to them. Due to storage limitations, they aren’t able to view households or submit reports and review tasks and targets about them. CHWs Logs in at CHW Area level Phone Users at this level have online and offline access to view households and family members, submit reports about them, and view tasks and targets about them. Family members Registered at Household level, does not log in Messaging Family members might include fathers, mothers, children, and other adults. The program model determines which family members should be registered in the app. However, they are not users of the app, and do not log in themselves. See Also: Defining User Roles"},"title":"Users"},"/building/workflows/":{"data":{"":"Content in this section Overview Configurable Hierarchies Muting Death Reporting"},"title":"Workflows"},"/building/workflows/death-reporting/":{"data":{"":"In this section you will learn how to set up a death report workflow. This includes laying out a death report form as well as handling all the configurations needed for wiring it up in the CHT. By the end of the tutorial you should be able to:\nMark select contacts as deceased Make relevant app updates for dead contacts","1-create-the-death-form#1. Create the Death Form":"Create a new app form with your desired experience for reporting a death. Or you can use the death_report.xlsx and death_report.properties.json files from this reference application.\nIt is common to want to know the date of death, place of death, or cause of death when reporting a death. If you want to ask date of the contact’s death, use a field of type date. This information will be used again in step 3.","2-edit-the-form-propertiesjson-file#2. Edit the Form Properties.json File":"It doesn’t make sense to have “places” in your hierarchy that can be deceased. It also doesn’t make sense for somebody who is dead to die again. But can the administration of a health facility die? That is for you to decide.\nThis snippet is an example form properties file which constrains the death form to show only for contacts which:\nAre currently alive Are within a family Have a contact_type with “person: true” { \"context\": { \"expression\": \"!contact.date_of_death \u0026\u0026 user.parent.contact_type === 'family'\", \"person\": true, \"place\": false }, \"icon\": \"icon-death-general\", \"title\": [ { \"locale\": \"en\", \"content\": \"Report death\" } ] }","3-enable-the-death_reporting-transition#3. Enable the \u003ccode\u003edeath_reporting\u003c/code\u003e Transition":"The death_reporting transition will process your death report and update the deceased contact document by adding a date_of_death attribute to the document.\nTo enable death reporting:\n\"transitions\": { ..., \"death_reporting\": true }, \"death_reporting\": { \"mark_deceased_forms\": [ \"death_report\" ], \"date_field\": \"fields.date_of_death\" } The date_field is optional. If a date of death is not provided, the date of the death report will be used. If your form has a field of type date asking for the date of the contact’s death, use a path to that field in date_field.","4-test#4. Test":"Create a contact that you expect to be able to die. View the contact’s profile in the contacts tab. Click on the “+ New Action” tab. You should see your “Death Report” form there with an appropriate title and icon. Select and complete your Death Report. View the “place” containing the deceased contact in the contacts tab. The contact will not appear as “deceased” Sync your documents (this pushes the death report to the server) Sync your documents again (this pulls down the transitioned contact document from the server) The contact should now be hidden and accessible only via the “View deceased” flyout If you specified a date_field in Step 3, confirm that the date_of_death attribute on the deceased contact matches the selected date in the death report. Create contacts that you do not expect to be able to die. View the contact’s profiles and confirm the “Death Report” does not show in the “+ New Action” tab.","brief-overview-of-key-concepts#Brief Overview of Key Concepts":"When a contact is marked as deceased within the CHT, the contact will be hidden by default on the contacts tab.","condition-card-for-date-of-death#Condition card for \u0026ldquo;Date of Death\u0026rdquo;":"On your contact page you may want to add a condition card to display the date of the patient’s death.\nconst cards = [ { label: 'contact.profile.death.title', appliesToType: 'person', appliesIf: () =\u003e contact \u0026\u0026 contact.date_of_date, fields: () =\u003e ([ { label: 'contact.profile.death.date', value: contact.date_of_death, filter: 'simpleDate', translate: false, width: 6 } ]), } ];","disable-tasks-for-deceased-contacts#Disable tasks for deceased contacts":"If a contact is dead, you may want to disable the majority of tasks for that contact. You will need to update each of your task’s definitions.\n{ appliesIf: (contact) =\u003e !contact.contact.date_of_death \u0026\u0026 myLogic, ... }","implementation-steps#Implementation Steps":"Create a new app form with a name like “Death Report”. This will be used to flag a contact as deceased. Set the form properties to show for contacts that can die. Enable the death_reporting transition. Make some recommended updates to tasks, targets, and contact-summary.","prevent-the-display-of-other-forms-for-deceased-persons#Prevent the display of other forms for deceased persons":"You typically don’t want users doing actions like “health assessment” for deceased contacts. You can achieve this by updating your other app form’s properties.json files to only display for alive contacts.\n{ \"context\": { \"expression\": \"!contact.date_of_death \u0026\u0026 myLogic\", ... }, }","recommended-updates#Recommended updates":"","required-resources#Required Resources":"You will need to:\nConfigure your application hierarchy Create some contacts Know how to create an app form Know how to set form properties","targets#Targets":"Should your targets count deceased contacts in the denominator? This change is left as an exercise for the reader.","undoing-a-death-report#Undoing a death report":"To undo a death report, you’ll need to create a new app form to undo the death report. Add it to undo_deceased_forms (similar to mark_deceased_forms) in app_settings step 3 above."},"title":"Death Reporting"},"/building/workflows/hierarchy/":{"data":{"":"The Core Framework requires a hierarchy to organize the information in the app. It is often based on the hierarchy of a health system within a particular geographic region.\nLarge deployment sites often need three or more levels of place hierarchy, while some small sites need fewer than three levels. For this reason, the Core Framework’s information hierarchies are configurable to meet a users needs.\nA user logging into their app will see a custom set of people, tasks, reports, and analytics based on the hierarchy level that they belong to. This allows appropriate data sharing based on the role of the user in the health system.\nThe information hierarchy is configured in the administration console. The hierarchy levels can be given different titles depending on a particular health system’s program or reporting structures.\nSee Also: Defining Hierarchy","people#People":"The hierarchy can be modeled after the health system, health program and/or the community. All people are associated with a place and these places can be associated to each other.\nFor example, a Family Member is part of a Family. A Family and CHWs are part of a CHW Area. A Family Member, a Family, and CHWs are part of a CHW Supervisor Area.\n%%{init: { \"flowchart\": { \"rankSpacing\": 20, \"nodeSpacing\": 10 } } }%% flowchart TB linkStyle default stroke-width:1px,stroke:lightgrey classDef node fill:none,stroke:none classDef cluster fill:none,stroke:#ccc subgraph district[ ] admin[Admin]:::none officer[Program Officer]:::none admin --- officer end district:::none subgraph supervision[ ] super_area_a[CHW Supervisor Area A]:::none super_a[CHW Supervisor A]:::none super_area_a --- super_a end supervision:::none subgraph chw_group_a[ ] chw_area_a[CHW Area A]:::none chw_a[CHW]:::none chw_area_a --- chw_a end chw_group_a:::none subgraph chw_group_b[ ] chw_area_b[CHW Area B]:::none chw_b[","places#Places":"This is an example of a simple hierarchy that includes a CHW Supervisor area, CHW area, and families as levels which serve as “places” or units of organizing people.\nflowchart TB linkStyle default stroke-width:1px,stroke:lightgrey classDef none fill:none,stroke:none super_area_a[CHW Supervisor Area A]:::none chw_area_a[CHW CHW Area A]:::none chw_area_b[CHW CHW Area B]:::none chw_area_c[CHW CHW Area C]:::none family_a[Family A]:::none family_b[Family B]:::none family_c[Family C]:::none family_d[Family D]:::none family_e[Family E]:::none family_f[Family F]:::none super_area_a --- chw_area_a \u0026 chw_area_b \u0026 chw_area_c chw_area_a --- family_a \u0026 family_b chw_area_b --- family_c \u0026 family_d chw_area_c --- family_e \u0026 family_f User roles can be assigned to log in at any of these levels. For example, it would be customary for a CHW to log in at the CHW Area level and view the families, and below that the people, i.e. patients or family members, who belong there."},"title":"Hierarchies"},"/building/workflows/muting/":{"data":{"":"Muting is a way for CHWs to temporarily silence notifications about Contacts (people and places) and is commonly used when a person or family has temporarily relocated or refused services. When a Contact is muted, they will appear differently on the People tab and CHWs will no longer receive tasks or SMS about them.\nTo start receiving notifications about a Contact again, CHWs can unmute them. When a Contact is unmuted, tasks and SMS schedules will resume, but notifications that would have been sent while they were muted will not.","configurability#Configurability":"While it’s most common to have dedicated mute and unmute forms, any form can be set up to mute or unmute a Contact. It’s also possible to set up verification flows for muting whereby mute/unmute requires a Supervisor to verify before the mute/unmute happens. And like the rest of the CHT, all text is customizable.","mute-a-contact#Mute a Contact":"To mute a Contact, CHWs typically submit a “Mute” form about them. This can be done either from the People tab or the Reports tab. When a person is muted, in addition to their notifications being silenced, their icon turns grey and a “Muted” status is displayed beneath their name. While a person or place is muted, CHWs and Nurses can still submit other forms about them.\nSome changes are observed in the UI when a family or a person is muted to make the muted status clear and easily recognizable. The person’s or family’s icon turns grey and a status of “Muted” displays on the second line below the person’s or family’s name. Any actions that were previously available on the family or person remain available on the profile.\nWhen a place is muted, all places and people beneath it will automatically be muted as well. For example, if a family is muted, all individuals in that family will automatically be muted. It is not possible to have a muted family with some family members that are not muted. This means that if a new person is added to a muted family, that person will automatically be muted when they are created.","muting-vs-death-reporting#Muting vs Death Reporting":"A project may support both death reporting and muting - they are not mutually exclusive. Death reporting moves the deceased person to a different part of the family members list and does not allow actions. Muting keeps the person in the family members list, allows actions and disables schedules.\nDeath reporting Muting Permanent state Temporary state Only allowed at the individual level Place, family, or individual level Removes schedules “Quiets” notifications for schedules A deceased individual is removed from the family list A muted individual is not removed from the family list\nNo new actions can be performed\nexcept for one - reverse the death\nNew actions may be performed, but no tasks or notifications will be sent\nManager confirmation configurable Manager confirmation configurable","unmute-a-contact#Unmute a Contact":"To unmute a Contact, CHWs typically submit an “Unmute” form. This will remove the “Mute” styling, resume notifications, and also unmute all places above them in the hierarchy. For example, if a family member is unmuted, the entire family will automatically be unmuted since it is not possible to have an unmuted person in a muted family."},"title":"Muting"},"/building/workflows/workflows-overview/":{"data":{"":"Workflows can be defined within apps built with the Core Framework to connect actions and data with people. Forms are the main building block of tasks and messaging workflows, and are useful in creating reminders for follow-up visits or referrals.","interoperability#Interoperability":"Workflows can incorporate other digital tools, such as a facility-based electronic medical record system for referral workflows. New contacts or reports can trigger an interoperabilty workflow using the outbound push feature. Data can be received as reports using the CHT API See Also: Outbound Push\n.","sms-messaging#SMS Messaging":"Workflows can include notifications and interactions with CHWs, nurses, supervisors, and patients via SMS. A report can trigger SMS messages to be sent immediately or upon a set schedule. Responses via SMS or the app can update the workflows. See Also: Defining SMS Workflows","tasks#Tasks":"Tasks within the app can drive a workflow, ensuring that the right actions are taken for people at the right time. Tasks indicate a recommended action to the user. They indicate who the user should perform the action with, and the recommended timeframe of that action. When the user taps the task, they are directed to a form where the details of the action are captured.\nTasks can be triggered by a set of conditions, such as contact details or submitted reports. Tasks are accessible in the Tasks tab and the profile in the Contact tab, and initiate a follow up action to complete a form. More information on building app workflows is available in the Tasks section.\nData submitted in one form can generate several tasks at once, for example, multiple ANC visits following one pregnancy registration. Some workflows involve a series of sequential forms and tasks, such as a child health assessment form, a follow up task scheduled 48 hours later, a referral form (only if the child’s condition hasn’t improved), and then a referral follow up task. Tasks are accessible on the Tasks tab, as well as the Tasks section of profiles.\nSee Also: Defining Tasks"},"title":"Overview"},"/community/":{"data":{"":"👋 There are many ways to get involved! Do you want to… Contribute for the First Time?Start with the first time contributors guide Take Courses on the CHT?Head over to the CHT Academy Contribute Code or Docs?Develop and contribute to the CHT or help improve the documentation Test the CHT?Help test and report bugs and participate in QA testing for new features Build and Host a CHT App?Learn to build and host CHT apps and share your experience Explore CHT Design and UX?Explore design resources and contribute to UX improvements Help Translating the CHT?Help make the CHT available in your language Join the Forum Discussions?Participate in discussions, share research, suggest new functionalities and help answer questions about the CHT Get Involved in an Initiative?See the CHT Roadmap to view current squad activities Participate in a CHT Event?Subscribe to the CHT Calendar and never miss a community call Never Miss a Community Update?Sign up for the newsletter to get the latest CHT Community updates"},"title":"Community"},"/community/contributing/":{"data":{"":"About ContributionsLearn what CHT contributions are First Time Contributors GuideStarting guide for first time contributors Code of ConductThe code of conduct for the CHT community Contribute CodeHow to contribute to code to the CHT Contribute DocumentationHow to contribute to documentation to the CHT Create Good First IssuesSet new community members up for success Technical ResourcesLearning resources to get started as a contributor to the CHT Disclose VulnerabilitiesHow to help the CHT stay secure"},"title":"Contribute"},"/community/contributing/code-of-conduct/":{"data":{"":"All maintainers and contributors in this community are required to act according to the following Code of Conduct. These guidelines help steer our interactions and help us provide and ensure a safe environment for everyone.","attribution#Attribution":"This Code of Conduct is adapted from the Contributor Covenant, version 1.4. For answers to common questions about this code of conduct, see https://www.contributor-covenant.org/faq.","enforcement#Enforcement":"Instances of abusive, harassing, or otherwise unacceptable behavior may be reported by contacting the community manager at hello@medic.org. All complaints will be reviewed and investigated and will result in a response that is deemed necessary and appropriate to the circumstances. The project team is obligated to maintain confidentiality with regard to the reporter of an incident. Further details of specific enforcement policies may be posted separately.\nProject maintainers who do not follow or enforce the Code of Conduct in good faith may face temporary or permanent repercussions as determined by other members of the project’s leadership.","our-communitys-standards#Our Community\u0026rsquo;s Standards":"Examples of behavior that contributes to creating a positive environment: include:\nUsing welcoming and inclusive language Being respectful of differing viewpoints and experiences Gracefully accepting constructive criticism Focusing on what is best for the community Showing empathy towards other community members Examples of unacceptable behavior by participants include:\nThe use of sexualized language or imagery and unwelcome sexual attention or advances Trolling, insulting/derogatory comments, and personal or political attacks Public or private harassment Publishing others’ private information, such as a physical or electronic address, without explicit permission Other conduct which could reasonably be considered inappropriate in a professional setting","our-responsibilities#Our Responsibilities":"Project maintainers are responsible for clarifying the standards of acceptable behavior and are expected to take appropriate and fair corrective action in response to any instances of unacceptable behavior.\nProject maintainers have the right and responsibility to remove, edit, or reject comments, commits, code, wiki edits, issues, and other contributions that are not aligned to this Code of Conduct, or to ban temporarily or permanently any contributor for other behaviors that they deem inappropriate, threatening, offensive, or harmful."},"title":"Code of Conduct"},"/community/contributing/code/":{"data":{"":"Tip\nSee the CHT Core Developer Setup guide for detailed instructions on how to setup your development environment.\nThe Core Framework of the Community Health Toolkit is powered by people like you. Your contributions help us create open source technology for a new model of healthcare that reaches everyone.\nThe Development section of the forum is a great place to introduce yourself and ask questions. Or you can also jump right in:\nThe CHT community welcomes first-time contributors and experts alike. All comments, questions, and ideas are welcome!","code-of-conduct#Code of Conduct":"All maintainers and contributors are required to act according to our Code of Conduct. Thank you for your help building a positive community and a safe environment for everyone.","first-time-contributor#First time contributor?":"Be sure to read the first time contributors guide!","license#License":"The software is provided under AGPL-3.0. Contributions to this project are accepted under the same license.\nContent in this section Development Workflow Coding Style Guide CHT App Configurer CHT Product Repository Checklist Using NPM Static Analysis Design Documents Guide Quality Assistance","quick-start#Quick Start":"Before you start coding a new change you suggest to the CHT, raise an issue or start a conversation about the change you want to make. Then:\nRead the CHT Development Workflow and Code Style Guide. Find a good ticket and request it be assigned to you via a comment. Setup your development environment. Make sure your pull request’s (PR) tests all pass. Failures need to be addressed before we can merge your code. Provide detail about the issue you are solving on the PR. Reference any existing issues using medic/ # . Our CI will automatically schedule a build; monitor the build to ensure it passes. Your PR will be reviewed by a maintainer. Expect at least one change requested - don’t be offended if your change doesn’t get accepted on the first try!","reporting-a-vulnerability#Reporting a vulnerability?":"See the vulnerability disclosure guide!"},"title":"Code"},"/community/contributing/code/android/":{"data":{"":"Content in this section Android Dev Environment Releasing Securing Android Devices"},"title":"CHT Android"},"/community/contributing/code/android/development-setup/":{"data":{"":"The following instructions allows you to setup a development environment for the CHT Android apps, and the CHT Gateway app as well.\nFinally, you will learn how to assemble the app, run the tests, and how to choose the right artifacts when installing or publishing the apps.","android-app-bundles#Android App Bundles":"Only CHT Android\nThe publish script in CI produces multiple AABs for publishing to the Google Play Store, so the generated .aab files need to be uploaded instead of the .apk files if the Play Store require so. Old apps published for the first time before Aug 1, 2021 can be updated with the APK format. If distributing AABs via the Play Store, upload all AABs and it will automatically choose the right one for the target device. The AABs are named as follows: cht-android-{version}-{brand}-release.aab.","android-studio#Android Studio":"The Android Studio can be used to build and launch the app instead. Be sure to select the right flavor from the Build Variants dialog (see Change the build variant). To launch the app in an emulator, you need to uncomment the code that has the strings for the x86 or the x86_64 architecture in the android / splits / include sections of the build.gradle file.","android-studio-and-the-sdk#Android Studio and the SDK":"Android Studio is the full package: the IDE based on IntelliJ IDEA, the Android SDK and the SDK Manager with the UI to manage different packages visually, while the SDK alone only includes the command line tools like the sdkmanager CLI.\nYou don’t need the IDE to build the app or to install a “debug” version in a device, or get the logs, but it’s recommended if you also want to debug the app or modify the code.\nAndroid Studio: download from https://developer.android.com/studio Command line tools only: download from https://developer.android.com/studio. Scroll down to the ‘Command Line Tools Only’ section of the page. If you install Android Studio it’s still recommended to download and setup the command line tools separately to be able to use them without the IDE.\nThe binary folder of the command also need to be added to the $PATH, and $ANDROID_HOME pointing to the root of the SDK. Moreover, the SDK requires to be stored in the $ANDROID_HOME and inside a folder called latest.\nHere are the steps from the command line you can follow to install the CLI tools once downloaded the zip file:\nmkdir -p Android/Sdk/cmdline-tools unzip commandlinetools-linux-7583922_latest.zip mv cmdline-tools/ Android/Sdk/cmdline-tools/latest/ Then, to add the environment variables required, you can add the following to your ~/.bashrc file:\nexport ANDROID_HOME=\"$HOME/Android/Sdk\" export PATH=\"$PATH:$ANDROID_HOME/cmdline-tools/latest/bin\"","apks#APKs":"For compatibility with a wide range of devices, the publish script in CI produces multiple APKs. The two variables are the instruction set used by the device’s CPU, and the supported Android version. When sideloading the application, it is essential to pick the correct APK or the application may crash.\nIf distributing APKs via the Play Store, upload all APKs and it will automatically choose the right one for the target device.\nTo help you pick which APK to install, you can find information about the version of Android and the CPU in the About section of the phone’s settings menu.\nThe APKs are named as follows: cht-android-{version}-{brand}-{instruction-set}-release.apk.\nInstruction set Android version Notes arm64-v8a 5+ Preferred. Use this APK if possible. armeabi-v7a 5+ Built as support for older devices, ignore if possible.","apksigner#\u003ccode\u003eapksigner\u003c/code\u003e":"This tool is used automatically by the Android SDK for signing APKs, and to check the certificate of a given APK, so chances are that after installing the SDK following the steps above you already have it installed, but not configured in the $PATH that is needed to manually check APKs signature.\nThe CLI is part of other CLI tolls under the build-tools package, and multiple build tools package can be installed, so check what versions you have under the $ANDROID_HOME/build-tools folder, and add the most up to date to the $PATH folder. E.g. if you have the version 30.0.3 installed in you computer, apksigner should be installed at $ANDROID_HOME/build-tools/30.0.3/apksigner, so add the $ANDROID_HOME/build-tools/30.0.3 folder to the $PATH variable.\nIn case you don’t have it installed or want to install a newer version, checkout the versions available with sdkmanager --list. You will see a table with a list of installed and available packages, not just the build tools.\nTo install the version 31.0.0: sdkmanager --install 'build-tools;31.0.0'. Then update or add it to the $PATH variable.","artifact-formats#Artifact formats":"When building the app there are two output formats you can use: Android App Bundle or APK.","build-and-assemble#Build and assemble":"To build and assemble the apps within the console use:\nmake assemble The command above builds and assembles the debug and release APKs of the apps, and for the CHT-Android project the Unbranded flavor is built and assembled by default.\nEach APK will be generated and stored in build/outputs/apk/[flavor]/[debug|release]/, for example after assembling the Medicmobilegamma flavor with make flavor=Medicmobilegamma assemble, the release versions of the APKs generated are stored in build/outputs/apk/medicmobilegamma/release/.\nTo assemble other flavors, use the following command: make flavour=[Flavor] assemble. See the Flavor selection section for more details about make commands.\nTo create the .aab bundle file, use make bundle, although signed versions are generated when releasing, and the Play Store requires the AAB to be signed with the right key.\nTo clean the APKs and compiled resources: make clean.","connecting-to-the-server-locally#Connecting to the server locally":"Only CHT Android\nRefer to the CHT Core Developer Guide.","debug-tool-adb#Debug tool \u003ccode\u003eadb\u003c/code\u003e":"Old SDK distributions used to have it pre-packaged, now you have to install it separately. Once installed SDK following the steps above, you can install the latest version of adb with:\nsdkmanager --install platform-tools If you also installed Android Studio you can use the SDK Manager instead.\nFinally edit again the $PATH environment variable to add the adb path: $ANDROID_HOME/platform-tools.","development#Development":"","flavor-selection#Flavor selection":"Only CHT Android\nSome make targets support the flavor as make flavor=[Flavor] [task], where [Flavor] is the branded version with the first letter capitalized. The [task] is the action to execute: deploy, assemble, lint, etc.\nThe default value for flavor is Unbranded, e.g. executing make deploy will assemble and install that flavor, while executing make flavor=Medicmobilegamma deploy will do the same for the Medicmobilegamma brand.\nSee the Makefile for more details.","install#Install":"","instrumentation-tests#Instrumentation Tests":"Only CHT Android\nThe UI tests run on a device.\nUninstall previous versions of the app, otherwise an InstallException: INSTALL_FAILED_VERSION_DOWNGRADE can cause tests to fail. Select English as default language in the device. Ensure you meet all the Requirements. Execute: make test-ui-all.","java#Java":"Java 17+ needs to be installed. The bin/ folder of the JDK must added into the $PATH environment variable, and it’s recommended to have $JAVA_HOME pointing to the JDK folder as well.\nTo install different versions of Java and without the need to have root permissions, checkout Sdkman!, if you are familiar with tools like nvm or rvm, this tool is pretty much the same for Java, and the command takes care of adding the selected JDK to the $PATH variable and to set the $JAVA_HOME variable when switching across different versions.","manually-testing-with-older-android-versions#Manually testing with older Android versions":"Only CHT Android\nLater versions of the CHT, only support running on Chrome/Webview 90+. Some older versions of Android will not have a new enough Android System Webview to be able to run the CHT webapp. This is particularly true of emulated Android devices, which typically are configured to not receive updates. To test the CHT functionality on these devices you must manually upgrade the version of the Chrome/Webview apk used as the Android System Webview.\nTo upgrade the necessary apk on an emulated Android device:\nStart by using the Google APIs variant of the Android image. The base AOSP image bakes in the com.android.webview package, making it difficult to update. Depending on your version of Android, you will need to manually download a new version of the apk (make sure to get the correct variant for your architecture): For Android 7-9, you should download a new version of com.android.chrome (e.g. from apkMirror). For Android 10+, you should download a new version of com.google.android.webview (e.g. from apkMirror). Then, you can use adb to install the apk into the device: adb install -r *your_apk*.apk Note\nTesting using an Android 5-6 device can be more challenging. The com.android.webview package seems to be baked into the system partition regardless of the image variant. It is possible use a custom ROM (e.g. CyanogenMod) with an upgraded WebView version on a physical device. Another approach to testing with older versions of Android is to simply test against an older version of the CHT (e.g. CHT 3.x. only requires Chrome/Webview 53). The functionality of cht-android can still be validated by interacting with this old CHT version.\nIf using the docker-helper to deploy CHT instances for testing with old Android versions, be aware that the local-ip.medicmobile.org SSL certificates may not work with the device (because the root certificate is not recognized). On Android 5-6 you can manually install the root certificate via Settings \u003e Security \u003e Install from SD Card.","requirements#Requirements":"Java 17+ (OpenJDK versions work). Android SDK, and optionally Android Studio. The adb command for debugging and get the logs. The source code. To run all the tests in the CHT Android app you need to clone also the submodules: git clone --recurse-submodules https://github.com/medic/cht-android.git. The make command. If you are going to build a new flavor (CHT Android), you also need to have installed: head, xxd, openssl and apksigner. Gradle is also used but it’s downloaded and installed in the user space the first time make is executed. You can also build and launch the app with Android Studio.\nBelow are the instructions of how to install and setup some of the tools required.","shell-tests#Shell tests":"Only CHT Android\nThe project has bash tests that verify the Make targets used to create and manage the keystores used to sign the apps. Use make test-bash-keystore to run them. In CI they are executed in Linux and MacOS VMs.\nIf you get an error like make: ./src/test/bash/bats/bin/bats: Command not found, it’s because you cloned the project without the --recurse-submodules git argument. Execute first git submodule update --init to clone the submodules within the cht-android folder.","static-checks#Static checks":"Only CHT Android\nTo only execute the linter checks, run: make lint.","testing#Testing":"To execute unit tests and static analysis, run: make test.\nTo generate a unit test coverage report, run: make test-coverage.\nFind the generated report in: build/reports/jacoco/makeUnbrandedDebugUnitTestCoverageReport/html/index.html"},"title":"Android Dev Environment"},"/community/contributing/code/android/releasing/":{"data":{"":"All Medic’s Android projects automatically build, sign, and release builds via GitHub Actions. The following guide applies to any of these apps, although the last 2 are in maintenance mode (links pointing to the release sections):\ncht-android cht-gateway medic-collect rdt-capture","alpha-for-release-testing#Alpha for release testing":"Ensure all issues for this release have passed AT and been merged into master. You can also create an alpha release from a feature branch, to provide the needed .apk files to the QA team. Create a git tag starting with v and ending with the alpha version, e.g. git tag v1.2.3-alpha.1, and push the tag to GitHub (git push --tags). For features branches, you can add the name of the branch or whatever keyword helps to identify the release, e.g. v1.2.3-alpha.dark-theme.4. Creating the tag will trigger the building and signing of the app in CI. The release-ready APKs are available for side-loading from the Releases section in the project (e.g. CHT-Android Releases), along with the AABs that the Google Play Store may require. Note that the created release on GitHub with the generated artifacts will not be explicitly linked to the tag because the release is in a draft state. Side-Load: for testing internally, or apps that are not published in the Play Store like Collect and Gateway: Navigate to the GitHub Releases page (linked above) and download the relevant APKs for distribution.","production-release#Production release":"Update the CHANGELOG with the details of what’s in this release. Repeat steps 2-3 from the above alpha release section with the naming convention v... The CI build for the tag will create a new draft release on GitHub. Include the release notes from the CHANGELOG in the description of the release and publish the release on GitHub. Publish in the Play Store. For the CHT-Android app, the “reference” apps (medicmobilegamma and unbranded) must be published in the Play Store. Other channels such as F-Droid can also be used to publish the app. Announce the release on the CHT forum, under the “Product - Releases” category."},"title":"Releasing"},"/community/contributing/code/android/securing-android/":{"data":{"":"To secure an android device you should enable at least a pin code lock on the device, enable FDE (full disc encryption) and setup remote wiping capabilities by enabling mobile device management.","android-44-or-earlier#Android 4.4 or earlier":"First, you’ll need to set up a PIN. Navigate to Settings \u003e Security \u003e Screen Lock, and set a numeric PIN for the device of at least four digits. Remember this PIN and do not write it down.\nThen, open the Security menu under settings. On unmodified versions of Android, this can be found under Settings \u003e Personal \u003e Security. On some devices, the exact menu layout may have been modified by the hardware manufacturer. Choose Encrypt Phone or Encrypt Tablet.\nScreenshot for Android 4.4","android-50-or-later#Android 5.0 or later":"Open the Security menu under settings. On unmodified versions of Android, this can be found under Settings \u003e Personal \u003e Security. Choose Encrypt Phone, Encrypt Tablet, or Encrypt Device. If you haven’t already set a PIN or passcode for the lock screen, you will be prompted to do so. Remember this PIN and do not write it down.\nScreenshot for Android 5.0","android-versions-before-30#Android Versions before 3.0":"Android does not support disk encryption in versions earlier than 3.0 (Honeycomb). If you have one of these devices, we recommend that you do not use it.","mobile-device-management#Mobile device management":"Using mobile device management (MDM) software allows administrators to remotely manage mobile devices, which often includes the option to delete apps and data from lost or stolen mobile devices.\nSee Also: Publishing \u003e Mobile Device Management","pin-setup-and-fde#PIN Setup and FDE":"Instructions are slightly different per device. Enabling FDE has the added benefit that you must also lock the device with a pin code or password."},"title":"Securing Android"},"/community/contributing/code/cht-conf/":{"data":{"":"CHT Conf is a command-line interface tool to manage and configure apps built using the CHT Core Framework.","a-specific-medic-hosted-instance#A specific Medic-hosted instance":"For configuring Medic-hosted instances.\ncht --instance=instance-name.dev Username admin is used. A prompt is shown for entering password. If a different username is required, add the --user switch:\n--user user-name --instance=instance-name.dev","an-arbitrary-url#An arbitrary URL":"cht --url=https://username:password@example.com:12345 NB - When specifying the URL with --url, be sure not to specify the CouchDB database name in the URL. The CHT API will find the correct database.","bash-completion#Bash completion":"To enable tab completion in bash, add the following to your .bashrc/.bash_profile:\neval \"$(cht-conf --shell-completion=bash)\"","build-status#Build status":"Builds brought to you courtesy of GitHub actions.","commit-format#Commit format":"The commit format should follow this conventional-changelog angular preset. Examples are provided below.\nType Example commit message Release type Bug fixes fix(#123): infinite spinner when clicking contacts tab twice patch Performance perf(#789): lazily loaded angular modules patch Features feat(#456): add home tab minor Non-code chore(#123): update README none Breaking perf(#2): remove reporting rates feature BREAKING CHANGE: reporting rates no longer supported major","development#Development":"To develop a new command that is part of cht-conf, or improve an existing one. For more information check “Actions” doc.","end-to-end-tests#End-to-end tests":"Run npm run test-e2e to run the end-to-end test suite against an actual CHT instance locally. These tests rely on CHT Docker Helper to spin up and tear down an instance locally.\nThe code interfacing with CHT Docker Helper lives in test/e2e/cht-docker-utils.js. You should rely on the API exposed by this file to orchestrate CHT instances for testing purposes. It is preferable to keep the number of CHT instances orchestrated in E2E tests low as it takes a non-negligible amount of time to spin up an instance and can quickly lead to timeouts.","executing-your-local-branch#Executing your local branch":"Clone the project locally Make changes to cht-conf or checkout a branch for testing Test changes To test CLI changes locally you can run node /src/bin/index.js. This will run as if you installed via npm. To test changes that are imported in code run npm install to use the local version of cht-conf.","installation#Installation":"","into-an-archive-to-be-uploaded-later#Into an archive to be uploaded later":"cht --archive The resulting archive is consumable by CHT API \u003ev3.7 to create default configurations.","localhost#localhost":"For developers, this is the instance defined in your COUCH_URL environment variable.\ncht --local","note-on-connecting-to-a-local-cht-instance#Note on connecting to a local CHT instance":"When using cht-conf within a Docker container to connect to a CHT instance that is running on your local machine (e.g. a development instance), you cannot use the --local flag or localhost in your --url parameter (since these will be interpreted as “local to the container”).\nIt is recommended to run a local CHT instance using the CHT Docker Helper script. You can connect to the resulting ...my.local-ip.co URL from the Docker container (or the VS Code terminal). Ensure the port your CHT instance is hosted on is not blocked by your firewall.","operating-system-specific#Operating System Specific":"Linux (Ubuntu)macOSWindows (WSL2) npm install -g cht-conf sudo python -m pip install git+https://github.com/medic/pyxform.git@medic-conf-1.17#egg=pyxform-medic npm install -g cht-conf pip install git+https://github.com/medic/pyxform.git@medic-conf-1.17#egg=pyxform-medic # As Administrator: npm install -g cht-conf python -m pip install git+https://github.com/medic/pyxform.git@medic-conf-1.17#egg=pyxform-medic --upgrade","perform-actions-for-specific-forms#Perform actions for specific forms":"cht \u003c--local|--instance=instance-name|--url=url\u003e \u003c...action\u003e -- \u003c...form\u003e","perform-specific-actions#Perform specific action(s)":"cht \u003c--archive|--local|--instance=instance-name|--url=url\u003e \u003c...action\u003e The list of available actions can be seen via cht --help.","protecting-against-configuration-overwriting#Protecting against configuration overwriting":"Added in v3.2.0 In order to avoid overwriting someone else’s configuration cht-conf records the last uploaded configuration snapshot in the .snapshots directory. The remote.json file should be committed to your repository along with the associated configuration change. When uploading future configuration if cht-conf detects the snapshot doesn’t match the configuration on the server you will be prompted to overwrite or cancel.","releasing#Releasing":"Create a pull request with prep for the new release. Get the pull request reviewed and approved. When doing the squash and merge, make sure that your commit message is clear and readable and follows the strict format described in the commit format section below. If the commit message does not comply, automatic release will fail. In case you are planning to merge the pull request with a merge commit, make sure that every commit in your branch respects the format.","releasing-betas#Releasing betas":"Checkout the default branch, for example main Run npm version --no-git-tag-version ..-beta.1. This will only update the versions in package.json and package-lock.json. It will not create a git tag and not create an associated commit. Run npm publish --tag beta. This will publish your beta tag to npm’s beta channel. To install from the beta channel, run npm install cht-conf@beta.","requirements#Requirements":"nodejs 18 or later python 3 Docker(optional)","specifying-the-server-to-configure#Specifying the server to configure":"If you are using the default actionset, or performing any actions that require a CHT instance to function (e.g. upload-xyz or backup-xyz actions) you must specify the server you’d like to function against.","standalone-docker-utility#Standalone Docker utility":"If you are not using VS Code, you can use the Docker image as a standalone utility from the command line. Instead of using the cht ... command, you can run docker run -it --rm -v \"$PWD\":/workdir medicmobile/cht-app-ide .... This will create an ephemeral container with access to your current directory that will run the given cht command. (Do not include the cht part of the command, just your desired actions/parameters.)\nRun the following command inside the project directory to bootstrap your new CHT project:\ndocker run -it --rm -v \"$PWD\":/workdir medicmobile/cht-app-ide initialise-project-layout","testing#Testing":"","unit-tests#Unit tests":"Execute npm test to run static analysis checks and the test suite. Requires Docker to run integration tests against a CouchDB instance.","upgrading#Upgrading":"To upgrade to the latest version, run the command below. To view changes made to CHT Conf, view the CHANGELOG.\nnpm update -g cht-conf","usage#Usage":"cht will upload the configuration from your current directory.","using-a-session-token-for-authentication#Using a session token for authentication":"CHT Conf supports authentication using a session token by adding --session-token parameter:\ncht --url=https://example.com:12345 --session-token=*my_token* The my_token can be obtained by doing a POST request to /_session endpoint with name and password as form parameters.\nFor example, if your CHT instance is my.cht.com, you could use this curl call to specify your user medic and your password secret123 to retrieve the header with the AuthSession value which is the token:\ncurl -v -H 'Content-Type: application/json' -d '{\"name\":\"medic\",\"password\":\"secret123\"}' https://my.cht.com/_session 2\u003e\u00261 | grep AuthSession \u003c set-cookie: AuthSession=bWVkaWM6NjdBRTM4MkE6EguRnzpSiK0t8wFaOQ_jgkZE8UWcgNWgpyStzbbHreI; Version=1; Expires=Fri, 13-Feb-2026 18:21:30 GMT; Max-Age=31536000; Path=/; HttpOnly","using-docker#Using Docker":"CHT Conf can also be run from within a Docker container. This is useful if you are already familiar with Docker and do not wish to configure the various dependencies required for developing CHT apps on your local machine. The necessary dependencies are pre-packaged in the Docker image.","using-the-image#Using the image":"The Docker image can be used as a VS Code Development Container (easiest) or as a standalone Docker utility.\nInstall Docker. If you are using Windows, you also need to enable the Windows Subsystem for Linux (WSL2) to perform the following steps.","vs-code-development-container#VS Code Development Container":"If you want to develop CHT apps with VS Code, you can use the Docker image as a Development Container. This will allow you to use the cht-conf utility and its associated tech stack from within VS Code (without needing to install dependencies like NodeJS on your host system).\nLook through Developing with VS Code Dev Container Documentation to get more information ."},"title":"CHT Conf"},"/community/contributing/code/core/":{"data":{"":"Content in this section CHT Core dev environment setup Build commands Update Dependencies Automated Tests Style guide for automated tests Apdex Automated Tests Developing on Windows Running multiple Chrome versions Feature Flags Update Collect Forms Remotely Securely Sharing Your Development Environment"},"title":"CHT Core"},"/community/contributing/code/core/apdex-automation-tests/":{"data":{"":"This documentation will guide you on how to setup and configure automation to run performance tests for your CHT Applications.\nPrerequisites Before continuing with the steps below, ensure:\nYou have a cht instance deployed and running either locally or globally.\nYou have some pre-existing users and data already loaded on the app. Use the test-data-generator tool to achieve this.\nIf you already have the CHT Android app installed, set the appPath value (in the capabilities section of the settings file) to an empty string.\nIf you do not have the CHT Android app installed on your mobile device, download the preferred apk version and then set the appPath value to the absolute path of the apk file.\nFinally, ensure you have done the following installations on your machine:\nInstall NodeJS and Java JDK then ensure JAVA_HOME path is correctly set up. export JAVA_HOME=$(/usr/libexec/java_home) Install and Set-up Android studio and the adb tool to enable you run adb commands. Add the Android SDK directory to your system’s ANDROID_HOME environment variable. export ANDROID_HOME=\"/Users/yourpath/Library/Android/sdk/\" export PATH=$ANDROID_HOME/platform-tools:$PATH export PATH=$ANDROID_HOME/tools:$PATH To set up an Android Virtual Device (AVD), open Android Studio, click on More Actions \u003e Virtual Device Manager, and then proceed with the virtual device creation by selecting the hardware and system image. Install appium and appium doctor. npm install -g appium@next npm install -g appium-doctor Install appium driver - appium driver install uiautomator2 Steps (running the tests) Enable the developer mode in your phone and enable the USB Debugger mode.\nEnsure your device does not have a lock screen PIN/Passcode. Connect your phone to the computer using the appropriate device cable or you can follow these steps to connect your device using Wi-Fi.\nRun the adb devices command to confirm that your device is listed among the attached devices. Create a settings file or reuse one of the provided sample settings files.\nExpand to see settings file structure ```js { \"iterations\": 1, \"instanceURL\": \"\", \"hasPrivacyPolicy\": false, \"capabilities\": [ { \"platformVersion\": \"\", \"deviceName\": \"\", \"appPath\": \"\", \"noReset\": false } ], \"skip\": { \"login\": false, \"loadContactList\": false, \"loadChwArea\": false, \"loadHousehold\": false, \"loadPatient\": false, \"loadMessageList\": false, \"loadTaskList\": false, \"loadAnalytics\": false, \"loadReportList\": false, \"searchContact\": false, \"searchReport\": false, \"submitTask\": true, \"createPatient\": true, \"submitPatientReport\": true }, \"users\": [ { \"type\": \"offline\", \"role\": \"chw\", \"username\": \"\", \"password\": \"\" } ], \"pages\": { \"contactList\": { \"navigation\": [ { \"selector\": \"//*[@text=\\\"Reports\\\"]\" }, { \"selector\": \"//*[@text=\\\"People\\\"]\", \"asserts\": [ { \"selector\": \"//*[contains(@text, \\\"West Miltonside\\\")]\" } ] } ], \"search\": { \"value\": \"Rafael Windler\", \"asserts\": [ { \"selector\": \"//*[@text=\\\"Rafael Windler\\\"]\" }, { \"scrollDown\": 5, \"selector\": \"//*[contains(@text, \\\"No more people\\\")]\" } ], \"postTestPath\": [ { \"selector\": \"//*[@text=\\\"Reports\\\"]\" } ] } }, \"chwArea\": { \"navigation\": [ { \"selector\": \"//*[contains(@text, \\\"West Miltonside\\\")]\", \"asserts\": [ { \"selector\": \"//*[contains(@text, \\\"External ID\\\")]\" }, { \"selector\": \"//*[contains(@text, \\\"Rafael Windler\\\")]\" }, { \"selector\": \"//*[contains(@text, \\\"Households\\\")]\" }, { \"selector\": \"//*[contains(@text, \\\"Abilene\\\")]\" } ] } ], \"postTestPath\": [ { \"selector\": \"//*[@text=\\\"Back\\\"]\" } ] }, \"household\": { \"navigation\": [ { \"selector\": \"//*[contains(@text, \\\"West Miltonside\\\")]\" }, { \"selector\": \"//*[contains(@text, \\\"Abilene\\\")]\", \"asserts\": [ { \"selector\": \"//*[contains(@text, \\\"Phone\\\")]\" }, { \"selector\": \"//*[contains(@text, \\\"Bill Pouros\\\")]\" }, { \"scrollDown\": 2, \"selector\": \"//*[text()[contains(.,\\\"Danger sign follow up\\\")]\" }, { \"selector\": \"//*[text()[contains(.,\\\"Due today\\\")]\" }, { \"selector\": \"//*[text()[contains(.,\\\"Pregnancy danger sign\\\")]\" } ] } ] }, \"patient\": { \"navigation\": [ { \"selector\": \"//*[contains(@text, \\\"Irene Shields\\\")]\", \"asserts\": [ { \"selector\": \"//*[contains(@text, \\\"37 years\\\")]\" }, { \"scrollDown\": 1, \"selector\": \"//*[contains(@text, \\\"Danger sign follow up\\\")]\" }, { \"selector\": \"//*[contains(@text, \\\"Pregnancy danger sign\\\")]\" } ] } ], \"postTestPath\": [ { \"selector\": \"//*[@text=\\\"Back\\\"]\" } ] }, \"messageList\": { \"navigation\": [ { \"selector\": \"//*[@text=\\\"Messages\\\"]\", \"asserts\": [ { \"selector\": \"//*[contains(@text, \\\"No messages found\\\")]\" } ] } ] }, \"reportList\": { \"navigation\": [ { \"selector\": \"//*[@text=\\\"Reports\\\"]\", \"asserts\": [ { \"selector\": \"//*[contains(@text, \\\"Pregnancy danger sign\\\")]\" } ] } ], \"search\": { \"value\": \"Alexandra Lemke\", \"asserts\": [ { \"selector\": \"//*[contains(@text, \\\"No reports found\\\")]\" } ], \"postTestPath\": [ { \"selector\": \"//*[@text=\\\"Tasks\\\"]\" } ] } }, \"taskList\": { \"navigation\": [ { \"selector\": \"//*[@text=\\\"Tasks\\\"]\", \"asserts\": [ { \"selector\": \"//*[contains(@text, \\\"Danger sign follow up\\\")]\" } ] } ] }, \"targets\": { \"navigation\": [ { \"selector\": \"//*[@text=\\\"Targets\\\"]\", \"asserts\": [ { \"selector\": \"//*[contains(@text, \\\"New pregnancies\\\")]\" } ] } ] } }, \"forms\": { \"patientReport\": { \"navigation\": [{ \"scrollDown\": 3, \"selector\": \"//*[@text=\\\"Pregnancy\\\"]\" }], \"pages\": [ { \"asserts\": [ { \"selector\": \"//*[contains(@text, \\\"Select patient\\\")]\" } // Wait for form to load ], \"fields\": [ { \"selector\": \"\", // Optional. Use this when you need to type in the phone's keyboard, find the keycodes here: https://developer.android.com/reference/android/view/KeyEvent \"keycodes\": \"\", // Optional. Use this when you want an equivalent of element.setValue(myValue) \"value\": \"\", // Optional. Use this when you want to select an option from a dropdown. The dropdown will open with the \"selector\" property \"dropdownOption\": \"\", // Optional. Number of scrolls to reach the field \"scrollDown\": 1, \"scrollUp\": 1 } ], // Optional. Number of scrolls to reach the page's buttons \"scrollDown\": 2, \"scrollUp\": 1 }, { // Add this to assert the form summary page. \"asserts\": [ { \"selector\": \"//*[@text=\\\"Pregnancy in danger\\\"]\" }, { \"selector\": \"//*[contains(@text, \\\"Refer patient to clinic\\\")]\" } ], // Optional. Number of scrolls to reach the page's buttons \"scrollDown\": 2, \"scrollUp\": 3 } ], \"postSubmitAsserts\": [ // Add to assert result after form is submitted. { \"select\": \"//android.widget.TextView[contains(@text, \\\"Submitted by Paula\\\")]\" } ], \"postTestPath\": [ { \"selector\": \"//*[@text=\\\"Back\\\"]\" } ] } } } ``` Set the environment variable APDEX_TEST_SETTINGS with the path of your settings file (apdex-settings.json). For example, you can use the following command but make sure to replace the path with your actual settings file location: export APDEX_TEST_SETTINGS=/Users/pepe/Documents/apdex-settings.json Ensure the apdex-settings.json file has been updated with the correct instance url, login credentials and assertion texts (which correspond to the data in your cht instance) for page navigation, forms and other app interactions. Under the skip section of the settings file, set true for the tests you want to skip and false for those you want to execute. Update the fields for platformVersion and deviceName to match the value for your device. Find the android version (platformVersion) by running adb shell getprop | grep ro.build.version.release. Find the device name (deviceName) by running adb shell getprop | grep ro.product.model. Ensure all dependencies have been properly installed - run npm ci from the root directory. Run npm run apdex-test from the root directory to execute the selected tests. Settings file The settings file enables the navigation and interaction between pages, forms, and components by providing the required selectors, commands and assertion texts in the appropriate fields to be used during test execution.\nProperty Type Description Mandatory iterations Number Times to run the test cases Yes instanceURL String Instance url Yes hasPrivacyPolicy Boolean Whether it has privacy policies to accept Yes capabilities Object[] Configures Appium to use your device for testing Yes capabilities.platformVersion String Android version. E.g. “13”. Find the android version by running adb shell getprop grep ro.build.version.release Yes capabilities.deviceName String Device name. E.g. “Neon Ray Ultra S”. Find the device name by running adb shell getprop grep ro.product.model Yes capabilities.appPath String Path to CHT Android APK. E.g. “/Users/john/Downloads/cht-android-v1.4.0-unbranded-armeabi-v7a-release.apk” Yes capabilities.noReset Boolean Default false. When set false, it deletes the app cache and storage data. If set to true, the app will start again in the last page it was before, review your configuration to take that start point. No skip.login Boolean Default false. Skip login, and it’s expected that the user has already login previous running the automation tests. No skip.loadContactList Boolean Default false. Skip test for loading the contact list. No skip.loadChwArea Boolean Default false. Skip test for loading the CHT Area. No skip.loadHousehold Boolean Default false. Skip test for loading a household. No skip.loadPatient Boolean Default false. Skip test for loading a patient. No skip.searchContact Boolean Default false. Skip test for searching patient. No skip.loadTaskList Boolean Default false. Skip test for loading the task list. No skip.submitTask Boolean Default false. Skip test for submitting a task. No skip.loadTargets Boolean Default false. Skip test for loading the targets page. No skip.loadReportList Boolean Default false. Skip test for loading the report list. No skip.searchReport Boolean Default false. Skip test for searching a report. No skip.createPatient Boolean Default false. Skip test for creating a patient. No skip.submitPatientReport Boolean Default false. Skip test for submiting a report for a patient. No users Object[] User to login and use for testing Yes users.type String Use: “offline” or “online” Yes users.role String Use: “chw” Yes users.username String Username Yes users.password String Password Yes commonElements Object Overrides selectors of system elements No commonElements.fab String XPath selector to element No commonElements.fabListTitle String XPath selector to element No commonElements.formSubmit String Form’s submit button label No commonElements.formNext String Form’s next button label No commonElements.relaunchAppAssert String XPath selector to element No commonElements.searchIcon String XPath selector to element No pages Object Object containing the definition of the pages that the automation tests use. See Pages section below for more details. Yes pages.contactList Object Definition for Contact List page. See Pages section below for more details. Yes pages.chwArea Object Definition for Contact CHW Area page. See Pages section below for more details. Yes pages.household Object Definition for Contact Household page. See Pages section below for more details. Yes pages.patient Object Definition for Contact Patient page. See Pages section below for more details. Yes pages.messageList Object Definition for Message List page. See Pages section below for more details. Yes pages.reportList Object Definition for Report List page. See Pages section below for more details. Yes pages.taskList Object Definition for Task List page. See Pages section below for more details. Yes pages.targets Object Definition for Targets page. See Pages section below for more details. Yes forms Object Definition for app forms or contact forms that the automation tests use. See Forms section below for more details. Yes forms.patientReport Object Definition for an app form that is submitted on the Patient page. See Forms section below for more details. Yes forms.patientContact Object Definition for a contact form that is used to create patients. Submitted from the Household page. See Forms section below for more details. Yes","asserts#Asserts":"Elements to assert that are displayed in the screen.\nProperty Type Description Mandatory selector String XPath selector to element and clicks on it. Yes scrollDown Number Times to scroll down to reach to the element specified in the “selector”. No scrollUp Number Times to scroll up to reach to the element specified in the “selector”. No","fields#Fields":"Object containing the information to fill up fields.\nProperty Type Description Mandatory selector String XPath selector to element and clicks on it. Use it to select radio buttons or checkboxes; to activate a input text to open a keyboard; or to open a dropdown. Yes keycodes Number[] Array of keycodes. Use it when you need to type in the phone’s keyboard, find the keycodes here: https://developer.android.com/reference/android/view/KeyEvent No dropdownOption String XPath selector to a dropdown option and clicks on it. No value String or Number Use this to set the value directly in the input instead of using the keyboard. Like when using element.setValue(). No scrollDown Number Times to scroll down to reach to the element specified in the “selector”. No scrollUp Number Times to scroll up to reach to the element specified in the “selector”. No id String When having too many fields, use the id to label your fields and help you understand better the settings file. No","forms#Forms":"Object containing the definition of forms to load, fill fields and asserts outcomes.\nProperty Type Description Mandatory navigation Object[] Click path to navigate to that page. See Navigation section below for more details. Yes useFAB Boolean Whether to click on the floating action button to open the form before proceeding with the tests. Yes pages.asserts Object[] Elements to assert once it has finished navigating to the current page. Use to make sure all elements in the page have finished rendering. See Asserts section for more details. Yes pages.fields Object[] Fields to fill-up. See Fields section below for more details. Yes pages.scrollDown Number Times to scroll down to reach to the page buttons. No pages.scrollUp Number Times to scroll up in the page. No postSubmitAsserts Object[] Elements to assert once it has finished submitting the form. Use to make sure the form was submitted correctly. Same as Asserts, see Asserts section for more details. Yes postTestPath Object[] Click path to navigate after the test has finished. E.g. clicking on the back button to go back to the main list. It uses the same Navigation structure, see the Navigation section below for more details. No","navigation#Navigation":"Object containing the click path to navigate to a page.\nProperty Type Description Mandatory selector String XPath selector to element and clicks on it. Yes asserts Object[] Elements to assert once it has finished navigating. Use to make sure all elements in the page have finished rendering. See Asserts section for more details. Yes scrollDown Number Times to scroll down to reach to the element specified in the “selector”. No scrollUp Number Times to scroll up to reach to the element specified in the “selector”. No","pages#Pages":"Object containing the definition of the pages to load and assert during these automation tests.\nProperty Type Description Mandatory navigation Object[] Click path to navigate to that page. See Navigation section below for more details. Yes search Object Contains the configuration to filter data by using the search feature from the page No search.value String Search term No search.asserts Object[] Elements to assert once it has finished searching in the current page. Use to make sure all elements in the page have finished rendering. See Asserts section for more details. No search.postTestPath Object[] Click path to navigate after the test has finished searching and the asserts has finished. No postTestPath Object[] Click path to navigate after the test has finished. E.g. clicking on the back button to go back to the main list. It uses the same Navigation structure, see the Navigation section below for more details. No relaunchApp Boolean Set true, to close and open the app before navigating to this page. This can make tests slower as the app needs to load the assets and data again. No","prerequisites#Prerequisites":"","settings-file#Settings file":"","steps-running-the-tests#Steps (running the tests)":"","tips#Tips":"Take time to understand the forms you are testing:\nAre fields appearing dynamically? Are there field’s labels being updated automatically and removing the previous selection? Assert for elements in the screen before interacting with them, to ensure they are ready.\nTest how many scrolls you need by plugging the phone in the computer and run these adb commands:\nScroll down: adb shell input swipe 500 1000 300 300 Scroll up: adb shell input swipe 300 300 500 1000 For example, if you need to run the scroll down command 3 times, then you add 3 as the value for scrollDown like this: \"scrollDown\": 3, In some cases, it’s necessary to unfocus a selected element, trigger a click in a label. For example:\n{ \"id\": \"age_field_label\", \"selector\": \"//*[contains(@text, \\\"What is your age\\\")]\" }, XPATH selectors Avoid XPATH selector with special characters like single quote, asterisks. Find an element containing a text anywhere on the screen: \"//*[text()[contains(.,\\\"Eric Patt\\\")]\" Use Appium Inspector to help you find the XPath selectors. Sometimes it produces very long selectors but you can find a way to make them shorter. If it fails to start after setting up with capabilities, try running appium server with the appium command in the terminal before starting the Appium Inspector."},"title":"Apdex Automated Tests"},"/community/contributing/code/core/automated-tests/":{"data":{"":"","backend-integration-tests#Backend integration tests":"Backend integration tests are located in tests/integration.\nflowchart LR subgraph cht-e2e [Docker: cht-e2e] api couchdb-1.local[(couchdb-1)] couchdb-2.local[(couchdb-2)] couchdb-3.local[(couchdb-3)] haproxy nginx sentinel nginx --\u003e api sentinel --\u003e api api --\u003e haproxy haproxy --\u003e couchdb-1.local \u0026 couchdb-2.local \u0026 couchdb-3.local end integration-tests{Integration Tests} integration-tests \u003c--Pouch/HTTPS--\u003e cht-e2e","contributing-section#Contributing Section":"","debugging-e2e-tests#Debugging E2E tests":"End to end (e2e) tests can be really difficult to debug - sometimes they fail seemingly at random, and sometimes they only fail on certain environments (eg: ci but not locally). This can make reproducing and reliably fixing the issue challenging, so here are some tips to help!","description#Description":"Small tests of specific behavior. Each unit test is only intended to validate an isolated piece (unit) of functionality separated from the rest of the system. Any dependencies are often mocked. These are typically the easiest to write and are a great starting point for new contributors.\nWrite unit tests for:\nTesting individual functions or methods Verifying component behavior Checking edge cases","description-1#Description":"Tests to exercise how multiple components interact with each other. With a dynamic language like JavaScript these are especially important to verify expectations of interface points. These may mock some parts, but often use the “real” components since the point is to exercise those components together. As a result, these tests likely involve more setup, potentially involving data scenarios.\nWrite integration tests for:\nTesting interactions between components Verifying API endpoints Checking database operations","description-2#Description":"Tests that simulate real user experiences to validate the complete system. You can think of e2e test as the user main workflows when using the system. E2E tests verify the entire application works as expected from a user’s perspective.\nWrite E2E tests for:\nTesting complete user workflows Verifying critical paths Checking cross-browser compatibility","e2e-tests#E2E Tests":"","expectations#Expectations":"High coverage of functionality. If measured in branch coverage percentage, aim for 100%. This is the place to guarantee confidence in the system. If a higher-level test spots and error and there’s no lower-level test failing, you should evaluate if a lower-level test should be written.\nExecution Speed Complexity Fragility Extremely fast Extremely low Extremely stable","expectations-1#Expectations":"Dramatically fewer than unit tests. The goal is not to verify all branches; it is to gain confidence in interface points.\nExecution Speed Complexity Fragility Fast execution, but slower startup when working with a DB Mid-to-high. Things can get complex fast when combining parts! Mostly stable. Fragility risks tend to come from DB setup.","expectations-2#Expectations":"E2e tests give the most confidence to decide if the feature is working, but must only check the parts of code that the lower-level tests can’t cover. The testing levels should be pushed as far down as possible.\nExecution Speed Complexity Fragility Slow. So make sure to check existent tests and maybe just add extra assertions or minor changes instead of directly adding a specific e2e test for your new change. Also, make sure your code is performant. Low for the test itself (click tab, enter text into form, click submit, check text on screen. Extremely high for the setup. Painful fragility with high risk of race conditions and high maintenance burden. Ensure your code is clean, organized, and utilizes effective selectors.","frontend-integration-tests#Frontend integration tests":"Frontend integration tests (or web component tests) are designed to validate form behavior (including page layout) without needing to run the whole CHT. The web component isolates the enketo form functionality from the CHT webapp. This only covers forms and not other parts of the webapp. It does not trace behavior though the whole system and the database is never involved. Instead, the whole idea of the web component is to abstract the UI functionality away from the underlying backend complexity.\nFrontend integration tests are located in tests/integration/cht-form.","getting-started#Getting Started":"Set up your development environment Run existing tests to familiarize yourself Join the CHT community channels for support Start with small, manageable changes","how-to-write-automated-e2e-tests#How to write automated e2e tests":"Read the style guide for automated tests for guidelines on how to create new automated test cases for CHT-Core.","implementation#Implementation":"In cht-core unit tests are located in the tests directories of each module/service (For example, in webapp/tests you can find unit test for the webapp).","implementation-1#Implementation":"Backend integration testing means testing through the entire stack of the application connected to other applications within the system. In the image below, this involves testing each application (box) and its interaction with other applications within the system. The tests are isolated from the webapp with necessary shortcuts to make testing more straightforward and faster. No part of the system is mocked.","implementation-2#Implementation":"Our end-to-end tests are designed to test the entire system as a whole. They interact with the webapp as a user would, using WebdriverIO to control a headless browser session. They are not isolated from the rest of the system, and they do not use mocking.\nEnd-to-end tests are located in tests/e2e.","integration-tests#Integration Tests":"","intellij-based#IntelliJ Based":"In a terminal, run npm run build-dev-watch In Intellij, open the package.json file Scroll to the scripts section and click the ▶ button next to wdio-local Select Debug 'wdio-local'","isolating-specific-tests#Isolating specific tests":"For all test types (unit, integration, and e2e), you can isolate specific tests using describe.only or it.only in your test files:\nExample (Unit Test):\n// In your unit test file (e.g., /webapp/tests/mocha/unit/translator.spec.js) describe('Bootstrap Translator', () =\u003e { it('Translate LOAD_ASSETS to English', () =\u003e { // This test will be skipped }); it('Translate to Spanish', () =\u003e { // This test will be skipped }); }); describe.only('Error cases', () =\u003e { it('Non-existant key', () =\u003e { // This test will run (part of describe.only) }); it('Non-existant locale falls back to English', () =\u003e { // This test will run (part of describe.only) }); }); describe('Translation Validation', () =\u003e { it.only('All translations provided', () =\u003e { // Only this individual test will run }); it('Validate translation keys', () =\u003e { // This test will be skipped }); }); Note: Remember to remove .only before committing your code, as it will prevent other tests from running.","known-failure-patterns#Known failure patterns":"Can’t click on an element because another element would get the click. This usually means a modal dialog was being shown. 90% of the time this is the update notification modal which means some settings change has been detected after the test started execution. Stale element. This means the DOM element has been removed after it was found on the page but before trying to do something with it. Generally try to find the element just before it needs it to reduce the chance of this happening","other-logs-and-screenshots#Other logs and screenshots":"GitHub actions will artifact all files in tests/logs. This is the directory any logs, results, images, etc… should save to if you want to review them if a build fails.","read-the-logs#Read the logs":"Read the failure carefully - it often has really good info but sometimes it’s just hard to find. Most importantly it tells you exactly the line in the test that failed and you can look that up in the source to see what it was trying to do. The error message itself is also really useful. Also sometimes one error causes the next, so always start with the first test failure before looking at the others.","run-the-e2e-tests-without-re-building-docker-images#Run the e2e tests without re-building docker images":"After the tests are executed the first time using the command npm run wdio-local, the docker images are built in your local environment using the checkout branch name. If it is needed to run the tests repeatedly and there is a certainty that the cht-core code didn’t change, you can use the command npm run ci-webdriver-default. This command will execute the e2e tests as they are run with the wdio-local command but without re-building the images. This command uses the images that were built previously, which makes the process faster.","running-backend-integration-tests-locally#Running Backend Integration Tests Locally":"Run the full integration test suites locally with:\n# Example: Run all backend integration tests npm run integration-all-local To discover all available integration test commands, type npm run integration- and press Tab to see autocomplete options. This will show all available integration test commands:\nintegration-all-k3d-local integration-cht-form integration-all-local integration-sentinel-k3d-local integration-api integration-sentinel-local","running-e2e-tests-locally#Running E2E Tests Locally":"Run the full E2E test suites locally with:\n# Run default E2E tests npm run wdio-local # Run mobile E2E tests npm run wdio-default-mobile-local # Run E2E tests without rebuilding Docker images (faster for repeated runs) npm run ci-webdriver-default","running-frontend-integration-tests-locally#Running Frontend Integration Tests Locally":"To run them locally you need to build a cht-form Web Component with:\nnpm run build-cht-form And after building you can run the tests with:\nnpm run integration-cht-form","running-individual-tests-within-a-spec#Running individual tests within a spec":"To run only specific test suites or individual tests within a module, you can use describe.only or it.only in your test files. See the Isolating specific tests section for examples.","running-individual-tests-within-a-spec-1#Running individual tests within a spec":"To run only specific integration tests within a spec file, you can use describe.only or it.only in your test files. See the Isolating specific tests section for examples.","running-individual-tests-within-a-spec-2#Running individual tests within a spec":"To run only specific E2E tests within a spec file, you can use describe.only or it.only in your test files. See the Isolating specific tests section for examples.\nflowchart LR subgraph cht-e2e [Docker: cht-e2e] api couchdb-1.local[(couchdb-1)] couchdb-2.local[(couchdb-2)] couchdb-3.local[(couchdb-3)] haproxy nginx sentinel nginx --\u003e api sentinel --\u003e api api --\u003e haproxy haproxy --\u003e couchdb-1.local \u0026 couchdb-2.local \u0026 couchdb-3.local end subgraph browser webapp end e2e-tests{E2E Tests} browser \u003c--HTTPS--\u003e cht-e2e e2e-tests \u003c--wdio--\u003e browser e2e-tests o--Pouch/HTTPS--o cht-e2e","running-one-module-isolated#Running one module isolated":"To run unit tests for a specific module/service instead of the entire suite:\n# Example: Run unit tests for admin module npm run unit-admin To discover all available unit test commands, type npm run unit and press Tab to see autocomplete options. This will show all available unit test commands:\nunit unit-couchdb unit-sentinel unit-admin unit-haproxy unit-shared-lib unit-api unit-haproxy-healthcheck unit-webapp unit-cht-deploy unit-nginx unit-webapp-continuous","running-one-spec-isolated#Running one spec isolated":"To run a specific integration test spec instead of the entire test suite:\n# Run only contact-edit tests npx mocha --config tests/integration/.mocharc-base.js tests/integration/contacts/contact-edit.spec.js","running-one-spec-isolated-1#Running one spec isolated":"To run a specific E2E test spec instead of the entire test suite:\n# Example: Run only the tests inside the pregnancy spec npm run wdio-local -- --spec=pregnancy.wdio-spec.js To discover all available E2E test specs, browse the tests/e2e directory structure:\ntests/e2e/ ├── default/ | └── enketo/ │ ├── pregnancy.wdio-spec.js │ ├── repeat.wdio-spec.js │ └── ... │ └── ... ├── mobile/ │ └── contacts/ │ ├── delete.wdio-spec.js │ └── ... └── ... You can specify any .wdio-spec.js file from these directories in the --spec parameter.","running-one-suite-isolated#Running one suite isolated":"To run a specific E2E test suite:\n# Run all suites (default behavior) npm run wdio-local -- --suite=all # Example: Run tests by suite name npm run wdio-local -- --suite=lowLevel # Run multiple suites npm run wdio-local -- --suite=core,workflows To discover all available suite names, check the WebdriverIO configuration files in the corresponding tests/e2e directory. For example tests/e2e/default/suites.js","running-the-upgrade-e2e-test-locally#Running the upgrade e2e test locally":"To run the upgrade e2e tests in your local environment, follow these steps:\nMake sure your branch has been published, and it’s available in the market: A way to do this is by pushing the branch, let the GitHubActions to run, if all the other e2e are okay, then it will publish the branch. Check that your branch name is available here. Make sure to stop all existing containers Set these environment variables: export MARKET_URL_READ=https://staging.dev.medicmobile.org. export STAGING_SERVER=_couch/builds_4. export BRANCH=. export BASE_VERSION=(it can be used latest as the value). export TAG=(Optional, For example: 4.8.1). Run the upgrade e2e tests: npm run upgrade-wdio If you experience errors such as:\nError in hook: StatusCodeError: 404 - \"{\\\"error\\\":\\\"not_found\\\",\\\"reason\\\":\\\"Document is missing attachment\\\"}\\n\" Try the following:\nIt’s probably because it can’t find the latest released version of CHT, double check that MARKET_URL_READ and STAGING_SERVER environment variables are set. If you experience errors such as:\nIf you are seeing this locally, it can mean that your internet is too slow to download all images in the allotted time. Either run the test multiple times until you load all images, download images manually or increase this timeout. Try the following:\nManually downloaded the images. To download images manually, you can use either docker compose or docker: With docker, you’d do a docker pull for every image you want to download. With docker compose, you’d save all docker-compose files in a folder, do a docker compose pull, and point to your files as a source. Read more on docker compose pull If you experience errors such as:\nA user session timing out while running the test. This could be because there are some issues with data or there could be a large number of images and volumes that caused docker to crash. To resolve this, it’s recommended to clean all docker data for a fresh start. Note that these commands will delete everything. The e2e tests might take a little longer to run because all the images need to be downloaded again.\nTry running the following commands:\ndocker system prune docker image prune -a docker volume prune -a docker network prune Repeat the above steps until all data has been deleted.","running-unit-tests-locally#Running Unit Tests Locally":"Run the full unit test suite locally with:\nnpm run unit","set-the-debug-flag#Set the \u003ccode\u003eDEBUG\u003c/code\u003e flag":"Setting the DEBUG environment variable (For example: DEBUG=true npm run wdio-local) when running the tests locally will do the following:\nRun the browser without the headless flag (details in the wdio.conf file), so the browser will be displayed when running the tests Increase the test timeout from 2 minutes to 10 minutes Prevent Mocha from automatically retrying tests that fail (by default a failing test is retried 5 times, details in the wdio.conffile) Prevent the cht-e2e Docker containers from being torn down after the test finishes","support-and-community-resources#Support and Community Resources":"The CHT Community is here to help you succeed with testing:\nQuestions? Ask in the Community Forum Need help debugging? Check the Troubleshooting Guide Found a bug? Open an issue Want to contribute to testing? See the Contribution Guide Remember, every contributor was once new to the project. Don’t hesitate to ask for help!","test-architecture#Test Architecture":"CHT Core GitHub actions spin up an ubuntu-22.04 machine. They install software and then launch couchdb and horticulturalist in a docker container. This is needed to run the applications in the specific supported node versions, while allowing the test code to run in versions of node it supports. This creates a paradigm to keep in mind when writing tests. Tests run on the ubuntu machine. Any test code that starts a server or runs an executable is running outside of the horti container. The ports are exposed for all the services and horti has access to the cht-core root via a volume. Horti can also talk to the host by getting the gateway of the docker network.","test-types-and-expectations#Test types and expectations":"CHT Core contains three types of tests, each serving a specific purpose (ordered by levels low to high):\nUnit tests Integration tests Backend integration tests Frontend integration tests End-to-end tests Note: All the commands to execute the different tests can be found in package.json file.","the-goal-of-automated-testing#The goal of automated testing":"Contributors from all backgrounds are welcome to make changes in the codebase. The CHT testing framework is designed to help you contribute with confidence, regardless of your experience level. This guide will help you understand the CHT testing approach and how you can contribute effectively.\nA key part of this confidence comes from knowing that new changes have not impacted other functionality in the system and everything continues to work as expected. Automation of testing should speed up development in two significant areas:\nWhile making changes, new automated tests can be run regularly to ensure (without lots of manual effort) that the changes continue to work as expected Avoid large amounts of time spent manually performing regression testing of the whole application to ensure existing functionality keeps working","unit-tests#Unit Tests":"","view-the-ci-report#View the CI report":"There are logs and screenshots stored in the allure reports when a job failed on the CI. To access to those logs follow these steps:\nDownload the CI run artifact zip file located in the failed build’s Archive Results section. Extract the .zip file. From your cht-core directory, run npx allure open /allure-report/. Being the location where the zip file was extracted.","watching-the-test-run#Watching the test run":"Running the tests locally (For example, with npm run wdio-local) will allow you to watch it run but if you interact with the page the test will fail in unexpected ways. Furthermore the browser will close after a short timeout so you won’t be able to inspect the console or DOM. To do this, force quit the process running the test before it tears down and you will be able to navigate around the app, use Chrome dev tools, and inspect the docs in the database to (hopefully) work out what’s going wrong.","ways-to-get-involved#Ways to Get Involved":"You can contribute to the CHT testing in various ways:\nWriting new tests Improving existing tests Enhancing test documentation Reporting test failures Suggesting test scenarios"},"title":"Automated Tests"},"/community/contributing/code/core/build-commands/":{"data":{"":"","cht-core-build-commands#CHT Core build commands":"These commands are defined in the package.json and can be executed with npm run from the cht-core repository directory.","ci-commands#CI commands":"For Continuous Integration (robots) to run to build and test cht-core.\nCommand Description build Compiles, minifies, bundles the code, and builds the DDocs for publishing. ci-compile Builds, does static analysis, and runs unit tests for all applications. ci-e2e-integration Executes the integration e2e test suite. ci-webdriver-default Executes the default e2e test suite. ci-webdriver-default-mobile Executes the mobile e2e test suite. ci-webdriver-standard Executes the standard e2e test suite. publish-for-testing Builds docker images and publishes to the staging server for use in e2e test builds. test-config-default Executes the default config test suite. test-config-standard Executes the standard config test suite. upgrade-wdio Executes the upgrade e2e test suite.","development-build-commands#Development build commands":"For developers (humans) to execute to build cht-core.\nCommand Description build-ddocs Compiles all the DDocs and outputs them into /api/build/ddocs ready for deployment. build-dev Updates dependencies and builds all the applications. build-dev-watch Same as build-dev, but keeps watching for any code changes and automatically deploys on change. build-documentation Executes jsdoc on all the applications. build-webapp-dev Compiles the /webapp application. build-cht-form Compiles the cht-form web component. copy-api-resources Copies the static api files into the api build directory ready for deployment. dev-api Sets up and runs the api server, and automatically deploys source changes. dev-sentinel Sets up and runs the sentinel server, and automatically deploys source changes. local-images Builds the docker images and updates the docker compose files. update-service-worker Updates the service worker file for deployment.","development-test-commands#Development test commands":"For developers to execute to test cht-core.\nCommand Description integration-all-local Compiles the app and executes the integration test suite except for the sentinel tests. integration-api Compiles the app and executes the api integration test suite. integration-sentinel-local Compiles the app and executes the sentinel integration test suite. lint Performs static analysis checks on the codebase. test Same as running lint, unit, and integration-api. unit Executes unit test suites for all applications. unit-admin Executes the unit test suite on admin. unit-api Executes the unit test suite on api. unit-sentinel Executes the unit test suite on sentinel. unit-shared-lib Executes the unit test suite on all shared-lib modules. unit-webapp Executes the unit test suite on webapp. unit-webapp-continuous Executes the unit test suite on webapp, and re-runs on code change. wdio-default-mobile-local Compiles the app and executes the mobile e2e test suite. wdio-local Compiles the app and executes the default e2e test suite. wdio-standard-local Compiles the app and executes the standard e2e test suite. wdio-cht-form Executes the default e2e test suite on code change."},"title":"Build Commands"},"/community/contributing/code/core/collect-forms-update/":{"data":{"":"To do over the air Medic Collect form updates via HTTP rather than sending APKs which have a long manual install process, follow the steps below:","step-1#Step 1":"Have your xls forms ready in the folder.\nThey should use underscore as name separators. e.g form_name.xlsx They should have form_id and name properties in the settings Name property","step-2#Step 2":"Upload the forms to the instance using cht-conf Using the upload-collect-forms action as shown below.\ncht --instance=user:pass@instancename.app.medicmobile.org upload-collect-forms","step-3#Step 3":"Go to the Collect App. Delete All forms then go to Get Blank Form and select all the forms you need.","troubleshooting#Troubleshooting":"When you go to Get Blank Forms and instead of getting a list of the forms available, you get a pop-up error which has a portion of this message instead\n...OpenRosa Version 1.0 standard: Forms list entry 1 is missing one or more tags: formId, name or downloadUrl This means you probably uploaded a XLS file without a name or form_id property. To find out which form is missing that, use this command:\ncurl -vvvv -H \"x-openrosa-version: 1\" http://user:pass@host:port/api/v1/forms Should bring a list like this one:\nXform List\nGo through the list and see which form has a missing or property. Add it and reupload the forms using cht-conf again."},"title":"Remote Collect Update"},"/community/contributing/code/core/dev-environment/":{"data":{"":"This guide assumes you are a CHT Core developer wanting to run the CHT Core from source code to make commits to the public GitHub repository. To set up your environment for developing apps, see the app guide.\nTo deploy the CHT in production, see either hosting section.","adding-and-accessing-data#Adding and accessing data":"When you first start your CHT instance, it has no data in it. If you would like to populate it with some sample data, you can check out the Test Data Generator (TDG) which has a “Quick Start” option to easily add data. After you have installed TDG, you can quickly add data with this call:\nCOUCH_URL=http://medic:password@localhost:5984 tdg ./sample-designs/easy-mode.js When you log into the CHT web front end in a browser at http://localhost:5988/, you should now see newly added contacts and reports.\nIf you would like to explore the raw data, be sure to check out Fauxton. This is a pre-installed NoSQL web client that allows you to browse all raw documents and indexes in CouchDB. It is accessed at /_utils, so if you’ve just followed this guide you can go to http://localhost:5984/_utils to use Fauxton. If you are prompted to log in, it is Username medic and Password password.","cht-core-cloning-and-setup#CHT Core Cloning and Setup":"Clone the main CHT Core repo from GitHub and change directories into it:\ngit clone https://github.com/medic/cht-core ~/cht-core cd ~/cht-core Install dependencies and perform other setup tasks via an npm command. Note this command may take many minutes. Be patient!\nnpm ci To finalise setting up any remaining dependencies build the project by running:\nnpm run build-dev Every time you run any npm or node commands, it will expect COUCH_NODE_NAME and COUCH_URL environment variables to be set:\necho \"export COUCH_NODE_NAME=nonode@nohost\"\u003e\u003e ~/.$(basename $SHELL)rc echo \"export COUCH_URL=http://medic:password@localhost:5984/medic\"\u003e\u003e ~/.$(basename $SHELL)rc . ~/.$(basename $SHELL)rc To ensure these to exports and sourcing your rc file worked, echo the values back out. You should see nonode@nohost and http://medic:password@localhost:5984/medic:\necho $COUCH_NODE_NAME \u0026\u0026 echo $COUCH_URL","couchdb#CouchDB":"Create a docker-compose.yml and couchdb-override.yml files under the ~/cht-docker folder with this code:\nmkdir -p ~/cht-docker curl -s -o ~/cht-docker/docker-compose.yml https://staging.dev.medicmobile.org/_couch/builds_4/medic:medic:master/docker-compose/cht-couchdb.yml cat \u003e ~/cht-docker/couchdb-override.yml \u003c\u003c EOF services: couchdb: ports: - \"5984:5984\" - \"5986:5986\" EOF Now you can start CouchDB. The login for your CHT instance will be medic and the password will be password:\ncd ~/cht-docker COUCHDB_USER=medic COUCHDB_PASSWORD=password docker compose -f docker-compose.yml -f couchdb-override.yml up -d","developing#Developing":"Now you have everything installed and can begin development! You’ll need three separate terminals when doing development.\nIn the first terminal we’ll compile and deploy the web application by running:\ncd ~/cht-core \u0026\u0026 npm run build-dev-watch Be very patient until you see:\n“Waiting…”\nIn the second terminal we’ll start the API nodejs service by running:\ncd ~/cht-core \u0026\u0026 npm run dev-api Finally, in a 3rd terminal we’ll start the Sentinel nodejs service by running:\ncd ~/cht-core \u0026\u0026 npm run dev-sentinel That’s it! Now when you edit code in your IDE, it will automatically reload. You can see the CHT running locally here: http://localhost:5988/\nWhen you’re done with development you can ctrl + c in the three terminals and stop the CouchDB container with docker stop medic-couchdb. When you want to resume development later, run docker start medic-couchdb and re-run the three terminal commands.","install-nodejs-npm-and-docker#Install NodeJS, npm, and Docker":"First, update your current packages and install some supporting tools:\n(Node 22 is the environment used to run the CHT server in production, so this is the recommended version of Node to use for development.)\nLinux (Ubuntu)macOSWindows (WSL2) sudo apt update \u0026\u0026 sudo apt -y dist-upgrade sudo apt -y install xsltproc curl uidmap jq python3 git make g++ # Use NVM to install NodeJS: export nvm_version=`curl -s https://api.github.com/repos/nvm-sh/nvm/releases/latest | jq -r .name` curl -o- https://raw.githubusercontent.com/nvm-sh/nvm/$nvm_version/install.sh | $SHELL . ~/.$(basename $SHELL)rc nvm install 22 # Uses Homebrew: https://brew.sh/ brew update brew install curl jq pyenv git make node@22 gcc # Python no longer included by default in macOS \u003e12.3 pyenv install 2.7.18 pyenv global 2.7.18 echo \"eval \\\"\\$(pyenv init --path)\\\"\" \u003e\u003e ~/.$(basename $SHELL)rc . ~/.$(basename $SHELL)rc sudo apt update \u0026\u0026 sudo apt -y dist-upgrade sudo apt -y install xsltproc curl uidmap jq python2 git make g++ # Use NVM to install NodeJS: export nvm_version=`curl -s https://api.github.com/repos/nvm-sh/nvm/releases/latest | jq -r .name` curl -o- https://raw.githubusercontent.com/nvm-sh/nvm/$nvm_version/install.sh | $SHELL . ~/.$(basename $SHELL)rc nvm install 22 Now let’s ensure NodeJS 22 and npm 10 were installed. This should output version 22.x.x for NodeJS and 10.x.x for npm:\nnode -v \u0026\u0026 npm -v Install Docker:\nLinux (Ubuntu)macOSWindows (WSL2) Download and install Docker Desktop.\nAlternatively, on Linux you can use the following commands to install Docker Engine. (This will reduce the layers of technical abstraction for running containers, but will not include a GUI application for managing your Docker resources.)\ncurl -fsSL get.docker.com -o get-docker.sh \u0026\u0026 sh get-docker.sh # OPTIONAL: Allow user to run Docker without sudo dockerd-rootless-setuptool.sh install echo \"export PATH=/usr/bin:$PATH\" \u003e\u003e ~/.$(basename $SHELL)rc echo \"export DOCKER_HOST=unix:///run/user/1000/docker.sock\" \u003e\u003e ~/.$(basename $SHELL)rc . ~/.$(basename $SHELL)rc Restart your entire machine to finish initializing Docker.\nDownload and install Docker Desktop or Colima.\nRestart your entire machine to finish initializing Docker.\nDownload and install Docker Desktop.\nRestart your entire machine to finish initializing Docker.\nAfter you have restarted, ensure that “Enable integration with my default WSL distro” is checked in Docker Desktop along with intgration to other distros:\nAfter restarting, verify Docker is running as expected. Run the simple hello-world Docker container. This should output “Hello from Docker!” as well as some other intro text:\ndocker run hello-world","nginx-local-ip#nginx-local-ip":"nginx-local-ip is a local proxy that keeps all traffic local, and runs without latency or throttling. If sharing your local CHT instance is not required, it is the recommended method to add a valid SSL certificate (rather than ngrok or similar).\nClone the repo: git clone https://github.com/medic/nginx-local-ip.git cd into the new directory: cd nginx-local-ip Assuming your IP is 192.168.0.3, start nginx-local-ip to connect to: The CHT API running via npm run or horti, execute APP_URL=http://192.168.0.3:5988 docker compose up and then access it at https://192-168-0-3.local-ip.medicmobile.org/. The CHT API running via docker, the ports are remapped, so execute HTTP=8080 HTTPS=8443 APP_URL=https://192.168.0.3 docker compose up and then access it at https://192-168-0-3.local-ip.medicmobile.org:8443/. The HTTP/HTTPS ports (80/443) need to accept traffic from the IP address of your host machine and your local webapp port (e.g. 5988) needs to accept traffic from the IP address of the nginx-local-ip container (on the Docker network). If you are using the UFW firewall (in a Linux environment) you can allow traffic on these ports with the following commands: (Since local IP addresses can change over time, ranges are used in these rules so that the firewall configuration does not have to be updated each time a new address is assigned.)\nsudo ufw allow proto tcp from 192.168.0.0/16 to any port 80,443 sudo ufw allow proto tcp from 172.16.0.0/16 to any port 5988","ngrok#ngrok":"Create an ngrok account, download and install the binary, then link your computer to your ngrok account. Start ngrok to connect to: The CHT API running via npm run or horti, execute ./ngrok http 5988 The CHT API running via docker, execute ./ngrok http 443 Access the app using the https address shown (e.g. https://YOUR-NGROK-NAME.ngrok.io, replacing YOUR-NGROK-NAME with what you signed up with). Note: The service worker cache preload sometimes fails due to connection throttling (thereby causing an ngrok failure at startup).","other-path-troubleshooting#Other Path Troubleshooting":"If you weren’t able to follow the happy path above, here are some details about the developer install that may help you troubleshoot what went wrong.","pagekite#pagekite":"Create a pagekite account, download and install the python script. Start pagekite (be sure to replace YOUR-PAGEKIT-NAME with the URL you signed up for) to connect to: The CHT API running via npm run or horti, execute python pagekite.py 5988 YOUR-PAGEKIT-NAME.pagekite.me The CHT API running via docker, execute python pagekite.py 443 YOUR-PAGEKIT-NAME.pagekite.me Access the app using the https address shown (e.g. https://YOUR-PAGEKIT-NAME.pagekite.me).","prerequisites#Prerequisites":"If you had issues with following the above steps, check out these links for how to install the prerequisites on your specific platform:\nNode.js 22.x \u0026 npm 10.x.x - Both of which we recommend installing via nvm xsltproc python 2.7 Docker CouchDB - OS package instead of in Docker - you MUST use CouchDB 2.x for CHT \u003c 4.4! We still strongly recommend using Docker. [bzip2])(https://sourceware.org/bzip2/downloads.html) - if you’re on Ubuntu call: sudo apt install bzip2","remote-proxies#Remote Proxies":"ngrok and pagekite are remote proxies that route local traffic between your client and the CHT via a remote SSL terminator. While easy and handy, they introduce latency and are sometimes throttled. Always use nginx-local-ip when you need a TLS certificate and only use these when you need to share your dev instance.","required-environment-variables#Required environment variables":"Medic needs the following environment variables to be declared:\nCOUCH_URL: the full authenticated url to the medic DB. Locally this would be http://medic:password@localhost:5984/medic COUCH_NODE_NAME: the name of your CouchDB’s node. The Docker image default is nonode@nohost. Other installations may use couchdb@127.0.0.1. You can find out by querying CouchDB’s membership API (optional) COUCHDB_USER: the name of your CouchDB’s user. The Docker image default is medic (optional) COUCHDB_PASSWORD: the credentials of your CouchDB user. The Docker image default is password (optional) API_PORT: the port API will run on. If not defined, the port defaults to 5988 (optional) CHROME_BIN: only required if tests complain that they can’t find Chrome or if you want to run a specific version of the Chrome webdriver. How to permanently define environment variables depends on your OS and shell (e.g. for bash you can put them ~/.bashrc). You can temporarily define them with export:\nexport COUCH_NODE_NAME=nonode@nohost export COUCH_URL=http://medic:password@localhost:5984/medic","tests#Tests":"Refer to the testing doc in the GitHub repo.","the-happy-path-installation#The Happy Path Installation":"CHT Core development can be done on Linux, macOS, or Windows (using the Windows Subsystem for Linux (WSL2)). This CHT Core developer guide will have you install NodeJS, npm, and CouchDB (via Docker) on your local workstation.\nTip\nEnsure you have at least 8GB RAM, 50GB Free disk and 4 cores. However, more is for sure better here - you’ll see real speed improvements with more RAM and more cores.","ubuntu-1804#Ubuntu 18.04":"Ubuntu 18.04’s default apt repositories do not know about python2. This means when you go to install run the first apt install command above, you see an error:\nE: Unable to locate package python2 To fix this, change the apt install call to this:\nsudo apt -y install xsltproc curl uidmap jq python git make g++ As well, after you install docker, and go to run the rootless script dockerd-rootless-setuptool.sh, you might see this error:\n[ERROR] Failed to start docker.service. Run `journalctl -n 20 --no-pager --user --unit docker.service` to show the error log. The workaround, unfortunately, is to just start your CouchDB Docker container with sudo: sudo docker run....","windows-wsl2#Windows WSL2":"While this document covers the happy path to set up your environment, there’s a great forum post which covers challenges developers running Windows with WSL2 may face. Be sure to read up on it if you’re having WSL2 issue like bash: docker: command not found and others."},"title":"Dev Environment Setup"},"/community/contributing/code/core/feature-flags/":{"data":{"":"Some CHT Core features can be enabled for specific users only. This can be particularly helpful for features that require training. The updated or “new” version will generally be the system default, but users can be configured to see the “old” version. If you do nothing when you upgrade, users will automatically start seeing the new version.\nNote\nFeature flags are used primarily as a way to phase in updates. The old version should be considered deprecated and will be completely removed in a future release.","configuration#Configuration":"If the specific CHT Core feature supports feature flagging, users can be configured to see the “old” version by means of a permission. The permission can be added to existing Roles, or for more granular control and rolling out by cohorts, you can create a new Role with the one permission and add that Role to desired users. The permission will not be included in app_settings automatically so if you want it to be selectable from the Admin app user interface, you will need to add it to app_settings.","roll-out-scenarios#Roll-out Scenarios":"The table below illustrates some potential rollout scenarios and recommended Actions.\nScenario Actions [Default] All users see the “new” version once you upgrade None, just upgrade. All users see the “old” version once you upgrade. All users see the “new” version at the same time in the future. Add the permission to all Roles before you upgrade. When you are ready to transition everyone to the the new version, just remove the permission form all Roles. All users see the “old” version once you upgrade. Roll out the “new” version in cohorts over time. Create a new Role with the one permission and add that role to all users. When you are ready to transition a cohort of users, remove the Role from that cohort. Some cohorts see the “old” version/some see the “new” version once you upgrade. All cohorts seeing the “old” version start seeing the “new” version at the same time. Create a new Role with the one permission and add it to selected users. When you are ready to transition all cohorts to the “new” version, remove the Role from all users. Some cohorts see the “old” version/some see the “new” version once you upgrade. Roll out the “new” version to applicable cohorts over time. Create a new Role with the one permission and add it to selected users. When you are ready to transition a cohort of users, remove the Role from those users."},"title":"Feature Flags"},"/community/contributing/code/core/run-multiple-chrome-versions/":{"data":{"":"These steps are suitable for Mac. They were tested in a Mac Intel. They can be adapted to any Chrome version. Follow these steps on a Mac to run Chrome version 90 while having another Chrome app on a different version.\nDownload Chrome 90.0.4430.72 from slimjet Do not install the Google Chrome.app in your Application folder. Install it in your Desktop folder for example. Change the name of the app to Google Chrome 90.app and then move it to the Application folder, without overwriting your current Chrome Remove Chrome’s automatic updates by: Close all Chrome open instances. Open Google Chrome 90.app while not having Internet, so it doesn’t give an error after modifying the Info.plis. Right-click on Application/Google Chrome 90.app Click on Show package content Open the file Contents/Info.plist in your IDE Find the key KSUpdateURL Replace the string below: https://tools.google.com/service/update2 to https://tools.google.com/[DUMMYTEXT] Run Google Chrome 90.app as long as it’s the only one running"},"title":"Multiple Chrome Versions"},"/community/contributing/code/core/secure-sharing-of-developer-instance/":{"data":{"":"Caution\nBe extra careful with this process! The end result will be that your development instance will be accessible to the internet. If you have simple logins and passwords like “admin/test.223” because you thought it was just your local dev instance and it doesn’t matter, now it matters! Whenever you’re not using the SSH tunnel for testing, shut it down so there’s no more remote access.\nNever expose a development instance to the internet where you’ve replicated production data locally. Well, maybe not never, but with extreme care and intention.\nAlso not - if you only want to test with mobile devices that require a valid TLS certificate, do not use method. Instead, use nginx-local-ip","overview#Overview":"When using a local development environment, you may want to share your work with other collaborators. By using a publicly accessible web server, you can receive the secure https requests and forward them back to your CHT instance which doesn’t have https set up:\nPath data flows from mobile device -\u003e reverse proxy -\u003e router -\u003e developer\nOnce you have this web server set up, you may continue to use it whenever you want by simply reconnecting to it via the secure tunnel.","prerequisites#Prerequisites":"This guide assumes:\nYou have a local dev instance set up of cht-core You have the generic Medic app installed on your Android device. This version allows you to enter a custom CHT URL on first run. You have an Ubuntu \u003e18.04 server with a public IP and a DNS entry that you can SSH into and have sudo on You have Apache \u003e2.4.29 installed on the Ubuntu server and can add a new vhost to it, including an SSL cert. (nginx could be used instead as well, but not covered here) You have certbot installed from letsencrypt.org The steps in this guide can be done on any of the cheap server providers out there (Digital Ocean has a $5/mo server).","steps#Steps":"Create a DNS entry. Let’s assume it’s cht.domain.com. It should point to the IP of your Ubuntu server. If you do not already have a domain name with DNS services that you can use, you can sign up for a free service to do this like noip.com.\nOn your Ubuntu server, create a new apache vhost in /etc/apache2/sites-available/100-cht.domain.com.conf with the following contents:\nServerName cht.domain.com RewriteEngine on RewriteRule (.*) https://cht.domain.com%{REQUEST_URI} ServerName cht.domain.com SSLEngine On Header always set Strict-Transport-Security \"max-age=63072000; preload\" RewriteEngine on Include /etc/letsencrypt/options-ssl-apache.conf SSLCertificateFile /etc/ssl/certs/ssl-cert-snakeoil.pem SSLCertificateKeyFile /etc/ssl/private/ssl-cert-snakeoil.key ProxyPass / http://localhost:8081/ ProxyPassReverse / http://localhost:8081/ RequestHeader set X-Forwarded-Proto \"https\" Enable the new site: a2ensite 100-cht.domain.com\nRestart apache and ensure there’s no errors: apachectl restart\nCreate the TLS certificate: certbot -d cht.domain.com\nWhen prompted choose no redirect: “No redirect - Make no further changes to the webserver configuration.”\nRestart apache and ensure there’s no errors: apachectl restart\nIn a browser, test that you can connect to your server with no errors at https://cht.domain.com (you may get a 500 error, but you shouldn’t get any TLS errors)\nEnsure your cht-core local dev instance is running by going to http://localhost:5988/\nOn your local dev box, set up the SSH tunnel with: ssh -NT -R 8081:127.0.0.1:5988 cht.domain.com\nThis assumes your local username is the same as it is on cht.domain.com. This command will hang and you may exit when down with ctrl + c\nIn a browser, test again that you now see your local dev instance and it loads correctly at https://cht.domain.com\nIf needed, reset the Medic app on your phone so that it prompts which instance to use\nIn the app on your phone, choose “custom” for which instance to use and enter https://cht.domain.com. You should now see your local dev instance in the CHT Android device. Happy testing!","tunnel-command-breakdown#Tunnel command breakdown":"From the SSH command in step 10 above:\nExplanation of ports and IPs from SSH\n8081 - Remote port on cht.domain.com to listen to. This is the same port that apache redirects to in step 2 above. 127.0.0.1 - Host to send forwarded traffic to. In this case, your local machine. 5988 - Local port where traffic from step one will be sent. In this case, your instance of the CHT cht.domain.com - Public domain where you have an SSH account and we’ll attach port 8081 to from step 1."},"title":"Securely Sharing Your Development Environment"},"/community/contributing/code/core/style-guide-automated-e2e-tests/":{"data":{"":"There are three files that are the base of every new automated test case, the most important one is the spec file, which contains the actual test that will be executed.\nAutomated tests cover different CHT Configs, consider the following setups when writing a new test:\ndefault Config file: ../tests/e2e/default/wdio.conf.js Name convention for the spec file: ../tests/e2e/default/*/.wdio-spec.js Command to execute the tests that belong to this config: npm run wdio-local Important: Make sure the spec file follows the name convention, otherwise the file won’t be executed.","adding-identifiers#Adding identifiers":"In some cases, adding a unique identifier to an element may be necessary. This could be a piece of data related to the element, or a unique name (which can be done by adding a test- attribute to the app code).\nEx: attr.test-id=\"{{ msg.key }}\" Will add a test-id attribute with the data from the app.\nThen it can be consumed in the test by getting an element by css. EX: element(by.css(`#message-list li[test-id=\"${identifier}\"]`)),\nAdding a test identifier is a good option for cases where a CSS selector would otherwise be fragile such as selecting based on an assumed element structure or selecting on CSS classes intended for visual design that may change.","base-files-to-use#Base files to use":"Page-object file. (../tests/page-objects/../enketo/.wdio.page.js) We are leveraging the page object model for structure. When identifying elements they should be added to a page object and not within a test file. Add functions that perform actions to the page within the page object. Keep expects outside of page objects. The tests should be self-documenting.\nData file.\nCreate test data using the place factory, the user factory or the person factory files.\nUsing the “factories” will allow you to create hierarchies, contacts and patients that are associated with specific places and with their specific attributes and information. It can create offline or online users that can be used to login with different roles. Everything can be customised depending on the test requirements.\ne2e testing file. Use the correct name convention when working with the following configs:\ndefault: (../tests/e2e/default/*/.wdio-spec.js) This file should contain only the scenario setup and assertions of the test that is going to be executed. All the DOM queries, logging, contact creation and data assignments should be delegated to the Page Object file and the Data file. This will increase test readability and code reusability. For a better understanding follow these files as examples:\ndefault config: ../tests/e2e/default/enketo/pregnancy-visit.wdio-spec.js.","docker#@docker":"Tests that should run exclusively when running the suite over docker infrastructure. These tests will fail if run over k3d.\nNote\nWe decided to separate every functionality in files/folders because we want to make sure that we can reuse as much code as possible. If something new is implemented and might be used for another test, then isolate the code in a separate file, so it can be reused in future tests. If the new test is not associated to a specific configuration, locate the test inside the correct folder of the default config e2e/default/*.","file-structure-spec-files#File Structure (spec files)":"Test files should represent a feature within the application. Use describe to identify the feature and to group helper functions and test cases. Use it to detail individual test cases covering the feature’s functionality. It is important that the database is clean and settings are restored once the tests are complete; we re-try the tests if they fail, and we need to make sure that for every new try, the environment is as it was the first time. Additionally, each it block should be independent of the others, ensuring that any single test case can be rerun on its own and still work as expected.\nObserve how the following example defines a describe using the feature name Immunization Visit. It contains constant definitions, helper functions, the before and after hooks to prepare the environment, and two test cases that detail the expected results should add a new child under 2 years old and should submit an immunization visit.\nEx:\ndescribe('Immunization Visit', () =\u003e { const firstConstant = 'SampleName'; const secondConstant = 'SampleValue'; const firstHelperFunction = () =\u003e { .... } const secondHelperFunction = () =\u003e { .... } before(async () =\u003e { .... }); beforeEach(async () =\u003e { .... }); after(async () =\u003e { .... }); afterEach(async () =\u003e { .... }); it('should add a new child under 2 years old', () =\u003e { .... }); it('should submit an immunization visit', () =\u003e { .... }); ... });","name-convention-and-file-location#Name convention and file location":"Since every test is created by “selectors”, it makes sense to locate them into a folder that represents the page being tested and not the feature. Try to locate every test file in the correct folder. Every file name should use dash-case (-). Do not use snake-case (_) nor camelCase. Consider the following examples: Correct: pregnancy-visit.wdio-spec.js Incorrect: pregnancy_visit.wdio-spec.js pregnancyVisit.wdio-spec.js PregnancyVisit.wdio-spec.js Whenever possible avoid repeating the folder name in the file name. Consider the following examples where the file is located in the path e2e/default/enketo: Correct: pregnancy-visit.wdio-spec.js Incorrect: pregnancy-visit-enketo.wdio-spec.js pregnancy-visit-default.wdio-spec.js pregnancy-visit-enketo-default.wdio-spec.js","test-tags#Test tags":"You can tag mocha tests and update suites to only include or exclude certain tags (Mocha Wiki).\nExistent tags:","tips-to-write-test-cases#Tips to write test cases":""},"title":"Style Guide for Automated Tests"},"/community/contributing/code/core/update-dependencies/":{"data":{"":"Every minor release we update dependencies to get the latest fixes and improvements. We do this early in the release cycle so that we have some more time to find regressions and issues. This is done on all folders with a package-lock.json, including:\ncht-core /(root) admin webapp","problems#Problems":"See issue #9770 for a list of the known dependencies that cannot be upgraded further because their latest versions only support ES Modules. Don’t update bootstrap to 4+ as it has many breaking changes. One day we will either raise an issue to upgrade it or migrate off it, but that is outside the scope of this change. Don’t update bootstrap-daterangepicker. Don’t update the webapp version of jquery to 3.6.0+ as the select2 search input loses focus on click event, this is a known issue in their repository. Note that the webapp webpack config is aliasing the jquery package to make sure we only bundle one version of jquery. Currently enketo-core is targeting 3.6.3, but we cannot take that version because of this select2 issue. This select2 issue is actually resolved by upgrading to jquery 3.7+, but we cannot move to that version because it is not compatible with our current version of enketo-core (7.2.5). If you have trouble upgrading any other dependency and you think it’ll be challenging to fix it then raise a new issue with Dependencies tag, to upgrade just that dependency. Don’t hold up all the other upgrades you’ve made.","steps#Steps":"Checkout and pull the latest default branch - get the latest code Make a branch: git checkout -b \"-update-dependencies\" Take a look at the current list of dependencies related issues, where you can find the latest conversations and information. Then for each folder go through these steps.\nnpm ci - update your local node_modules to match expected npm outdated - report on any dependencies which aren’t at the latest npm install --save[-dev] package@version - install the latest version (be careful and read the release notes if the new version is a major change from the current) npm dedupe - remove duplicated dependencies npm audit fix - automatically fix any nested dependencies with vulnerabilities npm audit - get a report on any remaining vulnerabilities and manually scan it to see if there’s anything else you can do","troubleshooting#Troubleshooting":"Angular exception When upgrading Webapp’s Angular, you might get the following exception:\nRunning \"exec:build-webapp\" (exec) task ________________________________________ An unhandled exception occurred: Class extends value undefined is not a constructor or null see \"/private/var/folders/tx/lskdwi/T/ng-23kdi/angular-errors.log\" for further details. \u003e\u003e Exited with code: 127 This error is thrown by the Webpack’s subresource integrity. It’s likely that @angular/compiler, @angular-devkit/build-angular or @angular-builders/custom-webpack aren’t resolved properly in the package-lock.json.\nTo fix it, uninstall these 3 dependencies and then install them again in this order:\n@angular/compiler @angular-devkit/build-angular @angular-builders/custom-webpack If the error is still happening, try reinstalling @angular/cli.\nnpm errno -17 If npm ci errors with “errno -17” in shared-libs you may need to manually remove the nested dependencies from the package-lock.json. This needs move investigation to work out why this is happening. select2 is not a function If you get TypeError: \"$(...).select2 is not a function\" then either:\nYou bumped select2. For some reason this breaks it. You have multiple jquery libraries and select2 is getting attached to one but not the other. Make sure the jquery versions in enketo-core and webapp match and you’ve run dedupe to remove the enketo-core copy."},"title":"Update Dependencies"},"/community/contributing/code/core/using-windows/":{"data":{"":"We don’t actively support development on Windows, instead preferring MacOS or Linux.\nHowever, Microsoft has recently been stabilizing their Windows Subsystem for Linux, which appears to work reasonably well for development.\nInstallation instructions are mostly the same as they written in the README with a couple of caveats as of time of writing (2019-07-25), noted below.\nNote\nBoth the Windows Subsystem for Linux and Medic’s support for developing in it is very much in beta. These are advanced instructions, expect some understanding of linux and may not always work. Be patient and raise bugs as you find them!","checking-out-the-code#Checking out the code":"We used git that’s preinstalled with Ubuntu to check out the code.\nYou can checkout cht code inside WSL itself. You can checkout anywhere you have write access. We’ll checkout inside /home/username/medic directory.\n$: mkdir ~/medic \u0026\u0026 cd ~/medic $: git clone https://github.com/medic/cht-core.git","couchdb#CouchDB":"As of writing CouchDB wouldn’t autostart (due to systemd not existing?), and wasn’t manually starting due to erlang errors.\nLuckily, there is a perfectly working CouchDB installation for Windows:\nDownload from CouchDB and install the Windows version. This will create a Windows service. Run it either by directly executing C:\\CouchDB\\bin\\couchdb.cmd or by starting the service Then go to http://localhost:5984/_utils/#/setup in Windows and do the single node setup. Once done head back to linux and confirm it works:\n$: curl http://localhost:5984/ {\"couchdb\":\"Welcome\",\"version\":\"2.3.1\",\"git_sha\":\"c298091a4\",\"uuid\":\"5f60350abaaa11c0131a5630e83ae979\",\"features\":[\"pluggable-storage-engines\",\"scheduler\"],\"vendor\":{\"name\":\"The Apache Software Foundation\"}}","default-port-and-credentials-for-cht-core-web#Default port and credentials for cht-core web":"The default launch port for cht-core is 5988, which can be changed by providing the environment variable at runtime API_PORT, for example: API_PORT=6000 node server.js.\nThe deployed web app’s default user name and password is the username and password we set for CouchDB in the initial steps.","editing-code#Editing Code":"If you want to make changes to your code or contribute to our community health toolkit, you can do so by editing code from your favorite editor. If you editor supports UNC path, you can access and edit files inside WSL from \\\\wsl$\\Ubuntu\\. If you use Visual Studio Code, it’s even easier to edit your code. Just navigate to where you have checked out cht-core and type code . This will download VS Code Server for Ubuntu and open the project in Visual Studio Code in windows.\n$: cd ~/medic/cht-core $: code .","everything-else#Everything else":"npm ci should just work once you’ve installed a latest version of node via nvm as noted above.\nAlso install xstproc in your WSL:\n$: sudo apt-get update $: sudo apt-get install xsltproc Now you can build the web app.\n$: cd ~/medic/cht-core/ $: npm ci $: npm run build-dev-watch From this point, follow the harden couch section in Core Developer Setup.\nTo get multiple linux terminals (so you can run npm run, api and sentinel at the same time) either install and use something like Tmux, or if you click Ubuntu in the Windows start menu again it will open up a new terminal in the same linux instance.\nOnce you’re done with the default instructions and have api running, check if it works by going to http://localhost:5988 in Chrome or Firefox.","installing-npm#Installing NPM":"Start your WSL instance (Ubuntu), not WSL as they take you to two different default directories.\nThe default npm in linux is really old and doesn’t have npm ci, which we need.\nInstead use nvm to install nvm install 11.3 .","installing-ubuntu-in-the-windows-subsystem-for-linux#Installing Ubuntu in the Windows Subsystem for Linux.":"For the rest of this document we’re going to presume that you’re using Ubuntu (18.04) in WSL. Medic probably works on all distributions, but Ubuntu is likely the best supported.\nFirst, follow Microsoft’s instructions on enabling and installing linux. At the end of this process you should have a linux terminal.\nNote\nFor the rest of this tutorial in linux means code executing or performing actions in the WSL, while in Windows means code executing or performing actions in Windows natively.","problems#Problems?":"As none of CHT maintainers use Windows as a development environment daily this solution may not be as stable as directly using MacOS or Linux. If you encounter issues let a developer know","setup-environment-variables#Setup Environment Variables":"Using .bashrc works as expected, and so is a good place to put exports:\n# Medic stuff export COUCH_URL=http://admin:pass@localhost:5984/medic export COUCH_NODE_NAME=couchdb@localhost"},"title":"Windows Development"},"/community/contributing/code/design-docs/":{"data":{"":"What are design docs? Software development is not just about writing code, but rather about solving problems and building the right solutions. Before diving into an initiative or feature and starting coding, it’s essential that the developers (and other team members) have a high-level understanding of what a solution might look like.\nDesign docs are informal documents that the leading developer of a certain piece of software creates before they start the actual coding of a solution. The design doc contains high-level technical design decisions and alternatives that were considered when making those decisions.\nWhy write design docs? Besides being an excellent way of documenting software design, design docs come with several additional benefits:\nInvolve the team early and get feedback before implementation, after which changes are more difficult. Identify solution concerns and issues rapidly, as making changes to a solution in the design phase is faster. Provide a fantastic way to document technical decisions, which benefits the team, the community, and future contributors. Ensure the consideration of alternative solutions, assumptions and eventual constraints. Achieve consensus in the team around the design and get everyone on the same page. What could a design doc contain? The design doc can be added to the GitHub issue related to the feature or initiative to be implemented or in a Google Doc.\nThe list below contains a non-exhaustive list of items a design doc could cover.","alternative-solutions-considered#Alternative solutions considered":"A list of alternative designs that would have achieved similar outcomes, together with the trade-offs that each respective design makes and how those trade-offs led to the decision to select the proposed solution.","assumptions#Assumptions":"A description of the assumptions made, for example user interface design or general system characteristics (e.g. operating systems).","constraints#Constraints":"These can include constraints such as security, scalability, or performance.","context#Context":"An overview of the context in which the piece of software is being built and what is actually being built. It’s important to keep this section succinct as it’s only meant to bring the readers up to speed with the background facts.","goals-and-scope#Goals and scope":"A short list of what the goals of the piece of software are, and, very importantly, what is out of scope. The out of scope items are explicitly chosen not to be goals, as for example “FHIR compliance of the API”. Note that a solution could cover out of scope items, as long as it doesn’t introduce trade-offs that prevent achieving the goals.","how-to-review-a-design-doc#How to review a design doc?":"When added as a design doc reviewer, there are some details about the problem to solve that should be clear to you after reading the content of the doc, and also some questions you should ask before giving your sign off:\nWhat problem is this initiative solving? How will we know it will work? Are there any risky pieces? How are they handled? Are there any non-obvious edge cases? What are the key technical decisions? What are the tradeoffs being made as a result of these decisions? Is there any information you are aware of which the writer may not have known? Have you seen a similar solution (successful or not) used before? What external systems does this initiative interact with? Does it follow current good practices and patterns? Does it fit into the long-term direction? Does it create tech debt? This policy was inspired by Design docs guidelines at Google and How to write a good software design doc.","open-questions#Open questions":"Any open issues that you aren’t sure about, or suggested future work.\nThis example shows how a design doc could look like.\nTips\nKeep it simple and concise, write just enough documentation. Design docs should be sufficiently detailed but succinct enough to actually be read by busy people. Be clear: Don’t use unnecessarily complicated language and simplify whenever you can. Make important points stand out (for example, in bold letters).","proposed-solution#Proposed solution":"The details of the solution that was chosen for implementation. This flexible-format section can contain how the developer envisions to code the solution, diagrams, sample code, pseudo-code, security considerations, and references to similar solutions or frameworks to be used. It’s important that this section explains why this particular solution best satisfies the goals.","what-are-design-docs#What are design docs?":"","what-could-a-design-doc-contain#What could a design doc contain?":"","when-not-to-write-a-design-doc#When not to write a design doc":"Writing design docs takes time and energy. When deciding to whether write a design doc or not, it’s essential to reflect on the core trade-off of whether the benefits in the alignment around technical design, documentation, senior review, outweigh the extra work of actually creating the doc. If a doc basically says “This is how I am going to implement this feature” without going into trade-offs, alternatives, and explaining decision making (or if the solution is so obvious that there were no trade-offs), then it would probably have been a better idea to write the actual code right away instead of going through the effort of putting together a design doc.\nOften, the overhead of creating and reviewing a design doc may not be compatible with prototyping and fast iteration. If “you tried it out and it worked”, it might mean that you already have a solution that’s worth pursuing without having to write a document. However, it’s important to remember that subscribing to agile methodologies and fast iteration is not an excuse for not taking the time to get solutions to known problems right.","why-write-design-docs#Why write design docs?":""},"title":"Design Docs"},"/community/contributing/code/quality-assistance/":{"data":{"":"","an-example-of-qa-assistance-in-practice#An Example of QA Assistance in Practice":"Imagine a scenario where a community member or a squad is going to change the display of the targets screen. The group would discuss the needs of the users and work out solutions, where the selected solution was to make this change. This discussion could involve project managers, designers, developers, and QA engineers. The developer would be thinking about how to code the proposed solution and the QA engineer would be considering that as well as what might go wrong.\nIn the case where a UI change is being made, a design will be created. At this point the group can see what is to be built. When meeting and discussing the user interactions with the designer the QA engineer can get some early ideas around test scenarios.\nAs code is written and pushed to a branch the QA engineer and developer talk about what is changing. Any misconceptions are cleared up and the QA engineer can start to assist the developer by pointing out areas that may be important or non-obvious to test. This could be as simple as noting challenges of different screen sizes or as complex as specific configurations that may need extra attention for how targets work.\nThat conversation (ideally multiple of these) is the “assistance”. It’s where the value of the QA engineering mindset is achieved. The developer still owns and tests their work; they just have a QA engineer to talk to so they can feel confident in their own testing.\nDepending on the change the developer may work with the QA engineer where the QA engineer can contribute some automated end-to-end testing to the branch. Things should feel collaborative and not a division of labor or handing things off.\nOnce the developer has finished writing the code they test it a bit more and open a PR for a code review. The reviewer should be able to review the code with an assumption that it is well-tested already and the focus of the review can be around the code and implementation choices.\nIf any changes need to be made during the review process, the developer makes those changes and re-executes any relevant testing.\nAt this point the ideal action to take would be that the developer merges the finished code and no AT step happens, as the quality is already baked in from the start and throughout. This is the ideal setup yet to be achieved. Here the ticket still goes to AT, but for a smaller last bit of smoke testing. Notice that it is not an exhaustive set of tests, it is a small bit of extra poking around by a QA engineer. This limited testing is possible because the developer said it is done, and they said that because they tested it, and they had a QA engineer assist them to reach that level of confidence in their own testing.\nThe last part here is to merge it. That extra poking around should be quick, so the developer should be ready to click the green button soon!","faq#FAQ":"Who checks if the right thing got built? The community/squad members should be aware of what’s being built, why, and if it’s coming together as expected. That’s not to be solely delegated to a QA engineer to do. Developers should be working with the community and showing their work (demos, screenshots, etc). This should feel like a team collaborating to build useful working software, not an assembly line of disassociated parts. What if a developer is bad at testing? That’s something to improve, not outsource to someone else. Even still, the QA engineer isn’t disappearing and they will still offer deeper advice on what tests the developer should perform. What will QA engineers do if not doing manual acceptance testing? Automating more. That can be in more end-to-end tests for better regression testing, automating mobile device testing, adding better structures to enable the whole team to automate better, improving CI pipeline, etc.","getting-there-in-milestones#Getting There in Milestones":"The aim is to get to a place where the developer of a change can do everything and merge without needing any extra permission. To make the process safer in getting to the final step, several parts will be followed. A process similar to what’s described In Detail is followed, while retaining an “AT” step similar to what the current process.\nThe big difference to that AT step though will be the depth in which it is performed. Rather than being a single exhaustive step where all testing is performed, it will be more like a smoke test where a QA engineer gets a little extra creative in testing.\nThere may still be cases of a ticket getting coded up totally unrelated to bigger initiative work, perhaps even unannounced to anyone. For work like this the traditional AT step is still appropriate for now. Still though, it is preferred for the software developer to get a QA engineer involved as early as possible; it helps us get the best contributions from everyone.","goals#Goals":"Software developers should have full ownership of what they are building, including quality. The team still benefits from having the QA engineering mindset of QA engineers. QA engineers automate more tests and processes.","in-detail#In Detail":"A developer should be able to write code and release it when done. Doing that without testing would be reckless and it is expected that the developer also tests their code. The team wants both speed and quality where the former should not be done without the latter. This means slowing down a bit to make sure it’s right and checking your work when developing before it is done/reviewed/merged.\nIt isn’t always easy to test your own code though and it is common for a developer to have a happy-path mindset, more suited for thinking about what to build rather than how something might break. Fortunately there are QA engineers on the team who have the skills to think about the solution from the perspective of what might break.\nIt’s worth noting that the team also requires code reviews via GitHub pull requests. The intention of code reviews is not for the reviewer to test the code. The reviewer may optionally also do that, but it is expected that the author of the code has tested it fully before requesting a code review.\nOnce code is done, tested (by the developer) and reviewed, it is ready to merge and the developer can do so… almost (see Getting There in Milestones).","in-short#In Short":"A software developer writes code and performs testing on that code where a QA engineer assists by recommending tests to perform and adding additional end-to-end tests."},"title":"Quality Assistance"},"/community/contributing/code/releasing/":{"data":{"":"","android-apps#Android apps":"Follow the instructions in the Android \u003e Releasing section.","building--releasing-cht-core-changes#Building \u0026amp; Releasing CHT Core Changes":"The high-level steps for a release are as follows:\nThe CHT Community sees an opportunity they want to go after. The opportunity addresses a need of at least one CHT app deployment and will be used by that deployment after the release. The CHT Community forms a squad and works with it on a solution. Tickets are added to GitHub for what’s being built. A release manager is assigned from the team. The release manager creates an issue for either a Major/Minor or Patch release and follows the process outlined in the issue template. Code is built by a developer together with quality assistance. Code is reviewed. Code is merged. Code is released.","cht-conf#CHT Conf":"Follow the instructions in the readme.","cht-core#CHT Core":"A release is a set of code changes bundled together, ideally with at least one deployment of CHT apps ready to make use of it.","majorminorpatch-release#Major/Minor/Patch Release":"The following classification is defined by the Semantic Versioning 2.0.0.\nGiven a version number MAJOR.MINOR.PATCH, increment the:\nMAJOR version when the release adds incompatible changes, e.g. when the apps built on top of the CHT require manual intervention to work as expected. MINOR version when the release adds functionality in a backward-compatible manner. PATCH version when the release adds backward-compatible bug fixes. MAJOR releases represent the biggest scale of code change and their roll out effort is high, as they likely require time and effort to set up or configure. As a consequence, they are the least frequent of the three release types.\nYou can find the versions currently supported, dependencies, and release notes for the CHT Core on the Releases page.","release-manager#Release Manager":"The overall coordination and operation of the release process are the responsibility of the release manager.\nThe release manager must perform several tasks for a new release, such as coordinating with team members and following all the steps in the release issue process, some of them being manual. The release manager must have adequate permissions to the repositories where the release is made.","when-to-wait-to-release#When to wait to release":"In general, release managers should not feel they have to wait to do a release. The moment the release manager feels the release is ready, they should release it. This may even be with just one ticket!\nThere are two scenarios where a release manager should wait before doing the release:\nThere is a bug found in master that did not exist in the previous release. This should be fixed before the release. There is a high priority bug found in an existing release that it is estimated to be fixed in less than 5 days. The way to determine if a bug is high priority is if a service pack release is needed to fix it later. If so then it makes sense to wait for the fix to save the effort of having to do two releases in quick succession. If it’s going to take longer than 5 days then it’s worth the additional effort of releasing a service pack. After 5 days if the fix isn’t merged, then continue with the release regardless. The reason to have these rules while waiting, is so that all contributors know what they are and the release manager never needs to ask “should we wait?” - they’ll know already!\nWhile waiting the release manager should use the time effectively by doing as many release steps as possible including writing release notes, preparing the release branch, etc so that the release can be finalized as quickly as possible once the fixes are made."},"title":"Releasing"},"/community/contributing/code/releasing/feature_releases/":{"data":{"":"To build and iterate on new features at a pace that is faster than our regular release cycle, some features are released in a Feature Release. Feature Releases (FRs) are based on the most recent release and only include improvements related to a feature being developed. These releases are tested to be production-ready so that new features can be studied with CHT partners in a live deployment, with the aim of getting the feature ready for wider use in an upcoming release.","3x#3.x":"When you are on a non-feature release, you need to use horticulturalist (horti) to do the initial install of the FR. For example, if your instance was running at 192-168-68-26.local-ip.medicmobile.org:8443 and you wanted to install 3.16.0-FR-offline-user-replace-beta.1, after installing horti you could start the installation with this command:\nCOUCH_URL=https://medic:password@192-168-68-26.local-ip.medicmobile.org:8443/medic horti --local --install=3.16.0-FR-offline-user-replace-beta.1 On subsequent upgrades to the later beta’s of the FR, you will be able to more easily do it through the admin UI in the CHT.","4x#4.x":"As horticulturalist (horti) does not exist in CHT 4.x, the current way to upgrade an instance is to manually edit your compose file to have the correct version tag of the images. Find the CHT Core compose file and edit all 5 instances of the version tag for each image.\nFor example, this image is using the label 4.0.1-4.0.1 (1 of 5 instances):\nservices: haproxy: image: public.ecr.aws/s5s3h4s7/cht-haproxy:4.0.1-4.0.1 restart: always hostname: haproxy If you wanted to install 4.1.0-FR-supervisor-cwh-add-beta.1, you would make it look like this:\nservices: haproxy: image: public.ecr.aws/s5s3h4s7/cht-haproxy:4.1.0-FR-supervisor-cwh-add-beta.1 restart: always hostname: haproxy On subsequent upgrades to the later beta’s of the FR, you will be able to more easily do it through the admin UI in the CHT.","initial-fr-installation#Initial FR Installation":"","release-names#Release names":"A Feature Release can easily be identified by its version, which follows the pattern of {BASE-RELEASE-NUMBER}-FR-{FEATURE-NAME}. For example, if the latest release is 3.10.1 then the Feature Release for speedier upgrades would be 3.10.1-FR-speedier-upgrades. When this feature is found to be successful and ready for wider distribution it will be included in the next release.","upgrades-to-release#Upgrades to release":"Once the feature is ready for widespread use, it will be included in a regular CHT release. Projects using the feature version can be upgraded as soon as practical to get back on to a fully supported release."},"title":"Feature Releases"},"/community/contributing/code/releasing/publish-docker-image/":{"data":{"":"Docker images for CHT projects can be published to the medicmobile Docker Hub organization, so they are easily accessible to the community. This process can be automated using GitHub actions.","add-github-action-workflow-configuration#Add GitHub Action Workflow configuration":"Now that the Docker Hub repository is created, you can add the GitHub Action workflow configuration to your project. This configuration should build the Docker image based on the code in the repository and then publish it to the Docker Hub repository.\nHere is an example of a basic workflow configuration that publishes a new image for each tag that is pushed:\nname: Publish Docker image on: push: tags: ['v*'] env: DOCKER_HUB_USER: dockermedic DOCKER_NAMESPACE: medicmobile DOCKER_REPOSITORY: **REPLACE WITH REPOSITORY NAME** jobs: push_to_registry: name: Push Docker image to Docker Hub runs-on: ubuntu-22.04 steps: - name: Check out the repo uses: actions/checkout@v3 - name: Log in to Docker Hub uses: docker/login-action@v2 with: username: ${{ env.DOCKER_HUB_USER }} password: ${{ secrets.DOCKER_HUB_PASS }} - name: Extract metadata (tags, labels) for Docker id: meta uses: docker/metadata-action@v4 with: images: ${{ env.DOCKER_NAMESPACE }}/${{ env.DOCKER_REPOSITORY }} - name: Build and push Docker image uses: docker/build-push-action@v4 with: context: . push: true tags: ${{ steps.meta.outputs.tags }} labels: ${{ steps.meta.outputs.labels }} Do not forget to update the DOCKER_REPOSITORY environment variable with the name of the repository you created on Docker Hub. Also note that the DOCKER_HUB_PASS secret is an org level secret. So, no special configuration should be required to use this secret for any repositories in the medic organization.\nThis configuration will create and publish a new Docker image for each tag that is pushed to the repository. The image will be tagged with the tag name and the latest tag.","create-repository-on-docker-hub#Create repository on Docker Hub":"First, create a repository for your new image on Docker Hub.\nUse the admin Docker account to create a new repository in the medicmobile organization. For your new repository, update the permissions to give the developers team the ability to Read \u0026 Write. This will allow the GitHub action to push to the repository."},"title":"Publishing Docker Images"},"/community/contributing/code/releasing/pyxform/":{"data":{"":"The medic/pyxform repository is a fork of XLSForm/pyxform with custom modifications for the CHT. This page documents the process for updating medic/pyxform to a new upstream release from XLSForm/pyxform, ensuring the custom changes are preserved and the process is replicable.","overview#Overview":"The medic/master branch contains the latest tagged code for pyxform-medic, with all custom commits applied on top of the target release from XLSForm/pyxform. When targeting a new release from XLSForm/pyxform, a maintainer should create a new branch, -rebase (e.g., v4.0.0-rebase), from the ref of the target tag on XLSForm/pyxform and push it to the medic repository. A contributor can then follow the steps below to rebase the necessary commits and open a PR. Finally, a maintainer can review/approve the PR and merge it into the medic/-rebase branch. Once merged, force-push the rebase branch to medic/master. Tag the new release and build the files for a new version of cht-conf.","steps-to-rebase-to-a-new-version-of-xlsformpyxform#Steps to rebase to a new version of XLSForm/pyxform":"Clone your fork of medic/pyxform locally:\ngit clone https://github.com//pyxform.git cd pyxform Add remotes:\ngit remote add xlsform https://github.com/XLSForm/pyxform.git git remote add medic https://github.com/medic/pyxform.git Fetch all updates and tags:\ngit fetch --all --tags Ensure no uncommitted changes:\ngit status Create a new local rebase branch for the target XLSForm tag (e.g., v4.0.0):\ngit checkout -b -rebase medic/master Check which custom commits will be rebased:\ngit log --oneline -7 The oldest commit listed should say “BEGIN DOWNSTREAM CHANGES FOR medic/pyxform”. Newer commits are the custom changes. Make a note of all of these commits for future reference to ensure none are lost in the rebase.\nRebase on top of the target XLSForm tag:\ngit rebase Fix any conflicts and verify the commit list:\ngit log --oneline -7 Push to your fork and open a PR for review:\ngit push origin HEAD Open a PR from /-rebase to medic/-rebase. (Note that a maintainer should create the medic/-rebase branch from the ref of the target tag on XLSForm/pyxform.)","steps-to-release-a-new-version-of-medicpyxform#Steps to release a new version of medic/pyxform":"Merge the PR: Once approved, the maintainer should merge the PR using the “Rebase Merge” button to keep all individual commits.\nForce-push to master: After merging, the maintainer should checkout the merged branch and force-push it to master:\ngit checkout medic/-rebase git pull git push --force-with-lease medic -rebase:master Tag the release:\ngit tag -a -medic -m \"Release -medic of pyxform-medic\" git push medic -medic","updating-the-bundled-pyxform-in-cht-conf#Updating the Bundled Pyxform in CHT Conf":"After tagging the new release, update the executable shipped with cht-conf.\nInstall shiv for creating the zipapp:\npip install shiv Generate the zipapp:\nshiv -e pyxform.xls2xform:main_cli -o xls2xform-medic . Copy the generated file to cht-conf: Copy xls2xform-medic to cht-conf/src/bin.\nTest the new version: Test the new version of pyxform/cht-conf by building both cht-core and cht-config-library with the branch version of cht-conf and make sure everything builds successfully.\nThis packaged pyxform will be automatically distributed on new versions of cht-conf."},"title":"Releasing Pyxform"},"/community/contributing/code/repository-checklist/":{"data":{"":"","cicd#CI/CD":"Repository runs GitHub Actions CI with automated build and test on each PR. When using semantic-release (or a similar technology) to automate releases, configure the medic-ci bot to have permission to update the repository. In the repository settings, go to “Collaborators and teams” \u003e “Add people” and add the medic-ci bot with admin permissions.","code-reviews#Code Reviews":"The PR template contains a code review checklist. A reviewer for a PR merge is enforced by policy. A linter is set up. The PR and issue template content can be adjusted according to the product’s purpose.\nAdditionally, the person who creates the repository might need to share repository access with appropriate teams (this may require admin access).","items-to-consider-when-developing-the-cht-product#Items to consider when developing the CHT Product":"To ensure quality, the CHT Products should also follow the guidelines below:","medic-github-repository-faq#Medic GitHub repository FAQ":"Q: Who can create a repository? A: Anyone under Medic GitHub organization. Q: Is it OK to create a CHT/Medic-related work repository under a personal GitHub account? A: If what you are working on is temporary and just for you then it is fine to create a repository under your personal account (it is the equivalent of having a script on your local machine), as long as it contains an Open-Source Software License. However, default to the Medic account so the other team members can collaborate on it. Q: When to make a repo public vs private? A: Repositories should be public unless there is very good reason to make it private (e.g. the repository contains partner details that cannot be disclosed to public). Always keep in mind that it is much easier to start public than change to public later. Q: When to create a new repository vs adding a directory in existing (monolithic)? A: It depends on the nature of the code. Some things to consider are: is the new code and the old code dependent, don’t make sense on their own, must be versioned together, etc. If not, default to a new repo to reduce complexity. This policy was inspired by Microsoft’s Engineering Fundamentals Checklist.","observability#Observability":"Application faults and errors are logged. Logging configuration can be modified without code changes (eg: verbose mode).","repository-creation-checklist#Repository Creation Checklist":"When creating a new CHT Product repository under Medic’s GitHub organization, the contributor(s) should use the cht-repo-template repository containing the following configurations:","source-control#Source Control":"The main branch is locked via branch protection rules. Merges are done through PRs. Automatically delete head branches. Issue templates exist. PR template exists. PRs reference related issues. Commit formats follow the guidelines. Secrets are not part of the commit history or made public. The following files exist: LICENSE specifying AGPL-3.0 (example) README.md. main branch is always shippable.","testing#Testing":"Unit tests and successful builds for PR merges are set up. Unit tests cover the majority of the code. If applicable, integration tests run to test the solution e2e."},"title":"Repository Checklist"},"/community/contributing/code/static-analysis/":{"data":{"":"","adding-a-new-repo-to-sonarcloud#Adding a new repo to SonarCloud":"Add a .sonarcloud.properties file to the repository with your desired repo-level configuration. In the GitHub UI, navigate to the settings for the medic org \u003e Third-party Access \u003e GitHub Apps Find SonarCloud and click the Configure button. In the Repository access section, select your desired repository from the drop-down and click Save. You will be automatically redirected to the SonarCloud UI where you can configure the repo-level settings. Use the + button and choose Analyze new project. Select the repo from the list and click Set Up. In the SonarCloud configuration, disable summary comments in GitHub PRs.","adding-a-rule#Adding a rule":"To include a new rule in the code analysis, add it to the quality profile:\nOpen a cht-docs PR to record your rule addition in the list below. This allows us to track the history of rule changes and record for posterity the discussions about them. If not already using a custom quality profile, use the SonarCloud UI to create one that extends the Sonar Way profile. Make sure to set the new quality profile as the default for that language, if desired. Open the rule in question in the SonarCloud UI and use the Activate button to activate the rule in your quality profile","custom-cht-quality-profiles#Custom CHT Quality Profiles":"Java:\nCHT Way (default) extends Sonar Way Modified: S107 - Functions should not have too many parameters threshold 7 -\u003e 4 S3776 - Cognitive Complexity of functions should not be too high threshold 15 -\u003e 5 JavaScript:\nCHT Way (default) extends Sonar Way Modified: S107 - Functions should not have too many parameters threshold 7 -\u003e 4 S3776 - Cognitive Complexity of functions should not be too high threshold 15 -\u003e 5 Disabled S2699 - Tests should include assertions Disabled due of rigidity of the rule when detecting expect imports and calls to imported functions that have assertions Python:\nCHT Way (default) extends Sonar Way Modified: S107 - Functions should not have too many parameters threshold 7 -\u003e 4 S3776 - Cognitive Complexity of functions should not be too high threshold 15 -\u003e 5 TypeScript:\nCHT Way (default) extends Sonar Way Modified: S107 - Functions should not have too many parameters threshold 7 -\u003e 4 S3776 - Cognitive Complexity of functions should not be too high threshold 15 -\u003e 5","during-development#During development":"While writing code, the SonarLint plugin can be used to get real-time code analysis in your IDE. This is useful to avoid committing code with Sonar issues in the first place.","eslint#ESLint":"All code must pass an eslint check which runs early in the CI cycle and uses the standard Medic ESLint configuration.","ignoring-a-specific-rule-for-a-file#Ignoring a specific rule for a file":"Use the following properties to ignore a specific rule for one or more files:\nsonar.issue.ignore.multicriteria=e1,e2 sonar.issue.ignore.multicriteria.e1.ruleKey=javascript:S6582 sonar.issue.ignore.multicriteria.e1.resourceKey=**/auth.js sonar.issue.ignore.multicriteria.e2.ruleKey=javascript:S2699 sonar.issue.ignore.multicriteria.e2.resourceKey=**/config.js","ignoring-all-rules-for-a-block-of-code#Ignoring all rules for a block of code":"You can ignore all the rules for a block of code by telling Sonar to ignore the block. First, make sure your .sonarcloud.properties file has the following configuration:\nsonar.issue.ignore.block=e1 sonar.issue.ignore.block.e1.beginBlockRegexp=NOSONAR_BEGIN sonar.issue.ignore.block.e1.endBlockRegexp=NOSONAR_END Then simply put //NOSONAR_BEGIN before the block to ignore and //NOSONAR_END after the block.","ignoring-all-rules-for-a-file#Ignoring all rules for a file":"Use the following properties to completely ignore all rules for one or more files:\nsonar.issue.ignore.allfile=r1 sonar.issue.ignore.allfile.r1.fileRegexp=**/openrosa2html5form.xsl","linting#Linting":"You should always lint your code locally before pushign it up the GitHub. Choose one of:\nESLint has plugins/integrations for many IDEs that will report linting issues in real-time. CHT Core has a script to run at the command line, by calling npm run lint while in the cht-core repository. Be sure you’ve run the Core dev setup first! Note that the first time you run this it might be slow, as it needs to download and cache some files. Subsequent runs should be quite fast.","modifying-rule-parameters#Modifying rule parameters":"To modify a rule parameter (e.g. change the allowed level of complexity for a function according to javascript:S3776):\nOpen a cht-docs PR to record your rule modification in the list below. This allows us to track the history of rule changes and record for posterity the discussions about them. If not already using a custom quality profile, use the SonarCloud UI to create one that extends the Sonar Way profile. Make sure to set the new quality profile as the default for that language, if desired. Open the rule in question in the SonarCloud UI and use the Change button associated with your quality profile to set your custom parameter value for the rule.","new-code-definition#New Code Definition":"When setting up a new repository in SonarCloud, you will be asked to define what is considered to be “new code”. This is used to determine which code in the default branch is considered “new” (affects reporting of issues, etc). The new code definition is not applied to Sonar analysis of a PR. In that case, only the changes in the PR are considered “new”.\nConsult the documentation for more details on the options available. For projects that do not use Gradle or Maven for version management, the Number of days option is recommended (since Previous version would require maintaining a version number in the .sonarcloud.properties file).\nIf you are using the CHT Way quality gate (or a similar zero-tolerance quality gate) it is recommended to set Number of days = 1. With a zero-tolerance quality gate, only issue-free code can be merged to the default branch. So, there is no need to check for issues accumulated over time. Also, having a higher Number of days opens up a greater opportunity for Sonar to introduce a new rule that will fail some code previously added to the default branch (code that is only included in the latest analysis because of the configured Number of days).","org-level-configuration#Org-level configuration":"Organization-level configuration must be made by an authorized user in the SonarCloud UI.","pr-analysis#PR Analysis":"SonarCloud is integrated with the CHT GitHub repositories and runs on every pull request. The results are posted as a comment on the pull request. If the Sonar analysis fails the quality check, the pull request will be blocked from merging.","quality-gates#Quality Gates":"Quality gates are used to define the criteria that must be met for a Sonar analysis to be considered “passing”. The Sonar way quality gate provides an example of a useful configuration. However, this gate config is not ideal for CHT code. Instead, the default quality gate for the Medic organization is the CHT Way. It has the following metrics:\nMetric Operator Value Duplicated Lines (%) is greater than 6.0% Issues is greater than 0 Reliability Rating is worse than A Security Hotspots Reviewed is less than 100% Security Rating is worse than A","quality-profiles#Quality Profiles":"The quality profiles are the lists of rules that will be applied for the various supported languages. By default, we use the Sonar Way quality profile for each language as it provides sensible defaults and is actively maintained receiving updates with new rules and bug fixes as they are added to Sonar.","removing-a-rule#Removing a rule":"Removing a rule should only be done as a last resort. It is not possible to remove a rule inherited from the Sonar Way profile while at the same time still extending that profile. So, future updates to the Sonar Way profile will not be applied to your custom profile after a rule has been removed.\nOpen a cht-docs PR to record your rule removal in the list below. This allows us to track the history of rule changes and record for posterity the discussions about them. If not already using a custom quality profile, use the SonarCloud UI to copy (not extend) the Sonar Way profile into a new profile. Make sure to set the new quality profile as the default for that language, if desired. Open the rule in question in the SonarCloud UI and use the Activate button to activate the rule in your quality profile","repo-level-configuration#Repo-level configuration":"Each repository can include a .sonarcloud.properties file in the root directory.\nThis file must specify the path to the source code in the repository as well as which source files should be considered to be test code. See the documentation for more details.\n# Path to sources sonar.sources=. # Can have multiple comma-separated entries sonar.exclusions=**/test*/**/* # Path to tests sonar.tests=. # Can have multiple comma-separated entries sonar.test.inclusions=**/test*/**/* Additionally, the .sonarcloud.properties file can contain configuration regarding ignoring certain rules.","sonar#Sonar":"Sonar static analysis supports development by providing feedback on code quality and security issues. Sonar analysis must pass on all new code.\nSonarCloud can be enabled on any public repo in the medic organization.","sonar-configuration#Sonar Configuration":"Broadly speaking, Sonar configuration is separated into repo-level and org-level configuration.","what-should-i-do-if-sonar-finds-an-issue#What should I do if Sonar finds an issue?":"When Sonar flags an issue with the code in your pull request, use this decision tree to determine the proper mitigation:\nIf the issue is a genuine concern that should be addressed: Fix it and push the updated code to your PR. The PR will automatically be unblocked once the Sonar analysis succeeds. If the issue is a “false-positive” (i.e. Sonar has flagged some particular code as violating a rule, but it does not make sense to apply the rule in that context): If the rule is one that should not be applied to any CHT code: Remove the rule from the default Quality Profile. If it does not make sense to apply the rule to this particular code, you can do one of the following: Completely ignore Sonar issues on that line of code by adding the // NOSONAR comment to the end of the line. Completely ignore Sonar issues for that block of code. Update the .sonarcloud.properties to ignore that rule for that particular file. Update the .sonarcloud.properties to ignore all rules for that particular file (useful if the file has been copied from an external dependency).","workflow#Workflow":""},"title":"Static Analysis"},"/community/contributing/code/style-guide/":{"data":{"":"","adding-documentation-comments#Adding documentation comments":"To add documentation comments that will be built using jsdocs, use jsdoc block tags. For angular code use the angular tags, see examples.\nTry to write comments that explain higher level mechanisms or clarify difficult segments of your code. Don’t use comments to restate trivial things.\nRight:\n/** * 'ID_SOMETHING=VALUE' -\u003e ['ID_SOMETHING=VALUE', 'SOMETHING', 'VALUE'] * @type {boolean} */ const matches = item.match(/ID_([^\\n]+)=([^\\n]+)/)); /** * Loads a user. This function has a nasty side effect where a failure to increment a * redis counter used for statistics will cause an exception. This needs * to be fixed in a later iteration. * @param {string} id the user id * @param {function} cb a callback function that applied to the user */ function loadUser(id, cb) { ... } Wrong:\n/** * Execute a regex */ const matches = item.match(/ID_([^\\n]+)=([^\\n]+)/); /** * Usage: loadUser(5, function() { ... }) */ function loadUser(id, cb) { ... } /** * Check if the session is valid */ const isSessionValid = (session.expires \u003c Date.now()); /** If the session is valid */ if (isSessionValid) { ... }","asynchronous-code#Asynchronous code":"Where possible, use the async/await pattern for asynchronous code as it’s generally easy to read as the statements line up down the screen. This may not be possible for legacy browser or Node version support, where promises should be used instead. Occasionally promises are better, for example, for executing multiple async methods in parallel. Avoid callbacks at all costs.\nRight:\nasync function fetch() { try { const response = await request.get(); return response.data; } catch(e) { // handle error } } Wrong:\nfunction fetch() { return request.get() .then(response =\u003e response.data) .catch(err =\u003e /* handle error */); } Wronger:\nfunction fetch(callback) { return request.get((err, response) =\u003e { if (err) { // handle error return; } callback(null, response.data); }); }","avoid-reduce#Avoid reduce":"Most uses of reduce have more readable alternatives.\nWhen supporting older browsers and node versions where some features aren’t available reduce can still be useful but its use should be hidden behind a utility function or polyfill to help readability and make it easier to replace later.\nRight:\nconst properties = []; elements.forEach(elem =\u003e { properties.push(elem.a, elem.b); }); Wrong:\nconst properties = elements.reduce((properties, elem) =\u003e { return properties.concat(elem.a, elem.b); }, []); Refer to this YouTube video for more examples.","do-not-extend-built-in-prototypes#Do not extend built-in prototypes":"Do not extend the prototype of native JavaScript objects. Your future self will be forever grateful.\nRight:\nconst a = []; if (!a.length) { console.log('winning'); } Wrong:\nArray.prototype.empty = function() { return !this.length; } const a = []; if (a.empty()) { console.log('losing'); }","getters-and-setters#Getters and setters":"Do not use setters, they cause more problems for people who try to use your software than they can solve.\nFeel free to use getters that are free from side effects, like providing a length property for a collection class.","github-actions#Github Actions":"","implicit-returns#Implicit Returns":"As noted above, implicit returns should be used for one-line arrow functions. However, for the sake of readability, they should not be used when returning a multi-line value.\nRight:\nconst oneLineString = () =\u003e 'World'; const oneLineObject = () =\u003e ({ hello: 'World' }); // Not using implicit return for multi-line value const multiLineObject = () =\u003e { return { hello: 'World', foo: 'bar' } }; Wrong:\nconst multiLineString = () =\u003e 'This is a really long string that is ' + 'on multiple lines'; const differentLineString = () =\u003e 'This is a string that does not fit on the same line as the arrow'; const multiLineObject = () =\u003e ({ hello: 'World', foo: 'bar' });","indention#Indention":"Use 2 spaces for indenting your code and swear an oath to never mix tabs and spaces - a special kind of hell is awaiting you otherwise.","language#Language":"Prefer TypeScript and JavaScript when writing CHT code.\nExceptions to this can be made on a case-by-case basis, but the decision must be made collectively before coding has begun to avoid having to rewrite.","managing-secrets#Managing Secrets":"Secrets are encrypted for use for things like passwords or API keys and can be added at the org or repository level. They must be added by an admin.\nTo access a secret you can use this format in your yml.\nsteps: - name: My first action env: GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }} FIRST_NAME: Mona LAST_NAME: Octocat See the full documentation on Github’s site.","method-chaining#Method chaining":"One method per line should be used if you want to chain methods.\nYou should also indent these methods so it’s easier to tell they are part of the same chain.\nRight:\nUser .findOne({ name: 'foo' }) .populate('bar') .exec(() =\u003e true); Wrong:\nUser .findOne({ name: 'foo' }) .populate('bar') .exec(() =\u003e true); User.findOne({ name: 'foo' }) .populate('bar') .exec(() =\u003e true); User.findOne({ name: 'foo' }).populate('bar') .exec(() =\u003e true); User.findOne({ name: 'foo' }).populate('bar') .exec(() =\u003e true);","newlines#Newlines":"Use UNIX-style newlines (\\n), and a newline character as the last character of a file. Windows-style newlines (\\r\\n) are forbidden inside any repository.","no-trailing-whitespace#No trailing whitespace":"Just like you brush your teeth after every meal, you clean up any trailing whitespace in your JS files before committing. Otherwise the rotten smell of careless neglect will eventually drive away contributors and/or co-workers.","npm-dependencies#NPM Dependencies":"When picking version ranges we set an exact minimum version and an upper limit of the next major. This makes it easy to update dependencies without hitting breaking changes. In NPM this is done by using the ^ character which is the default setting for NPM.\nOccasionally it is required to set an exact version to avoid an undeclared breaking change or some other issue, in this case the dependency can be specified exactly.\nRight:\n\"^6.5.3\" - preferred \"6.5.3\" - if required Wrong:\n\"\u003e6.5.3\" - risks picking up breaking changes in the next major \"*\" - as above but also doesn’t specify a minimum \"~6.5.3\" - too restrictive on the upper limit","object--array-creation#Object / Array creation":"Put short declarations on a single line. For long declarations put a line break after each comma.\nRight:\nconst a = ['hello', 'world']; const b = { good: 'code', 'is generally': 'pretty', }; Wrong:\nconst a = [ 'hello', 'world' ]; const b = {\"good\": 'code' , is generally: 'pretty' }; const c = ['one', 'two', 'three', 'four'];","objectfreeze-objectpreventextensions-objectseal-with-eval#Object.freeze, Object.preventExtensions, Object.seal, with, eval":"Crazy stuff that you will probably never need. Stay away from it.","opening-braces-go-on-the-same-line#Opening braces go on the same line":"Your opening braces go on the same line as the statement, with whitespace before and after the condition, followed by a new line.\nRight:\nif (true) { console.log('winning'); } Wrong:\nif (true) { console.log('losing'); } if (true) { console.log('losing'); } if(true){ console.log('winning'); }","return-early-from-functions#Return early from functions":"To avoid deep nesting of if-statements, always return a function’s value as early as possible.\nRight:\nfunction isPercentage(val) { if (val \u003c 0) { return false; } if (val \u003e 100) { return false; } return true; } Wrong:\nfunction isPercentage(val) { if (val \u003e= 0) { if (val \u003c 100) { return true; } else { return false; } } else { return false; } } Or for this particular example it may also be fine to shorten things even further:\nfunction isPercentage(val) { var isInRange = (val \u003e= 0 \u0026\u0026 val \u003c= 100); return isInRange; }","scripting#Scripting":"Use JavaScript. It’s well known in the community, it’s easy to write cross-platform code, the npm repository is extensive, and it’s easy to unit test.","server-side#Server side":"Use JavaScript. One of the major advantages of using pure JavaScript on the server side is because you don’t have a compile step there is a shorter lag between development and execution of the code. Furthermore when running compiled code in production it is more difficult to debug issues because the error stacktrace is obfuscated. For these reasons JavaScript is still preferred for server side code, and in scripts. In future it may be possible to run TypeScript natively without compilation, at which point this position will be revisited.","styles#Styles":"This is a guide, not a law - use your discretion. Mostly based on Felix Geisendörfer’s guide with our own tweaks.","third-party-actions#Third Party Actions":"Actions allow us to leverage code written by others to do tasks at build time. The concept is similar to NPM and packages.\nFollow the github actions best practices for security purposes. The main points in the security best practices documents are\nPin actions to a full length commit SHA so any malicious or buggy updates are not silently included Audit the source code of the action Pin actions to a tag only if you trust the creator","use-arrow-functions#Use arrow functions":"Use arrow functions as much as possible for cleaner code and better scoping. Omit the return keyword when the entire function definition fits on one line. Omit the parens when taking a single parameter.\nThere are exceptions to this rule including when you want to access arguments or this, or when you want to be able to debug browserified code.\nRight:\nlet result = ''; const append = a =\u003e { result += a; }; const combine = (a, b) =\u003e { result = a + b; }; const getResult = () =\u003e result; Wrong:\nlet result = ''; const append = (a) =\u003e { result += a; }; const combine = function(a, b) { result = a + b; }; const getResult = () =\u003e result;","use-const-and-let#Use \u003ccode\u003econst\u003c/code\u003e and \u003ccode\u003elet\u003c/code\u003e":"There is no longer a good reason to use var. Use const whenever you can, and let when you must. Hardcoded constants should be named in all UPPERCASE.\nRight:\nconst DELAY = 10 * 1000; const output = input * 10; let temp = 50; let unknown; Wrong:\nvar DELAY = 10 * 1000;","use-descriptive-conditions#Use descriptive conditions":"Any non-trivial conditions should be assigned to a descriptively named variable or function:\nRight:\nconst isValidPassword = password.length \u003e= 4 \u0026\u0026 /^(?=.*\\d).{4,}$/.test(password); if (isValidPassword) { console.log('winning'); } Wrong:\nif (password.length \u003e= 4 \u0026\u0026 /^(?=.*\\d).{4,}$/.test(password)) { console.log('losing'); }","use-lowercamelcase-for-variables-properties-and-function-names#Use lowerCamelCase for variables, properties, and function names":"Variables, properties and function names should use lowerCamelCase. They should also be descriptive. Single character variables and uncommon abbreviations should generally be avoided.\nRight:\nconst adminUser = db.query(); Wrong:\nconst admin_user = db.query();","use-semicolons#Use Semicolons":"According to scientific research, the usage of semicolons is a core value of our community. Consider the points of the opposition, but be a traditionalist when it comes to abusing error correction mechanisms for cheap syntactic pleasures.","use-single-quotes#Use single quotes":"Use single quotes, unless you are writing JSON.\nRight:\nconst foo = 'bar'; Wrong:\nconst foo = \"bar\";","use-snake_case-for-couchdb-document-property-names#Use snake_case for CouchDB document property names":"All property names in CouchDB documents use lowercase underscore-separated formatting.\nRight:\n{ \"word\": \"values can have spaces and CAPS\", \"multiple_words\": true } Wrong:\n{ \"UPPER_CASE_NAME\": false, \"lowercasename\": false, \"camelCaseName\": false, \"kebab-case-name\": false, \"Title_case_name\": false, \"sTuDlYcAsEnAmE\": false }","use-the--operator#Use the === operator":"Programming is not about remembering stupid rules. Use the triple equality operator as it will work just as expected.\nRight:\nif (a !== '') { console.log('winning'); } Wrong:\nif (a == '') { console.log('losing'); }","use-uppercamelcase-for-class-names#Use UpperCamelCase for class names":"Class names should be capitalized using UpperCamelCase.\nRight:\nfunction BankAccount() { } Wrong:\nfunction bank_Account() { }","web-applications#Web applications":"Use TypeScript. This is preferred because it has all the benefits of JavaScript while adding better developer tooling and compile time checks which can detect bugs earlier. It is not essential to use types for every variable, but it’s highly recommended for exported interfaces to help future developers who don’t know the internal workings of a module. There currently exists a mix of JavaScript and TypeScript in the codebase as it is gradually being migrated to use more TypeScript.","write-small-functions#Write small functions":"Keep your functions short. A good function fits on a slide that the people in the last row of a big room can comfortably read. So don’t count on them having perfect vision and limit yourself to ~15 lines of code per function."},"title":"Style Guide"},"/community/contributing/code/test-data/":{"data":{"":"Content in this section Test Data Generator for CHT Test Instances CSV to Docs"},"title":"Test data"},"/community/contributing/code/test-data/csv-to-docs/":{"data":{"":"Seeding data with cht-conf Users, contacts, and report data can be specified in comma-separated value (CSV) files, then converted to JavaScript Object Notation (JSON) files and uploaded into your instance using cht-conf. This documentation will cover the CSV notation used, fetching CSV files from Google Sheets, converting the CSV files into JSON docs, and then uploading the data from the JSON files to your instance.\nConverting CSVs Running cht-conf with the csv-to-docs action converts CSV files from the csv folder into JSON docs to be uploaded to your instance. The JSON files are stored in the json_docs folder. Instructions for creating the CSV files are in sections below.\nUploading CSVs Running cht-conf with the upload-docs action will upload the JSON docs that were generated from the CSV files to your instance. For example, running cht --local upload-docs will upload the converted docs into your local instance. The target location --local can be replaced with an instance or URL. See cht-conf for detailed instructions.\nCreating CSV files for Contacts, Reports A separate CSV file is needed for each type of place, person, or report in your project’s local csv folder. The name of the file determines the type of doc created for rows contained in the file. The possible types are: report, person, and place. Each of these has a further specifier provided in the filename:\nplace.{place_type}.csv: where {place_type} is the type of place specified in the file. By default, the place types are one of clinic, health_center, or district_hospital. As of 3.7 of the Core Framework, the number of place types and their names can be configured — the {place_type} should match with the hierarchy names used. person.{parent_place_type}.csv: where {parent_place_type} is the type of place to which the people in the file will belong. report.{form_id}.csv: where {form_id} is the form ID for all the reports in the file. You will need one file per form ID Here are some examples:\nFile named place.district_hospital.csv adds the property \"type\":\"district_hospital\" File named person.clinic.csv add the property \"type\":\"person\" File named report.immunization_visit.csv add the property \"type\":\"report\", \"form\":\"immunization_visit\" In each of these files a header row is used to specify the JSON field names, and each subsequent row specifies the corresponding values for a doc. A _id field is automatically generated with a universally unique identifier.\nHere is an example of a csv/person.clinic.csv file for people belonging to clinics:\nname,sex,date_of_birth Adriana Akiyama,female,1985-12-31 Becky Backlund,female,1987-10-17 Carson Crane,male,2015-01-23 Here is the table representation of the CSV:\nname sex date_of_birth Adriana Akiyama female 1985-12-31 Becky Backlund female 1987-10-17 Carson Crane male 2015-01-23 Converting that CSV file to JSON docs with the csv-to-docs action would generate three files, one for each person. Here is one of the corresponding JSON files, json_docs/dbfbc0f0-117a-59ec-9542-3313fb10ef25.doc.json, which was created from the CSV data above:\n{ \"type\": \"person\", \"name\": \"Adriana Akiyama\", \"sex\": \"female\", \"date_of_birth\": \"1985-12-31\", \"_id\": \"dbfbc0f0-117a-59ec-9542-3313fb10ef25\" } Special notations Specifying property type By default, values are parsed as strings. To parse a CSV column as a different JSON type, append the JSON type name to the column definition, e.g.\ncolumn_one,column_two:bool,column_three:int,column_four:float,column_five:date,column_six:timestamp some string,true,1,2.3,2017-12-31,1513255007072 This would create a structure such as:\n{ \"_id\": \"09efb53f-9cd8-524c-9dfd-f62c242f1817\", \"column_one\": \"some string\", \"column_two\": true, \"column_three\": 1, \"column_four\": 2.3, \"column_five\": \"2017-12-31T00:00:00.000Z\", \"column_six\": 1513255007072 } Excluding column A special column type, excluded, is used for excluding a column from the final JSON data:\nmy_column_that_will_not_be_a_property:excluded This can be useful if using a column for doc references.\nAvailable types type outcome date Creates a date using Date() in javascript rel-date Creates a date with the addition of number days to the current date. A negative number results in a past date. timestamp Sets the string passed in as a timestamp number. If the timestamp in the csv is in milliseconds that will be used. If a date is passed it will be parsed and the milliseconds returned. EX: 04 Dec 1995 00:12:00 GMT becomes 818035920000 rel-timestamp Creates a timestamp that is offset by milliseconds against the current(NOW) timestamp. A negative number results in a past timestamp int Parses the value as an int using Number.parseInt() bool Sets boolean value based on string passed, either \"true\" or \"false\" string Sets the value as the string being interpreted. Can be omitted if values are only strings. float Sets value using Number.parseFloat() Including another doc Often times database documents need to include or refer to other documents in the database. This can be achieved with queries across CSV files, which is done by specifying a query in the column header. The query specifies the doc type (person or place) and matching condition.\nFor instance, to include the parent district’s doc in a health center’s doc, the parent:place WHERE reference_id=COL_VAL column header is used. The COL_VAL is a special notation for that column’s value for the row, and it will be used to match against the reference_id field in all other places. Given these example CSVs, you can see the corresponding JSON structure:\nplace.district.csv:\nreference_id:excluded is_name_generated name reported_date:timestamp district_1 false D1 1544031155715 district_2 false D2 1544031155715 district_3 false D3 1544031155715 place.health_center.csv:\nreference_id:excluded parent:place WHERE reference_id=COL_VAL is_name_generated name reported_date:timestamp health_center_1 district_1 false HC1 1544031155715 health_center_2 district_2 false HC2 1544031155715 health_center_3 district_3 false HC3 1544031155715 480d0cd0-c021-5d55-8c63-d86576d592fc.doc.json:\n{ \"type\": \"health_center\", \"parent\": { \"type\": \"district_hospital\", \"parent\": \"\", \"is_name_generated\": \"false\", \"name\": \"D2\", \"external_id\": \"\", \"notes\": \"\", \"geolocation\": \"\", \"reported_date\": 1544031155715, \"_id\": \"f223f240-5d6a-5a7a-91d4-46d3c59de73e\" }, \"is_name_generated\": \"false\", \"name\": \"HC7\", \"external_id\": \"\", \"notes\": \"\", \"geolocation\": \"\", \"reported_date\": 1544031155715, \"_id\": \"480d0cd0-c021-5d55-8c63-d86576d592fc\" }","available-types#Available types":"","converting-csvs#Converting CSVs":"","creating-csv-files-for-contacts-reports#Creating CSV files for Contacts, Reports":"","creating-csv-files-for-users#Creating CSV files for users":"To create user accounts from CSV files, a users.csv file will be needed in the csv folder. The users.csv file requires columns for username and password. Additional columns can be used for any additional fields needed on the user’s doc, for example roles, phone. Running the csv-to-docs upload-docs create-users actions in that order will generate the necessary JSON docs with a users.csv file in your working directory, and then create the people, places, and users.\nThe following sections describe the different ways to associate the new users to contacts.","creating-new-users-linked-to-contacts-in-csv-files#Creating new users linked to contacts in CSV files":"To associate the new users to contacts that will also be created with the csv-to-docs action, use reference queries to the contacts. For instance, the column header for the person would be contact:person WHERE reference_id=COL_VAL, and for the place would be place:GET _id OF place WHERE reference_id=COL_VAL.\nHere is a example of how the three CSV files need to be configured to setup a user linked to existing place and contact.\ncsv/place.health_center.csv:\nreference_id:excluded,parent:place WHERE reference_id=COL_VAL,is_name_generated,name,reported_date:timestamp health_center_1,district_1,FALSE,HC1,1544031155715 Generated JSON doc for the health center:\n{ \"type\": \"health_center\", \"parent\": { \"type\": \"district_hospital\", \"parent\": \"\", \"is_name_generated\": \"false\", \"name\": \"District1\", \"external_id\": \"\", \"notes\": \"\", \"geolocation\": \"\", \"reported_date\": 1544031155715, \"_id\": \"e8f9739a-5d37-5b1e-be3c-a571b2c2409b\" }, \"is_name_generated\": \"FALSE\", \"name\": \"HC1\", \"reported_date\": 1544031155715, \"_id\": \"8606a91a-f454-56e3-a089-0b686af3c6b7\" } csv/person.csv:\nreference_id:excluded,parent:place WHERE reference_id=COL_VAL,name,phone,sex,role,reported_date,patient_id p_hc1,health_center_1,Bob Johnson 1,+16143291527,male,manager,1552494835669,60951 p_hc2,health_center_1,Bob Johnson 2,+16143291528,male,manager,1552494835669,60951 Generated JSON doc for the person:\n{ \"type\": \"person\", \"parent\": { \"type\": \"health_center\", \"parent\": { \"type\": \"district_hospital\", \"parent\": \"\", \"is_name_generated\": \"false\", \"name\": \"District1\", \"external_id\": \"\", \"notes\": \"\", \"geolocation\": \"\", \"reported_date\": 1544031155715, \"_id\": \"e8f9739a-5d37-5b1e-be3c-a571b2c2409b\" }, \"is_name_generated\": \"FALSE\", \"name\": \"HC1\", \"reported_date\": 1544031155715, \"_id\": \"8606a91a-f454-56e3-a089-0b686af3c6b7\" }, \"name\": \"Bob Johnson 1\", \"phone\": \"+16143291527\", \"sex\": \"male\", \"role\": \"manager\", \"reported_date\": \"1552494835669\", \"patient_id\": \"60951\", \"_id\": \"65c52076-84c5-53a2-baca-88e6ec6e0875\" } csv/users.csv:\nusername,password,roles,phone,contact:person WHERE reference_id=COL_VAL,place:GET _id OF place WHERE reference_id=COL_VAL ac1,Secret_1,district_admin:red1,+123456789,p_hc1,health_center_1 ac2,Secret_1,district_admin:supervisor,+123456789,p_hc2,health_center_1 ac3,Secret_1,district_admin,+123456789,p_hc3,health_center_1 ac4,Secret_1,district_admin,+123456789,p_hc4,health_center_1 This will generate the users.csv file in the working directory which is used by the create-users action. The contact and place fields should be resolved to the actual UUIDs.\np_hc1\"username\",\"password\",\"roles\",\"contact\",\"phone\",\"place\" \"ac1\",\"Secret_1\",\"district_admin:red1\",\"65c52076-84c5-53a2-baca-88e6ec6e0875\",\"+123456789\",\"8606a91a-f454-56e3-a089-0b686af3c6b7\" \"ac2\",\"Secret_1\",\"district_admin:supervisor\",\"b7d0dbd5-beeb-52a8-8e4c-513d0baece8e\",\"+123456789\",\"8606a91a-f454-56e3-a089-0b686af3c6b7\"","creating-new-users-with-existing-contacts#Creating new users with existing contacts":"When creating users that are associated to existing contacts, contact and place columns should be created. Each row should have the UUID of an existing person for contact, and an existing place for place.","creating-new-users-with-new-contacts#Creating new users with new contacts":"To create new contacts for each new user provide values for contact.name, place.name, and place.parent (can be existing place), as seen in this example CSV:\nusername,password,roles,name,phone,contact.name,place.c_prop,place.type,place.name,place.parent alice,Secret_1,district-admin,Alice Example,+123456789,Alice,p_val_a,health_center,alice area,district_uuid bob,Secret_1,district-admin,bob Example,+123456789,bob,p_val_a,health_center,bob area,disctrict_uuid The username, password, contact.name, place.type, place.name columns are required to have functional users with new places.","excluding-column#Excluding column":"","google-drive-authentication#Google Drive authentication":"Cht-conf leverages Google authentication to access Google Drive. You will need to create a client_secrets file named .gdrive.secrets.json and place it in your working directory, and create a token.\nCreate the .gdrive.secrets.json file by downloading the client_secrets.json from Google. You will need a CLIENT_ID, CLIENT_SECRET and REDIRECT_URL. You can find these pieces of information by going to the Developer Console, clicking your project –\u003e APIs \u0026 auth –\u003e credentials –\u003e Download JSON. This will download the credentials but will need modified to be in this structure.\n{ \"client_id\": \".apps.googleusercontent.com\", \"project_id\": \"proj_id\", \"auth_uri\": \"https://accounts.google.com/o/oauth2/auth\", \"token_uri\": \"https://accounts.google.com/o/oauth2/token\", \"auth_provider_x509_cert_url\": \"https://www.googleapis.com/oauth2/v1/certs\", \"client_secret\": \"client_secret\", \"redirect_uris\": [\"urn:ietf:wg:oauth:2.0:oob\",\"http://localhost\"] } See Google’s docs here on Oauth2","including-another-doc#Including another doc":"","including-value-from-another-doc#Including value from another doc":"Similar to including another doc, it is also possible to get the value of a specific field in another doc. For instance, if parent:GET _id OF place WHERE reference_id=COL_VAL were used in the example above, the parent field’s value would have been set to the _id of the referred to doc instead of including the whole doc. Note that _id is a generated value included in all generated docs.\nreference_id:excluded parent:GET _id OF place WHERE reference_id=COL_VAL is_name_generated name reported_date:timestamp health_center_1 district_1 false HC1 1544031155715 health_center_2 district_2 false HC2 1544031155715 health_center_3 district_3 false HC3 1544031155715 The resulting doc would be as follows, with the _id from district_1 as the parent value:\n{ \"type\": \"health_center\", \"parent\": \"0c31056a-3a80-54dd-b136-46145d451a66\", \"is_name_generated\": \"false\", \"name\": \"HC3\", \"external_id\": \"\", \"notes\": \"\", \"geolocation\": \"\", \"reported_date\": 1544031155715, \"_id\": \"45293356-353c-5eb1-9a41-baa3427b4f69\" }","link-to-a-parent-document-already-existing-in-the-database#Link to a parent document already existing in the database":"You may wish to link the new record to a parent document that already exists in the database that was created in the past. Get the UUID of the existing parent document and place it in the column named parent._id. Get the rest of the the parent UUIDs in the hierarchy lineage and track them in separate columns. It is important to track all levels of the hierarchy as certain app features (e.g Tasks) in the configuration could be directly referencing a UUID deeper in the hierrarchy.\nFor example, a parent document below can be linked as shown in the table\n{ \"_id\": \"0c31056a-3a80-54dd-b136-46145d451a66\", \"parent\": { \"_id\": \"66142fef-c4b4-4578-94e2-3d7f1a304ef7\" } } reference_id:excluded parent._id parent.parent._id is_name_generated name reported_date:timestamp health_center_1 0c31056a-3a80-54dd-b136-46145d451a66 66142fef-c4b4-4578-94e2-3d7f1a304ef7 false HC1 1544031155715 The resulting doc would be as follows:\n{ \"type\": \"health_center\", \"parent\": { \"_id\": \"0c31056a-3a80-54dd-b136-46145d451a66\", \"parent\": { \"_id\": \"66142fef-c4b4-4578-94e2-3d7f1a304ef7\" } }, \"is_name_generated\": \"false\", \"name\": \"HC1\", \"reported_date\": 1544031155715, \"_id\": \"45293356-353c-5eb1-9a41-baa3427b4f69\" }","linking-to-google-drive#Linking to Google Drive":"The file csvs-on-google-drive.json in your project’s home directory will consist of a key value pair for each CSV file. The keys must be the filename where the CSV will be stored locally — see the CSV file documentation above for the notation. The value of each key must be the ID of the corresponding file in Google Drive — the ID can be obtained from the URL eg https://docs.google.com/spreadsheets/d/{FILE_ID}/edit.\n{ \"person.clinic.csv\":\"google_drive_ID\", }","seeding-data-with-cht-conf#Seeding data with cht-conf":"","special-notations#Special notations":"","specifying-property-type#Specifying property type":"","uploading-csvs#Uploading CSVs":"","using-csv-files-on-google-drive#Using CSV files on Google Drive":"Individual Google Sheets can be used for each CSV file, which can be exported manually to CSV file format, or linked to your project to be downloaded by cht-conf.\nTo fetch the files from Google Drive run the fetch-csvs-from-google-drive action in cht-conf. This will download the CSV files specified in the csvs-on-google-drive.json file, and place them into the csv folder."},"title":"CSV to Docs"},"/community/contributing/code/test-data/test-data-generator/":{"data":{"":"It is not recommended to use this tool to push data into production instances. Design the test data that fits your project hierarchy and reports. The tool will generate CouchDB docs and push them into your CHT test instance.","designing-test-data#Designing Test Data":"Steps to design the test data:\nCreate a custom JavaScript file that exports a default function. This function should match the DocDesign type. Your custom function should return an array of DesignSpec objects that define the structure of the data to be created. Generate and upload data npm run generate *path_to_your_custom_design_file*. That’s all! You can check the data in the CHT’s CouchDB. Note that getDoc function should return an object with at least a type: string. Remember that type is a data_record for reports, but when it comes to contacts, use the contact_types defined in your CHT project’s app-settings.json file.","example#Example":"import { faker } from '@faker-js/faker'; // API Reference: https://fakerjs.dev/api export default (context) =\u003e { return [ { amount: 14, // This creates 14 reports getDoc: () =\u003e ({ type: 'data_record', form: 'pregnancy_facility_visit_reminder', fields: { patient_name: faker.person.firstName(), }, }), }, { amount: 10, // This creates 10 hospitals getDoc: () =\u003e ({ type: 'district_hospital', name: `${ faker.location.city() }'s hospital`, }), children: [ { amount: 5, // This creates 5 people per each hospital getDoc: () =\u003e ({ type: 'person', name: faker.person.firstName(), }), } ] }, ]; } Based on the example above, the tool will create and push 14 report docs at once (the amount is also the batch size pushed into the CHT instance), it then creates 10 hospitals docs, and lastly creates 5 people docs for each hospital (it’s sent in groups of 5 docs to the CHT instance).\nSee the sample-designs folder for more examples.","generate-then-replicate#Generate then replicate":"When generating a massive dataset (100,000+ documents) for an existing database with views (e.g. the medic database), it is advisable to generate the data into a temporary database (on the same CouchDB instance) and then replicate the data into the target database (for example, using the Fauxton form at _utils/#/replication/_create). The document creation rate for this process (including generating into the temp DB, replicating to medic DB, and indexing views) has been measured at ~11,000 docs/min.\nWhile the speed gains of this approach are somewhat modest, it has a couple additional benefits:\nThe time spent running the actual generation script is minimal (since docs are added to the temp db at ~360,000 docs/min). Therefore, there is less risk of the script being interrupted or becoming disconnected from the CouchDB instance. Once all the docs are saved in the temp DB, the replication/indexing happens internally within the Couch instance. This is where the vast majority of the time is spent. You can keep your generated dataset in the temp DB for future use, without having to regenerate it each time you want to test with it.","install-test-data-generator-globally#Install test data generator globally":"Another option is to install the tool globally:\nInstall package dependencies and build the project npm ci Run npm install -g in the project root folder Build, generate and upload data by running tdg .","minimum-system-requirements#Minimum System Requirements":"npm \u003e= 10.2.4 node \u003e= 20.11.0","performance-considerations#Performance considerations":"Many factors can affect the performance of the generator including the number of documents to generate, the size of the documents, the network speed, and the server’s performance. When adding large datasets (100,000+ documents) to a database with existing views (e.g. the medic database), Couch’s view indexing jobs can significantly impact the performance of the generator.\nUnder optimal conditions, running against a local CouchDB instance and inserting data into a new database with no views, the document creation rate has been measured at ~360,000 docs/min.\nHowever, when running against a local CouchDB instance and inserting data into an existing medic database, the measured document creation rate was ~8000 docs/min.","setup-and-getting-started#Setup and Getting Started":"Instructions on setting up the project and getting it running on a local machine:\nSet the COUCH_URL environment variable to point to your test instance, for example: http://[user]:[pass]@[host]:[port]/medic Double-check your CHT test instance is running Clone or fork the test data generator repository Install and build the project by running npm ci in the project root folder Design the test data in a custom JavaScript file. See section on designing test data. Build, generate data and upload by running npm run generate *path_to_your_custom_design_file*","technologies-and-packages-used#Technologies and Packages Used":"TypeScript Axios UUID Faker","use-it-with-docker#Use it with Docker":"The tool is also available in Docker:\nCreate the image docker build -t test-data-generator . Run the container docker run --rm -it -v :/app/test-data -e COUCH_URL= -e FILE= test-data-generator"},"title":"Test Data Generator"},"/community/contributing/code/troubleshooting/":{"data":{"":"Content in this section Revalidate invalid reports Obtaining Browser and Phone Logs Replicating Production Data Locally Sharing Logs"},"title":"Debugging"},"/community/contributing/code/troubleshooting/invalid-reports/":{"data":{"":"You may encounter a dreaded case when reports coming in to a Medic Webapp instance have a red indicator instead of the green indicator.\nInvalid reports\nThis may be caused by:\nMissing forms in the app_settings config. Missing or incorrect fields in the input form. e.g Missing patient ID, or Patient ID with letters Extra fields in the input form. This happens when you don’t configure for some fields in the app_settings.json of the webapp Configuring some forms in the wrong section of the app_settings i.e registrations and patient_reports. Forms that don’t have a patient_id field because it is generated afterwards, e.g ANCR, IMMR, go to the registrations section, while form that have a patient_id field e.g ANCP, ANCV, IMMV; go to the patient_reports section","how-to-solve#How to solve":"To revalidate an invalid report, we need to clear the errors field on the doc (set it to []). Updating this field from Futon will not work and will result in an endless update process. The recommended way to do it is to download the doc, update it and then upload it. This will also ensure propagation and replication in couchdb.\nTo download a doc, use:\ncurl 'https://:@.app.medicmobile.org/medic/' \u003e filename.json filename.json is the local file in your computer you have stored the doc json\nUpdate filename.json: Set “errors” to [] and remove “accept_patient_reports” transition so that sentinel can revalidate the report.\nUpload filename.json with:\ncurl -X PUT hhttps://:@.app.medicmobile.org/medic/ -d @filename.json --header \"Content-Type: application/json\""},"title":"Invalid Reports"},"/community/contributing/code/troubleshooting/obtaining-logs/":{"data":{"":"There are many places where useful logs reside. This details all those places, and the easiest way to get a hold of them.","android-logs#Android logs":"The Android log is written to from the cht-android wrapper which captures errors like application crashes or failing integrations between Android apps.","browser-logs#Browser logs":"Now that you’ve enabled USB debugging on the phone you can access the dev console on the phone via USB from your desktop browser. This allows the same level of debugging and inspection you have on a desktop browser, but from your phone’s browser in the CHT app. Follow the official Android documentation to access the console.","on-a-laptop-or-desktop#On a laptop or desktop":"To check if there are relevant logs open up the developer console in your browser. The shortcut is probably COMMAND+OPTION+I on MacOS, or CTRL+SHIFT+I on Linux and Windows. Click the console tab and copy out any errors or logging that you think is relevant.","on-a-phone#On a phone":"There are two types of logs updated by Android devices depending on what information is needed. If you trying to get either of the logs from a device for the first time you need to set it up for USB debugging.","on-the-server#On the server":"Some unexpected errors are caught and stored in feedback docs and stored on the phone and later synced to CouchDB on the server. To access these, look for docs in the medic-user-{username}-meta or medic-users-meta databases. This is particularly useful to debug issues where you do not have physical access to the device. More information is available under Managing Databases.","step-1#Step 1":"Enable USB debugging on the phone. This varies from phone to phone, but here is the official Android documentation.","step-1-1#Step 1":"To install the adb command, follow the instructions under the Development Environment \u003e Debug tool adb section.","step-2#Step 2":"Connect your phone by USB to the computer.","step-2-1#Step 2":"Within a command line session, write the following command: adb start-server.","step-3#Step 3":"On your phone, you will see a popup “Allow USB debugging. The computer’s RSA fingerprint…”, click “OK”.\nAllow USB debugging","step-3-1#Step 3":"To check if your phone is properly connected, write the command adb devices. This will list the devices connected.\nADB Devices","step-4#Step 4":"Type the command adb logcat \u003e phone.log to get the android logs in the file phone.log. The log will be written to the phone.log file as long as this command is running. You can stop the recording at any time pressing Ctrl+C. Now if you reproduce the error on the phone you can look for any useful information being written to the phone.log.\nThis will get all the logs from the device, not just logs for the app you want to debug. You can pass arguments to adb to only get the logs you want.\nadb logcat MedicMobile:V AndroidRuntime:E chromium:V '*:S' \u003e phone.log Alternatively you can use grep to filter the logs down to only those from the relevant app.\nadb logcat | grep MedicMobile \u003e phone.log"},"title":"Browser and Phone Logs"},"/community/contributing/code/troubleshooting/replicating-production-data-locally/":{"data":{"":"Sometimes there will be a production problem that you need to dig into locally to solve. This guide explains how to:\nCopy the data from an instance to a local CouchDB database Run a local webapp instance with that data","first-a-note-about-data-safety#First, a note about data safety":"Production data is medical data. It’s HIV statuses and pregnancies. It’s important, and it’s not yours. If you’re downloading it, do so on an encrypted drive and delete it once you’re done with it.","large-production-instances#Large production instances":"If the instance is too large to replicate locally (or you are too impatient), you can replicate the data accessible to a single user. This process downloads a user’s data into a browser and then copies that data into a CouchDB database.\nOpen Firefox and navigate to about:config. Set security.csp.enable to false to disable Content Security Policies. Navigate to the instance and login as the user with the data you want. (If you want more data, like an entire district, you could consider logging in as a new user with a contact document at your desired place in the contact hierarchy. But that is an exercise for the reader) Wait for the data to replicate. You know this is done once the app lets you interact with it. (If you want to get the user’s data before purging, consider disabling purging. Another exercise for the reader) Make sure your local CouchDB has CORS enabled: https://docs.couchdb.org/en/stable/config/http.html#cors. Consider using add-cors-to-couchdb or its recommended settings. Allow your CouchDB to be accessible via https. One way is to run ngrok http PORT. The PORT (5984 by default) can be found in database configuration using fauxton under the chttpd section. This will make your CouchDB accessible via a url like https://abcd1234.ngrok.io. Open the console in Firefox and run await PouchDB.replicate('medic-user-XXX', 'https://your:admin@abcd1234.ngrok.io/YYY');. Here XXX is the name you logged in as, and YYY is the name of a database in which to store the data. Note: If you get 401s make sure that: your CouchDB credentials are right; and you don’t have a local session in the same browser already (session cookies can take precedence over basic auth); and if you’re running CouchDB in Docker you have exposed both 5984 and 5986 to localhost. Wait for the replication to complete. In Fauxton you should see the database YYY with the same number of documents reported during the user’s initial replication. Log out of the instance and clear your data from the developer console (Application -\u003e Clear storage). Navigate to about:config. Set security.csp.enable to true to re-enable Content Security Policies.","option-1-local-development-environment#Option 1, local development environment":"If you don’t already have a local dev env, follow the instructions on the development setup instructions.\nThen you need to:\nPush the code you want to run via COUCH_URL=http://your:admin@localhost:5984/YYY npm run build-dev. Start API and Sentinel by running COUCH_URL=http://your:admin@localhost:5984/YYY node api/server. Once you’ve done all of that you should be able to log in with your user.","option-2-horticulturalist#Option 2, horticulturalist":"Follow the instructions on the horticulturalist repo to get it installed. Then:\nMake sure that the medic DB doesn’t exist, so that you have a fresh database. Replicate your local PROD DB into a new medic database using the Fauxton console. Run horti --local --bootstrap=XXX, where XXX is the version you want to use (maybe the same one as production?) You should now be able to log in as that user locally!","regardless-do-this-too#Regardless, do this too":"To log in as a specific prod user you need to also copy them from the prod _users database into your own local _users database. The simplest way to do this is to just open the DB in Fauxton, find the document and copy it on your clipboard, then create a new document in your local _users DB and paste it in, deleting the _rev property.\nYou could also use this opportunity to change the password to something easier to work with locally. To do this, add a password property into the document with the password you want in plain text. CouchDB will convert this to a properly hashed password on save.","small-production-instances#Small production instances":"If there isn’t much data you can replicate the entire DB locally. You can initiate this either from your local Fauxton, or from the command line. You must use an administrator username and password for this at both the source and destination.\nFor Fauxton, navigate to http://localhost:5984/_utils/#/replication/_create For command line, see: https://docs.couchdb.org/en/stable/api/server/common.html#replicate\nNote that replication may stall on one document, and you may end up with your local DB having one less document than the source. This is due to how our URLs are setup: the replicator gets confused and considers login (ie https://url/login) to be a document. You can safely ignore this difference - you’re good to go once your destination database has one less document than the source.","step-1-get-the-data#Step 1: Get the data":"First thing is to get the data onto your local CouchDB. It’s advisable to create a new DB for this, so that you have a fresh untouched collection of data that isn’t mixed in with anything you have locally.","step-2-run-it-locally#Step 2, run it locally":"First you need to decide if you need a local development environment (unless you already have one, in which case you might as well use it), or are happy to just use Horticulturalist.\nA local development environment will be useful to you if:\nYou want to change code locally You want to see useful, non-minified stack traces, or otherwise browse / step through non-minified code in the browser You want to deploy a version of the code older than 2.14.0, as they are not available in Horticulturalist’s repos."},"title":"Production Data"},"/community/contributing/code/troubleshooting/sharing-4x-logs/":{"data":{"":"CHT 4.x moves from a monolithic container MedicOS to discrete containers, each service hosting one service of the CHT. When troubleshooting an issue with your CHT instance, it can be hard to list each container, see it’s status, gather up logs for each container and then share all this information with Medic or other support staff. To ease this pain, a script was written which automates the process.","archive-contents#Archive contents":"First, let’s look at the running containers when we called the script by calling docker ps --format '{{.Names}}':\nnew_project_nginx_1 new_project_sentinel_1 new_project_api_1 new_project_haproxy_1 new_project_couchdb_1 new_project_healthcheck_1 new_project-dir-cht-upgrade-service-1 Now if we uncompress the tarball created above and list the contents, it should look very similar when we call cd ~/.medic/support_logs\u0026\u0026tar xzvf cht-docker-logs-2023-02-14T15.04.45-08.00.tar.gz:\ndocker_ps.log docker_stats.log new_project-dir-cht-upgrade-service-1.log new_project_api_1.log new_project_couchdb_1.log new_project_haproxy_1.log new_project_healthcheck_1.log new_project_nginx_1.log new_project_sentinel_1.log There’s one file per container, each with the logs from that container. As well there’s two other files:\ndocker_ps.log - the output of docker ps docker_stats.log - the output of docker stats","calling-the-script#Calling the script":"Important\nBe aware of two important features of this script:\nIt will get logs for ALL docker containers running, even if they’re not part of the CHT Logs on production CHT instances will contain PII/PHI and should be handled with care The script defaults to getting the past 24 hours of logs and can be called from anywhere on your system as long as you specify the full path to the script. Here it’s being called from with in the cht-core/scripts directory:\n./compress_and_archive_docker_logs.sh If you’d liked to get more logs than the most recent 24 hours, pass in an argument of hours. Here we’re asking for 2 days worth of logs by using 48 as the argument:\n./compress_and_archive_docker_logs.sh 48 Depending on this volume of your logs, this may take a while. This is what the output of the script is when it’s completed:\nWait while the script gathers stats and logs about the CHT containers. Be patient, this might take a moment... Done! /home/cht-user/.medic/support_logs/cht-docker-logs-2023-02-14T15.04.45-08.00.tar.gz NOTE: Please remove the file when done as it may contain PII/PHI. The files are saved in your home directory (/home/cht-user/ in this case) and are timestamped with the creation date and timezone offset (2023-02-14T15.04.45-08.00).\nYou can now share this tar.gz file with support staff as needed. Again, be careful with it as it will contain PII/PHI if you ran this against a production instance.","prerequisites#Prerequisites":"This assumes you have access to the command line on the server where the CHT is running locally or via SSH.\nThis guide also assumes you have the CHT Core repo checked out so that you have a copy of the compress_and_archive_docker_logs.sh script. If you do not have it checked out, you can manually create a local copy with this curl command:\ncurl -o compress_and_archive_docker_logs.sh https://raw.githubusercontent.com/medic/cht-core/master/scripts/compress_and_archive_docker_logs.sh chmod +x compress_and_archive_docker_logs.sh"},"title":"Sharing Logs"},"/community/contributing/code/using-npm/":{"data":{"":"","adding-a-package#Adding a Package":"When you publish an npm module on npmjs.com, add it to the developers team under the @medic org.\nThis can be done using the web interface:\nLogin to npmjs.com then Navigate to Medic Developer’s Team and add your package there. Or command line:\nChange your directory to where the package’s package.json lives, then run: npm access grant read-write medic:developers Then npm access should show the updated permissions for the team members. npm access ls-collaborators { \"mandric\": \"read-write\", \"estellecomment\": \"read-write\", \"garethbowen\": \"read-write\", \"scdf\": \"read-write\", \"alxndrsn\": \"read-write\", }","npm-orgs#npm Orgs":"We use npm Orgs to organize our npm packages. It provides a centralized way to manage a team’s published npm packages and permissions. Here are some guidelines when using this service.\nSee npm’s Orgs docs for more information.\nOur organization is medic or using npm’s notation, @medic.\nWe also created @medicmobile but it’s not currently in use, it was created to reserve the namespace.","using-an-org-scoped-package#Using an Org Scoped Package":"A scope should be specified when a published package is a fork of an existing package, but otherwise scope is not needed since there is no conflict with the registry.\nFor example if you fork moment and you can’t get your changes merged upstream and need to publish a new package then modify the package name (in package.json) to specify a organizational scope, like @medic/moment and publish it.\nFor more info see Publishing an Org Scoped Package."},"title":"Using NPM"},"/community/contributing/code/workflow/":{"data":{"":"","branches#Branches":"The main branch is main (or master) which must be kept stable so as not to impact other developers and so a release branch can be created as needed. To achieve this, development should be done in a branch (only possible for maintaners) or fork and submitted via a PR for code review. This means the CI runs and another developer has signed off on the change before it is included in the main branch.\nCreate a branch following the guideline below and push commits at least once a day to a remote repository. This ensures that the code is always backed up and safe, protects against accidental deletes, and allows community members to see the latest changes and work together more effectively.\nThe main branch is main or master and is the GitHub default branch and contains the latest code. Release branches have the form ..x and should be stable. Feature branches have the form - and are work in progress. Note\nWhen backporting changes to an earlier release branch you should git cherry-pick the appropriate commit(s) from the main branch into the release branch. Then use a pull request to make sure tests pass on CI before merging (you do not need to get the pull request approved if there were no conflicts when cherry-picking).","closing-an-issue#Closing an Issue":"An issue is considered complete when:\nThe documentation is finalized. It includes merged updates in CHT Docs, updated README files, and necessary code comments. This is especially important as the CHT community can always access up-to-date documentation. Unit tests, e2e tests and/or integration tests are written. The static checks like linting and Sonar should pass successfully as part of the quality process, and any issues should be fixed. The reviewers have approved the Pull Request. All code has been merged into the main branch and/or release branches and are ready for release. The issue is added to the appropriate release milestone, which is the earliest semver version the change will be released in. This ensures it will be included in the release notes. Lastly, the issue status is updated to Done.","code-quality#Code Quality":"Several static analysis tools are used to support code quality. These tools are run automatically on every pull request and will fail the build if they find any issues.\nFor a more efficient feedback loop, developers should run linting scripts locally before pushing code to the repository. Additionally, both ESLint and Sonar have IDE plugins that show code issues in real-time.","code-reviews#Code reviews":"","commit-message-format#Commit message format":"The commit format should follow the conventional-changelog angular preset. This means that some of the release process can be automated. See the list of commit types and examples below:\nType Description Example commit message Release type Bug fixes Change code that wasn’t working as intended. fix(#123): infinite spinner when clicking contacts tab twice patch Performance A code change that improves performance. Measure the performance improvement to inform the community. perf(#789): lazily loaded angular modules patch Features A new feature or improvement that users will notice. feat(#456): add home tab minor Non-code A change that user won’t notice, like a change in a README file, adding e2e tests, updating dependencies, removing unused code, etc. chore(#123): update README none Note\nBreaking changes should be explained under the commit type (feat, fix and perf) using the prefix BREAKING CHANGE. onsider the following example:\nperf(#2): remove reporting rates feature BREAKING CHANGE: reporting rates no longer supported Any other further information should be provided in the second line of the commit message, respecting 79 character line widths. Using git commit -v is recommended to review your diff while you write your commit message.\nSee tips on How to Write a Git Commit Message and add your favorites here.\nNever force push remote. Prefer rebasing over merging as it makes for a cleaner history.\nCommit reformats and refactors separately from actual code changes to make reviewing easier.\nRead more about using git.","commits#Commits":"","development#Development":"","done#Done":"Issues in this column are complete, all code has been merged into the main branch and/or release branches, and are ready for release.","guidelines#Guidelines":"The author and reviewer should use this guide to code reviewing.","in-progress#In progress":"Issues in this column are being actively worked on, which includes development, design, documentation, code reviews, and testing.","issue-status#Issue Status":"When the issue is scheduled for development it can be added to a project. When linked to a GitHub project, the issue has a status property that represents the state the issue is in.","issues#Issues":"Issues are managed in GitHub. Issues should be created in the repository where the changes need to be made. If it is not clear in which repo to open an issue the default should be the cht-core repository. If it is a security or sensitive issue, reach out privately to the CHT maintainers so they can open an issue in the private medic-projects repository.\nWhen creating issues add the appropriate Priority and Type labels.","labeling-review-comments#Labeling review comments":"The reviewer should prefix labels in the review comments wherever possible which clarify the intention of the comment and remove any misunderstanding that might happen. This helps prioritizing the comments that the author need to address.\nThe following labels taken from conventional: comments:\npraise - Praises highlight something positive. Try to leave at least one of these comments per review. Do not leave false praise (which can actually be damaging). Do look for something to sincerely praise. nitpick - Nitpicks are trivial preference-based requests. These should be non-blocking by nature. suggestion - Suggestions propose improvements to the current subject. It’s important to be explicit and clear on what is being suggested and why it is an improvement. Consider using patches and the blocking or non-blocking decorations to further communicate your intent. issue - Issues highlight specific problems with the subject under review. These problems can be user-facing or behind the scenes. It is strongly recommended to pair this comment with a suggestion. If you are not sure if a problem exists or not, consider leaving a question. todo - TODO’s are small, trivial, but necessary changes. Distinguishing todo comments from issues: or suggestions: helps direct the reader’s attention to comments requiring more involvement. question - Questions are appropriate if you have a potential concern but are not quite sure if it’s relevant or not. Asking the author for clarification or investigation can lead to a quick resolution. thought - Thoughts represent an idea that popped up from reviewing. These comments are non-blocking by nature, but they are extremely valuable and can lead to more focused initiatives and mentoring opportunities. chore - Chores are simple tasks that must be done before the subject can be “officially” accepted. Usually, these comments reference some common process. Try to leave a link to the process description so that the reader knows how to resolve the chore. note - Notes are always non-blocking and simply highlight something the reader should take note of. Sample comments:\nIssue comment\nSuggestion comment","migrating#Migrating":"When the schema is changed you must also provide a migration so when instances are upgraded existing data is compatible with the new code.","opening-pull-requests#Opening Pull Requests":"Create a Draft Pull Request to facilitate discussion and collaboration with quality assistance engineers and developers.\nOnce you are confident that the change is complete and ready to be merged:\nChange the Pull Request from Draft to Ready for review.\nThe Pull Request title will be the commit message, it is important to follow the commit message format to name the Pull Request title properly.\nAdd a Pull Request description:\nAdd a description of changes, decisions, backstory, thinking process, and any extra information to facilitate the review process and reduce follow-ups. Add videos or screenshots of the tests you did before submitting the Pull Request. This increases understanding of the work and allows the reviewers to catch any uncovered case. Add the issue number, for example: medic/cht-core#123. Do a self-code review before asking for a review. This is a good practice, as you will almost always find things to fix. It saves a lot of time for you and the reviewers.\nPick one reviewer for the PR and work with them until the code passes review. It is okay to include one additional reviewer who has more experience in a particular subject.\nCoordinate with a QA engineer and add them as reviewers when you need specific quality/testing support. For example, when major changes or new features are introduced to the codebase, security-related changes are made, and substantial user experience improvements are required. The QA engineer can advise whether that needs to be considered in the current e2e suite, they can advise on edge cases or other scenarios to consider for testing. Follow up on your PR to keep momentum; the review should happen in 24h business days. If you haven’t received feedback from the reviewers after that time, check if they are available. Otherwise, it’s okay to request a review from another person.\nOnce the PR has been approved, wait for the GitHub Actions to succeed and ensure there are no conflicts with the main branch.\nDouble-check the commit message format is correct. Make sure to recognize collaboration in the commit description: Co-authored-by: .\nMerge your work by selecting Squash and merge. This will compress all the commits into one, keeping the repository’s commit history clean.\nIf a backport is required, cherry-pick the merged commit back to the release branches it is required in.","pull-requests#Pull Requests":"Never push commits directly to the main branch (main or master). Always use a pull request.\nIf your code is in a regular pull request, it is assumed to be done and only needing a review and testing as checks before merging. It is best to request a reviewer, but otherwise anyone may freely review your PR. If your code is in a draft PR, it is assumed to be a work-in-progress where collaboration is welcome, but best to communicate about specifics before assuming anything is complete. If you have pushed code to a remote branch without a pull request, it is assumed to be a work-in-progress where collaboration is unexpected. A good workflow would be to work locally, pushing to a remote branch as you make progress, possibly open a draft PR for some initial collaboration on tricky parts, and once everything is done, convert the draft PR to a regular PR to be reviewed.\nOnce your pull request has been approved, it can be merged to the main branch by anyone with write access to the repository.\nWhen merging a PR, avoid the “Create a merge commit” option. Merge commits in the main branch cause the history of the branch to be non-linear and make it more difficult to understand exactly when a code change was introduced. Instead, use the “Squash and merge” option to combine the commits in the PR into a single commit on the main branch. Alternatively, you can use the “Rebase and merge” option if you want all the commits in the PR to be preserved in the main branch (this should only be used in special cases).\nSee above for instructions on how to format your commit messages.","regressions#Regressions":"When a bug is found that impacts functionality that worked in a previous version, it’s important that this is labelled properly so someone who is planning to upgrade can find it. To flag this, add the “Regression” label, and a label in the form “Affects: {{version}}” (e.g.: “Affects: 3.14.0”) for each version where this bug exists. It’s likely that the label for this specific version doesn’t exist so you may have to create it. This ensures that issue is listed as a Known Issue in the Release Notes for that version.","suggestions#Suggestions":"When doing a code review aim to be extremely clear. This helps things move quickly and avoids lost time in misunderstandings. One especially useful GitHub feature for doing this is suggesting a change. Consider the following example code:\ncontacts.map( (c) =\u003e { return c.id }); The function body can be abbreviated. In a review you can leave a comment asking for the change, which would likely involve writing up a comment trying to have the author change it to the following:\ncontacts.map( c =\u003e c.id); That means leaving a comment, having the author read and understand it, and then making and pushing up a change, hopefully matching your review expectations.\nTo be clear and save all that back-and-forth though, you can make a code suggestion directly in your review, which will let the author simply click a button to accept the change (and have it automatically applied as a commit by GitHub).\nGitHub review suggest change","testing#Testing":"Reach out to the Quality Assurance Engineers with the work to be done as early as possible in the development process to ensure they are informed and can guide development (see more in the Quality Assistance dedicated page).\nBefore asking for testing support from the QA Engineers, you should test your work after performing it. Correcting a small code error, such as a typo, or adding a missing step in the testing instructions could save QA Engineers hours of work. Also, by testing your code, you may get a better sense of why you make certain common mistakes, and learn to avoid repeating them in the future.\nAll features and bug fixes must have at least one unit test. All features must have at least one end-to-end test.\nThe CHT Core has a fully automated end-to-end testing suite which is executed in CI and must pass before any change is merged. This means you can have reasonable confidence that all code merged to the main branch is safe and ready for release without further regression testing. The suite isn’t fully comprehensive but it is being constantly improved and expanded.\nFrom time to time QA Engineers will perform smoke tests, scalability tests, performance tests, and penetration tests to pick up on gradual regressions that may have crept in. The ultimate goal is that these tests will eventually be automated and added to the CI suite as well.\nUse the following template for QA feedback throughout the development.\nTest passedTest failed Test details Config: Environment: Platform: Browser: Test scenario: Description of the scenario - This is not required for all the tests\nReproducible on master A small description of how it was reproduced, and images or videos that support the comment.\nImage/video attached Fixed on ####-branch-name A small description, and images or videos that support the comment.\nImage/video attached Test passed successfully. ✅ The ticket is ready to merge. @\nTest details Config: Environment: Platform: Browser: Test scenario: Description of the scenario - This is not required for all the tests\nReproducible on master A small description of how it was reproduced, and images or videos that support the comment.\nImage/video attached Not working on ####-branch-name A small description, and images or videos that support the comment.\nImage/video attached Test failed ❌ The ticket needs further development. @","timeliness#Timeliness":"Timely code reviews are important to getting improvements into the hands of users faster and allowing developers to stay focused on the task at hand and see it through to production.\nCode reviews should be completed within 24 hours of assignment (excluding weekends and holidays). In some cases, a code review may not be possible if a larger discussion needs to be had for design choices or solution objectives, but even in cases like those, some feedback is still to be expected within 24 hours.","to-do#To do":"Issues in this column have been prioritised and are ready for development. The issue has all the detail needed to begin development and it is free for anyone to start work on. If you start work on an issue, assign it to yourself and move it to “In progress”.","updating-the-issue-with-what-you-actually-did#Updating The Issue With What You Actually Did":"Add labels to the GitHub issue as needed. At this stage, the two to look out for are:\nBreaking change UI/UX Add a comment to the GitHub issue with what the final change actually was. This is important for multiple cases including:\nNon-technical people may not understand the conversation thread on the issue. GitHub is a place that developers work, but it is also common to send non-technical people links to issues in GitHub. The QA team should have a quick way to know where to start testing. Issues with a lot of discussion of alternative solutions need a clear resolution and indication of which route was taken. Options for doing this:\nAttach a short video - these are usually very well received and can often help people understand what happened much more clearly than a text description. Screenshots - pictures with big arrows on them can quickly convey important things to look at. If you start to need multiple screenshots consider the video option instead. Write up a few sentences - be sure to consider a non-technical audience when writing this. An example of a good thorough comment/template is as follows:\n### Testing 1. Install branch `81-do-great-things` 2. [a specific thing to be sure it has been set up correctly] 3. ... ### What was actually built [video|screenshots|text] ### Documentation - [link](url)","writing-code#Writing code":"Where possible, follow the coding style guide.\nAim for self-documenting code. Where code cannot be made self-documenting add commenting. Usually comments are useful when they explain why some code exists, and should not be explaining what some code is doing."},"title":"Workflow"},"/community/contributing/contribution/":{"data":{"":"A contribution is any meaningful action: technical or non-technical, that advances the CHT’s mission of improving community health. All contributions must add measurable value, adhere to the Code of Conduct, and align with the CHT’s core goals.","ways-to-contribute#Ways to Contribute":"There are many paths to contribute to the CHT community. Here are some of the key ways you can get involved:\nTechnical contributions include:\nCode: Submit bug fixes, develop new features, or build example apps. Design: Create wireframes, user \u0026 system workflows, or solution documentation. Security: Disclose vulnerabilities. Testing: File bug reports, improve test coverage, or perform user acceptance testing. Non-technical contributions include:\nDocumentation: Write guides, create tutorials, or translate the CHT to make it accessible to more users. Community Support: Answer questions on the CHT Forum, provide user feedback, or advocate for the CHT. Collaboration: Participate in a squad to help tackle specific user needs or projects. Events: Facilitate community events like Community Meetup or Dev Hour."},"title":"About Contributions"},"/community/contributing/creating-good-first-issues/":{"data":{"":"The goal of the GitHub tickets labelled with “Good First Issue” is to make it easy for a first time contributor to get started with contributing to the CHT.\nFollow the next steps to create a “Good First Issue”:\nFind an issue you know a lot about. Ideally one where you know exactly what the steps are Edit the body of the issue and add a ## Good first issue section List out the steps you would take to solve the issue. Be sure to list out any edge cases or possible errors that might come up Where possible, add code snippets or links to existing code that the contributor can reference or mimic Link to any guiding, relevant docs (for example, first time contributors docs Add the Good first issue label to the ticket. These are not the same as Help wanted tickets - be sure you know the difference.","example-ticket#Example ticket":"Taken from #9869 opened Apr 2025:\nAdd user storage usage to user-devices API\nIs your feature request related to a problem? Please describe. CHWs can run out of disk space and not know why their device is not performing as expected. Giving administrators an easy way to monitor this would be really helpful\nDescribe the solution you’d like Right now there’s a user-devices API which has per user information, but does not include used and total storage space on the device. If we add this to this report, it would make an easy way to find this data!\nDescribe alternatives you’ve considered Administrators could either manually check telemetry documents per user in Couch (see deviceInfo.storage.free) or they could set up a process like CHT Sync or couch2pg to sync this data to a Postgres database.\nThese are either slow (manually checking) or hard to set up (syncing data), where as the API is built in.\nAdditional context\nForum discussion. Original work on user-devices API","good-first-issue#Good first issue":"This ticket has the Good first issue label! This means it’s been especially curated by other CHT contributors to be easy to work on for first time contributors.\nTo succeed on this ticket, please:\nset up your development environment - and ensure it works by logging in to you CHT instance create an offline user called test in the administrative interface log in as this user to ensure a unique device ID in the CHT is created go to fauxton and create a document based on the JSON below do a curl call to the user-devices API and not it’s output: http://medic:password@localhost:5988/api/v2/export/user-devices - ensure you see the values from the document you created above review the code changes made when the original User Devices API was added: while 35 files were edited (a lot!) - check out the changes to api/src/services/export/user-devices.js and ddocs/users-meta-db/users-meta/views/device_by_user/map.js how might you extend these two files to include two new values based on the earlier work in this PR? look at the path in the JSON below - what will be the path you’ll need to use to add the values to map.js?","markdown-template#Markdown template":"Use this content to paste into a GitHub ticket. Then add the steps needed to solve the ticket. See the ticket below for an example of what this would look like:\n## Good first issue This ticket has the [Good first issue label](https://github.com/medic/cht-core/issues?q=state%3Aopen%20label%3A%22Good%20first%20issue%22)! This means it's been especially curated by other CHT contributors to be easy to work on for first time contributors [per the docs](https://docs.communityhealthtoolkit.org/community/contributing/creating-good-first-issues/). To succeed on this ticket, please: 1. step one 2. step two 3. step three","sample-telemetry-json#Sample telemetry JSON":"{ \"_id\": \"f9f8846e894b412e0ac45874d3005b01\", \"_rev\": \"7-76f4d0a2b4ab01fd37acfdea84fab57c\", \"type\": \"telemetry\", \"metrics\": {}, \"device\": { \"userAgent\": \"Mozilla/5.0 (Linux; Android 10; TECNO KC8 Build/QP1A.190711.020; wv) AppleWebKit/537.36 (KHTML, like Gecko) Version/4.0 Chrome/128.0.6613.146 Mobile Safari/537.36 org.medicmobile.webapp.mobile.moh_togo_echis/v1.1.0-alpha.echis_togo\", \"deviceInfo\": { \"app\": { \"version\": \"v1.1.0-alpha.echis_togo\", \"packageName\": \"org.medicmobile.webapp.mobile.moh_togo_echis\", \"versionCode\": 101009900 }, \"software\": { \"androidVersion\": \"10\", \"osApiLevel\": 29, \"osVersion\": \"4.9.190+(LMN-OP-201103V104)\" }, \"hardware\": { \"device\": \"TECNO-KC8\", \"model\": \"TECNO KC8\", \"manufacturer\": \"TECNO\", \"hardware\": \"mt6761\", \"cpuInfo\": { \"cores\": 4, \"arch\": \"armv7l\", \"model name\": \"ARMv7 Processor rev 4 (v7l)\" } }, \"storage\": { \"free\": 16713310208, \"total\": 26544680960 }, \"ram\": { \"free\": 490688512, \"total\": 1919627264, \"threshold\": 150994944 }, \"network\": {} } }, \"metadata\": { \"year\": 2024, \"month\": 10, \"day\": 12, \"aggregate_date\": \"2024-10-13T09:42:59.143Z\", \"user\": \"test\", \"deviceId\": \"3ea7d1c5-3481-45a9-8989-728e95efda42\", \"versions\": { \"app\": \"4.9.2\", \"forms\": { \"abandonment\": \"7-df0764a3f37db1a1a673c3933ef7903f\" }, \"settings\": \"6-d9a3d151837a45fde187d21206aa78a7\" } }, \"dbInfo\": { \"doc_count\": 572, \"update_seq\": 1252, \"idb_attachment_format\": \"binary\", \"db_name\": \"medic-user-test\", \"auto_compaction\": true, \"adapter\": \"idb\" }, \"quux\": \"banana\" }"},"title":"Good First Issues"},"/community/contributing/disclosing-vulnerabilities/":{"data":{"":"In the CHT Community, we take the security of our systems seriously and value the security community. Disclosure of security vulnerabilities helps us ensure the security and privacy of the CHT users","disclosure#Disclosure":"If you believe you’ve found a security vulnerability in one of our products or platforms send it to us by emailing dev@medic.org. Include the following details with your report:\nDescription of the location and potential impact of the vulnerability; A detailed description of the steps required to reproduce the vulnerability (proof of concept source code, screenshots, and compressed screen captures are all helpful to us); and Your name/handle and a link for recognition in our Hall of Fame.","guidelines#Guidelines":"We require that all researchers:\nMake every effort to avoid privacy violations, degradation of user experience, disruption to production systems, and destruction of data during security testing; Refrain from using any in-scope compromise as a platform to probe or conduct additional research, on any other system, regardless of scope; Perform research only within the scope set out below; Use the identified communication channels to report vulnerability information to us; and Keep information about any vulnerabilities you’ve discovered confidential between yourself and Medic until all production systems have been patched. If you follow these guidelines when reporting an issue to us, we commit to:\nNot pursue or support any legal action related to your research; Work with you to understand and resolve the issue quickly (including an initial confirmation of your report within 72 hours of submission); Recognize your contribution on our Security Researcher Hall of Fame, if you are the first to report the issue and we make a code or configuration change based on the issue.","in-scope#In Scope":"A local CHT instance is included in the scope. Follow the manual instructions to set up a CHT instance.","out-of-scope#Out of scope":"Any services hosted by 3rd party providers and any and all other services hosted on or beneath the medicmobile.org and hopephones.org domains are excluded from scope.\nIn the interest of the safety of our users, staff, the Internet at large and you as a security researcher, the following test types are excluded from scope:\nFindings from physical testing such as office access (e.g. open doors, tailgating) Findings derived primarily from social engineering (e.g. phishing, vishing) Findings from applications or systems not listed in the ‘Scope’ section UI and UX bugs and spelling mistakes Network level Denial of Service (DoS/DDoS) vulnerabilities Things we do not want to receive:\nPersonally identifiable information (PII) Any exploits or proofs-of-concept in binary format (e.g. ELF)"},"title":"Disclose Vulnerabilities"},"/community/contributing/docs/":{"data":{"":"This Community Health Toolkit documentation site is the primary resource for partners, app designers, and developers looking to learn about, as well as build digital health apps using the CHT. The documentation site includes product feature overviews, design resources, implementer guides, and technical reference documentation.\n👥 The CHT community welcomes first-time contributors and experts alike. All comment, questions, and ideas are welcome! Documentation is a collaborative effort among all community members. Contributors play an important role in:\nMaking suggestions for improvements Reporting and correcting mistakes Updating text and examples for clarity Authoring guides and tutorials Help us maintain the quality of the CHT documentation by submitting a PR with any suggested changes. See the Documentation Style Guide, then open a pull request with your suggested changes or additions. For simple changes, use the “Edit this page” link shown in the upper right of every page.\nWorkflowHow to contribute to the CHT documentation Style GuideEditorial guidelines for writing documentation"},"title":"Documentation"},"/community/contributing/docs/style-guide/":{"data":{"":"This style guide provides a set of editorial guidelines for anyone writing documentation for Community Health Toolkit projects. These are guidelines, not rules. Use your best judgment.\nImportant\nThis documentation site does not involve release management and acceptance testing. Help us maintain the quality of our documentation by submitting a pull request (PR) with any suggested changes. One of the repository’s maintainers will review the PR, request additional changes as needed, and merge the PR when it is ready.","active-voice#Active voice":"Do Don’t Stop everything and delete the medic DB to clear your database. Clear your db by stopping everything and deleting the medic DB. Replicate your local production database into a new medic database to bootstrap your data. Bootstrap your data by replicating your local PROD DB into a new medic database. Exception: Use passive voice if active voice leads to an awkward construction.","address-the-reader-as-you#Address the reader as \u0026ldquo;you\u0026rdquo;":"Do Don’t You can create a database by … We’ll create a database by … In the preceding output, you can see… In the preceding output, we can see …","angle-brackets-for-placeholders#Angle brackets for placeholders":"Use angle brackets for placeholders. Tell the reader what a placeholder represents.\nCreate a file named -medic-os-compose.yml. Where is the name of one of your project.","avoid-broken-links#Avoid broken links":"To avoid broken links always use ref or relref shortcodes for internal references with the full path for the page. Check out the Hugo documentation for cross-references for more details.\nFor example, [Icon Library]({{\u003c relref \"design/interface/icons\" \u003e}}) yields “Icon Library”. Using the full path will avoid ambiguous references if a new page of the same is created.","be-brief#Be brief":"Give the audience just enough context and information to make decisions confidently. Avoid long sentences.","bold-for-user-interface-elements#Bold for user interface elements":"Do Don’t Click Fork. Click “Fork”. Select Other. Select ‘Other’.","british-standard-for-punctuation-inside-quotes#British standard for punctuation inside quotes":"Do Don’t The doc in the database is a “record”. The doc in the database is a “record.” The copy is called a “fork”. The copy is called a “fork.”","code-snippet-formatting#Code snippet formatting":"","code-style-for-filenames-directories-and-paths#Code style for filenames, directories, and paths":"Do Don’t Open messages-en.properties file. Open messages-en.properties file. The file is located in /config/standard directory. The file is located in /config/standard directory. Create medic/translations/messages-en.properties file. Create medic/translations/messages-en.properties file.","code-style-for-inline-code-and-commands#Code style for inline code and commands":"For inline code in an HTML document, use the ``` tag. In a Markdown document, use the backtick (`).\nDo Don’t The npm run build-dev-watch command builds and deploys the webapp. The “npm run build-dev-watch” command creates a Deployment. To upload the configuration from your current directory, use cht --local. To upload the configuration from your current directory, use “cht –local”. Enclose code samples with triple backticks. (```) Enclose code samples with any other syntax.","community-health-toolkit-word-list#Community Health Toolkit word list":"A list of terms and words to be used consistently across the site.\nTerm Usage Docker Docker should always be capitalized. Community Health Toolkit Community Health Toolkit should always be capitalized. CHT Acronym for “Community Health Toolkit”. CouchDB No space between Couch and DB. Do not use Couchdb, Couch DB or other variations.","cross-referencing-content#Cross-referencing content":"Connecting readers to related content in different pages is an important aspect of documentation. There are three ways this can be done in the doc site:\nInline links: a portion of any narrative text can link to another page. This should done using the markdown link notation.\nFor example, the text linking documents is a [foundational reason for the web existing in the first place](https://en.wikipedia.org/wiki/Hypertext)! yields: “linking documents is a foundational reason for the web existing in the first place!”\nSee Also: the see-also shortcode is available to connect to an important concept within the documentation site. The link will be more prominent to the reader by having a common prefix and shown on a separate line.\nFor example, {{\u003c see-also page=\"design/interface/icons\" \u003e}} will show as seen here: See Also: Icon Library\nYou can also make the callout say “Read More” with the prefix tag: {{\u003c see-also prefix=\"Read More\" page=\"design/interface/icons\" \u003e}}. This will show as seen here: Read More: Icon Library\nA custom title and anchor can be provided as well. For example, {{\u003c see-also page=\"design/interface/icons\" title=\"Learn about the Icon Library\" anchor=\"about-the-icon-library\" \u003e}}, will show as: See Also: Learn about the Icon Library\nUse see-also when referencing related topics and use read-more when referencing the same topic in more depth.","dont-include-the-command-prompt#Don\u0026rsquo;t include the command prompt":"Do Don’t export COUCH_NODE_NAME=couchdb@127.0.0.1 $ export COUCH_NODE_NAME=couchdb@127.0.0.1","formatting-standards#Formatting standards":"","general-guidelines-and-best-practices#General guidelines and best practices":"This section contains suggested best practices for clear, concise, and consistent content.","get-to-the-point-quickly#Get to the point quickly":"Lead with what’s most important. Make steps obvious to make your documentation easily scannable.","grammar-and-punctuation-in-headers#Grammar and punctuation in headers":"Use title case for page title, and sentence case for linkTitle description. Do not end titles with periods.","hextra-shortcodes#Hextra shortcodes":"Hextra provides a collection of shortcodes and built-in icons to enhance the content.","images#Images":"The image markdown syntax can be used for images, but if any styling is required use the built-in figure shortcode. With the figure shortcode many fields are configurable, and the position and size can be responsive with Bootstrap grid classes. You should avoid using the HTML img tag in the documentation.\nDo Don’t {{\u003c figure src=\"image.png\" class=\"right col-6 col-lg-3\" \u003e}} {{\u003c figure src=\"image.png\" class=\"right col-6 col-lg-3\" \u003e}} It is good practice for the image to link to the image file so that a larger version can be viewed easily. This can be done using the link attribute with the figure shortcode, which is less error prone than adding a link to the markdown image notation.\nDo Don’t {{\u003c figure src=\"image.png\" link=\"image.png\" alt=\"Alt text\" title=\"Image Title\" \u003e}} [![Alt text](image.png \"Image Title\")](image.png)","indicating-location-of-items-on-the-screen#Indicating location of items on the screen":"Do Don’t right-hand side right hand side left-hand left hand","inline-code-formatting#Inline code formatting":"","italics-to-define-or-introduce-new-terms#Italics to define or introduce new terms":"Do Don’t By default CouchDB runs in admin party mode, which means you do not need users to read or edit any data. By default CouchDB runs in “admin party” mode, which means you do not need users to read or edit any data. The keys in .properties files are referred to as terms. The “keys” in .properties files are referred to as terms.","language#Language":"Documentation for the Community Health Toolkit is written is American English.","latin-phrases#Latin phrases":"Prefer English terms over Latin abbreviations.\nDo Don’t For example, … e.g., … That is, … i.e., … Exception: Use “etc.” for et cetera.","link-paragraphs-not-titles#Link paragraphs, not titles":"Whether using ref ,relref or inline links, do not link a title:\nDo Don’t Read more about [InnoDB here](https://en.wikipedia.org/wiki/InnoDB). ## [InnoDB here](https://en.wikipedia.org/wiki/InnoDB) The [Icon Library]({{\u003c relref \"design/interface/icons\" \u003e}}) has many great icons. ## [Icon Library]({{\u003c relref \"design/interface/icons\" \u003e}})","notes-and-tips#Notes and tips":"Make notes and tips stand out by using blockquote styling.\nNote\nThis is a sample note.\nTip\nThis is a sample tip.\nImportant\nThis is a sample important note.\nWarning\nThis is a sample warning.\nCaution\nThis is a sample caution.","number-formatting#Number formatting":"Avoid the use of comma or period as thousands separator since it can be confused for a decimal point in some countries. Either use no separator for small numbers or a unicode Thin Space which is often recommended for international documents.\nThere’s a shortcode format-number which will replace _ with Thin Space to simplify formatting in this way.\nDo Don’t {{\u003c format-number 10_000 \u003e}} 10,000 {{\u003c format-number 10_000 \u003e}} 10.000 {{\u003c format-number 1_000_000 \u003e}} 1000000","page-descriptions#Page descriptions":"Page descriptions show on index pages, and at the top of the individual pages.\nUse active and concise language in page descriptions.\nDo Don’t Best practices for configuring CHT Applications This document covers the configuration best practices of forms, tasks, targets, and contact profiles when building your own community health app Use sentence case and no punctuation. Avoid multiple sentences.\nDo Don’t Best practices for configuring CHT Applications Best Practices For Configuring CHT Applications Developing and delivering world-class software Developing and delivering world-class software. The central users of CHT Applications CHWs are the central users of apps built with the Core Framework. CHWs conduct household visits and are responsible for the health of their community.","practices-to-avoid#Practices to avoid":"","present-tense#Present tense":"Do Don’t CouchDB converts this to a properly hashed password when you save. CouchDB will convert this to a properly hashed password on save. Exception: Use future or past tense if it is required to convey the correct meaning.","separate-commands-from-output#Separate commands from output":"Verify the security settings on CouchDB:\ncurl http://localhost:5984 The output is similar to this:\n{\"error\":\"unauthorized\",\"reason\":\"Authentication required.\"}","simple-and-direct-language#Simple and direct language":"Use simple and direct language. Avoid using unnecessary phrases, such as saying “please.”\nDo Don’t To create a database, … In order to create a database, … See the configuration file. Please see the configuration file. View the logs. With this next command, we’ll view the logs.","tabular-schedules#Tabular schedules":"Displaying the occurrence of events over time in a workflow is often done using a table. To keep these consistent we recommend using the tabular schedule format.\nFor example, here is a sample vaccination schedules:\n6m 12m 18m 2y 2.5y 3y 3.5y 4y 4.5y 5y Deworming X X X X X X X Vitamin A X X X X X X X X X X To achieve this use a markdown table with the letter X (X) to mark events, leaving cells empty when no action is needed. The shortcode {{% schedule %}} is used before and after the markdown table so that built-in styling can be applied. Here is the code for the above example:\n{{% schedule %}} || 6m | 12m | 18m | 2y | 2.5y | 3y | 3.5y | 4y | 4.5y | 5y | |------------|--|--|--|--|--|--|--|--|--|--| | Deworming | | | X | X | X | X | | X | X | X | | Vitamin A | X | X | X | X | X | X | X | X | X | X | {{% /schedule %}} Tip\nThe opening {{% schedule %}} and closing {{% /schedule %}} shortcode must come before and after the markdown table respectively in order for it to correctly style the table.","use-markdown-notation#Use Markdown Notation":"Documentation pages should be written in Markdown notation, and not contain HTML tags whenever possible.\nStyle Do Don’t italic _italic_ or *italic* italic or bold bold **bold** bold or bold table ` …","using-jargon-and-idioms#Using jargon and idioms":"Some readers speak English as a second language. Avoid jargon and idioms to help them understand better.\nDo Don’t To get started, … To get up and running with no fuss, … Internally, … Under the hood, … Create a new database. Turn up a new database.","using-statements-about-the-future#Using statements about the future":"Avoid giving hints about the future. If you need to talk about an alpha or beta feature, put the text under a heading that identifies it as alpha or beta information.","using-statements-that-will-soon-be-out-of-date#Using statements that will soon be out of date":"Avoid words like “currently” and “new.” A feature that is new today might not be considered new in a few months.\nDo Don’t In version 3.4, … In the current version, … The Log user statistics feature provides … The new Log user statistics feature provides …","using-we#Using \u0026ldquo;we\u0026rdquo;":"Using “we” in a sentence can be confusing, because the reader might not know whether they’re part of the “we” you’re describing.\nDo Don’t Version 3.0 includes … In version 3.0, we have added … Medic provides a new feature to reduce the time to load contacts. We made several changes to reduce the time to load contacts. This page teaches you how to use cht-gateway. In this page, we are going to learn about cht-gateway.","videos#Videos":"When embedding videos, use the youtube shortcode to embed a responsive YouTube video player.\nCopy the YouTube video ID that follows v= in the video’s URL and pass it to the youtube shortcode. For instance, with https://www.youtube.com/watch?v=pFEFIY_SA7M the shortcode would be:\n{{\u003c youtube pFEFIY_SA7M \u003e}}\nAnd would display as seen here:","voice-and-tone#Voice and tone":"The voice and tone should be inclusive and accessible to its audience. Consider that readers come from different backgrounds and may have varying levels of ability reading English, as well as technical abilities.","where-to-place-your-images#Where to place your images":"To ensure your images are loaded on the docsite in the right format, place them in a folder that is named similar to your .md file. For example in the scenario below, the image is linked in the style-guide.md file, thus it is placed in the style-guide folder.","write-like-you-speak#Write like you speak":"Aim for a voice and tone that’s conversational and approachable. Try to sound like a knowledgeable friend who understands what the developer wants to do."},"title":"Style Guide"},"/community/contributing/docs/workflow/":{"data":{"":"","basics#Basics":"It is helpful to be comfortable with git and GitHub to contribute to the CHT community. The documentation source is in GitHub. The content pages are in the /content/en/ directory. Documentation is written in Markdown. The CHT site build uses Hugo. You can also setup a local clone.","commits-to-github#Commits to GitHub":"The main branch is main which must be kept stable since it is deployed to the doc site. All documentation changes should be done in a branch with a Pull Request when ready for review. This means that a maintainer has signed off on the change before it hits the main branch.\nFormat your commit messages according to the Git convention where the first line should be a short title/summary (50 characters or so) with more details in a separate paragraph (if needed).\nImportant\nEvery commit message should be able to complete the following sentence: When applied, this commit will be: {YOUR COMMIT MESSAGE}","creating-a-pull-request#Creating a Pull Request":"When your branch is ready for review, create a Pull Request. If you know who you’d like to review the PR, you can assign them directly. If you are unsure, you can leave it to the maintainers to handle the PR.\nNote\nIf the PR is part of an open issue in cht-core, add the Blocked: waiting on AT label so that the PR isn’t accidentally merged prematurely, before the issue is acceptance tested and complete.","getting-started#Getting Started":"Anyone can contribute to CHT documentation by opening an issue in the cht-docs repo or by using the “Edit this page” or “Create docs issue” links in the upper right corner and of your window, respectively bottom left corner.","reviewing-pull-requests#Reviewing Pull Requests":"In general, reviewers should:\nRead the PR description to understand the changes made, as well as any linked issues Review any comments by other reviewers Select the Files changed tab to see the files and lines changed Click the + beside the line you want to comment on. To select multiple lines at once, click the + of the top line of the selection, drag down to the bottom line, and release. Add any comments you have about the line and click either Add single comment (if you want to post the comment without a review) or Start a review (if you have multiple comments to make). When finished, click Review changes at the top of the page. Here, you can add a summary of your review, approve the PR, comment or request changes as needed. Once all comments have been resolved, or changes are satisfactory, Merge pull request to complete the updates, and delete the branch. Additional Tips for Reviewers:\nUse the Style Guide to maintain documentation quality Compare content to pages within the same section and encourage consistency Be empathetic to the author, commenting on positive aspects of PRs as well as changes Ask clarifying questions where needed to avoid further confusion","writing-documentation#Writing Documentation":"A high degree of importance is put on consistency and usability of CHT documentation so that it is accessible and understood by a wide audience. The CHT documentation style guide will help to write documentation in the most consistent and useful way."},"title":"Workflow"},"/community/contributing/first-time-contributors/":{"data":{"":"","clone-the-repository#Clone the repository":"To clone the forked repository locally, in a browser, open the forked repository. Then click on the “\u003c\u003e Code” button and then on the “SSH” tab. Finally, click the double square icon to copy the URL to your clipboard.\nOpen a terminal and run this command, being sure to replace GITHUB-USER with your GitHub user:\ngit clone https://github.com/GITHUB-USER/cht-core.git","create-a-branch#Create a branch":"Change to the repository directory on your computer (if you are not already there):\ncd cht-core Now create a branch using the git switch command:\ngit switch -c TICKET-NUMBER-your-new-branch-name For example:\ngit switch -c 1234-add-alonzo-church If you get any errors using git switch, click here: If the error message “Git: switch is not a git command. See git –help” appears, it’s likely because you’re using an older version of git.\nIn this case, try to use git checkout instead:\ngit checkout -b your-new-branch-name","create-a-fork#Create a Fork":"Create your own fork the CHT Core repository by going to the CHT’s fork page on GitHub. When you click “Create Fork” on that page, you will create a copy of this repository in your GitHub account.","development-environment#Development environment":"Now that you have an idea of what the CHT is and how code gets written, go set up your development environment. Move intentionally, being sure to follow each step carefully. If you get stuck here - or anywhere - reach out on the forum!\nSpend some time understanding how to start up and stop the development environment.","fork-the-cht#Fork the CHT":"Good work! if you’ve gotten this far you understand what the CHT is and you know how code is written for the CHT. Now it’s time to set up your very own copy of the CHT, called a fork.\nFollow these steps to set up a copy of the code (“fork”) which you have on your computer (“git clone”). If you’re not comfortable with the command line, see tutorials using GUI tools.\nIf you do not have a GitHub account, create one now as it’s a requirement to fork and contribute code.","how-code-gets-written#How code gets written":"Over the years the process for writing the CHT has been codified in the development workflow. Skim this so you’re aware of the basics. Check out the CHT code style guide as well. You don’t have to memorize everything here, but it’s important to know about and refer back to when the time comes to actually write code.\nA good rule of thumb is to mimic the processes you see and the styles already present in the source code.\nIf you have never used git or GitHub, check out the Get started using GitHub in less than an hour guide. This will help you set up a GitHub account, which you’ll also need. If you haven’t worked on a pull request before, check out How to Contribute to an Open Source Project and How to Contribute to Open Source.","make-necessary-changes-and-commit-those-changes#Make necessary changes and commit those changes":"Following the suggestions on the Good First Issue, make the changes to the code. Be sure the app still works and compiles with out errors.\nIf you go to the project directory and execute the command git status, you’ll see there are changes. In this example, the Contributors.md file has been modified\nAdd any changes to the branch you just created using the git add command. In this example we’re adding just one file, but you add multiple separated by spaces:\ngit add Contributors.md Now commit those changes using the git commit command. On your first commit, be sure reference the original ticket as shown with the #1234 at the end:\ngit commit -m \"Updating Contributors list per #1234\"","push-changes-to-github#Push changes to GitHub":"Push your changes using the command git push:\ngit push -u origin your-branch-name replacing your-branch-name with the name of the branch you created earlier.\nIf you get a Authentication failed error while pushing, click here: remote: Support for password authentication was removed on August 13, 2021. Use a personal access token instead. remote: See https://github.blog/2020-12-15-token-authentication-requirements-for-git-operations/ for more information. fatal: Authentication failed for 'https://github.com//first-contributions.git/' Go to GitHub’s tutorial on generating and configuring an SSH key to your account.\nAlso, you might want to run ‘git remote -v’ to check your remote address.\nIf it looks anything like this:\norigin\thttps://github.com/your-username/your_repo.git (fetch) origin\thttps://github.com/your-username/your_repo.git (push) change it using this command:\ngit remote set-url origin git@github.com:your-username/your_repo.git Otherwise you’ll still get prompted for username and password and get authentication error.","submit-your-changes-for-review#Submit your changes for review":"If you go to your repository on GitHub, you’ll see a Compare \u0026 pull request button. Click on that button.\nNow submit the pull request.\nYou will get a notification email once the changes have been merged or when changes are requested. Maintainers are usually working on several initiatives at once, so expect that it might take some time before they can look at your PR.\nContent from this section is taken from the first-contributions which is under the MIT License.","tutorials-using-other-tools#Tutorials Using Other Tools":"GitHub Desktop Visual Studio 2017 GitKraken Visual Studio Code Atlassian Sourcetree IntelliJ IDEA","what-is-the-cht#What is the CHT":"Before you write a line of code or help improve the documentation, it’s important to understand the larger picture of the CHT. Read up on why you might use the CHT and visit the CHT home page. If you’ve never seen or used the CHT, it can be really helpful to sign up for a demo.\nDiving more into the technical aspects of what the CHT is, see the technologies and tools used by the CHT. Additionally, the Technology Radar for CHT Contributors gives an overview of the technologies used to build the CHT tools.\nThe CHT is open source. Any code you commit will be freely available for other CHT users and they can improve and customize it just as you might choose to do so with the code others have written.","who-this-is-for#Who this is for":"Documentation exists for everything from how to compile the CHT from source to how to build the docs site locally. However, where do you start? What if you’ve never contributed to an open source project before? This guide helps the newcomer make their first contribution.\nIf you want the more brief steps, check out the contributors’ quick start.\nIf this isn’t you all together, head over to our Community section where it list out other actions for new community members who are not developers.","your-first-issue#Your first issue":"Issues marked Good first issue could be a great start if you are new to the CHT. Feel free to pick an issue that looks easy for you! An easy-looking issue will better set you up for successfully merging the code. Easy merges are our goal here!\nMake a comment on the issue asking for the issue to be assigned to you.\nNote - Help Wanted issues do not have the extra introduction that Good first issues have. While you’re welcome to work on them, they’ll be more of a challenge for first-time contributors that likely will want some guidance found in the Good first issues."},"title":"First Time Contributors"},"/community/contributing/mit/":{"data":{"":"This license is required to be included with the first-contributions content the CHT docs uses in the first time contributors guide:\nMIT License Copyright (c) 2016 - present Roshan Jossey Permission is hereby granted, free of charge, to any person obtaining a copy of this software and associated documentation files (the \"Software\"), to deal in the Software without restriction, including without limitation the rights to use, copy, modify, merge, publish, distribute, sublicense, and/or sell copies of the Software, and to permit persons to whom the Software is furnished to do so, subject to the following conditions: The above copyright notice and this permission notice shall be included in all copies or substantial portions of the Software. THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE."},"title":"MIT License"},"/community/contributing/technical-resources/":{"data":{"":"This page contains materials that will help a CHT Contributor to learn the technical details they need to be successful when building tools related to the CHT.\nKeep in mind that this is a living document, and every contributor is encouraged to add to it when identifying learning opportunities that can set them up for success with the CHT. The main goal here is to provide the technical people who are new to the CHT with a list of resources that could be beneficial for them in both the short and long term. However, the expectation is not to complete every course listed in this document but instead to share some resources that other contributors found helpful. It is valid if you prefer to use other training material, as long as you cover the skill/topic during the onboarding. That means you will need to learn JavaScript, TypeScript, Docker, CouchDB, and others mentioned in the “Skills” column, as you will use them in your day-to-day activities, and the list provided in the “Resources” column is meant to support you in this. It is OK if you prefer to learn with alternative resources.","technical-resources#Technical Resources":"Skill Resources CHT Local Environment and Docs Set up your local development environment Go through CHT Documentation Get familiar with the Development Workflow Architecture of CHT Instances CHT Academy - Introduction to Building CHT Application Where to ask questions about the CHT? JavaScript Eloquent JavaScript Asynchronous JavaScript Requests You Don’t Know JS TypeScript TypeScript Documentation Docker Containers and Docker Mega Thread Docker mastery course Learn Docker in a month of lunches The Ultimate Docker course Kubernetes Kubernetes documentation Using Kubernetes as a Developer Packaging Applications with Helm for Kubernetes CouchDB and PouchDB CouchDB introduction user guide docs Understanding CouchDB 3 Introduction to PouchDB NodeJS and NPM The Complete Node.JS developer course Understanding NPM - Node.js Package Manager Angular Angular guides Angular University courses Offline First Offline Web Applications Web Architecture Web Architecture 101 Web Browsers Inside look at modern web browsers, part I Inside look at modern web browsers, part II Inside look at modern web browsers, part III Inside look at modern web browsers, part IV Web Performance High Performance Browser Networking PostgreSQL PostgreSQL Tutorial PostgreSQL Cheat Sheet PostgreSQL Views Tutorial PostgreSQL Views Documentation Common Table Expressions (CTEs) PostgreSQL Queries with CTEs Documentation dbt dbt Core guides dbt Video Playlist"},"title":"Technical Resources"},"/community/contributing/translations/":{"data":{"":"Tip\nOpen an issue if you are interested in translating the CHT into a different language, and make it available to the community.\nCHT Core currently has built-in support for the following languages:\nLanguage Language Code Status Arabic ar Incomplete Bambara bm Incomplete English en Complete Spanish es Complete French fr Complete Hindi hi Incomplete Indonesian id Incomplete Nepali ne Complete Swahili sw Complete Languages marked as “Complete” are fully translated and any new user-facing text will always be translated into these languages. Languages marked as “Incomplete” may be missing translations for some keys and/or the CHT community needs additional volunteers to help support this language by translating new keys.\nIf you are interested in helping to support any of these languages, please come introduce yourself in the Translation category on the CHT Community Forum! (No technical knowledge/experience is needed to help with translations.)\nSee the localization documentation for more information on how to manage custom translations for a particular CHT instance.","adding-new-keys#Adding new keys":"When developing a new feature in CHT Core, any user-facing text must be translated. (Note: log messages are not considered “user-facing” as they will not be seen by end users and as such do not need to be translated.)\nIn the cht-core repository, the translations are stored in api/resources/translations. To add a new translation string:\nFirst check if an appropriate key already exists in messages-en.properties. Using existing keys when possible reduces the effort required to translate the app into a new language. Create a unique key to identify the translation string. The key should accurately describe the string’s purpose/usage. Add the key to each of the files contained in api/resources/translations. Include an English translation string for your key (and strings for any other languages you are proficient in). Leave the string empty for the other languages. Note the translation linting will fail for any empty strings in translation files for the languages marked as “Supported” in the table above. This is expected and the check should continue to fail until translations from the community are added (as described below). When you have completed the implementation of your new feature (and you are confident you know which translation strings are needed), make a new post in the Translation category on the CHT Community Forum requesting help from the community to translate the new strings. Include the key(s) and the English string(s) in your post, with a link to the issue/PR you are working on. You can also include any context/screenshots that may help the translators understand the string’s purpose. Add the additional translations from the community into the proper files in api/resources/translations. Translations are required for all the languages above marked as “Supported”.","adding-new-languages#Adding new languages":"New languages must be added and configured in several places:\nCreate a new messages-xx.properties file in the api/resources/translations folder, replacing “xx” with the 2 or 3 letter language code. The language code will be used to identify the language in the application. For instance, for English, we would have a translations/messages-en.properties file. Add the language to the LOCAL_NAME_MAP in api. Use the language code for the key, and the local name followed by the English name for the language in brackets, eg: “fr: ‘Français (French)’”. Import the moment language pack in the main.ts file. If moment doesn’t provide the required language pack you may need to contribute it upstream to the moment library. Import the bootstrap-datepicker language pack in the Enketo main.ts file. If bootstrap-datepicker doesn’t provide the required language pack you may need to create a custom language pack as in the Luganda language example. Add a TRANSLATIONS entry for the new language in the translator.js file.","linting-translations#Linting translations":"You can run the automated translation linting locally via the npm run lint-translations command. This linting is automatically executed by GitHub Actions on every pull request.","modifying-any-existing-translation-values#Modifying any existing translation values":"To modify a translation string value, update the default English value and then follow the same basic steps outlined above to request translations from the community.","overview#Overview":"Translation files live in the cht-core GitHub repository. These translation files are properties files, which are a series of key-value pairs. The English file is used by default, and as such, it contains the entire set of keys. If any key is missing from another language file, the English value is used.","removing-translation-keys#Removing translation keys":"Carefully verify that the translation key isn’t used. This can be challenging if keys have been concatenated or generated because then you won’t be able to find the complete string in the source code. Once this has been confirmed, then simply remove the key and value from all translation files.","translating-configurations#Translating configurations":"Much of the app is configurable (eg: forms and schedules). Because the specifics of the configuration aren’t known during development time, these can’t be provided via messages. Instead, configurers can provide a map of locale to value for each translated property. Then use the translateFrom filter to translate from the configured map using the user’s language.","translating-static-text#Translating static text":"In angular this is done using angular-translate, and ideally using the translate directive to reduce the number of watchers, eg: date.incorrect.title.\nUse the translation functions in the config module in API and Sentinel."},"title":"Translations"},"/community/events/":{"data":{"":"The CHT Event Calendar contains all the virtual, public events happening on any given day around the CHT community.\nTip\nClick on the Add to Google Calendar link in the calendar below to subscribe to the CHT Calendar. If this option doesn’t work, you can use the iCal format to add to your calendar with this link.\nEnable notifications to never miss a CHT event! 🎉"},"title":"Event Calendar"},"/community/hall-of-fame/":{"data":{"":"","code--documentation#Code \u0026amp; Documentation":"Thank you to everyone who has contributed to the CHT codebase over the years! To see the full list, visit each repo on GitHub.\ncht-android cht-conf cht-core cht-docs cht-interoperability cht-pipeline cht-sync cht-watchdog","security#Security":"Kudos to everyone who has disclosed security vulnerabilities.\nAlex Anderson with 4 disclosures\n#9122, #9121, #9120, #9108\nSyafiq Al Atiiq with 1 disclosure\n#10209"},"title":"Hall of Fame"},"/community/roadmap/":{"data":{"":"The CHT roadmap serves as a high-level plan for how the CHT will grow to realize the shared community vision; it is where you can learn about what initiatives the community is working on and what stage they are in.","initiative-stages#Initiative stages":"Initiatives are outlined on the project board with the following stages to give a sense of how far out each item is on the horizon:\nStage Description Activities Emerging Initiatives are currently under initial discussions Early exploration discussions, analysis of emerging requirements, and feedback collection/scope out features and improvements with community members. The outcome of these activities is an initiative to be co-built/co-created by the community Active Community members are actively working on the defined initiative, for example, in a squad Squad formation, building \u0026 testing Winding Down The initiative is ready for release or closure Releasing new CHT functionalities and/or adoption to production environments. Adoption of new processes.","roadmap-communication#Roadmap communication":"Updated initiatives are communicated on the CHT Forum and discussed at the CHT Community events, such as the CHT Round-up call. Where possible, they link to specific issues and/or documentation to elaborate on what was completed to move an initiative forward.","what-is-a-community-initiative#What is a community initiative?":"Community initiatives are specific areas to amplify the CHT functionalities that align with the vision set out by the community. Initiatives are often worked on over multiple releases and by several organizations and individuals. When an initiative gathers interest within the community, contributing organizations and community members can form a squad and start working on the feature to be built. There are various stages within the implementation phase, including design, building, testing, and release, among others. Community members and organizations are encouraged to periodically review the squad dashboard to have an overview of the functionalities that are being worked on and are welcome to join squads at any stage."},"title":"Roadmap"},"/community/squads/":{"data":{"":"","1--emerging#1. ✨ Emerging":"A need sparks! The community identifies a feature or improvement with broad potential.\nOutputs:\nA squad kick-off message is shared on the forum Community members volunteer to participate in the squad The Code of Conduct is shared with all squad members. A squad kick-off call is scheduled with the interested contributors.","2--early-design-discussion#2. 🧑🏼‍🎨 Early Design Discussion":"Teams explore technical requirements, timelines, and design approaches.\nOutputs:\nThe first output of early discussions should be a needs and requirements document. The squad members should align on what’s in scope and what’s out of scope of the project and identify how success should look like for the initiative. Resource commitments - identify which contributor works on which part of the project.","3--requirements--design#3. 💡 Requirements \u0026amp; Design":"Turning ideas into action.\nOutputs:\nThe squad should collaboratively work on a design document based on the requirements. Once the first iteration is complete, pause to incorporate feedback by announcing it on the forum for broad community review before proceeding. If needed, UI mockups are created.","4--developmentbuilding#4. 🧑🏽‍💻 Development/Building":"Once the design doc is accepted, development can begin. If multiple orgs are codeveloping the functionality, then agree on a single communal branch/workspace for the developers to contribute to. Ensure work is pushed to the public repositories early and often. Ensure coding best practices are being followed, such as automated testing, code quality, and documentation. Ensure manual testing is happening throughout to find issues early.\nOutput:\nWorking software","5--testing#5. 📲 Testing":"Ensuring quality. Rigorous manual/automated testing verifies functionality.\nOutputs:\nTest reports Verified software","6--review#6. 🛋️ Review":"When the squad confirms that the solution meets the requirements, submit a pull request for code review. Nominate a CHT maintainer to work on the review. Post the PR and instructions on how to run it, on the forum so other community members can try it out. After passing both technical review and allowing a few days for community feedback, merge the approved code.\nOutputs:\nPR posted with testing instructions in the forum for community validation. Merged contribution with documented community input.","7--release#7. 💪🏼 Release":"The functionality is released and ready to create an impact in the real world. Features can be deployed to users.\nOutput:\nSoftware release","8--done#8. ✅ Done":"Mission accomplished. The project meets all goals and the related tasks are marked complete.\nThe most important thing now is to recognise the efforts of everyone involved in this process. This cannot be understated. Do this loudly, repeatedly, in private, and in public, calling out specific people and organisations.\nTo close out the squad, undo all the set up that was done in Kick Off:\nRemove the meeting from the shared Google calendar so it does not show up on the public Events Calendar Archive the dedicated Slack channel - Stewardship team can help with this Clean up GitHub tickets - make sure all releated tickets are closed and up to date Hold a final meeting to thank everyone and have a retrospective to ask “What worked?”, “What didn’t work? and “What could be changed/improved?”. Implement improvements to make this process better next time.","how-do-squads-form#How do squads form?":"The journey to forming a squad begins with a community need and a conversation about it. Here’s how it typically works:\nTopic is Posted on the forum: A community member or organization posts a topic on the CHT Forum to be explored in the squad and connect with other interested community members. Express Interest: Other community members and organizations read the post and engage with it. If you are interested in the topic, you should reply to the forum post to express your interest, share your ideas, and indicate your potential availability. Squad Formation: If there is enough collective interest and commitment, the squad formation process begins. This involves defining the squad’s objective, goals, and timeline. The original proposer often becomes the initial facilitator. From there, interested parties officially become squad members and begin the collaborative work. The facilitator should reach out to the CHT Stewardship Team to allocate dedicated time during Round-up or Community Meetup calls for sharing the initiative with the broader community.","kick-off#Kick off":"Once the squad members have a start date, organise a public, open kick-off meeting with all community members interested in contributing to the initiative. The agenda for this meeting should include: Introductions and role clarity. Overview of squad objectives and desired outcomes. Alignment on squad scope. Initial task assignments. Agreement on a recurring meeting cadence (for example, weekly/biweekly calls). Reach out to the CHT Stewardship Team to create a dedicated Slack channel for squad discussion. If Slack doesn’t suit for whatever reason, any other shared comms channel would be fine. Invite others in advisory roles, such as domain or UX experts, and clarify their involvement—for example, through periodic reviews or feedback sessions—even without a full-time commitment. Any expertise is invaluable for reviews, sharing advice, etc.","what-are-the-different-stages-in-a-squad#What are the different stages in a squad?":"Squads evolve through stages, and anyone can start contributing at any stage, regardless of their experience level. Here are the various stages:","what-is-a-squad#What is a squad?":"A CHT Squad is a cross-functional, action-oriented team that works together to solve community needs. These teams bring together developers, designers, project managers, and other contributors to build and implement new features and improvements for the CHT.\nWhen a community-proposed improvement shows potential for broad impact, we invite the wider community to collaborate. Members can express interest in contributing to discussions, design, development, testing, and/or funding. Below are the characteristics of how a squad works:\nCollaborative by design: Anyone can join - whether you are an experienced community contributor or just getting started with the CHT Transparent process: Regular meetings and shared public notes and documentation to keep everyone informed Flexible contributions: Help in whatever way works for you - coding, design, testing, or documentation.","where-to-find-active-squads#Where to find active squads?":"See the active squads on the CHT roadmap and subscribe to the CHT calendar to stay up to date with all the CHT events, including the regular squad meetings.","why-join-a-squad#Why join a squad?":"Work on meaningful projects that make a real difference Learn from and collaborate with other community members Help shape the future of the CHT"},"title":"Squads"},"/community/tech-radar/":{"data":{"":"It is essential for a development toolkit such as the Community Health Toolkit to constantly improve and keep track with the latest useful innovations. It is important to openly look for innovations and new technologies and to question established technologies and methods every now and then.\nTo enhance visibility and clarity on the technology choices, the technological strategy, and the available CHT features and tools, we leverage a framework called Technology Radar.\nA Technology Radar provides an easy-to-grasp visual representation of tools, languages, frameworks, platforms, and techniques, as well as features and functionalities we use to build the CHT. Additionally, the Technology Radar provides a degree of adoption and guidelines on using (or not using) a particular technology. The community can leverage it to answer questions like: What’s the difference between technologies such as Klipfolio, Superset, and Grafana? Should we use cht-couch2pg or cht-sync for our project?\nWhile reflecting on the audience of such a tool, we’ve identified the need to build two separate versions: a CHT Technology Radar for Implementers and a CHT Technology Radar for Contributors. We leverage existing open-source tools by ThoughtWorks and AOE to implement the user interface. Due to our commitment to open-source, all the content of the Technology Radars is public on GitHub and open to the community to provide comments and suggestions.","for-contributors#For Contributors":"The CHT Technology Radar for Contributors provides a helpful view for developers to know what languages, tools, platforms, or techniques to use while contributing to CHT tools.\nWe categorized this radar’s content into four quadrants:\nLanguages \u0026 Frameworks: Include development languages and more low-level development frameworks, which help implement custom software of all kinds. Tools: These can be components, like databases, software development tools, such as version control systems. Techniques: Include elements of a software development process, such as continuous integration, and ways of creating software, such as progressive web applications. Platforms: There are things that we build software on top of, such as mobile technologies like Android or generic kinds of platforms like Amazon Web Services. We classify each of the items above in one of these rings:\nAdopt, Trial, Stop. These adoption degrees have the same usage recommendation as the ones for the CHT Technology Radar for Implementers above. Assess: The Assess ring contains items to look at closely, but not necessarily trial yet - unless you think they would be a particularly good fit for you. Typically, items in the Assess ring are interesting and worth keeping an eye on. You can learn how to contribute to the CHT Technical Radar for Contributors in the related GitHub repository.","for-implementers#For Implementers":"The CHT Technology Radar for Implementers provides a view of all CHT-related tools and components so that CHT implementers and application developers can decide which to use when designing, developing, and hosting their CHT applications.\nWe categorized this radar’s content into four quadrants:\nApp Building: These components help build CHT apps, like CHT Conf, and form preview/builder tools like XLSForm. CHT App Features: Aspects of CHT Core Framework that can be used in CHT Apps. These could include new CHT form widgets, updated UI elements like the floating action button, and user management features. Data Use: This includes tools and components used to manage data that comes in or out of the CHT. It also includes integrations, interoperability standards and methods, ETL, Pipeline, and querying techniques. Additionally, this quadrant contains visualization tools for dashboards. Deployment Management: Deploying and maintaining CHT instances takes considerable coordination, especially for large-scale deployments. This quadrant also includes key aspects for hosting, including tools and methods for alerts and monitoring. We classify each of the items above in one of these rings:\nAdopt: The Adopt ring represents tools that you should seriously consider using. We don’t say you should use these for every project; one should only use a tool in an appropriate context. However, an item in the Adopt ring represents something where there’s no doubt it’s proven and mature for use with the CHT. Trial: The Trial ring is for tools ready for use but only partially proven as those in the Adopt ring. You should use these on a trial basis to decide whether they should be part of your toolkit. Others may already be using these items in production, likely as early adopters of the tools. Stop: The Stop (or Not Recommended) ring is for things we think implementers should avoid using or look for ways to move off of. These include items for which a better alternative is available, or where the item is found to not work correctly with the CHT. You can learn how to contribute to the CHT Technical Radar for Implementers in the related GitHub repository."},"title":"Tech Radar"},"/design/":{"data":{"":"PersonasLearn who the CHT can be built for InterfaceUser interface and branding guide UX ResearchExplore guidelines for conducting user experience research Mapping HierarchyLearn how to map users on the CHT hierarchy Best PracticesBest practices when building your own community health app"},"title":"Design"},"/design/best-practices/":{"data":{"":"This section covers the configuration best practices of forms, tasks, targets, and contact profiles when building your own community health app.","always-stack-radio-buttons-and-checkboxes-in-a-single-vertical-column#Always Stack Radio Buttons And Checkboxes In A Single Vertical Column":"Placing the options underneath each other allows for easy scanning and makes it less likely that a user will completely overlook one of the options.\nRadio Buttons","anatomy-of-a-report#Anatomy of a Report":"Anatomy of a Report\nThe first line of bold text is the name of the person whom the Report is about. The second line of text is the title of the Report.\nThe third line of text is the hierarchy of place to which that person belongs. In the upper right corner, a timestamp displays when the Report was submitted.\nReports are sorted by submission date, with the most recently submitted Reports at the top. If a Report is unread, the timestamp will be bold blue and there will be a horizontal blue line above it.","anatomy-of-a-task#Anatomy of a Task":"The Task tab shows a list of upcoming visits, follow-ups, or other tasks that need to be completed. When a task is finished, it will automatically clear from the Tasks list and move to Reports.\nAnatomy of a Task\nEach Task has an icon on the left side which indicates what type of Task it is. The first bold line of text is the name of the person or family that the Task is about. The second line of text is the title of the Task. The days left for the Task to be done is located in the upper right-hand corner. If a Task is overdue, the due date will be red. Tasks are listed in order of due date.","bars#Bars":"Has to have a numerator and a denominator – comparing two things, and not more than two at this time (can’t do: % of deliveries at (1) home unskilled vs. (2) home skilled vs. (3) facility. Any two of these would work though, including (1) all home deliveries vs. (2) facility deliveries). It is possible to account for things that haven’t happened. For example, if you are measuring PNC visits that happened within 1 week of delivery, you can determine whether a particular woman should have had a PNC visit based on her EDD. There are several ways to account for things that have and haven’t happened, and happened late, depending on what you are trying to show. Ex. Configurations for visit attendance: - Of all the visits that happened, how many were on-time? (doesn’t look for visits that didn’t happen) - On-time = true, Late = false - Of all the visits that were supposed to happen, how many were on-time? - On-time = true, Late + didn’t happen = false - Of all the visits that were supposed to happen, how many actually occurred? (includes on-time and late as having happened) - On-time + Late = true, Didn’t happen = false It’s not possible to total up forms from all household members or check to see if any family member had a form submitted this week and count that as the household being visited. If you want to count the households visited this month, you need a form submitted at the household level like a household visit form or a household survey form. Denominator must be the same for both sides (e.g. kids in our immunization program). Can’t split it into kids \u003c2 yrs on one side and kids \u003c5 years on the other side. Bars must progress positively (ex. Visits completed, not visits missed)","card-title#Card Title":"Name of the condition, e.g. Pregnancy, Malnutrition, Malaria Define if condition is past, e.g. Past Pregnancies","condition-cards#Condition Cards":"A condition card is a configurable card that can be displayed on a profile that shows information that was submitted in or calculated from reports. Their purpose is to reveal important information in an easily viewable location.\nThis information can be organized into cards specific to a condition (e.g. pregnancy, malnutrition) as well as past conditions, and set to display for any length of the time.\nCondition Card","configurable-elements#Configurable Elements":"Title Label for each data point displayed Data point for the field Icon for the field, if desired","configurable-elements-1#Configurable elements":"Title text (free text) Subtitle text (two options: all-time or this month) Icon (selected from our icon library) Presence of a goal (or not) Value of the goal (per widget, not per user) Number and placement of widgets of either type.","content-and-layout#Content and Layout":"","counts#Counts":"Counts show current totals and will update as reports are created If there is a goal, it will be displayed to the right of the count. If the count is green, the goal has been met. If the count is black, the goal has not yet been met Goals can only be met by exceeding them, you cannot set a goal which is met by being under the goal. Targets","design-considerations#Design Considerations":"Group information related to the same condition so that the user can easily understand the relevance of the data and find what they are looking for. Ex. Pregnancy Card, Immunization Card Consider what a user will do with the information before deciding to display it. More info isn’t necessarily better; what does a CHW need to know and how will they change their actions as a result?\nPast condition cards may be best displayed as a summary of multiple past conditions rather than individual conditions\nEx. Summary of past pregnancies rather than card for each past pregnancy Past Pregnancies","distinguish-optional-and-required-fields#Distinguish Optional And Required Fields":"Users don’t always know what is implied by the required field marker ( * ). Instead, denoting what is optional is a preferred method, especially for forms with many required fields. If you do use asterisks, make the meaning of the symbol clear by stating “Fields with an asterisk ( * ) are mandatory.”","dont-put-placeholder-or-helper-text-inside-the-form-fields#Don’t Put Placeholder Or Helper Text Inside The Form Fields":"People go through forms quickly and if a field looks like it already has an answer they may accidentally miss it. Research shows that empty fields draw more attention than those with placeholder text.\nPlaceholder Text","dont-use-dropdowns-if-there-are-less-than-seven-options#Don’t Use Dropdowns If There Are Less Than Seven Options":"For smaller lists, use radio buttons instead of drop-down menus. Radio buttons have lower cognitive load because they make all options visible for easy comparison.\nRadio vs Dropdown","field-content#Field Content":"Can include any information that was collected in a form or multiple forms about the person Ex. LMP, EDD, most recent case of malaria, past pregnancies and their delivery dates Can display Notes Data can be displayed in the following formats: Number Count towards a goal Percentage Date Text field Fields in cards are dynamic and will update as new information is submitted Ex. # of ANC visits so far, change in risk status Fields can include icons Ex. High risk status on an Active Pregnancy card Icons should be selected from Medic’s icon library and should be displayed at our standard 30 x 30 px size Displaying Cards\nCan be configured to show and hide at the appropriate time Ex. Show the EDD of the current pregnancy until a delivery Report is received, show that a child is being treated for malnutrition until the treatment is complete, show that a child had malaria until 2 weeks after diagnosis Condition cards can be configured to disappear at the end of the condition or persist for any length of time\nCan be added to a person or place profile\nEx. Equity scorecard on household profile; CHW performance scorecard on CHW profile","field-label#Field Label":"Label each data point displayed One line","forms#Forms":"We use forms to build the Tasks, Care Guides, and Reports that take health workers through care protocols and provide decision support for their interactions with patients.\nIn this context, a form is any document with questions and blank spaces or selectable options for answers. Forms can be found in many parts of your app including the Tasks, People, and Reports tabs\nWhile both Tasks and Reports are built with forms, there are key differences. Tasks are blank forms that need to be completed, while Reports are forms that have already been submitted. When a Task is completed and submitted, it automatically becomes a Report.\nNote: The icons and titles that we choose for Tasks remain the same when they become Reports.","general-section-order#General Section Order":"Not all forms will have all summary sections, but the sections that appear should be in this order:\nReminder: “To finish, be sure to click the Submit button at the bottom of the form.” Patient details (name, age etc.) Visit information (summarizes the info that was just captured in the form) Signs and symptoms (if applicable) Refer to a health facility warning message (if applicable) Diagnosis and treatment (if applicable) Healthy tips/educational info (if applicable) Follow-ups scheduled (if applicable) Submit button","group-related-information#Group Related Information":"Users think in batches, and long forms can feel overwhelming. By creating logical groups the user will make sense of the form much faster.\nEx. Visit Details, Danger Signs","guidelines#Guidelines":"","guidelines-1#Guidelines":"","header-color#Header Color":"Though it may be tempting to give each section has a unique color (e.g. “Patient Details” is yellow, “Healthy Tips” is blue etc), sometimes there are too many sections for each one to have its own color, other times the various colors just look jarring and confusing. In general, you should strive to use color in a way that adds meaning and improves understanding, and avoid using color in a purely decorative manner.\nOnly use the bright red color to call out important things like warnings and danger signs If you choose to use multiple header colors, ensure that every header is a unique color. For example: yellow: #e2b100 - patient details blue: #6b9acd - visit information and key health messages lime: #b5bd21 - child health red: #e00900 - warnings and danger signs green: #75b2b2 - follow up (at the end) If you find you have more sections than you do colors, it may be best to just make all the headers a single color (with the exception of warnings or referral messages, which should remain red). In this case, blue is a good default color to fall back on.","header-icons#Header Icons":"Each section header should have an icon on the far left side. The icons should all be colored white, and should all be the same size. These icons should be unique for each section (no repeat icons)\nSuggested icons for each section:\nIcon Section Patient Details Visit Information Pregnancy Specific Child Health Specific Signs and Symptoms Warnings and Referrals Diagnosis and Treatment Follow-Ups Misc/General","header-text#Header Text":"The text inside of the section headers should be “H1”: Noto Sans 18px bold The text should be centered vertically \u0026 horizontally in the bar Each section header title should be Title Case, meaning each word is capitalized e.g. “Patient Details”","icons#Icons":"The Community Health Toolkit includes a collection of 60+ free icons that represent key elements of different community health workflows and protocols. Review the recommended usages that follow.\nIcon People and Places Hierarchies Hospital or District CHW Area Branch or Health Facility Family Person Icon Family Planning - Family Planning Screening\n- Family Planning Referral or Follow-Up Icon ANC - ANC Registration\n- ANC Visit or Missed Visit\n- ANC Follow-Up - ANC Danger Sign\n- ANC Danger Sign Follow-Up Icon PNC - PNC Registration\n- PNC Visit or Missed Visit\n- PNC Follow-Up - PNC Danger Sign\n- PNC Danger Sign Follow-Up (Mother) - PNC Danger Sign Follow-Up (Baby) Icon ICCM and Child Health - ICCM Assessment\n- ICCM Treatment\n- ICCM Referral or Follow-Up - ICCM Danger Sign\n- ICCM Danger Sign Follow-Up Icon Immunization - Immunization Visit\n- Immunization Follow-Up Icon Visits - General Follow-Up\n- Proactive Visit\n- Educational Visit Icon Community - Community Event\n- Community Meeting Icon Various Delivery Malnutrition Growth Monitoring Cognition General Forms General Assessments Equity Survey Bed Net Distribution","make-use-of-images#Make Use Of Images":"Where it makes sense, use images to aid in the understanding of a question\nForm Images","order-the-form-logically-and-only-ask-whats-required#Order the Form Logically and Only Ask What\u0026rsquo;s Required":"Keep questions concise and in an intuitive sequence — they should be asked logically from a user’s perspective. This makes the flow from one set of questions to the next better resemble a conversation.\nEx. Is your patient still pregnant? → Did she attend the ANC visit? → Does she have danger signs?","other-body-text-styling#Other body text styling":"Bold text is indicated by ** or “bold” or Italic text is indicated by * or “italic” or _ List item is indicated by either specifying li in the appearance column or formatting the label text using html tag li Numbers: needs to be hard coded H1, h2, h3 …, em, i, ul, li, p, span html tags work as expected including use of the style attribute within the tags e.g Explicit new line space translates to a new line (\\n translates to a hard break) You could potentially specify an inline list using standard html Blah (ordered list) Blah (unordered list) You’ll need to compensate for the extra padding left margin by moving the list to the left generally by . You can also customise the bullet style and position using what’s specified in the HTML spec. Ex.","page-sections#Page Sections":"","percentages#Percentages":"Percentage bars show progress towards completing certain reports. The colored part of the bar will update as reports are created. If there is a goal, a line will be on the bar to mark the goal. If the bar is green, the goal has been met. If the bar is black, the goal has not yet been met. The text below the bar shows how the percentage is calculated, displaying the number of Reports that met the requirement out of the total number of Reports. Percentages","reflect-input-length-in-field#Reflect Input Length in Field":"Employ this for fields that have a defined character count like phone numbers, zip codes, etc.\nInput Length","section-headers#Section Headers":"Section headers are used to separate content sections of the summary page. They make the page easier to scan and they make it easier to find a specific section.\nThere are suggested orders, colors and icons for section headers. A section should only be visible if it contains content (ie. headers should never be stacked directly on top of each other).\nTo ensure that headers only show when they have content the relevant condition for the section header should join the conditions of all the subfields.\nEx. {condition_a} OR {condition_b} OR {condition_c}","subtitle#Subtitle":"The subtitle is where timeframe information lives, expressed as either “This month” or “All-time”. For now, these are the only two options. All text should be set in sentence case.","summary-page#Summary Page":"After all of the required questions in a form are answered, a summary page is displayed. Here, health workers can review the information they entered into the form, receive instructions for treatment, care, and referrals, and relay detailed educational information to the patient.\nNote: The form is not submitted until the user scrolls to the end of the page and clicks “Submit”.\nAll care guides are defined using ODK XForms, an XML definition of the structure and format for a set of questions. Since writing raw XML can be tedious, we suggest creating the forms using the XLSForm standard, and using the cht-conf command line configurer tool to convert them to XForm format. Because the XLSForms are converted directly to XForms, they essentially are the form, and so it’s important that the XLS be set up properly and consistently. Read more about configuring forms here.","targets#Targets":"The Targets tab shows key performance indicators. Progress numbers are calculated automatically by the app, and goals are set by the organization. We currently support two types of widgets: Counts and Percentage-based bars.","text-styling#Text styling":"H1: colored horizontal bars for section headers H2: text with a colored line under it, centered H3: left aligned text, simple grey line under it H4: normal body text\nSummary","title#Title":"The data point being measured. No need to include “%”, the word “percent”, or the word “count” (these are stated elsewhere) or any information on timeframe. Titles should be 40-50 characters max. All text should be set in sentence case (meaning the first letter of first word is capitalized, all other words lowercase, except for acronyms) If hyphenation is needed, words should only be broken at syllables Ex. - % Newborn Care Visit Within 72 hours → Newborn visits within 3 days - % of Under-5 Referrals Followed-up within 24 hours → U5 referral follow-ups within 1 day - % of Fever Tested with mRDT → Fever tested with mRDT - Pregnancies Registered This Month → Pregnancies registered - Births This Month → New births - Deliveries at Facility All Time → Deliveries at facility","titles#Titles":"The patient’s name should not be included in the form title.\n❌ Don't do this: \"Beatrice Bass Delivery Follow-Up\" ✅ Do this instead: \"Delivery Follow-Up\" Avoid generic words like “Visit” or “Report”. Every form can be a Report and often involves a visit, so including these words in the title doesn’t help differentiate it from other forms.\n❌ Don't do this: \"Delivery Follow-up Visit\" ✅ Do this instead: \"Delivery Follow-Up\" Each word in a title should be capitalized (Title Case).\n❌ Don't do this: \"Delivery follow-up\" ✅ Do this instead: \"Delivery Follow-Up\" Keep form titles short and concise. Long titles will sometimes be truncated (cut off with an ellipsis) and the text at the end of the title might be lost. As a rough estimate, strive to keep titles no longer than 40 characters in length.\n❌ Don't do this: \"This Title Has Way More Than Forty Characters And Is Too Long\" ✅ Do this instead: \"Title Is Less Than Forty Characters\" To help estimate how much text can be displayed before truncation, you can use the low-fi mockups here. If you type your form name into the mockup you can get a rough idea of how much text will fit before truncation occurs. Note that the mockups have been made with our smallest screen sizes in mind. Some users’ screens will be larger and will be able to display more text.\nThe screenshots here represent some of the smallest phones our users have. As you can see, on both the Tasks and Reports pages, titles less than about forty characters will fit in the space. Titles longer than about forty characters might be cut off with an ellipsis (…).\nHistory","unique-considerations-for-personas#Unique Considerations for Personas":"CHWs:\nWill be viewing on a mobile device; keep in mind the number of widgets you display Information is related to their own individual achievement, not comparisons with peers or aggregates for their facility May have a difficult time understanding percentages (however certain partners like LG still focus on % based targets and therefore it still needs to be included). Percentages are good for evaluating performance, but difficult to “act on” because depending on how many actions you have already done / left to do, it may not always be clear or possible to “achieve” a percentage goal. Targets data is always up-to-date even when offline, but important to know when they’ve last synced and sent data to managers Managers:\nCould be viewing on desktop or mobile device; may be seeing widgets side-by-side Want to view overall summary of CHW goals, may also have their own personal goals Can only see widgets for which they have Report access Understand, and need, percentage information in order to evaluate performance Important to know how up-to-date the data is (will be addressed in a different feature for CHW last sync date)"},"title":"Best Practices"},"/design/interface/":{"data":{"":"The purpose of this guide is to document the standard aspects of the core framework and allow designers and developers to focus on solving challenges, rather than reinventing interface elements that are already in use.\nColors Icons Typography Components UI Kit Mockups"},"title":"Interface"},"/design/interface/colors/":{"data":{"":"Color helps users interpret and interact with app content by establishing a hierarchy of information, highlighting actions, indicating states, and conveying meaning.","backgrounds#Backgrounds":"Gray Dark Gray Light Gray Medium Gray Ultra Dark Gray Ultra Light White #777777 #E0E0E0 #A0A0A0 #333333 #F2F2F2 #FFFFFF rgb(119, 119, 119) rgb(224, 224, 224) rgb(160, 160, 160) rgb(51, 51, 51) rgb(242, 242, 242) rgb(255, 255, 255) Disabled statuses, secondary body text 1px line borders, action bar icons Muted or deceased contacts, cleared messages Overdue, unmet, error, delete, failed, denied actions App background, list and dropdown highlights Form background For more information on how these colors are applied in the app, see the color variables file.","primary-colors#Primary colors":"These are the primary colors of the navigation tabs. When necessary, use white #FFFFFF text over these colors.\nBlue Periwinkle Pink Teal Yellow #63A2C6 #7193EE #F47B63 #76B0B0 #E9AA22 rgb(99, 162, 198) rgb(113, 147, 238) rgb(244, 123, 99) rgb(118, 176, 176) rgb(233, 170, 34) Messages Tasks People Targets Reports","secondary-colors#Secondary colors":"These are the secondary (highlight) colors of the navigation tabs.\nBlue Highlight Periwinkle Highlight Pink Highlight Teal Highlight Yellow Highlight #EEF5F9 #F0F4FD #FDF1EF #DFEAEA #FCF6E7 rgb(238, 245, 249) rgb(240, 244, 253) rgb(253, 241, 239) rgb(223, 234, 234) rgb(252, 246, 231)","status-colors#Status colors":"These are the status indication colors of the system. When necessary, use white #FFFFFF text over these colors.\nTeal Dark Blue Dark Yellow Dark Red #218E7F #007AC0 #C78330 #E33030 rgb(33, 142, 127) rgb(0, 122, 192) rgb(199, 131, 48) rgb(227, 48, 48) Completed, verified, sent actions Primary button, link, info Delayed, incomplete actions Overdue, unmet, error, delete, failed, denied actions"},"title":"Colors"},"/design/interface/components/":{"data":{"":"","action-bars#Action Bars":"Use action bars to prompt new actions or workflows on relative pages.","buttons#Buttons":"Primary buttons are used for actions, such as “Next” and “Submit”. Secondary buttons are the alternative to the primary action, such as “Previous”. Text links are used for less important or less commonly used actions, such as “Cancel”.","checkboxes#Checkboxes":"Use checkboxes to select multiple items within a form. When necessary, use a descriptive error state.","condition-cards#Condition Cards":"Use these cards in contact summary pages to display an overview of tasks, people, reports, etc","content-rows#Content Rows":"Content rows are used for tasks, messages, reports and people as an overview of the content name, description, date and/or priority.","dropdowns#Dropdowns":"Dropdowns are used within forms that have 7 or more options and as filters within tabs.","inputs#Inputs":"Use an input field as a basic text control to enable the user to type a small amount of text. The input size should reflect the amount of text a user is expected to enter. When necessary, use a descriptive error state.","modals#Modals":"Use modals when a user is exiting a flow where information may be lost or for experiences outside the main user flows.","radios#Radios":"Use radio buttons to select a single item within a form. When necessary, use a descriptive error state.","targets#Targets":"Targets include counts and percentages with and without goals."},"title":"Components"},"/design/interface/icons/":{"data":{"":"We believe in making our simple but strong visual iconography open and accessible to all. We have assembled and designed these icons for use with the Community Health Toolkit based on human centered design principles.","about-the-icon-library#About the Icon Library":"This collection of over 60 beautiful icons was made for use in CHT applications. We will continually update this library as new icons are developed for different workflows.\nUse the forms_tasks_targets folder to find PNG and SVG icons for application code. All instances on 2.15.0 and later should be using SVG icons because they are smaller files. If your project has families or households as the lowest level of the hierarchy, use the people_and_places folder to swap out icons as needed so your hierarchy has the correct icons.\nIcons for Forms, Tasks, Targets Icons for People and Places For those using cht-conf to upload resources, make sure you add the correct icons for people and places to your resources.json file. Otherwise, uploading resources will inadvertently remove your people and place icons. An issue is being raised in cht-conf to solve this. You’ll need to define medic-clinic, medic-health-center, medic-district-hospital and medic-person in your resources.json and set them to the appropriate SVG files Check out the best practices to learn more about which icons can be used for which use cases and workflows This work is licensed under a Creative Commons Attribution-ShareAlike 4.0 International License."},"title":"Icon Library"},"/design/interface/icons/forms_tasks_targets/":{"data":{"":"Full list of files and alternate formats available in GitHub.\nICCM-immunization.svg faq.svg home-delivery.svg icon-ANC-danger-sign.svg icon-ICCM-danger-sign.svg icon-PNC-baby-danger-sign.svg icon-PNC-danger-sign.svg icon-cash-donation.svg icon-cash-expense-followup.svg icon-cash-expense.svg icon-cash-individual-contribution.svg icon-cash-interest.svg icon-cash-loan-payment-reminder.svg icon-cash-loan-payment.svg icon-cash-village-solidarity.svg icon-child-cognition.svg icon-child-growth.svg icon-child-nutrition.svg icon-community-meeting-tree.svg icon-community.svg icon-condition-cough.svg icon-condition-diarrhea.svg icon-condition-eye.svg icon-condition-fever.svg icon-condition-rash.svg icon-condition-worms.svg icon-death-coffin-maternal.svg icon-death-coffin-neonatal.svg icon-death-coffin.svg icon-death-general.svg icon-delivery.svg icon-disease-HIV-AIDS.svg icon-disease-cancer.svg icon-disease-cardiovascular.svg icon-disease-diabetes.svg icon-disease-malaria.svg icon-disease-outbreak.svg icon-disease-pneumonia.svg icon-disease-respiratory.svg icon-family-planning.svg icon-followup-general.svg icon-form-general.svg icon-healthcare-assessment.svg icon-healthcare-campaign.svg icon-healthcare-diagnosis.svg icon-healthcare-generic-2.svg icon-healthcare-generic.svg icon-healthcare-immunization.svg icon-healthcare-medicine.svg icon-healthcare-mrdt-negative.svg icon-healthcare-mrdt-positive.svg icon-healthcare-mrdt.svg icon-healthcare-refuse.svg icon-healthcare-shield.svg icon-healthcare-warning.svg icon-household-bednet.svg icon-household-education.svg icon-household-equity.svg icon-household-foodsecurity.svg icon-messages-off.svg icon-messages-on.svg icon-misc-hand-wash.svg icon-people-CHW-crop.svg icon-people-CHW-female.svg icon-people-CHW-male.svg icon-people-baby.svg icon-people-child-clinic.svg icon-people-child-ltf.svg icon-people-child.svg icon-people-children.svg icon-people-family.svg icon-people-man.svg icon-people-manager-crop.svg icon-people-manager.svg icon-people-nurse-crop.svg icon-people-nurse.svg icon-people-person-general.svg icon-people-pregnant-clinic.svg icon-people-pregnant-ltf.svg icon-people-wheelchair.svg icon-people-woman-baby-crop.svg icon-people-woman-baby.svg icon-people-woman-pregnant.svg icon-people-woman.svg icon-places-CHW-area.svg icon-places-MOH.svg icon-places-clinic.svg icon-places-hospital.svg icon-places-household.svg icon-service-rating.svg icon-warning-amber.svg icon-warning-black.svg icon-warning-red.svg icon-wash-gender-men.svg icon-wash-gender-women.svg icon-wash-home-visits-men.svg icon-wash-home-visits-women.svg icon-wash-improved-latrine.svg icon-wash-talks-men.svg icon-wash-talks-women.svg icon-wash-talks.svg messages-review.svg people-woman-pregnant-1.svg people-woman-pregnant-2.svg people-woman-pregnant-3.svg people-woman-pregnant-4.svg"},"title":"Forms, Tasks, Targets"},"/design/interface/icons/people_and_places/":{"data":{"":"Full list of files and alternate formats available in GitHub.\nhierarchies-chw-area.svg hierarchies-district-hospital.svg hierarchies-family.svg hierarchies-health-center.svg hierarchies-person.svg"},"title":"People and Places"},"/design/interface/mockups/":{"data":{"":"Use these sample CHT screens and components as needed to test and validate workflows. Make a copy of the slides to edit and use with your content.","desktop#Desktop":"Mockups of the CHT in a desktop view are possible using this Google Slide deck.","mobile#Mobile":"Mockups of the CHT on mobile devices can be easily made using the components in this Google Slide deck."},"title":"Mockups"},"/design/interface/typography/":{"data":{"":"The default CHT app font is Noto Sans. It is free, codepen source, supports 800 languages and was specifically designed for good web legibility. It is bundled with the app so that all users see the same font regardless of their particular device, language, browser, etc. This ensures a consistent experience for all users.\nMost text in the app should be the @text-normal-color: @gray-ultra-dark color. The lighter text color @text-secondary-color: @gray-dark) is used for labels and condition card filters. Hyperlinked text color is @text-hyperlink-color: @blue-dark). H1 is the highest hierarchical level of text, and should be used sparingly. It is used for the large text underneath percentage bars.\nH2 is used as a header style for main content sections on the right-hand side, such as a task title, the name of a person/place on their profile, or the title of a targets widget.\nH3 is used for titles of condition cards and section titles on the form summary page.\nH4 is the default type size, and should be used for all normal body text throughout the app. Most text should be H4 in size. When in doubt, use H4.\nH5 is a smaller body text size that we use sparingly in places where space is tight, such as timestamps in the upper right of content rows, condition card filter text, “belongs to” breadcrumbs, and targets goal labels."},"title":"Typography"},"/design/interface/ui-kit/":{"data":{"":"","components#Components":"Find reusable components of the CHT in this Figma file. Mockups can easily be created using these components.\nComponents","desktop#Desktop":"Mockups of the CHT on desktop/tablet view can be easily made using the components in this Figma UI Kit.\nDesktop","mobile#Mobile":"Mockups of the CHT on mobile devices can be easily made using the components in this Figma UI Kit.\nMobile\nNote\nThe UI Kit is continuously being updated to match the CHT app and ensure the CHT community is provided with all the necessary assets to ease the design process.\nTo ensure consistency with other Android apps and user experiences, refer to and align with Material Design guidelines and standards when designing new components for the CHT."},"title":"UI Kit"},"/design/mapping-hierarchy/":{"data":{"":"This section will take you through mapping of users on CHT hierarchy, including:\ndefining the hierarchy (reporting structure) defining user roles mapping user personas to the CHT hierarchy","1-define-the-hierarchy#1. Define the Hierarchy":"Identify the reporting structure of the user personas in order to have a flawless flow of data from one level to another.\nFor instance, family members belong to a household. Households and CHWs belong to a CHW area. CHW areas and nurses belong a health facility. Additional levels may be added as needed. The administrator level operates outside of the hierarchy and gives access to all levels and people.\nThe app hierarchy is often modeled after the health system, health program or community structure. All people who are registered in the app must be associated with a place. These places are located in a hierarchy to other places.","2-define-the-user-roles#2. Define the User Roles":"Determine all the actors within the system in terms of who will be doing what.","3-map-user-personas-to-the-hierarchy#3. Map User Personas to the Hierarchy":"","brief-overview-of-key-concepts#Brief Overview of Key Concepts":"A user persona is a generalized character that embodies a particular type of user.\nUser roles are the activities that the user personas are expected to carry out.\nA hierarchy represents the reporting structure.","prerequisitesrequired-resources#Prerequisites/Required Resources":"Personas.","steps#Steps":""},"title":"Mapping Hierarchy"},"/design/personas/":{"data":{"":"User personas give you a common understanding of who you are serving, particularly when working across diverse contexts. Your global personas are based on “typical” users, knowing that some variation is present in different settings.\nBeing explicit about who are you designing with and for, and understanding what’s important to them helps you prioritize features, make better design decisions, and optimize impact.\nContent in this section Professionalized Community Health Worker (CHW), Janet CHW Supervisor, Ann Regional Manager, Christina Nurse, Mary Data Manager, Paul App Builders"},"title":"Personas"},"/design/personas/app-builder/":{"data":{"":"App builders and technical organizations develop and deliver world-class software contextualized to meet their clients’ needs and deliver value to their stakeholders.","about#About":"App builders and technical organizations have in-house or contracted software developers. They deploy health technology solutions for implementing partners such an iNGOs, Governments, UN agencies etc in the community health space. They have limited familiarity with end-users such as CHWs and HCD.","motivations#Motivations":"Build awesome and bug-free user experiences using the CHT Adoption of the CHT as the technology of choice for building community health apps Delivering effective interventions Novel projects or interventions Developing skills","needs#Needs":"Capacity and expertise with the CHT Flexible technology (and tooling) to help build holistic digital health interventions","responsibilities#Responsibilities":"Build and deliver user experiences centered on the CHT Steward the CHT app developer’s experience CHT Capacity Builders Technical support Speak the language of the business","strengths-and-assets#Strengths and Assets":"Diversity in skills sets: HCD, software development, database management, dashboard development Resourcefulness: bend the CHT’s capabilities to meet a given need Passion for problem solving An inquisitive mind","values#Values":"Aligned with CHT principles and willing to contribute back to the CHT in the future Believe in building open-source technologies Integrity Likeable personality Open-mindedness Strong work ethic"},"title":"App Builders"},"/design/personas/chw-janet/":{"data":{"":"CHWs are the central users of apps built with the Core Framework. CHWs conduct household visits and are responsible for the health of their community. CHWs are known and trusted locally and typically live in and are chosen by their community. Their degree of health training, responsibilities, and support depends upon their country and program. The majority of CHWs are women, ranging from 25-60 years old.\nCHW\n“It took a while to be trusted. We had to prove our worth, but now we are well appreciated.”","a-day-in-the-life#A Day in the Life":"Janet is a CHW who has been working for BRAC for 2 years. She lives in Bembe Central, a periurban town. She visits 10 and 15 homes daily where many of the families live in brick/clay huts reinforced with straw with no electricity, running water or internet connection.\nJanet visits homes based off a list after she finishes her day job. There is no particular order, although she follows the register. While she may get some specific calls, most days she just visits homes and records her visits in the book. Some visits can be as quick as 2 minutes. She walks along a dirt road with her BRAC outfit making her stand out. She often calls out to her neighbors as she walks alon the road. In the rainy season — when diarrhea is often worse — these roads flood. Janet does not visit homes on these days.\nDuring her visits Janet carries her register, an education booklet, drugs and other sales material in her bag which is very heavy. She readjusts the weight of her bag several times and sometimes drops her drugs. Bodas play an important role in the health system here. Janet has a trusted body driver, whom she asks to deliver drugs.\nOn days with her Supervisor, Janet might visit 20-25 homes. The Supervisor joins her at least once a month where they also conduct “health forums” together. Supervisors conduct technical procedures,such as taking BP, marking columns in the CHWs register and later copies this into their own during refresher trainings.\nA normal day lasts about 2 hours.","about#About":"Janet is a mother and a farmer. She takes care of her daily BRAC work after finishing her farm work. She has poor eyesight. Janet has a feature phone. She has seen smartphones but never used one. She has no electricity at her home. She charges her phone at her friend’s house. Janet has a trusted boda driver who she uses to help her deliver drugs.","motivations#Motivations":"Recognition from managers, colleagues and the broader community Financial rewards such as monthly recharges for SMS, voice calls and data, rewards based on performance metrics, reimbursements or allowances for travel costs between communities being served and facilities Opportunities for continued education, training and skill improvement via refreshers, computer education etc. Career development, especially in younger cohorts: added responsibilities for high-performing CHWs such as training new CHWs or mentoring low-performing CHWs.","needs#Needs":"Accurate information about the health status of her patients Close monitoring of the pregnant women to ensure that all deliveries take place at the health facilities All children to be immunized according to the expanded immunization program Children’s growth to be monitored Fast transfer of community members who need emergency health care to the health facilities- ambulance transfer","responsibilities#Responsibilities":"Registering new people and families Conducting guided health assessments Screening for and tracking specific conditions Providing basic medicines and health supplies Reporting danger signs \u0026 referring to clinics Following up about clinic visits and care","values#Values":"Life: believes in the sanctity of life and strives to protect it by extending health care services Family Education Honesty Faith/Religion"},"title":"CHW"},"/design/personas/chw-supervisor-ann/":{"data":{"":"The CHW supervisor is the person who trains and supports CHWs and helps them meet their monthly goals. Supervisors usually split their time between administrative duties at the local health facility and accompanying CHWs on their community visits.\nCHW Supervisor\n“During refresher trainings, when I go there, it takes me 3 hours because I copy from one book to another.”","a-day-in-the-life#A Day in the Life":"Ann wakes up early in the morning to prepare her son for school and husband for work. She takes her son to school which is on her way to health center where she is based.\nShe needs to be at the health center by 9 am so she takes a bus for part of the journey and a motorbike for the rest of the journey. The health center is located about 10 km from her home.\nShe attends to her public health officer’s duties based at the health center. She is primarily in charge of the community and market sanitation, so she facilitates the small scale traders who run business at the nearby market to get health check-ups that are mandatory before she issues them a certified health certificate that allows them to run food related businesses in the market.\nIn the course of her day, she collaborates with a wide range of stakeholders in order to perform her chores. She liaises with the clinicians and nurses to identify defaulters of care in order to organize for the follows up through the community health workers. The nurse would give her a list of children who have missed their vaccine appointments, the pregnant women who have missed their antenatal care clinics, the Tuberculosis and HIV/AIDs clinicians also have a list of defaulters of care that should be followed to ensure prompt care. She must liaises with the CHWs to be trace these patients and reintroduce them to care. This is one of her greatest challenge as it is hard to trace the children in the wide facility catchment area. You know it is her responsibility to ensure that the community health workers are creating demand for the health services at the community level and ensuring that the community members access the quality care at the health facilities. She assesses the performance of her CHWs by looking at how many community members they refer to the health facilities for care, and the adherence to care of the patients referred by each CHW. This is no mean easy task as CHWs are not paid and the villages they cover are wide and a very hilly terrain which becomes impossible during the rainy weather. Over half of the CHWs that she trained during the initiation of the CHW program in her area three years have dropped, and the new ones she has replaced need to be trained on the whole package of their role. She would gladly do this but “Oh, when will an non governmental organization come by to support us in this capacity building activity?” She exclaims. Meanwhile she must support the new CHWs by accompanying them at least once a month when they are doing their household visits in the villages.\nSince there is an upcoming community based polio and tetanus campaign targeted for under-fives and women of reproductive health, she must select and contact several CHWs from each village that will help them administer these vaccines in their villages and therefore reach the most possible target population.\nShe must also liaise with the area administrative chief who provide the go ahead of the community based activities to mobilize the community for health education and dialogue days and community health related activities. She and her CHWs lead the community to discuss on various disease preventive and health promotive activities that are tailored to meet health needs/gaps they have observed within the community. They use these regular forums to reinforce important health messages like the importance pregnant women going for ANC and children for immunization. She leads the community health workers and community members during community action days.\nShe also works hand in hand with the schools heads for deworming and Vitamin A campaign targeted at children, a regular activity which she carries out with the CHWs.\nAnn’s 80% of her time is spent interacting with the community and the community health workers. This month’s monthly meeting with the CHWs is early next week. She must make some time to prepare some notes on how to make drinking water safe for use in the community, during a visit in the community, she observed that the community was using unsafe water for drinking and the CHW did not know what to advise her households to make the water safe. The CHEW continues to offer need based training to the CHWs depending on assessment of the knowledge deficits of the CHWs after the initial training. He guides the CHWs, on how to effectively communicate well with the community. She intents to guide the CHWs on the data items to collect as most of them have not been sending all the reports as required. If transport within the community was cheap or easier she would visit the CHWs who did not send reports and or those who send inaccurate data or incomplete reports and walk with them as they collect the data.. As a CHEW, she is charged by the MOH to aggregate data about the community’s state of health that is received from the CHWs on a monthly basis. The primary data items for her reflect the utilization of health services by the community.\nAnn has a regular end of month meeting with her community health supervisor who is based in the Sub district hospital that is 150km away from her station early in the morning on Wednesday. She must prepare and present her monthly written reports and give a verbal report of the state of the community and performance of the CHWs under her supervision.\nAnn gets back to her home at 6 pm, she picks her son from school where he had been playing since 4pm when the other pupils leave school for home. She prepares supper for her family, and carries out the other family chores. She retires to bed at about 10pm tired but happy to have accomplished her day’s duties.","about#About":"Married with two school-aged children Has one year of training in a health-related field Not originally from the community, but communicates effectively with the CHWs Salaried MOH employee Has a personal mobile phone that ranges from a feature phone to a smart phone, used for communication Has an email account primarily accessed via mobile phone","motivations#Motivations":"Healthy community Increased utilization of available health services provided at the health center Recognition from supervisor for sending timely and accurate data","needs#Needs":"Accurate data from the CHWs Ability to send reports to supervisors promptly Mobilize and lead CHWs on community events for health promotion \u0026 disease prevention Closely monitor the progress of each individual CHWs and provide supportive supervision Motivate CHWs consistently so that they continue doing their volunteer community service","responsibilities#Responsibilities":"Overall responsible of the health of the community Manages a group or groups of CHWs Communicates frequently with CHWs and other supervisors Liaises with the facility-based health workers especially the nurses and clinical doctors Mobilizes \u0026 leads CHWs to educate community on health promotion \u0026 disease prevention Ensures that the CHWs send in data Aggregates data from CHWs and sends to the data records person Attends meetings with MOH officials at the district health center Sits on the community development committee with chiefs and government officers Training CHWs and reinforcing health knowledge and protocols Following up with CHWs on high-priority cases Liaising with the facility-based staff on the needs at the community level Mobilizing CHWs to educate community on health promotion campaigns Tracking progress towards key impact metrics and helping CHWs reach their targets Aggregating CHW data and reporting on activities to health system officials","strengths-and-assets#Strengths and Assets":"Literate Background training in healthcare Salaried (consistent source of income) Familiar with socio-cultural norms of the community \u0026 committed to community’s health Mobile phone Earned community respect"},"title":"CHW Supervisor"},"/design/personas/data-manager-paul/":{"data":{"":"Data Managers are often based at a regional health facility or a program or administrative unit and serve many local facilities. They are responsible for collating and reporting on community and health system data. Their work often involves following up with supervisors and nurses to verify data and retrieve missing information.\nHRIO\n“It’s all about training them. The Community Health Workers are just villagers and farmers, so it’s training and more training.”","about#About":"Paul has worked at BRAC for two years. He’s very focused on his career and has lots of IT projects running. He is responsible for training the branches on how to use the mobile phones. Right now Paul is looking for the right quality of phones. He also wants to understand how the database will ensure reliable syncing.","motivations#Motivations":"Helping the organisation to make data driven decisions Employing new skills learnt from colleagues","needs#Needs":"Accurate data reported by CHWs and verified by CHW Supervisors Systems that check the completeness of data Access to statistical tools Robust systems that can handle large data sets","responsibilities#Responsibilities":"Collating health system data from the field Verifying data for accuracy and completeness Aggregating data and providing reports to nurses, supervisors, and health system officials with raw numbers and trends on key metrics Designing and maintaining data systems and databases Using statistical tools to interpret data sets Preparing reports that effectively communicate trends, patterns and interesting observations","strengths-and-assets#Strengths and Assets":"Statistical expertise Presentation skills Data visualization techniques Methodological","values#Values":"Critical thinker Strong communication skills Integrity Creativity Accuracy and attention to detail Problem solving skills Team player"},"title":"Data Manager"},"/design/personas/nurse-mary/":{"data":{"":"Nurses are stationed at the health facility and spend their days seeing patients. They are typically very busy and may see 50 or more patients a day. At the clinic, they sometimes deal with staff shortages, stock-outs, and poor internet connectivity. They help train and manage CHWs, particularly during monthly meetings at the facility. They are interested in seeing improvements in health metrics for the areas their facility serves.\nNurse","a-day-in-the-life#A Day in the Life":"Her day at work starts early as she must be on duty at 7 am, to relieve the nurse who has been on cover of the health facility at night if she is in a health facility that as at least 2 of them. In the health facility, where she is the only nurse she comes to pick up from where she left last evening, if she was “lucky” not to be woken up to attend to a patient at night.\nShe gets a report from the “night nurse” of all the in-patients-mainly women in labor, newborns born at night, children less than 5 years brought in at night for care and injuries resulting from accidents.\n8am going to 9am, the outpatient is swollen with patients: mothers with under five children bringing them to the child welfare clinic, pregnant women some with under five children coming also for antenatal care, and elderly women and men, all weak, sick looking and would pass for nutritional support-if only there were supplements for the elderly. The ones in store are for the under 5 malnourished and pregnant women.\nAnyway, she notes the need to do a health education session on how to eat a well-nourished meal using the locally available food stuffs, but now, she must do one on how to prevent contracting cholera as cholera as for the last 2 months being reported in many parts of the country. It is a regular practice to carry out health education sessions to the out patients. She will also talk to the CHEW today for a health education session with the CHWs during their monthly meeting on cholera prevention that the CHWs must disseminate to the community. She and the field CHEW must liaise consistently as they work together with the CHWs to promote the health of the community. Her role is to oversee the field CHEW and to help her meet the knowledge gap of the CHWs by consistently teaching CHWs on common local diseases and how to prevent them, identifying them, giving first aid and referring patients for specialized health care.\nThe CHWs are critical to her as they are the link between the community and the health facility that is very important. The CHWs help her trace the children under five lost to follow up, malnourished children in the community who need follow up, chronically ill patients in the community that need home based care and refer and support orphans and vulnerable children in the community. The field CHEW co-ordinates this activity, after giving her the list of the patients to be followed.\nHer next in line activity is to see the ANC mothers, she co-ordinates their care, sends them for laboratory work, prescribe treatments and supplements based to the general health assessments of the woman and the lab results. She records care given in the maternal child booklet, and advises her on when to come for her next follow up. She briefly counsels on how to take care of herself during pregnancy, feed well and the exercises to take, maintain good hygiene and to plan to deliver her baby in the health facility: the individual birth plan, must be reinforced by the CHWs who can afford some more time for a one to one talk with the woman. She keeps a record of all the pregnant women she sees, both the new and those that come for subsequent visit. She will write a report based on this at the end of the month showing the new pregnancies, those that have it 4+ANC visits, new PMTC cases among other details.\nShe will also attend to the under-fives, both those that have come for the routine immunization and growth monitoring and the sick ones who were brought for treatment. She will record all the care given in the mother child booklet and give brief advice on nutrition of the child while charting the weight on the growth monitoring chart. She will attend to the other sickly patients as well, give family planning counseling and services, and monitor the mothers in labor in the ward. Among other duties that she must attend to are emergency cases referred from the community, accompanying complicated cases to the higher level hospital for more specialized care, and assisting the doctors and clinicians in handling special cases when in facility like a hospital where these services are offered.\nThe day has not started or ended if she has not read the temperature of the thermometers of the vaccine boxes to ensure that it is in the required temperature ranges and therefore the boxes are in good order.\nHer monthly reports range from daily vaccine monitoring chart, to the ANC, immunization related records to the vaccine usage rates for the month. She places monthly based order for vaccine supplies based on the month’s usage, and must collect the vaccines from the sub-county headquarters before the end of the first week of the month. She attends a monthly visit organized by her supervisors at the sub-county district, at least monthly and frequently meets her colleagues during the irregular continuous education seminars organized by their supervisors.\nNurse Mary faces a lot of challenges, but the most pressing is the workload coupled with the intensity of the nature of the work that she faces day in, day out. She is entitled to work a maximum of 45 hours a week, but is that really what happens?","about#About":"Mary has formal clinical training but a limited ability to conduct complex surgical procedures. She sees +/- 50 patients a day, sometimes in their homes. She is literate in English and understands local dialects. She is sometimes stationed far from her rural town/family in spurts and makes regular trips to districts to hand-deliver reports.\nMary lives on $5/day and depends mostly on solar power at the clinic as she may not have electricity at home. She is enthusiastic about technology but has had little exposure. She has an email address that she does not check regularly and has a basic understanding of Windows OS. She uses Facebook and M-PESA on a low-end phone.","motivations#Motivations":"Community enjoying services of skilled health professionals for deliveries which translates to no or very few maternal and child mortalities. More money for her to run the facility as finances for performance is a policy that is in use now in Kenya. Healthier children, with fewer neonatal, infant or child mortalities, and 100% full immunization of all under-fives. Progress within the nursing profession with continues and recognized certifications. Model health facility where other health facilities are encouraged to emulate and adopt those standards. Prompt report submissions to supervisors and the recognition by the supervisors for that.","needs#Needs":"Nurse Mary wants nil (zero) maternal and child mortalities in the community served by the health facility Nurse Mary needs all the community to be aware of the health care services that they can access at the health facility Nurse Mary needs everyone in the community to have access and adhere to continuous quality care provided at the health facility Nurse Mary needs all defaulters to health care available at the health facility that are in the community to be traced and re-introduced to care Nurse Mary needs to keep and get accurate data of the target population that she provides health care for Nurse Mary needs to keep abreast with new editions of nursing procedures through regular trainings/seminars","responsibilities#Responsibilities":"Assessing patients and providing primary care Reporting service delivery statistics to health system officials Coordinating care for high-priority patients through CHWs and supervisors Initiating events to promote healthy practices in the community","strengths-and-assets#Strengths and Assets":"Literate Strong clinical knowledge Organizational skills Constant source of income-employment by the government Mobile phones: smart phones, facebook, Whatsapp and access to email Computer literacy: access email, basic understanding of the windows OS Access to either solar or electricity power at the health center","values#Values":"Good health. Anyone is only able to work and therefore take care of ones and other people’s needs if and when in really good health Family is the essence of one’s existence and that each child is entitled to love that can be best provided and experienced in the family setting Education is the ticket for better, healthier and happier life for everyone"},"title":"Nurse"},"/design/personas/partners/":{"data":{"":"Implementing PartnersImplementing partners aim to build a new model of care with demonstrated evidence for impact and scalability. They are interested in pioneering data-driven approaches to achieve the desired community health outcomes. Local and Sub-National GovernmentsLocal government partners aim to increase access to quality, affordable care and maximize impact from resource investments in health. Ministry of Health and National GovernmentsMoH and national government partners set forward-looking national health policies, strengthen health systems, roll-out national public health programs, and deliver on international health commitments. They aim to increase access to quality, affordable care and achieve UHC."},"title":"Partners"},"/design/personas/partners/implementers/":{"data":{"":"Implementing partners aim to build a new model of care with demonstrated evidence for impact and scalability. They are interested in pioneering data-driven approaches to achieve the desired community health outcomes.","characteristics-and-strengths#Characteristics and Strengths":"May have influence and reach with the government to adopt and scale-up the new model of care Have a good understanding of the health needs of communities Have an appreciation for the role of digital technology in healthcare May have deployed, or are planning to deploy, digital health tools in the community health space Support government’s CHW networks, and may have fielded their own cadre of CHWs Are leveraging data and data science to innovate on new approaches to achieving desired health outcomes Have access to health systems data from the deployment of a new model of care May possess existing capacity, or are looking to build, the in-house capacity to deploy and implement digital health tools May have already invested significantly in proprietary locked-in software Keen to attract funding from large funders May have a presence in multiple countries","needs#Needs":"Government support and buy-in Funder backing and resources to design and deploy digital health programs HCD and data science capabilities May need further understanding and expertise in working with CHT and opensource tools","values#Values":"Equitable access to quality health care Developing national and local capacities Cost-effectiveness Government and donor relations Harmonization and alignment to the national health strategies Integration with national digital health platforms Government adoption and ownership of their model of care"},"title":"Implementers"},"/design/personas/partners/local-governments/":{"data":{"":"Local government partners aim to increase access to quality, affordable care and maximize impact from resource investments in health.","characteristics-and-strengths#Characteristics and Strengths":"They are often led by locally elected political leaders and are motivated to demonstrate health impacts for continued political support Tend to be more accountable to local communities Have a thorough understanding of the local context and health needs of local communities They often have the legal and administrative mandate to set local health priorities, plan, allocate and mobilize resources, and deliver primary health care to their respective communities They are guided by national health strategy and community health strategy They are responsible for managing CHWs They are often motivated to adopt digital health technologies May have deployed, or are planning to deploy, digital health tools in the community health space Comparatively, they have less cumbersome bureaucratic processes and red-tape in building partnerships","needs#Needs":"Health systems strengthening support to keep up with growing population needs and tackle emerging public health challenges, e.g. NCDs Better institutional capacities to manage community health programs Regular guidance, coordination and support from the state/provincial and national governments Better data systems for evidence-based planning and monitoring Technical partnership and support to manage digital health technologies","values#Values":"Health and well-being of their citizens Equitable access to quality health care services Social health protection of their constituencies Local leadership and decentralization in health Innovation and digital technologies in community health space High impact door-step health care Community participation Partnerships with non-state actors Cost-effectiveness Sustainability"},"title":"Local Gov"},"/design/personas/partners/national-governments/":{"data":{"":"MoH and national government partners set forward-looking national health policies, strengthen health systems, roll-out national public health programs, and deliver on international health commitments. They aim to increase access to quality, affordable care and achieve Universal Health Coverage.","characteristics-and-strengths#Characteristics and Strengths":"Set national health priorities and design large-scale national public health programs Lead health sector reform agenda Guide the production, recruitment, and deployment of human resource for health, including community health workforce Regulate both public and private health service providers Set development cooperation policies and priorities in the health sector Provide financial resources to sub-national governments Work closely with other ministries and sub-national governments to execute national health policies Compete with other ministries and government line agencies for resources Have access to large-scale funding from multilateral and bilateral international agencies Have an appreciation for the role of digital technology in healthcare May have developed and rolled-out national digital health strategy Responsible for setting digital technology and data standards Often have an institutional home to anchor national digital health programs May have some in-house capacity to deploy and implement digital health tools Are often looking to establish partnerships for leveraging digital health technologies Are leveraging data and data science to innovate on new approaches to achieving desired health outcomes Have access to health systems data from the deployment of a new model of care May have already invested significantly in proprietary locked-in software","needs#Needs":"Health systems strengthening support to keep up with growing population needs and tackle emerging public health challenges, e.g. NCDs Regular political commitments for increased spending in public health Integration and interoperability of digital health technologies Better data systems for evidence-based planning and monitoring Capacity and resources to govern and manage digital health programs HCD and data science capabilities","values#Values":"Safeguarding the health rights of the citizens International commitments in health, e.g. UHC, SDG, etc. National ownership of public health programs National capacities to govern and manage community health programs Cost-effectiveness Government adoption and sustainability"},"title":"National Gov"},"/design/personas/regional-manager-christina/":{"data":{"":"Regional managers provide overall oversight of activities in the region they are assigned. They are employed by technical and implementing partners to oversee and provide general guidance for two or more branches in a region. They troubleshoot and provide support to branch managers to optimise operations. They have limited interactions with end users but provide the link between field operations and the head office.\nRegional Manager\n“I heard that some branches have already had challenges with mobile phones.”","about#About":"Christina been working at BRAC for six years. She manages four branches and works closely with the CHW Managers there. She makes sure CHW Managers are monitoring CHWs. She occasionally does random checks, driving out to villages and observing Managers with CHWs.","motivations#Motivations":"Desire to improve lives of communities Desire to practice community health strategies learnt at school Organisational goals align well with personal goals","needs#Needs":"Real time access of data on supervision activities ongoing in their region Access to summary statistics on project indicators Timely submission of monthly reports on retention and turnover rates for CHWs Escalation of CHW retraining needs, challenges and proposed solutions Opportunities to conduct random checks to assess the CHWs perceptions of their managers support","responsibilities#Responsibilities":"Overall responsibility of the Region’s activities Oversees implementation of organisational goals Communicates organisational goals and strategies to CHW managers Liaise and ensure compliance with Ministries, NGO boards and regulatory bodies Promote advocacy efforts of the program Supervises and supports staff to attain their career goals Approval of quarterly logistic plans for CHW managers Reviews and approves CHW’s continuous education programs Evaluates programs impact and advises on key priority areas of focus Realignment of programs to changing ecosystem Budgetary planning for region’s activities Tracking branches’ and CHW manager’s performance Monthly indicators tracking to ensure realization of organisational goals","strengths-and-assets#Strengths and Assets":"Provided with a company car and computer Has a welcoming heart and accessible to employees Team player","values#Values":"Visionary Integrity Good communication Respect Responsibility Wisdom Empathy"},"title":"Regional Manager"},"/design/user-experience-research/":{"data":{"":"Conducting user experience research ensures that you are building CHT Application that solves real world problems by speaking with users directly to understand their perspectives and pain points, and to test and gather feedback on design solutions. Explore the different methodologies to determine which is right for your use case.\nContent in this section User Interviews Focus Group Discussions Usability Testing CES Surveys Technical Working Sessions Focused Group Discussion Template Generative Interview Guide Scoped Interview Guide"},"title":"User Experience Research"},"/design/user-experience-research/ces-surveys/":{"data":{"":"Customer Effort Score surveys are used to quantitatively assess the ease of use of your CHT app.","executing#Executing":"The survey can either be:\nSelf-administered The facilitator sends the questionnaire to the users directly upon which they fill and submit without any assistance Moderated The facilitator guides users through the questions as a group or individually","planning#Planning":"Identify the key CHT workflows or tasks that are of interest to your program Create your survey to assess the difficulty of each of the above Establish the cadence in which to send the survey to users Tips\nUse simple language in your survey questions Aim to keep the survey quick to complete, asking between 8-15 questions Use the 5-point likert scale Here is a sample CES survey.","recruiting#Recruiting":"Sample 20-50 users across the deployment sites Recruit on a recurring basis if necessary to gauge improvement on each area","synthesizing#Synthesizing":"Calculate the average score for each question to assess the overall ease of use and areas for opportunity for improvement."},"title":"CES Surveys"},"/design/user-experience-research/focus-group-discussions/":{"data":{"":"Focus group discussions are a quick and convenient way to collect data from several users simultaneously. Use focus group discussions to gain insight into what users think about a topic or shared experience in a group setting and to learn about opinions, attitudes and preferences.","executing#Executing":"The moderator welcomes the group and does introductions The moderator explains what is going to happen in the session and the objectives of the discussion group and allows users to ask any clarifying questions The facilitator hands out any materials if needed, asks for recording consent and sets up the recording device The facilitator takes notes of the session The moderator goes through the discussion guide and steers the conversation until all topics are covered Thank the users for their participation, ask them if they have any questions and let them know their feedback is important in improving the CHT Tips\nAsk open ended questions Make sure everyone gets to speak Focus on one question at a time Don’t share your assumptions or hypotheses Do not influence the user by asking leading questions Record your session or have someone take notes so you can focus on being present","planning#Planning":"Identify your research objectives Develop your focus group discussion guide Establish timelines and resources required: Recording equipment Stationary Personnel (facilitator, moderator) Location Mobile devices Here is a focused group discussion template.","recruiting#Recruiting":"Aim for 4-6 groups With 6-10 users per group Mixed user groups are ideal, consider the variety of: Engagement (active vs inactive users) Technical literacy Location Age Role Experience with the CHT","synthesizing#Synthesizing":"Identify themes that emerged from the focused group discussions and consider the analysis of the groups likes, dislikes, any emotive words, mental models, existing problems or issues and group ideas for opportunities.\nReview recording and notes to identify emerging themes, considering:\nLikes and dislikes Emotive words Mental models Problems or issues Ideas or opportunities"},"title":"Focus Group Discussions"},"/design/user-experience-research/generative-template/":{"data":{"":"","conclusion#Conclusion":"Thank them for their time Let them know their feedback is important to improve the app for all CHWs","interview-questions#Interview questions":"Please tell me about the last time you used the CHT in as much detail as possible","intro#Intro":"Introduce yourself. Briefly explain your role and why you are talking to users. Talk about what will happen in the session, how long it might last, the sorts of questions you’ll ask them. Explain no right or wrong answers; it’s their experience that matters. Let them know there will be time for questions at the end. Explain why we record interviews and ask for permission.","learning-objectives#Learning objectives":"In the discovery phase, your objectives likely include better understanding user context and pain. You might want to learn what tools or services they are currently using to solve their existing pains, and to test your hypothesis. List these objectives here so you can refer to them.\nTo learn about, in as much detail as possible, the last time a CHW used the CHT","mission#Mission":"Why are you doing this research? This is your North Star reminder of how this session will help your initiative forward\nSampling unbiased CHW experiences with the CHT to help understand how to improve their user experience","probe-further-to-understand#Probe further to understand":"How often do they open their app, and why (ex. What is their schedule)? When do they decide to visit a household, and how do they prioritize? What stood out as easy to do with the app? What was difficult? How long did their session take? Did they use any other tools to do their work? Who else was present, if anyone? What did they do before and after? Overview of all services provided (not just health related) for their communities Tools that currently support this Things they manage by memory","remember#Remember":"Be warm, but professional. Record audio when possible. Sample real experiences, don’t ask for opinions (ex. Tell me about the last time you did XYZ). No leading questions or examples of answers. Silence is OK – give participants time to think about the question. If the participant doesn’t understand the question, take a moment to rephrase it. Think about the insight you are trying to uncover. Avoid becoming the expert. Even if the participant is doing something incorrectly, don’t correct them. Starting to correct them will also negatively change the dynamic of the interview.","script#Script":""},"title":"Generative Interview Guide"},"/design/user-experience-research/scoped/":{"data":{"":"","conclusion#Conclusion":"Thank them for their time Let them know their feedback is important to improve the app for all CHWs","interview-questions#Interview questions":"Assess the impact and usability of the [new feature]\nHow do you currently [complete the function of the feature]? How long does that take? What is easy to do? What is difficult to do? How often do you use it? Assess challenges and opportunities for improvement of the [new feature]\nDid you encounter any difficulties when using the feature? Was it easy or difficult to learn how to use?","intro#Intro":"Introduce yourself. Briefly explain your role and why you are talking to users. Talk about what will happen in the session, how long it might last, the sorts of questions you’ll ask them. Explain no right or wrong answers; it’s their experience that matters. Let them know there will be time for questions at the end. Explain why we record interviews and ask for permission.","learning-objectives#Learning objectives":"In the discovery phase, your objectives likely include better understanding user context and pain. You might want to learn what tools or services they are currently using to solve their existing pains, and to test your hypothesis. List these objectives here so you can refer to them.\nTo assess the impact and usability of [a new feature] and any challenges or opportunities for improvement","mission#Mission":"Why are you doing this research? This is your North Star reminder of how this session will help your initiative forward\nSampling unbiased Supervisors’ experience with [a new feature]","remember#Remember":"Be warm, but professional. Record audio when possible. Sample real experiences, don’t ask for opinions (ex. Tell me about the last time you did XYZ). No leading questions or examples of answers. Silence is OK – give participants time to think about the question. If the participant doesn’t understand the question, take a moment to rephrase it. Think about the insight you are trying to uncover. Avoid becoming the expert. Even if the participant is doing something incorrectly, don’t correct them. Starting to correct them will also negatively change the dynamic of the interview.","script#Script":""},"title":"Scoped Interview Guide"},"/design/user-experience-research/technical-working-sessions/":{"data":{"":"A Technical Working Session is a collaborative meeting where backend users of the CHT (such as app developers and data scientists) and CHT Community product managers, software engineers, and UX researchers come together to dive deeper into technical issues and develop potential solutions in real time. These sessions provide valuable insights into the experiences of users developing and configuring the CHT.","executing#Executing":"Have the session participants introduce themselves Explain the purpose and duration of the session If a CHT Community member-Initiated Session: Confirm the priority order of the topics before starting If a Partner-Initiated Session: Hand over to partner and allow them to lead the session based on their issues priority Ask permission to record the conversation and start recording Begin reviewing each topic, asking the user to provide additional context before diving in Once all topics have been covered, ask the user if they have any questions or anything they’d like to discuss Agree on potential next steps from the call Thank them for their time and let them know to encourage a continual discussion after the call; on the forum or via email Tips\nBe warm and professional Make it an open back and forth discussion between both teams Focus on one issue at a time Aim to understand the root cause of the problem before offering a solution Ensure you understand the “why” and the “how” behind the issue Give users the chance to ask questions themselves Where possible, share screen and replicate the issues to see the issue in real time Record your session and have someone take notes so you can focus on being present Ensure all shared resources are kept in the meeting document for reference","planning-and-recruiting#Planning and Recruiting":"Technical working sessions can be set up in two ways: Partners reach out to the CHT Community for support with specific issues A CHT Community member identifies a relevant project to ongoing work and invites them to a technical working session: Ensure objectives for the session are clear and communicated in advance Identify a time that works best for both teams and the logistics of the call (platform, being on video, screen sharing, etc.) The projects’ team shares a list of current issues, with context on how they encountered the problem they are trying to solve, in order of priority beforehand The CHT Community members involved review the issues in order to attend the session with prepared documentation and identify the teammates who are best suited to address them (often a Product Owner, Software Engineer, UX Researcher) Here is a sample technical working session document.","synthesizing#Synthesizing":"Key insights and feedback are documented and categorized into themes, considering: What the issue was How the user arrived to the issue How they tried to address it What the user felt and thought Each theme is translated into an actionable problem statement Categorize the nuggets into themes Review all insights within each theme to create an actionable problem statement The problem statement should be a human-centered explanation of the issue to be addressed or challenge to solve."},"title":"Technical Working Sessions"},"/design/user-experience-research/template/":{"data":{"":"","conclusion#Conclusion":"Thank them for their time Let them know their feedback is important to improve the app for all CHWs","discussion-topics#Discussion topics":"When you think of [the topic], what comes to mind? How often do you deal with [the topic]? What do you like or dislike most about [the topic]? How does it compare to [XYZ]? Does it meet the needs of its function? Does anyone else have a similar experience? What improvements do you think could be made?","intro#Intro":"Introduce yourself. Briefly explain your role and why you are talking to users. Talk about what will happen in the session, how long it might last, the sorts of questions you’ll ask them. Have the group introduce themselves. Explain no right or wrong answers; it’s their experience that matters. Let them know there will be time for questions at the end. Explain why we record interviews and ask for permission.","learning-objectives#Learning objectives":"In the discovery phase, your objectives likely include better understanding user context and pain. You might want to learn what tools or services they are currently using to solve their existing pains, and to test your hypothesis. List these objectives here so you can refer to them.\nWhat do CHWs think about [XYZ]?","mission#Mission":"Why are you doing this research? This is your North Star reminder of how this session will help your initiative forward\nTo learn more about CHWs’ thoughts and opinions on a [specific topic]","remember#Remember":"Be warm, but professional. Record audio when possible. Sample real experiences, don’t ask for opinions (ex. Tell me about the last time you did XYZ). No leading questions or examples of answers. Silence is OK – give participants time to think about the question. If the participant doesn’t understand the question, take a moment to rephrase it. Think about the insight you are trying to uncover. Avoid becoming the expert. Even if the participant is doing something incorrectly, don’t correct them. Starting to correct them will also negatively change the dynamic of the interview.","script#Script":""},"title":"Focused Group Discussion Template"},"/design/user-experience-research/usability-testing/":{"data":{"":"Usability testing is the practice of testing how easy or difficult a design solution is to use by observing how users interact with it. These are one on one sessions that can be done in person where the facilitator observes the user directly, or remotely where the facilitator shares their screen and asks the user what they would do next and acts as their proxy.","executing#Executing":"If the usability test is being run in person, make sure the user is physically comfortable with the testing setup If the test is being run remotely, ensure a proper connection and that the user can hear you properly Ensure users know what is going to happen in the session; most times CHT users don’t have experience with usability testing Make it clear that the moderator is testing the designs and not them and that there are no wrong answers Ask permission to record the session and start the recording Begin the session and run through the scenarios and tasks until all are completed Thank the user for their participation, ask them if they have any questions and let them know their feedback is important in improving the CHT Tips\nWatch for verbal cues and body language. Some users won’t explicitly say they are confused but could sigh in frustration Don’t speak too much to avoid interfering with the users’ thought – ask them to say what they are thinking out loud as they are performing each task Keep an even tone, don’t agree or disagree with the user to avoid influencing their answers If a user is confused, probe to find out why instead of guiding them to the correct answer Whether the user passes or fails the task, do not give an indication of either and simply thank them for completing the task","planning#Planning":"Prepare your design prototypes to test Identify your test goals and objectives Develop your test script, tasks and scoring criteria Establish timelines and resources required: Recording equipment (record the user and their interactions with the prototype when possible) Personnel Location or connectivity if remote Testing devices or device with screen sharing capabilities if remote Here is a sample usability test.","recruiting#Recruiting":"Test with 6-8 users based on the relevant persona the prototype is designed for, considering:\nEngagement (active vs inactive users) Technical literacy Age Role Location Experience with the CHT","synthesizing#Synthesizing":"The scoring of each task in the test guide should indicate the pass/fail rate of the designs tested and the average ease of use score to highlight areas of improvement for the prototypes."},"title":"Usability Testing"},"/design/user-experience-research/user-interviews/":{"data":{"":"User interviews serve the purpose of uncovering opportunities for innovation and for illuminating solutions to problems.\nGenerative interviews are used in the discovery phase of the development process when you’re looking for opportunities to solve for. Scoped interviews are used when a topic of interest has been identified and you’d like to gain a deeper understanding.\nPlanning Identify your research objectives Develop your interview questions Establish timelines and resources required: Recording equipment Personnel Location, or connectivity if remote Here is a generative interview template\nHere is a scoped interview template\nRecruiting For generative interviews, recruit users on a regular cadence for continuous, wide and varied feedback.\nFor scoped interviews, recruit 5-8 users considering the following criteria:\nEngagement (active vs inactive users) Technical literacy Location Age Role Experience with the CHT Agree on a mutually convenient time and date – if doing remote research, make sure you give the time and date in your users timezone. For interviews scheduled a week or more in advance, follow up a week before the interview and again the day before. Avoid user burnout by repeatedly recruiting the same users unless they have consented to be part of a study series.\nExecuting Start the call and ensure it’s still a good time to speak with the user Explain the purpose of the interview, what questions will be covered and the time it might take Allow the users to ask any questions Ask permission to record the conversation and start recording Begin the interview guide Once all topics have been covered, ask the user if they have any questions or anything they’d like to discuss Thank them for their time and let them know their feedback is valuable to improving the CHT","executing#Executing":"","planning#Planning":"","recruiting#Recruiting":"","synthesizing#Synthesizing":"Identify insights or key findings from user feedback from the interviews Categorize them into themes Review all insights within each theme to create an actionable problem statement The problem statement should be a human-centered explanation of the issue to be addressed or challenge to solve.","tips#Tips:":"Tips\nBe warm and professional Listen lots, speak little Focus on one question at a time Don’t share your assumptions or hypotheses Do not influence the user by asking leading questions Give users time to think about the question and take a moment before rephrasing it if they don’t understand Give users the chance to ask questions themselves Record your session or have someone take notes so you can focus on being present Here is a recording of a sample interview."},"title":"User Interviews"},"/hosting/":{"data":{"":"This section has instructions on how to host the CHT Core starting with the most basic Application Development setup on your laptop for just one developer all the way up to large deployments which include multi-node CouchDB cluster hosted in a Cloud based deployment.\nNew developers to the CHT should start with the Application Developer Hosting.\nSystem administrators looking to deploy CHT into production should understand the requirements to host the CHT first, then read the Docker or Kubernetes to select a style of hosting that best fits them.\nCHT CoreGuides for hosting CHT applications Monitoring \u0026 AlertingUsing CHT Watchdog to Monitor and Alert on CHT Applications Data Synchronization \u0026 AnalyticsUsing CHT Sync for data synchronization and analytics couch2pgGuides for using couch2pg deprecated SSOSetting up Single Sign On At MedicGuidelines internal to Medic-hosted CHT instances medic internal"},"title":"Host"},"/hosting/analytics/":{"data":{"":"Most CHT deployments require some sort of analytics so that stakeholders can make data driven decisions. CouchDB, which is the database used by the CHT, is not designed for analytics. It is a document database, which means that it is optimized for storing and retrieving documents, and not for aggregating data. For example, if you wanted to know how many patients were registered in a particular area, you would have to query the database for all the patients in that area, and then count them. This is not a very efficient process. It is much more efficient to store the number of patients in a particular area in a separate database, and update that number whenever a patient is registered or unregistered. This is what CHT Sync is designed to do.\nCHT Sync is an integrated solution designed to enable data synchronization between CouchDB and PostgreSQL for the purpose of analytics. It has been designed to work in both local development environments for testing models or workflows, and in production environments. It can be deployed using Docker or Kubernetes. It is supported on CHT 3.12 and later, including CHT 4.x. By using CHT Sync, a CHT deployment can easily get analytics by using a data visualization tool, such as Superset. CHT Sync is open-source and has no licensing fees.\nContent in this section CHT Sync Setup with Kubernetes CHT Sync Setup with Docker Migrating from couch2pg to CHT Sync dbt Models for CHT Applications Testing dbt Models Tuning dbt runs for performance Data visualization Environment Variables"},"title":"Data Synchronization \u0026 Analytics"},"/hosting/analytics/building-dbt-models/":{"data":{"":"Guide for building dbt models for CHT applications CHT Sync copies data from CouchDB to a relational database. It initially stores the document data from CouchDB in a jsonb column in a single PostgreSQL table. This is not possible to query for analytics, so it uses dbt to convert the document data to a relational database format.\nThe cht-pipeline repository defines a dbt project, which contains model files for the data schema described in the database schema conventions. Forms may be specific to each CHT application; additional models will need to be developed to analyze data from responses to these custom forms. One additional model will be needed for each form, and for any aggregations, dashboards, or reusable views that use those form responses as input. If using the configurable contact hierarchy, it may also be useful to add models for other contact types.","aggregations#Aggregations":"After defining the form and contact models, they can be joined together by subject (patient_id or place_id), reported_by, or any of the other contact fields, to build aggregates of form submissions grouped by report date, area, or reporter.\nIt may be useful to save some common queries as views, so that they can be reused in dashboards or downstream aggregations. For example, with the pregnancy form model above, if there was also a postnatal care form, they could be joined to view outcomes together with registrations.\n{{ config(materialized = 'materialized_view') }} SELECT pnc.uuid AS pnc_uuid, pregnancy.uuid AS pregnancy_uuid, pnc.patient_id AS patient_id, pnc_contact.uuid AS pnc_reported_by, pregnancy_contact.uuid AS pregnancy_reported_by, pnc.reported AS reported, pregnancy.reported AS pregnancy_reported, pregnancy.edd as edd, pnc.delivery_date AS delivery_date, pnc.pregnancy_outcome, FROM {{ ref('postnatal_care') }} AS pnc LEFT JOIN {{ ref('pregnancy') }} ON (pnc.reported \u003e pregnancy.reported AND pnc.reported \u003c (pregnancy.reported + '1 year'::INTERVAL) AND pnc.patient_id = pregnancy.patient_id) WHERE (pnc.pregnancy_outcome IN (VALUES ('healthy'), ('still_birth'))) AND pnc.patient_id IS NOT NULL AND pnc.patient_id \u003c\u003e ''","base-models#Base Models":"All tables contain a uuid which is the primary key for the table; it is also the _id from the source CouchDB document.","breaking-changes#Breaking changes":"Due to the way models can be imported, extended, and built upon, it’s necessary to take precautions against breaking backwards compatibility when making changes upstream. Model collections should be versioned, following semver rules, and breaking changes should only be published in major releases.\nExamples of changes that are considered breaking:\ndeleting/renaming a model deleting/renaming a field changing a field data type changing a field data definition significantly removing/changing an index removing/changing a macro Examples of changes that are not considered breaking:\nadding a model adding a field updating an existent field data definition to fix a bug adding a macro adding an index adding tests","building-app-models#Building App models":"An overview of building dbt models can be found in the dbt documentation. The additional models that need to be developed for a CHT application are:\nOne model for each form Models for contacts that are defined by the configurable hierarchy Models to contain aggregates that may be useful for dashboards or analysis.","cht_contact_model#\u003ccode\u003echt_contact_model\u003c/code\u003e":"Argument Description contact_type the id of the contact_type to be selected parents a list of parent contacts to join to this table, in this format: [{'id': '', 'table': ''}, {'id': '', 'table':''}] custom_contact_columns The columns to be selected, as a SQL string to be inserted into the SELECT clause, using couchdb.doc custom_indexes Any additional indexes for the above columns, as a dbt index list This example shows how this macro can be used to build a household model which has some custom columns, a foreign key to its parent, and a community health area.\n{% set custom_fields %} contact.name AS household_name, contact.contact_id AS household_contact_id, community_health_unit.uuid as chu_area_id, NULLIF(couchdb.doc -\u003e\u003e 'uses_treated_water', '')::boolean AS uses_treated_water, NULLIF(couchdb.doc -\u003e\u003e 'has_functional_latrine', '')::boolean AS has_functional_latrine {% endset %} {{ cht_contact_model('household', custom_fields, [{'id': 'community_health_unit', 'table': 'community_health_units'}]) }}","cht_form_model#\u003ccode\u003echt_form_model\u003c/code\u003e":"Argument Description form_name The name of the form to be selected form_columns The columns to be selected, as a SQL string to be inserted into the SELECT clause, using couchdb.doc-\u003efields form_indexes Any additional indexes for the above columns, as a dbt index list This example extracts Last Menstrual Period, Expected Delivery Date and ANC visit number from a typical pregnancy registration form.\n-- add any indexes specific to this form {%- set form_indexes = [ {'columns': ['edd']}, {'columns': ['danger_signs']}, {'columns': ['risk_factors']}] -%} -- add columns specific to this form {% set form_columns %} NULLIF(couchdb.doc-\u003e'fields'-\u003e\u003e'lmp_date','')::date as lmp, -- CAST lmp string to date or NULL if empty NULLIF(couchdb.doc-\u003e'fields' -\u003e\u003e 'edd','')::date as edd, -- CAST edd string to date or NULL if empty couchdb.doc-\u003e'fields' -\u003e\u003e 'lmp_method' as lmp_method, couchdb.doc-\u003e'fields' -\u003e\u003e 'danger_signs' AS danger_signs, couchdb.doc-\u003e'fields' -\u003e\u003e 'risk_factors' AS risk_factors, -- extract the ANC visit number CASE WHEN couchdb.doc-\u003e'fields' -\u003e\u003e'anc_visit_identifier' \u003c\u003e '' THEN (couchdb.doc-\u003e'fields' -\u003e\u003e'anc_visit_identifier')::int WHEN couchdb.doc-\u003e'fields' #\u003e\u003e'{group_repeat,anc_visit_repeat,anc_visit_identifier}' \u003c\u003e '' THEN RIGHT(couchdb.doc-\u003e'fields' #\u003e\u003e'{group_repeat,anc_visit_repeat,anc_visit_identifier}'::text[], 1)::int ELSE 0 -- if not included default to 0 END AS anc_visit {% endset %} -- call the macro with the form name, the columns and indexes to create the actual model {{ cht_form_model('pregnancy', form_columns, form_indexes) }} This creates the following model:\n{{ config( materialized='incremental', unique_key='uuid', on_schema_change='append_new_columns', indexes=[ {'columns': ['uuid'], 'type': 'hash'}, {'columns': ['saved_timestamp']}, {'columns': ['reported_by']}, {'columns': ['reported_by_parent']}, {'columns': ['reported']} ] ) }} SELECT data_record.uuid as uuid, data_record.saved_timestamp, data_record.contact_uuid as reported_by, data_record.parent_uuid as reported_by_parent, data_record.reported NULLIF(couchdb.doc-\u003e'fields'-\u003e\u003e'lmp_date','')::date as lmp, -- CAST lmp string to date or NULL if empty NULLIF(couchdb.doc-\u003e'fields' -\u003e\u003e 'edd','')::date as edd, -- CAST edd string to date or NULL if empty couchdb.doc-\u003e'fields' -\u003e\u003e 'lmp_method' as lmp_method, couchdb.doc-\u003e'fields' -\u003e\u003e 'danger_signs' AS danger_signs, couchdb.doc-\u003e'fields' -\u003e\u003e 'risk_factors' AS risk_factors, -- extract the ANC visit number CASE WHEN couchdb.doc-\u003e'fields' -\u003e\u003e'anc_visit_identifier' \u003c\u003e '' THEN (couchdb.doc-\u003e'fields' -\u003e\u003e'anc_visit_identifier')::int WHEN couchdb.doc-\u003e'fields' #\u003e\u003e'{group_repeat,anc_visit_repeat,anc_visit_identifier}' \u003c\u003e '' THEN RIGHT(couchdb.doc-\u003e'fields' #\u003e\u003e'{group_repeat,anc_visit_repeat,anc_visit_identifier}'::text[], 1)::int ELSE 0 -- if not included default to 0 END AS anc_visit FROM {{ ref('data_record') }} data_record INNER JOIN {{ env_var('POSTGRES_SCHEMA') }}.{{ env_var('POSTGRES_TABLE') }} couchdb ON couchdb._id = data_record.uuid WHERE data_record.form = 'pregnancy' {% if is_incremental() %} AND data_record.saved_timestamp \u003e= {{ max_existing_timestamp('saved_timestamp') }} {% endif %}","contact#\u003ccode\u003econtact\u003c/code\u003e":"See a description of contact documents in CouchDB in the database schema conventions. Every person and place is stored in the contact table. Persons and places are stored in their own tables, but because contact types are configurable, other contact types do not have their own tables by default. The contact hierarchy defines “is a” relationships between contact types; e.g., a patient is a person is a contact. This is modeled as one table per type, where the uuid is both the primary key for the child table and a foreign key to the parent table.\nField Description uuid Unique identifier of the record. Note this is both the primary key for this table, and a foreign key to the couchdb table. saved_timestamp timestamp when this row was inserted parent_uuid uuid of the parent contact. name name contact_type for data created \u003c= 3.7, the same as type of the CouchDB document, when using the configurable hierarchy, contact_type. reported the reported timestamp from the CouchDB document, stored as a date notes active muted true if this contact has been muted","contact_type#\u003ccode\u003econtact_type\u003c/code\u003e":"This table stores metadata about contact types. It uses the configurable contact types from app settings, combined with all distinct values of contact_type from the contact table. The person column defines which contact types are persons and which are places. It uses the person field from the settings, or if the contact type is not in settings, it is assumed to be a place unless id is person\nField Description id the id of the contact type, either from the id field in app settings, or from the contact_type field from contacts person true if this contact type represents a person. if false, this contact type is a place configured true if this contact type is in settings, false if not","contacts-hierarchy#Contacts hierarchy":"The base models have tables for person and place, but it’s often useful for other contact types to have their own specialized tables, which can have additional columns specific to that type, and can have foreign keys to parents in the hierarchy. For example, households, patients, chws and supervisors are all common objects in data analysis, but do not have any definition common to all applications and so need to be built in application-specific models.\nTo do this, use the cht_contact_model macro, specifying the contact_type id, any custom fields and indexes, and a list of parent models.","couchdb#\u003ccode\u003ecouchdb\u003c/code\u003e":"All documents are stored in the couchdb table; downstream models move fields from the document into columns and index them. Deleted documents will still be present in this table with the _deleted flag set to true. This table can be used to get any field from a CouchDB document; however, it is recommended that the columns from downstream models be used instead for performance reasons. The name is configurable using the POSTGRES_TABLE environment variable.\nField Description _id CouchDB’s unique identifier of the record saved_timestamp timestamp when this row was inserted _deleted true if the document was deleted, false otherwise. source The instance and database that this document was synced from. The format is host/db. doc JSON of the source document","data_record#\u003ccode\u003edata_record\u003c/code\u003e":"All form responses are stored in the data_record table; see more details in the database schema conventions. This table contains columns for the contact who made the report, the parent of that contact, and the date it was reported.\nField Description uuid Unique identifier of the record. Note this is both the primary key for this table, and a foreign key to the couchdb table. saved_timestamp timestamp when this row was inserted reported the reported timestamp from the couchdb document, stored as a date form the name of the form from_phone phone number of the reporter, if available patient_id subject of the form; if it has a field for patient_id, it will be copied to this column place_id subject of the form; if it has a field for place_id, it will be copied to this column contact_uuid uuid of the contact who made the report parent_uuid uuid of the parent of contact who submitted the form (at the date reported; contacts parent may have changed since then, this column will not) grandparent_uuid uuid of the parent of contact who submitted the form (at the date reported; contacts parent may have changed since then, this column will not)","database-disk-space-requirements#Database disk space requirements":"The disk space required for the database depends on a few things including the size the of CouchDB databases being replicated, and the models defined. The database will grow over time as more data is added to CouchDB. The database should be monitored to ensure that it has enough space to accommodate the data. To get an idea of the size requirements of the database, you can replicate 10% of the data from CouchDB to Postgres and then run the following command to see disk usage:\nSELECT pg_size_pretty(pg_database_size('your_database_name')); If Postgres is running in a Kubernetes cluster, you can use the following command to get the disk usage:\nkubectl exec -it postgres-pod-name -- psql -U postgres -c \"SELECT pg_size_pretty(pg_database_size('your_database_name'));\" To get the percentage of documents that have synced you can run the following query in your Postgres database:\nSELECT (COUNT(*) * 100 / (COUNT(*) + (SELECT SUM(pending) FROM v1.couchdb_progress))) AS sync_percentage FROM v1.couchdb; This query selects the total number of documents that have been synced to the v1.couchdb table and divides it by the total number of documents that have been synced and the number of documents that are pending to be synced. This will give you the percentage of documents that have been synced. Note that the schema and table name could differ according to the environment variables you set so update them accordingly. Run this query periodically to monitor the progress of the sync and stop the sync process once you get to the desired percentage. It’s okay if it is not exactly 10% as long as it is close enough to give you an idea of the disk space required.\nYou can then multiply this figure by 10 to get an estimate of the disk space required for the full dataset and then add some extra space for indexes and other overhead as well as future growth.\nFor example if the size of the database is 1GB, you can expect the full dataset to be around 10GB. If the CouchDB docs grow by 20% every year then you can compound this growth over 5 years to get an estimate of the disk space required: 10GB * 1.2^5 = 18.5GB. You can add an extra 20% for indexes and overhead to get an estimate of 22.2GB.\nThis is just an estimate and the actual disk space required may vary so actively monitoring the disk space usage and making necessary adjustments is recommended.","deploying-models#Deploying models":"CHT Sync automatically checks for updates to the dbt project at CHT_PIPELINE_BRANCH_URL. Use the main branch for changes that should be released; they will be applied as soon as they are pushed to the repository. For models that are in development, any other branch can be used.\nRebuilding tables can take some time (a rough estimate is several hours for tables between 1M and 10M rows, up to 24H for tables between 10M and 100M rows), so plan for affected dashboards to be out of date when releasing new changes to models; only changed tables and their dependencies will be rebuilt.\nNew releases of the base models are rare, but schema changes to the CHT or new features may require changes. Generally, these changes will be backwards compatible so that a new release of the CHT, or to the base models, does not break application specific models.\nWhen it is necessary to update the base models, update the version tag in the dependency that refers to cht-pipeline, make any changes to application specific models that are necessary, rerun any unit tests, and push to the main branch to release.","document_metadata#\u003ccode\u003edocument_metadata\u003c/code\u003e":"This table contains the metadata about all documents and is the root for all other models. It contains a type column describing the type of the document. Deleted documents do not appear as rows in this table and deletes from this table cascade to all other models. The document itself is not copied to this table; to use it requires joining to the couchdb table.\nField Description uuid CouchDB’s unique identifier of the record saved_timestamp timestamp when this row was inserted doc_type The general type of the document, see below _deleted in this table, always false; rows which are copied with _deleted = true are immediately deleted instance The hostname of the CHT instance the document was synced from. dbname The name of the CouchDB database the document was synced from.","form-models#Form models":"For each form in the CHT application that is relevant for analysis, create a model using the cht_form_model macro. This macro creates a model that selects from data_record where form = 'theformyouwant', joins to the couchdb table to get the jsonb fields, moves the fields into columns, applies any convenient transformations, and, if necessary, adds indexes to them.\nTo use this macro, select the fields to move into columns and any indexes as in the example below.","local-development#Local development":"When creating/modifying models, you can use the Docker local profile to run a local test instance of CHT Sync that can reference your model configuration directly on your local machine (without needing to commit/push the changes remotely).","person#\u003ccode\u003eperson\u003c/code\u003e":"This table stores all contacts where the contact_type is person, and has additional fields that are relevant only for person contacts.\nField Description uuid Unique identifier of the record. Note this is both the primary key for this table, and a foreign key to the contact and couchdb tables. saved_timestamp timestamp when this row was inserted date_of_birth sex phone contacts primary phone number phone2 alternate phone number, if available place_id","place#\u003ccode\u003eplace\u003c/code\u003e":"This table stores all contacts where the contact_type is place, and has additional columns that are relevant only for place contacts. The contact_id column contains a foreign key to a person contact who is the primary contact for the place.\nField Description uuid Unique identifier of the record. Note this is both the primary key for this table, and a foreign key to the contact and couchdb tables. saved_timestamp timestamp when this row was inserted place_id contact_id places have another contact that represents the person who is the primary contact for the place; for example a facility administrator","prerequisites#Prerequisites":"An existing install of CHT Sync via Docker or Kubernetes cht-pipeline GitHub repository (can be cloned via git clone https://github.com/medic/cht-pipeline).","setup#Setup":"To create application specific models, create a new dbt project. Edit the packages.yml in your new dbt project to add cht-pipeline as a dependency. Add your dbt new project in a GitHub repository (it may be public or private) so you can track changes in your models.\npackages: - git: \"https://github.com/medic/cht-pipeline\" revision: \"v1.2.0\" To avoid breaking changes in downstream models, include revision in the dependency, which should be a version tag for cht-pipeline.\nIn the CHT Sync config, set the URL of the dbt GitHub repository to the CHT_PIPELINE_BRANCH_URL environment variable, either in .env if using Docker compose, or in values.yaml if using Kubernetes.\nImportant\nIf CHT_PIPELINE_BRANCH_URL is pointing to a private GitHub repository, you’ll need an access token in the URL. Assuming your repository is medic/cht-pipeline, you would replace with an access token: https://@github.com/medic/cht-pipeline.git#main. See GitHub’s instructions on how to generate a token. If you create a fine-grained access token you need to provide read and write access to the contents of the repository.","testing-models-and-dashboards#Testing models and dashboards":"It is highly encouraged to write dbt tests for application-specific models to ensure that they are accurate and to avoid releasing broken models. Examples can be found in the cht-pipeline repository.","views-vs-incremental-tables#Views vs. Incremental Tables":"There are two options for building models using dbt: views and incremental tables; see a full description in the dbt documentation. In short, views are normal SQL views, and incremental tables are actual tables, which are periodically updated as new data is created, updated or deleted.\nFor CHT dbt models, it is generally preferred to start with materialized views. Materialized views are refreshed on every dbt run, columns can still be indexed, and they don’t require much extra configuration. Non-materialized views or non-incremental tables are possible but not recommended because they are unavailable during dbt run and anything that depends on them (including dashboards) will also be unavailable. Some base models use incremental tables to ensure good performance for dbt run, because materialized views can take a long time to refresh.\nTo convert a view to an incremental table, change the materialization to incremental and add a condition to the WHERE clause:\n{{ config(materialized = 'incremental') unique_key='uuid', indexes=[ {'columns': ['\"uuid\"'], 'type': 'hash'}, {'columns': ['\"saved_timestamp\"'], 'type': 'btree'} ] }} SELECT uuid, \"saved_timestamp\", ... FROM {{ ref(\"data_record\") }} data_record WHERE form = 'pregnancy' {% if is_incremental() %} AND \"data_record.saved_timestamp\" \u003e= {{ max_existing_timestamp('\"saved_timestamp\"') }} {% endif %} To be performant, the table from this model is reading form needs to have the saved_timestamp column indexed."},"title":"dbt Models"},"/hosting/analytics/couch2pg-to-cht-sync-migration/":{"data":{"":"This page outlines guidelines for migrating from couch2pg to the data pipeline based on CHT Sync. One of the main changes in this flow is separating the syncing process from the data transformation, with dbt now handling the latter in cht-pipeline. This migration requires dbt models in the cht-pipeline repository instead of SQL views and tables. One thing to note is that the schema for CHT Sync differs from cht-couch2pg, so dbt models will not directly replace the SQL views and tables. For instructions on how to get started with dbt models, refer to the dbt models guide.","key-considerations#Key Considerations":"Kubernetes vs Docker Compose: CHT Sync provides configurations to support deployment to test and production environments with Docker Compose or Kubernetes. You can read more about the CHT hosting options in the dedicated page. Server resources: To minimize downtime, running both couch2pg and CHT Sync in parallel during the migration process is recommended. With this in mind, ensure that the server and database resources are sufficient to handle the load. dbt modelling: Avoid the temptation to model new dbt models after existing SQL views and tables. Instead, take the opportunity to re-evaluate the data needs and design new models that are more efficient and effective. Think of what data needs to be shown and how it should be shown in data visualization tools and use that to guide the design of the new models. Testing: After migrating, thoroughly test the new dbt models to ensure that they work as expected. Refer to the testing dbt models guide for guidelines on testing. Feedback: Provide any feedback and create issues for errors or bugs encountered in the cht-sync and cht-pipeline repositories to improve the tools.","migration-steps#Migration Steps":"Plan the migration: Determine the scope of the migration, including the data sources, the data models, and the data transformations. Identify the existing SQL views, tables, and dashboards and assess what data you want to visualize. Set up CHT Sync: Follow the instructions to setup CHT Sync with Docker Compose or Kubernetes Build dbt models: Use the dedicated guidelines to build dbt models for the data you want to visualize. Deploy CHT Sync: Once the dbt models are tested locally or in a test environment and working as expected, deploy CHT Sync in a production environment. It is recommended that CHT Sync be run in parallel with couch2pg during the migration process. This minimises disruption to users of the existing dashboards because they can continue to use the existing data while the new pipeline is being set up. It also makes it easier to compare the data from couch2pg when testing the new pipeline. Create replica dashboards: In the data visualization tool of your choice, create replica dashboards of your current setup and compare the data from the old and new pipelines. Test and adjust the dbt models: Test the dbt models to ensure they are working as expected and that the replica and initial dashboards match. Adjust the models to ensure they are accurate. Optimize: Once the dbt models are working as expected and the dashboards display the expected data, optimize the models to improve performance. This may involve restructuring the models, adding indexes, or making other adjustments to improve the speed and efficiency of the models. Having a look at the dbt models guide will help you understand how to optimize the models. Set up monitoring and alerting: Set up CHT Watchdog to monitor the running of CHT Sync and set up alerts for any failures. Remove couch2pg and the duplicate database: Once the new pipeline runs as expected, you can remove couch2pg and the duplicate database. Ensure that all data is being synced correctly, that the dbt models are working as expected, and that the dashboards display the expected data before switching them off and removing couch2pg."},"title":"couch2pg to CHT Sync"},"/hosting/analytics/dashboards/":{"data":{"":"These instructions assume you are running CHT Sync, CHT Core and PostgreSQL either with Kubernetes or Docker.","superset#Superset":"To build data visualization dashboards, follow the Superset instructions to run Superset and connect it to the PostgreSQL database. It is recommended that a way to track Superset changes be added via a git repository or any other version control system to make it easier to track changes over time and potentially catch and remediate bugs and regressions. Instructions on how to do this using a GitHub action can be found in the cht-sync repository."},"title":"Dashboards"},"/hosting/analytics/environment-variables/":{"data":{"":"There are three groups of environment variables. One for Postgres, one for CouchDB and one for DBT. These are found in the .env file and the values.yaml file for docker and Kubernetes respectively.\nPOSTGRES_: Used by PostgreSQL to establish the PostgreSQL database to synchronize CouchDB data to. They define the schema and table names to store the CouchDB data, as well as where the tables and views for the models defined in CHT_PIPELINE_BRANCH_URL will be created. COUCHDB_: Used by CouchDB to define the CouchDB instance to sync with. With COUCHDB_DBS, we can specify a list of databases to sync. DBT_: Used by dbt to pull from the remote git repository, declare sync frequency and concurrency. Name Default Description COMPOSE_PROJECT_NAME pipeline (Optional) Docker Compose name POSTGRES_USER postgres Username of the PostgreSQL database POSTGRES_PASSWORD postgres Password of the PostgreSQL database POSTGRES_DB cht_sync PostgreSQL database POSTGRES_SCHEMA v1 PostgreSQL schema POSTGRES_TABLE couchdb PostgreSQL table where the CouchDB data is copied POSTGRES_HOST postgres PostgreSQL instance POSTGRES_PORT 5432 PostgreSQL port CHT_PIPELINE_BRANCH_URL \"https://github.com/medic/cht-pipeline.git#main\" cht-pipeline branch containing the dbt models DATAEMON_INTERVAL 5 Interval (in seconds) for looking for new changes in the CouchDB data COUCHDB_USER medic Username of the CouchDB instance COUCHDB_PASSWORD password Password of the CouchDB instance COUCHDB_DBS \"medic\" Comma separated list of databases to sync e.g \"medic, medic_sentinel\" COUCHDB_HOST couchdb Host of the CouchDB instance COUCHDB_PORT 5984 Port of the CouchDB instance COUCHDB_SECURE false Does the connection to CouchDB use HTTPS? DBT_THREAD_COUNT 1 Number of threads per DBT process DBT_BATCH_SIZE 0 Batch size for batched incremental runs DBT_LOCAL_PATH When running DBT locally for development, the path to the models directory on the host DBT_SELECTOR '' If using separate DBT processes, the select condition to select a subset of the models for a single dbt process."},"title":"Environment Variables"},"/hosting/analytics/setup-docker-compose/":{"data":{"":"This guide will walk you through setting up a deployment of CHT Sync with the CHT using Docker. This path is recommended if you host the CHT with Docker.","cleanup#Cleanup":"When you are done using the services, you can clean everything by running down.\nFor example, using the local profile, the command should look like:\ndocker compose -f docker-compose.yml down To remove all the data volumes, add -v at the end of this command.","local#Local":"This setup involves starting couch2pg, PostgreSQL, pgAdmin and dbt. It assumes you have a CouchDB instance running, and you updated the .env CouchDB variables accordingly.\nThe dbt container needs a project to run. To develop and test models locally, set up a dbt project and set the path to the project to the DBT_LOCAL_PATH environment variable in .env. You must set this to a valid directory where you have your CHT Pipeline models. You can not use --local profile without setting this.\nWhen running, the dbt container then will use the local models in the path specified in DBT_LOCAL_PATH with out needing to query a remote git repository.\nRun the Docker containers locally and wait for every container to be up and running:\ndocker compose --profile local up -d You can verify this command worked by running docker compose --profile local ps --format \"{{.Names}}\\t{{.Status}}\". It should show four containers running including couch2pg, dbt, PostgreSQL, and pgAdmin:\ncht-sync-couch2pg-1 Up About a minute cht-sync-dbt-local-1 Up About a minute cht-sync-pgadmin-1 Up About a minute cht-sync-postgres-1 Up About a minute When developing dbt models, it is helpful to test changes locally before committing them to a remote repository.\nThe dbt container will run the models in the path specified in DBT_LOCAL_PATH.","prerequisites#Prerequisites":"Current version of docker or current version of Docker Desktop both of which include docker compose. Note that the older docker-compose is no longer supported. git cht-sync GitHub repository (can be cloned via git clone https://github.com/medic/cht-sync). A dbt project.","production#Production":"This setup involves starting couch2pg and one dbt container. It assumes you have an external CouchDB instance and Postgres DB. The credentials and settings for these databases are configured in .env.\nRun the Docker containers with profile production and wait for every container to be up and running:\ndocker compose --profile production up -d You can verify this command worked by running docker ps. It should show three containers running: dbt, couch2pg and bastion.","profiles#Profiles":"Running CHT Sync uses docker compose profiles to organize different sets of services.\nThe following profiles are available:\nlocal - for local model development production - recommended setup for production test - for automated tests","setup#Setup":"In the cht-sync folder, copy the values from the env.template file to a .env file. For more information, see the references on the Environment variables page.\nConfigure the COUCHDB_* environment variables to connect to your CouchDB instance. For production CHT Core deployments, the port will most likely need to be set to 443 like this: COUCHDB_PORT=443. This is because CHT Core uses an nginx reverse proxy on port 443, instead of the default 5984 port used in a stand-alone CouchDB instance which the env.template has.\nImportant\nThe first time you run the commands from any of the sections below it will need to download many Docker images and will take a while. You’ll know it’s done when you see #8 DONE 0.0s and you are returned to the command line. Be patient!","tuning-dbt#Tuning dbt":"In production setups with large tables, it can be helpful to tune how dbt runs.\nTo use threads or batching, set the corresponding environment variables in .env.\nDBT_THREADS=3 DBT_BATCH_SIZE=100000 To use multiple dbt containers, add an additional docker-compose file with different dbt containers and use profiles to control which services run. Use the DBT_SELECTOR environment variable to change which models each container runs.\nname: ${COMPOSE_PROJECT_NAME:-cht-sync} x-dbt-base: \u0026dbt-common build: ./dbt/ working_dir: /dbt/ environment: \u0026dbt-env POSTGRES_HOST: ${POSTGRES_HOST} POSTGRES_PORT: ${POSTGRES_PORT:-5432} POSTGRES_USER: ${POSTGRES_USER} POSTGRES_PASSWORD: ${POSTGRES_PASSWORD} POSTGRES_DB: ${POSTGRES_DB} POSTGRES_TABLE: ${POSTGRES_TABLE} POSTGRES_SCHEMA: ${POSTGRES_SCHEMA} ROOT_POSTGRES_SCHEMA: ${POSTGRES_SCHEMA} DATAEMON_INTERVAL: ${DATAEMON_INTERVAL} DBT_THREAD_COUNT: ${DBT_THREAD_COUNT} DBT_BATCH_SIZE: ${DBT_BATCH_SIZE} services: dbt-tag-one: \u003c\u003c: *dbt-common profiles: - tags environment: \u003c\u003c: *dbt-env DBT_SELECTOR: package:cht_pipeline_base CHT_PIPELINE_BRANCH_URL: ${CHT_PIPELINE_BRANCH_URL} dbt-tag-one: \u003c\u003c: *dbt-common profiles: - tags environment: \u003c\u003c: *dbt-env DBT_SELECTOR: tag:tag-one CHT_PIPELINE_BRANCH_URL: ${CHT_PIPELINE_BRANCH_URL} dbt-tag-two: \u003c\u003c: *dbt-common profiles: - tags environment: \u003c\u003c: *dbt-env DBT_SELECTOR: tag:tag-two CHT_PIPELINE_BRANCH_URL: ${CHT_PIPELINE_BRANCH_URL} docker compose --profile tags --profile production -f docker-compose.yml -f docker-compose.dbt-tags.yml up -d","upgrading#Upgrading":"To upgrade to a newer version of CHT Sync with docker, stop all containers, and pull the newer version. If there are any database changes that require a migration script, the major version will be changed and the changes detailed below. After running any migrations scripts, restart containers with the new docker-compose.yml\ndocker compose --profile production up -d","upgrading-v1-to-v2#Upgrading V1 to V2":"V2 added the source column to the couchdb table, and several other columns to the metadata table. To add these columns log in to the database and run this sql.\nALTER TABLE _dataemon ADD COLUMN IF NOT EXISTS manifest jsonb; ALTER TABLE _dataemon ADD COLUMN IF NOT EXISTS dbt_selector text; ALTER TABLE couchdb ADD COLUMN IF NOT EXISTS source varchar; CREATE INDEX IF NOT EXISTS source ON couchdb(source); In V2, the commands for running CHT sync have changed; a profile is required as described above. When testinging locally and using the local profile, the environment variable DBT_LOCAL_PATH must be set. V2 adds new features for tuning dbt; to use batching, threads, or separate dbt processes, set the corresponding environment_variables in .env as described above."},"title":"Docker"},"/hosting/analytics/setup-kubernetes/":{"data":{"":"This guide will walk you through setting up a deployment of CHT Sync with the CHT using Kubernetes. This path is recommended if you already have a Kubernetes cluster hosting the CHT.","deploy#Deploy":"Run the command below to deploy the CHT Sync helm chart. The chart is at deploy/cht_sync; if values.yaml is in a different directory, specify the path.\ncd deploy/cht_sync helm install cht-sync . --values values.yaml","prerequisites#Prerequisites":"git A Kubernetes cluster: You can use a managed Kubernetes service like Google Kubernetes Engine (GKE), Amazon Elastic Kubernetes Service (EKS), or Azure Kubernetes Service (AKS), or you can set up a cluster using a tool like Minikube. kubectl: The Kubernetes command-line tool. You can install it using the kubectl installation instructions. Helm: The Kubernetes package manager. You can install it using the helm installation guide. cht-sync GitHub repository (can be cloned via git clone https://github.com/medic/cht-sync).","setup#Setup":"In the cht-sync folder, copy the values in deploy/cht_sync/values.yaml.template file to a new file named deploy/cht_sync/values.yaml.\nIf you require a Postgres database to be set up in the cluster, you can use the postgres.enabled flag in the values.yaml file. If you already have a Postgres database outside the cluster, you can set the postgres.enabled flag to false. Also, if Postgres is outside the cluster, specify host and port in this section.\nIn either case, specify user, password, db, schema, and table.\nschema can be used to separate CHT models from any other data that may already be in the database. table is the name of the table that couch2pg will write couch documents to, and the source table for dbt models. It is recommended to leave this as couchdb. postgres: enabled: true user: \"postgres\" password: \"\" db: \"\" schema: \"v1\" table: \"couchdb\" host: \"postgres\" # if postgres is outside the cluster port: 5432 # if postgres is outside the cluster Set CouchDB shared values in the values.yaml file.\ncouchdb: user: \"your_couchdb_user\" dbs: \"medic\" port: \"443\" secure: \"true\" Configure the CouchDB instance to be replicated in the values.yaml file. For the host, use the CouchDB host URL used to publicly access the instance and for the password, use the password associated with the user set above.\ncouchdbs: - host: \"host1.cht-core.test\" password: \"password1\" If you have multiple CouchDB instances to replicate, you can add them to the couchdbs list.\ncouchdbs: - host: \"host1.cht-core.test\" password: \"password1\" - host: \"host2.cht-core.test\" password: \"password2\" If an instance has a different port, user or different CouchDB databases to be synced, you can specify it in the couchdbs list.\n- host: \"host1\" # required for all couchdb instances password: \"\" # required for all couchdb instances - host: \"host2.cht-core.test\" password: \"new_password\" user: \"separate_user\" dbs: \"medic medic_sentinel\" port: \"5984\" secure: \"false\" - host: \"host3.cht-core.test\" password: \"password3\" Set the cht-pipeline branch URL in the values.yaml file.\ncht_pipeline_branch_url: \"https://github.com/medic/cht-pipeline.git#main\" (Optional) You can also configure a Metrics Exporter. If enabled, this will create a sql exporter that queries the database for couch2pg status, number of changes pending, and current sequence and exposes these metrics in Prometheus format at a service with name metrics at port 9399, for use with CHT Watchdog or any other monitoring service.\nAn HTTP ingress needs to be created to allow access from outside the cluster.\nmetrics_exporter: enabled: true","tuning-dbt#Tuning dbt":"In production setups with large tables, it can be helpful to tune how dbt runs. To use threads or batching, set the corresponding values in the values.yaml file.\ndbt_thread_count: 3 dbt_batch_size: 100000 To use multiple dbt containers, specify the different selectors in a list called dbt_selectors.\nThis will create one pod running dbt for each entry, where each entry is passed to one dbt pod as a --select argument.\ndbt_selectors: - \"package:cht_pipeline_base\" - \"tag:tag-one\" - \"tag:tag-two\"","upgrading#Upgrading":"To upgrade to a newer version of CHT Sync with kubernetes, run helm upgrade. If there are any database changes that require a migration script, the major version will be changed and the changes detailed below. After running any migrations scripts, restart containers with the new docker-compose.yml\ncd deploy/cht_sync helm upgrade cht-sync . --values values.yaml","upgrading-v1-to-v2#Upgrading V1 to V2":"V2 added the source column to the couchdb table, and several other columns to the metadata table. To add these columns log in to the database and run this sql.\nALTER TABLE _dataemon ADD COLUMN IF NOT EXISTS manifest jsonb; ALTER TABLE _dataemon ADD COLUMN IF NOT EXISTS dbt_selector text; ALTER TABLE couchdb ADD COLUMN IF NOT EXISTS source varchar; CREATE INDEX IF NOT EXISTS source ON couchdb(source); V2 adds new features for tuning dbt; to use batching, threads, or separate dbt processes, set the corresponding environment_variables in values.yml as described above.","verify-the-deployment#Verify the deployment":"Run the following command to get the status of the deployment.\nkubectl get pods Run the following command to get the logs of a pod.\nkubectl logs -f cht-sync-"},"title":"Kubernetes"},"/hosting/analytics/testing-dbt-models/":{"data":{"":"To ensure code accuracy and data integrity, and also to prevent data quality regressions on dbt models, it is recommended to write dbt tests. dbt tests help validate the accuracy and reliability of data and data models and identify issues before they cause downstream impacts on analytics and decision-making. Additionally, they increase developer confidence in making changes to the data models.","data-tests#Data tests":"Data tests can be further divided into two types:\ngeneric tests: These are foundational tests provided by dbt core, focusing on basic schema validation and source freshness. dbt core provides four built-in generic tests that are essential for data modeling and ensuring data integrity. Generic tests can accept additional test configurations. It is also possible to define your own custom generic tests.\nsingular tests: These are written in an SQL file with a query that returns records that fail the test. This type of test is straightforward and focuses on specific conditions or rules that data must meet.","guidelines-for-dbt-tests#Guidelines for dbt tests":"To ensure data integrity and the reliability of the dbt models in the cht-pipeline, it is essential to follow these testing guidelines:\nBasic generic tests for all models: Every model should have generic tests to enforce critical constraints and relationships. Use the generic tests provided in dbt core.\nSingular or custom generic data tests for aggregation models: For models that perform data aggregation, it is crucial to include singular data tests or custom generic data tests to ensure that the aggregated data meets the expected criteria. These tests help verify that:\nData is accurately aggregated according to the defined logic. The results align with business expectations and requirements. Custom data tests are particularly important for aggregation models, as errors in these models can lead to significant discrepancies in reports and analyses. Unit tests for complex logic: Unit tests are not strictly required but are highly recommended, especially for models with complex transformation logic. Examples of when to use unit tests include:\nComplex SQL Logic: Such as regex, date math, window functions, or extensive CASE WHEN statements. Custom calculations: When creating functions or applying unique data processing logic. Edge cases: To handle scenarios that are not typically found in actual data but may arise unexpectedly.","prerequisites#Prerequisites":"Docker","run-the-tests#Run the tests":"Navigate to test folder. Run the test script: ./run_dbt_tests.sh After running the shell script, you should see the Docker containers start, the tests run and pass, and finally, the Docker containers are stopped and removed. This ensures that the testing environment is clean and ready for future runs. The example below is a snippet of what the output could look like:\n✔ Network test_default Created ✔ Container test-postgres-1 Started Waiting for PostgreSQL to be ready... FINISHED run_dbt_tests_docker.sh ✔ Container test-dbt-1 Created Attaching to dbt-1 dbt-1 | Install dbt dependencies ... dbt-1 | Running dbt ... dbt-1 | 13:39:49 Completed successfully dbt-1 | 13:39:49 Done. PASS=8 WARN=0 ERROR=0 SKIP=0 TOTAL=8 dbt-1 | Running tests ... dbt-1 | 13:39:56 Completed successfully dbt-1 | 13:39:56 Done. PASS=34 WARN=0 ERROR=0 SKIP=0 TOTAL=34 dbt-1 exited with code 0 Aborting on container exit... ✔ Container test-dbt-1 Stopped ✔ Container test-dbt-1 Removed ✔ Container test-postgres-1 Removed ✔ Network test_default Removed DBT tests passed Note\nThis snippet shows the key steps of the process. The full output will contain more details, but the above highlights the main actions performed by the script.","running-tests-with-docker#Running tests with Docker":"dbt tests are run with Docker, to isolate dependencies and configurations, making the testing process reproducible and easier to manage. The scripts and configuration files below work together to automate the process of setting up a testing environment, and running dbt models and tests:\ndocker-compose.yml: Defines Docker services. It starts by running PostgreSQL with the initial setup using init.sql and then builds and runs a dbt Docker container configured to connect to PostgreSQL.\ninit.sql: A SQL script that initializes the PostgreSQL database by creating the required schema and table.\ndbt/Dockerfile: Builds the dbt Docker image. It sets up the Python environment, installs dbt and its dependencies, and copies the necessary project files into the container.\nrun_dbt_tests.sh: Orchestrates the process of running dbt tests using Docker. It starts PostgreSQL, waits for it to initialize, runs the dbt container to execute tests, and cleans up by stopping and removing all containers.\nrun_dbt_tests_docker.sh: Runs inside the dbt container. It sets the profiles directory, installs dbt dependencies, runs the dbt models, and executes the tests.\nprofile.yml: The dbt profile configuration file that defines the database connection settings, using environment variables to connect to the PostgreSQL database.","types-of-dbt-tests#Types of dbt tests":"There are two main types of dbt tests:\ndata tests - meant to be executed with every pipeline run to validate data integrity. They ensure the warehouse data meets specific criteria and are run at every data refresh. unit tests - meant to be executed with every CI run to validate transformation logic integrity. They allow you to validate your SQL modeling logic on a small set of static inputs (typically defined using seeds or fixtures) before you materialize your full model in production.","unit-tests#Unit tests":"Unit tests are essential for validating complex SQL logic and transformations in dbt models. These tests are especially valuable when working with intricate SQL expressions. They help catch errors before deploying changes, ensuring the logic behaves as expected, particularly in critical models or when handling edge cases.\nFor more details on formatting unit tests, refer to the official dbt documentation.","writing-data-tests#Writing data tests":"Generic data tests are included in the model’s YAML file under the data-tests tag, ensuring basic validations like relationships, not_null, and unique. The following code block contains an extract of the properties of the contacts.yml file.\nversion: 1 models: - name: contact config: contract: enforced: true columns: - name: uuid data_type: string constraints: - type: foreign_key expression: \"{{ env_var('POSTGRES_SCHEMA') }}.document_metadata (uuid) ON DELETE CASCADE\" - type: unique data_tests: - not_null - unique - relationships: to: ref('document_metadata') field: uuid - name: saved_timestamp data_type: timestamp data_tests: - not_null - name: reported data_type: timestamp with time zone data_tests: - not_null - name: parent_uuid data_type: string - name: name data_type: string data_tests: - not_null - name: contact_type data_type: string data_tests: - not_null - name: phone data_type: string - name: phone2 data_type: string - name: active data_type: string - name: notes data_type: string - name: contact_id data_type: string - name: muted data_type: string Singular data tests are located in the /test/sqltest/ folder and check data synchronization between source and final tables. The code block below contains a test to ensure that data between the source table and contact tables is synchronized correctly. Records that should be deleted are properly removed from both tables. All relevant fields between the two tables match, preserving data accuracy and integrity.\nSELECT FROM {{ source('couchdb', env_var('POSTGRES_TABLE')) }} couchdb LEFT JOIN {{ ref('contact') }} contact ON couchdb._id = contact.uuid WHERE couchdb.doc-\u003e\u003e'type' IN ('contact', 'clinic', 'district_hospital', 'health_center', 'person') -- TEST CONDITIONS AND ( -- in couchdb, not deleted, but not in contact table (contact.uuid IS NULL AND couchdb._deleted = false) OR -- in couchdb, deleted, but still in contact table (contact.uuid IS NOT NULL AND couchdb._deleted = true) OR -- fields dont match contact.parent_uuid \u003c\u003e couchdb.doc-\u003e'parent'-\u003e\u003e'_id' OR contact.contact_type \u003c\u003e COALESCE(couchdb.doc-\u003e\u003e'contact_type', couchdb.doc-\u003e\u003e'type') OR contact.phone \u003c\u003e couchdb.doc-\u003e\u003e'phone' )","writing-dbt-tests#Writing dbt tests":"cht-pipeline contains a /models directory containing SQL files and YAML files for generic tests and a /test directory with folders for fixtures and singular tests.\n./ /models /contacts /tests contacts.yml --\u003e unit tests persons.yml contact.sql contacts.yml --\u003e generic data tests patient.sql person.sql place.sql /forms /meta /root /users /test /fixtures --\u003e input data for unit tests data_record/ data_record_initial_expected.csv data_record_source_table_initial.csv data_record_document_metadata_initial.csv /sqltest --\u003e singular data tests contact.sql data_record.sql patient.sql","writing-unit-tests#Writing unit tests":"Unit tests are defined in a YAML file inside a tests folder in each model group folder. The input format of choice is CSV using fixtures, defined in /test/fixture folder.\nThe code block below is an extract from the /models/contacts/tests/contacts.yml file containing the test to validate transformation and data integrity for the contact model.\nunit_tests: - name: test_contact_model_transformation_and_data_integrity description: | This unit test validates the transformation logic in the `contact` model and ensures data integrity. It uses fixture data for both `document_metadata` and `source_table` to test the complete logic. model: contact overrides: macros: is_incremental: false given: - input: ref('document_metadata') format: csv fixture: contact_document_metadata_initial - input: source('couchdb', \"{{ env_var('POSTGRES_TABLE') }}\") format: csv fixture: contact_source_table_initial expect: format: csv fixture: contact_initial_expected The following code block shows the content of the input fixtures.\nuuid,saved_timestamp,doc_type,_deleted c1,2024-08-01 00:00:00,contact,false c2,2024-08-01 00:00:00,clinic,false c3,2024-08-02 00:00:00,person,false c4,2024-08-02 00:00:00,district_hospital,false _id,saved_timestamp,_deleted,doc c1,2024-08-01 00:00:00,false,\"{\"\"reported_date\"\": \"\"1722412800000\"\", \"\"parent\"\": {\"\"_id\"\": \"\"p1\"\"}, \"\"name\"\": \"\"John Doe\"\", \"\"contact_type\"\": \"\"person\"\", \"\"phone\"\": \"\"12345\"\", \"\"alternative_phone\"\": \"\"54321\"\", \"\"is_active\"\": \"\"true\"\", \"\"notes\"\": \"\"Note 1\"\", \"\"contact_id\"\": \"\"C-123\"\", \"\"muted\"\": \"\"false\"\"}\" c2,2024-08-01 00:00:00,false,\"{\"\"reported_date\"\": \"\"1722412800000\"\", \"\"parent\"\": {\"\"_id\"\": \"\"p2\"\"}, \"\"name\"\": \"\"Jane Doe\"\", \"\"contact_type\"\": \"\"clinic\"\", \"\"phone\"\": \"\"67890\"\", \"\"alternative_phone\"\": \"\"09876\"\", \"\"is_active\"\": \"\"true\"\", \"\"notes\"\": \"\"Note 2\"\", \"\"contact_id\"\": \"\"C-456\"\", \"\"muted\"\": \"\"true\"\"}\" c3,2024-08-02 00:00:00,false,\"{\"\"reported_date\"\": \"\"1722412800000\"\", \"\"parent\"\": {\"\"_id\"\": \"\"p3\"\"}, \"\"name\"\": \"\"Mike Smith\"\", \"\"contact_type\"\": \"\"person\"\", \"\"phone\"\": \"\"11223\"\", \"\"alternative_phone\"\": \"\"33211\"\", \"\"is_active\"\": \"\"false\"\", \"\"notes\"\": \"\"Note 3\"\", \"\"contact_id\"\": \"\"C-789\"\", \"\"muted\"\": \"\"false\"\"}\" c4,2024-08-02 00:00:00,false,\"{\"\"reported_date\"\": \"\"1722412800000\"\", \"\"parent\"\": {\"\"_id\"\": \"\"p4\"\"}, \"\"name\"\": \"\"Sara Smith\"\", \"\"contact_type\"\": \"\"district_hospital\"\", \"\"phone\"\": \"\"44556\"\", \"\"alternative_phone\"\": \"\"65544\"\", \"\"is_active\"\": \"\"true\"\", \"\"notes\"\": \"\"Note 4\"\", \"\"contact_id\"\": \"\"C-101\"\", \"\"muted\"\": \"\"true\"\"}\" The fixture below represents the expected data:\nuuid,saved_timestamp,reported,parent_uuid,name,contact_type,phone,phone2,active,notes,contact_id,muted c1,2024-08-01 00:00:00,2024-07-31 08:00:00+00,p1,John Doe,person,12345,54321,true,Note 1,C-123,false c2,2024-08-01 00:00:00,2024-07-31 08:00:00+00,p2,Jane Doe,clinic,67890,09876,true,Note 2,C-456,true c3,2024-08-02 00:00:00,2024-07-31 08:00:00+00,p3,Mike Smith,person,11223,33211,false,Note 3,C-789,false c4,2024-08-02 00:00:00,2024-07-31 08:00:00+00,p4,Sara Smith,district_hospital,44556,65544,true,Note 4,C-101,true"},"title":"dbt Testing"},"/hosting/analytics/tuning-dbt/":{"data":{"":"In production setups with large tables, it can be helpful to control how DBT runs.","batching#Batching":"For large tables, it may take a long time for all rows to be copied from the source table into the base models the first time CHT Sync is run, or if the base models are very out of date. The DBT_BATCH_SIZE variable can be used to limit the number of records inserted in a single dbt run, which allows models to catch up to real-time gradually and progressively. Batch size can be tuned to reduce the duration of a single dbt run, but setting it too small will not have a significant effect, and models will not be able to catch up to real-time if the batch size is smaller than the number of records added to the couchdb table during a single dbt run.\nA sensible default is DBT_BATCH_SIZE=100000.","multiple-dbt-containers#Multiple dbt containers":"Instead of a single dbt container that runs all models, CHT Sync supports having multiple dbt containers that each run a different set of models independently. This can be useful if any custom models take a long time to update; by running some models independently from others, faster models can complete before the slower models are finished.\nEach dbt container is passed an environment variable DBT_SELECTOR that is used as a --select argument to the dbt command.\nOne dbt container should be set up to run the base models. This can be done by using the selector package:cht_pipeline_base or, to separate telemetry models from base models, use tag:base and tag:users.\nTo run custom models in separate containers, either use a package select with your dbt package name (package:[YOUR_PACKAGE_NAME]), or for more fine-grained control, add tags to your models and use tag selectors (tag:[YOUR_TAG]). Although it is possible to use any condition, using tags is the simplest way to separate models.\nHow to configure the different dbt containers to use these selectors depends on whether CHT Sync is running in docker-compose or kubernetes.\nIn Kubernetes, add the selectors to the values.yaml file as a list called dbt_selectors\ndbt_selectors: - \"package:cht_pipeline_base\" - \"tag:tag-one\" - \"tag:tag-two\" This will create one pod per selector.\nWith docker compose, create a new docker compose file and include one dbt container per selector.","threads#Threads":"The DBT_THREADS variable can be used to allow dbt to run independent models concurrently in the same process using threads.\nThis can allow models to update more quickly by reducing the total duration of a dbt run.\nMore threads means more database processes running concurrently which can create performance issues; this value is per process, so if running separate processes, the total number of concurrent processes in the db will be DBT_THREADS x the number of processes. For a single process, models can only be run concurrently if they are independent; if model A depends on model B, model A will never be run before model B finishes.\nA sensible default is DBT_THREADS=3."},"title":"dbt Tuning"},"/hosting/cht/":{"data":{"":"Tip\nTo get an overview on how these hosting solutions use docker and other key CHT concepts, be sure to read the guide on a Local Setup.\nBefore beginning any of these guides, be sure to meet all of the CHT hosting requirements first. For example, backups are required for any successful CHT deployment.\nTo host a production instance of CHT, use the Production Hosting in CHT guide. To do app development, see our App Developer hosting guide.\nConsiderationsConsiderations when hosting the CHT RequirementsRequirements for hosting CHT applications CostsA guide for calculating CHT hosting costs Kubernetes vs DockerOptions for installing CHT applications App Developer HostingLearn how to host the CHT when developing apps Migration GuidesGuides for migrating CHT applications Production DockerDetails for hosting the CHT on Docker Production KubernetesDetails for hosting the CHT on Kubernetes Troubleshooting upgradesWhat to do when CHT upgrades don’t work as planned 🔍 All of the above documentation applies to CHT 4.x and CHT 5.x.\nLooking CHT 3.x hosting information? This content has been removed, but is still available on the Old Docs site.\nIn the coming year (2026), this old docs site will be removed as well."},"title":"CHT Core"},"/hosting/cht/app-developer/":{"data":{"":"This guide assumes you are a CHT app developer wanting to either run concurrent instances of the CHT, or easily be able to switch between different instances without losing any data while doing so. To do development on the CHT Core Framework itself, see the development guide.\nTo deploy the CHT in production, see see the production documentation.","cht-docker-helper#CHT Docker Helper":"The cht-docker-compose.sh scripts downloads 3 compose files and builds an .env file. This greatly eases starting your first CHT instance with a simple text based GUI which works on Windows (WSL2), macOS (both x86 and Apple Silicon) and Linux.\nThe cht-docker-compose.sh script showing the URL and version of the CHT instance as well as number of containers launched, global container count, medic images downloaded count and OS load average. Finally a “Successfully started my_first_project” message is shown and denotes the login is “medic” and the password is “password”.\nThis script brings a lot of benefits with it:\nYou only have to download one bash script All compose files and images will be downloaded automatically for you All networks, storage volumes and containers will be created A valid TLS certificate will be installed, allowing you to easily test on with CHT Android natively on a mobile device An unused port is automatically chosen for you when creating a new project. No more manually looking at your existing .env files!","debugging#Debugging":"To get debug output while running the docker helper, you can prepend the DEBUG=true flag like this:\nDEBUG=true ./cht-docker-compose.sh This shows load average, CHT container count, global container count, and a table of services with their status like this:\n---DEBUG INFO--- Load: 3.75 2.92 2.93 CHT Containers: 7 Global Containers 15 Service Status Container Image cht-upgrade-service running 400_deleteme-dir-cht-upgrade-service-1 public.ecr.aws/s5s3h4s7/cht-upgrade-service:latest haproxy NA NA public.ecr.aws/medic/cht-haproxy:4.4.0-8229-outbound-push healthcheck running 400_deleteme_healthcheck_1 public.ecr.aws/medic/cht-haproxy-healthcheck:4.4.0-8229-outbound-push api running 400_deleteme_api_1 public.ecr.aws/medic/cht-api:4.4.0-8229-outbound-push sentinel running 400_deleteme_sentinel_1 public.ecr.aws/medic/cht-sentinel:4.4.0-8229-outbound-push nginx running 400_deleteme_nginx_1 public.ecr.aws/medic/cht-nginx:4.4.0-8229-outbound-push couchdb running 400_deleteme_couchdb_1 public.ecr.aws/medic/cht-couchdb:4.4.0-8229-outbound-push","destroying#Destroying":"When you want to permanently delete all files and all data for a project, specify the project and the destroy command. Using our existing example 4_oh_the_first project, you would call:\n./cht-docker-compose.sh 4_oh_the_first.env destroy Be sure you want to do this, there is no “are you sure?” prompt and it will delete all your data.\nAlso note that this command will use the sudo command when deleting the CouchDB data, so it may prompt for your password.","file-locations#File locations":"The bash script keeps files in two places:\n*.env files - the same directory as the bash script. ~/medic/cht-docker/ files - in your home directory, a sub-directory is created for each project. Within each project directory, a compose directory has the two compose files and the couch directory has the CouchDB datafiles. While you can manually remove any of these, it’s best to use the destroy command above to ensure all related data files are deleted too.","getting-started#Getting started":"First, decide which way to run the CHT: Docker Helper or manually it via docker compose. Since they both achieve the same result, it is recommended to use Docker Helper as shown in the next section as it’s very easy to run. Alternately, the manual process is covered at the bottom of the page.","installing#Installing":"To get started using it:\nMeet all CHT hosting requirements Clone the CHT Core repo When you want to check for updates, just run git pull origin in the cht-core directory. An alternate to steps 2 and 3 above, if a more stand-alone version is desired, the bash script can be curled directly, but you can’t use git to easily update it then:\ncurl -s -o cht-docker-compose.sh https://raw.githubusercontent.com/medic/cht-core/master/scripts/docker-helper-4.x/cht-docker-compose.sh","launching#Launching":"Run the script with:\n./cht-docker-compose.sh The first time you run, you will be prompted to create a new project. Here’s what that looks like:\n./cht-docker-compose.sh Would you like to initialize a new project [y/N]? y How do you want to name the project? 4 OH The First Downloading compose files ... done Creating network \"4_oh_the_first-cht-net\" with the default driver Creating my_first_cht_project-dir_cht-upgrade-service_1 ... done Starting project \"4_oh_the_first\". First run takes a while. Will try for up to five minutes........ -------------------------------------------------------- Success! \"4_oh_the_first\" is set up: https://127-0-0-1.local-ip.medicmobile.org:10444/ (CHT) https://127-0-0-1.local-ip.medicmobile.org:10444/_utils/ (Fauxton) Login: medic Password: password -------------------------------------------------------- Start existing project ./cht-docker-compose.sh ENV-FILE.env Stop and keep project: ./cht-docker-compose.sh ENV-FILE.env stop Stop and destroy all project data: ./cht-docker-compose.sh ENV-FILE.env destroy https://docs.communityhealthtoolkit.org/apps/guides/hosting/cht/app-developer/ Have a great day! If you have many existing projects, you can specify them to launch them directly. If you had a project called 4_oh_the_first you would run:\n./cht-docker-compose.sh 4_oh_the_first.env","manual-docker-compose-method#Manual \u003ccode\u003edocker compose\u003c/code\u003e method":"This process achieves the same result as Docker Helper, but is a more manual process. Be sure the CHT hosting requirements are all met first.\nTo avoid conflicts, ensure that all other CHT 4.x instances are stopped. To stop ALL containers, you can use\ndocker kill $(docker ps -q) After meeting these requirements, create a directory and download the developer YAML files in the directory you want to store them. This example uses ~/cht-4-app-developer as the directory. If you don’t know which to use, use Single Node CouchDB:\nSingle Node CouchDBMulti-Node CouchDB mkdir -p ~/cht_4_app_developer-dir/{compose,couchdb} cd ~/cht_4_app_developer-dir curl -s -o ./compose.yml https://raw.githubusercontent.com/medic/cht-upgrade-service/main/docker-compose.yml curl -s -o ./compose/cht-core.yml https://staging.dev.medicmobile.org/_couch/builds_4/medic%3Amedic%3Amaster/docker-compose/cht-core.yml curl -s -o ./compose/cht-couchdb.yml https://staging.dev.medicmobile.org/_couch/builds_4/medic%3Amedic%3Amaster/docker-compose/cht-couchdb.yml mkdir -p ~/cht_4_app_developer-dir/{compose,couchdb} \u0026\u0026 mkdir -p ~/cht_4_app_developer-dir/couchdb/{srv1,srv2,srv3} cd ~/cht_4_app_developer-dir curl -s -o ./compose.yml https://raw.githubusercontent.com/medic/cht-upgrade-service/main/docker-compose.yml curl -s -o ./compose/cht-core.yml https://staging.dev.medicmobile.org/_couch/builds_4/medic%3Amedic%3Amaster/docker-compose/cht-core.yml curl -s -o ./compose/cht-couchdb.yml https://staging.dev.medicmobile.org/_couch/builds_4/medic%3Amedic%3Amaster/docker-compose/cht-couchdb-clustered.yml You should now have 3 compose files and 2 directories which we can check with ls -R:\ncompose compose.yml couch ./compose: cht-core.yml cht-couchdb.yml ./couch: To prepare for the first developer CHT instance, write all environment variables to the .env file with this code. Be sure to use the same single or multi-node as above. If you don’t know which to use, use Single Node CouchDB:\nSingle Node CouchDBMulti-Node CouchDB cat \u003e ~/cht_4_app_developer-dir/.env \u003c\u003c EOF NGINX_HTTP_PORT=8080 NGINX_HTTPS_PORT=8443 COUCHDB_USER=medic COUCHDB_PASSWORD=password CHT_COMPOSE_PROJECT_NAME=cht_4_app_developer DOCKER_CONFIG_PATH=${HOME}/cht_4_app_developer-dir COUCHDB_SECRET=19f3b9fb1d7aba1ef4d1c5ed709512ee COUCHDB_UUID=e7122b1e463de4449fb05b0c494b0224 COUCHDB_DATA=${HOME}/cht_4_app_developer-dir/couchdb CHT_COMPOSE_PATH=${HOME}/cht_4_app_developer-dir/compose CHT_NETWORK=cht_4_app_developer EOF cat \u003e ~/cht_4_app_developer-dir/.env \u003c\u003c EOF NGINX_HTTP_PORT=8080 NGINX_HTTPS_PORT=8443 COUCHDB_USER=medic COUCHDB_PASSWORD=password CHT_COMPOSE_PROJECT_NAME=cht_4_app_developer DOCKER_CONFIG_PATH=${HOME}/cht_4_app_developer-dir COUCHDB_SECRET=19f3b9fb1d7aba1ef4d1c5ed709512ee COUCHDB_UUID=e7122b1e463de4449fb05b0c494b0224 CHT_COMPOSE_PATH=${HOME}/cht_4_app_developer-dir/compose CHT_NETWORK=cht_4_app_developer DB1_DATA=${HOME}/cht_4_app_developer-dir/couchdb/srv1 DB2_DATA=${HOME}/cht_4_app_developer-dir/couchdb/srv2 DB3_DATA=${HOME}/cht_4_app_developer-dir/couchdb/srv3 COUCHDB_SERVERS=couchdb-1.local,couchdb-2.local,couchdb-3.local EOF Start the first CHT instance by calling docker:\ncd ~/cht_4_app_developer-dir \u0026\u0026 docker compose up -d This may take some minutes to fully start depending on the speed of the internet connection and speed of the host. Docker needs to download all the container images and first setup needs to run on the CHT. You can check the status with:\ndocker ps --filter \"name=cht_4_app_developer\" --format \"{{.Status}} {{.Names}}\" Which should look like this:\nSingle Node CouchDBMulti-Node CouchDB Up 47 seconds cht_4_app_developer-nginx-1 Up 48 seconds cht_4_app_developer-sentinel-1 Up 48 seconds cht_4_app_developer-api-1 Up 48 seconds cht_4_app_developer-haproxy-1 Up 48 seconds cht_4_app_developer-healthcheck-1 Up 48 seconds cht_4_app_developer-couchdb-1 Up 49 seconds cht_4_app_developer-dir-cht-upgrade-service-1 Up 2 seconds cht_4_app_developer-nginx-1 Up 3 seconds cht_4_app_developer-api-1 Up 3 seconds cht_4_app_developer-sentinel-1 Up 4 seconds cht_4_app_developer-couchdb-1.local-1 Up 4 seconds cht_4_app_developer-couchdb-2.local-1 Up 4 seconds cht_4_app_developer-haproxy-1 Up 4 seconds cht_4_app_developer-couchdb-3.local-1 Up 4 seconds cht_4_app_developer-healthcheck-1 Up 4 seconds cht_4_app_developer-dir-cht-upgrade-service-1 After running the above docker ps command and you see your containers running, the CHT is accessible on https://localhost:8443. The username is medic and password is password.\nThe first time you connect in a browser, an error will be shown, “Your connection is not private” with NET::ERR_CERT_AUTHORITY_INVALID (see screenshot). To get past this, click “Advanced” and then click “Proceed to localhost”.\nTo stop this instance run:\ndocker stop $(docker ps -q --filter \"name=cht_4_app_developer\")","running-the-nth-cht-instance#Running the Nth CHT instance":"After running the first instance of the CHT, it’s easy to run as many more as are needed. This is achieved by specifying different:\nport for HTTP redirects (CHT_HTTP) port for HTTPS traffic (NGINX_HTTP_PORT) directory for storing the compose files and CouchDB files Assuming you want to start a new project called the_second and start the instance on HTTP port 8081 and HTTPS port 8443, we would first create a new directory and download the same files:\nmkdir -p ~/cht_4_app_developer-2nd-dir/{compose,couchdb} \u0026\u0026 cd ~/cht_4_app_developer-2nd-dir curl -s -o ./compose.yml https://raw.githubusercontent.com/medic/cht-upgrade-service/main/docker-compose.yml curl -s -o ./compose/cht-core.yml https://staging.dev.medicmobile.org/_couch/builds_4/medic%3Amedic%3Amaster/docker-compose/cht-core.yml curl -s -o ./compose/cht-couchdb.yml https://staging.dev.medicmobile.org/_couch/builds_4/medic%3Amedic%3Amaster/docker-compose/cht-couchdb.yml Then, we would create an .env file like before\ncat \u003e ~/cht_4_app_developer-2nd-dir/.env \u003c\u003c EOF NGINX_HTTP_PORT=8081 NGINX_HTTPS_PORT=8444 COUCHDB_USER=medic COUCHDB_PASSWORD=password CHT_COMPOSE_PROJECT_NAME=cht_4_app_developer-2nd DOCKER_CONFIG_PATH=${HOME}/cht_4_app_developer-2nd-dir COUCHDB_SECRET=19f3b9fb1d7aba1ef4d1c5ed709512ee COUCHDB_UUID=e7122b1e463de4449fb05b0c494b0224 COUCHDB_DATA=${HOME}/cht_4_app_developer-2nd-dir/couch CHT_COMPOSE_PATH=${HOME}/cht_4_app_developer-2nd-dir/compose CHT_NETWORK=cht_4_app_developer-2nd EOF And finally use the same docker compose command as above:\ncd ~/cht_4_app_developer-2nd-dir \u0026\u0026 docker compose up The second instance is now accessible at https://localhost:8444 and again using username medic and password password to login.","stopping#Stopping":"When you’re done with a project, it’s good to stop all the containers to reduce load on your computer. Do this by specifying the project and the stop command. This command will simply stop the active Docker containers, and not delete any data. Using our existing example 4_oh_the_first project, you would call:\n./cht-docker-compose.sh 4_oh_the_first.env stop","switching--concurrent-projects#Switching \u0026amp; concurrent projects":"The easiest way to switch between projects is to stop the first set of containers and start the second set. Cancel the first project running in the foreground with ctrl + c and stop all the project’s services. Here any container named cht_4_app_developer-2nd* is stopped:\ndocker stop $(docker ps -q --filter \"name=cht_4_app_developer-2nd*\") Alternately, you can stop ALL containers (even non-CHT ones!) with docker kill $(docker ps -q). Then start the other CHT project using either the .env file or use the explicit command with ports and other environment variables as shown above.\nTo run projects concurrently open a second terminal and start the second project so you don’t have to cancel and stop the first project. Remember to avoid port conflicts!","troubleshooting#Troubleshooting":"When you are starting a CHT Core instance using Docker Helper 4.x and don’t have any containers created, images downloaded, or storage volumes created - the *.local-ip.medicmobile.org TLS certificate fails to install, which leads to a browser Your connection is not private message.\nTo solve this issue, follow the steps below:\nFirst, find the name of the nginx container with: docker ps --filter \"name=nginx\" --format '{{ .Names }}'. After cloning the CHT Core repo, cd into the scripts directory: cd ./cht-core/scripts. Using the container name from the first command, call the script to update the certificate: ./add-local-ip-certs-to-docker-4.x.sh CONTAINER_NAME. These three steps look like as following assuming that CONTAINER_NAME is equal to 4_3_0_nginx_1. Note that CONTAINER_NAME will be different for each instance of CHT you run with Docker Helper:\n$ docker ps --filter \"name=nginx\" --format '{{ .Names }}' 4_3_0_nginx_1 $ cd Documents/MedicMobile/cht-core/scripts/ scripts $ ./add-local-ip-certs-to-docker-4.x.sh 4_3_0_nginx_1 4_3_0_nginx_1 If just container name is shown above, a fresh local-ip.medicmobile.org certificate was downloaded fresh local-ip.medicmobile.org.","usage#Usage":"Always run the script from the directory where it lives. If you launch it from a different directory, relative paths will fail:\nDo Don’t ./cht-docker-compose.sh ./docker-helper-4.x/cht-docker-compose.sh","video#Video":"Here is a video of the helper being run on 1 Dec 2022. The video references lazydocker which is a great way to monitor and control your local docker environment:"},"title":"App Developer"},"/hosting/cht/considerations/":{"data":{"":"Some important questions to consider when setting up hosting for the CHT:\nAlerting - How will alerts be sent in the case of downtime or degraded service? While Watchdog can be set up to monitor CHT Core instances - which monitoring system will be used to alert on OS level warnings? Power failures and unplanned restarts - Will the server cleanly restart such that the CHT resumes service correctly? Backups - What happens to the CHT data if there’s a hard drive failure? Are there provisions for a 3-2-1 backup strategy? See the backup docs for more information. Disaster Recovery - What happens if there is a flood at the facility and on-site active and backup data are destroyed? Scale - What happens when the hardware deployed needs to be upgraded to increase capacity? Updates - CHT Core updates happen many times throughout the year - do you have a maintenance schedule for these and staff who are trained to do the upgrade? Renewals - Services such as TLS certificates and domains name registration expire periodically and will make the server inaccessible - do you have a schedule for monitoring and renewing these in a timely manner? Security - While the TLS certificate will protect data on the Internet, is the server hard drive encrypted in the event of property theft? Is there a sufficient policy in place when generating and handling passwords for CHWs? Have you considered Token Login to further reduce risk? Privacy - The CHT inherently carries sensitive patient medical information in the database. Are there sufficient measures in place to protect this sensitive data?"},"title":"Considerations"},"/hosting/cht/costs/":{"data":{"":"","accuracy#Accuracy":"This research was based on live instances so the costs are realistic. However, since not all programs use the CHT in the exact same way, and not all deployments have the same number of users and workflows, these numbers are still subject to some fluctuation.\nFurther, the costs in the table above only cover the variable costs. That is, the costs incurred of actual usage with in an EKS cluster. In a multi-tenant deployment with multiple instances (for example: Staging, User Acceptance Testing and Production), this can be critical to know what the three different deployments incurred costs are within the EKS cluster.\nImportantly, all production CHT 4.x deployments have a fixed cost to run the EKS cluster or generic Kubernetes if not on AWS. This is because all clusters contain servers that are always on and fully available. This cost is not yet included in this document.","cost-per-cht-per-month#Cost per CHT per Month":"In a production environment, the CHT costs are estimated at USD$0.10 per active user per month to run. What exactly does this mean? Let’s dive into some specifics which importantly cover what is include and excluded and how these costs can vary with each deployment.\nBe sure to read the Accuracy section so you understand what the costs on these page mean for your deployment.","excluded#Excluded":"There are many assumptions about what else is needed to run the CHT. While important, they are excluded:\nKubernetes cluster - Large, multi-tenant deployments in a Kubernetes cluster will have a fixed monthly cost to operate, including the worker nodes which may be large in size (RAM \u0026 CPU). Backups - Regular snapshots of the production data will need to be taken to ensure there is no data loss in case of catastrophic failure of server hardware. This takes up a disk space which should be accounted for when budgeting to host the CHT. Building a Datacenter (DC) - While some well funded MoH’s may have the budget and time to build a complete data center, this is out of the scope for this calculation. Therefore it is assumed an existing DC will be used or cloud hosting will be used. In the case where a MoH wants to build a DC, a competent 3rd party should be selected Training of Systems Administrators/IT - System administrator IT systems that have not used Kubernetes or have not hosted the CHT, will need to be trained on how to do both. Training of Trainers (ToT) and user Training Data Warehousing \u0026 Dashboards - While close to “Servers” above, not all deployments have a data warehouse (CHT Sync + Postgres) and dashboards (Superset/Klipfolio) at launch. These are easy to add on at a later date and cost can be estimated at that time. Upfront Purchase of Hardware - It is assumed that a deployment will either be using cloud based solutions or using managed bare metal, so these costs don’t apply. App Development - Each deployment needs to have the default CHT app customized for each of the required workflows. Smartphones - Device purchase, setup, and distribution for users to use the CHT. Analog -\u003e Digital Workflow conversion - The process of documenting paper processes in places that the CHT will replace. SMS - Some projects need the ability to send SMS to users from the CHT. Interoperability - While the CHT supports this out of the box - development work is needed to ensure it works with the specific 3rd party systems. Mobile Device Management - optional. Cellphone telecom services - Users actually uploading/downloading data Setup and/or transfer of hosting provider","how-the-number-was-calculated#How the number was calculated":"Medic hosts a number of production CHT instances in Amazon Elastic Kubernetes Service (EKS). By using OpenCost, Medic can closely monitor real world costs with actual end users. OpenCost was used to separate one deployment’s CPU, RAM and disk use from another’s despite them all running in a multi-tenant EKS cluster.\nHere’s costs for two week period for an actual production instance which informs our USD$0.10 per active user per month cost, including a bit of over-provisioning to give a deployment some headroom:\nTotal Monthly Cost $68 Active Users (30 days) 661 $/User $0.10 RAM $22 CPU $8 Storage $24 Over provision $14 We derive the $/User/Month cost by taking $68/mo and dividing it by 661 active users to arrive at $0.10. The bottom 4 lines are the sub-items that make the total $68/mo amount. Note that if a deployment has a lot of active users, but a slower database growth than shown above, it can cause changes in costs mentioned in the next section.\nBy using OpenCost, we not only know costs as shown above, but we also know actual resources used with in the cluster. This allows us to be able to know CPU, storage and RAM usage. At a higher level, we can also know how many documents were stored and document growth. Documents are created, for example, when a CHW follows a health workflow on their device and synchronizes to the CHT:\nMonthly Resources CPU 8 RAM (Gigs) 15 Storage (TBs) 0.42 Documents 10.7M Documents Growth 248.0K","included#Included":"Items that are included in the basic costs of hosting the CHT:\nServers - Given the large number of hosted CHT instances this is the area with the most data to use to build the calculator. This includes: Average monthly cost to host the CHT Ability to adjust based on expected user count, number of workflows and a few other program specific numbers like how many workflows there are. Amount of CPU/RAM/Storage needed - while it is assumed this will be for AWS, it will come in the form of something like “20 vCPUs” which can be translated to any hosting environment. Built in overprovisioning to allow for bursts and a bit of growth Monitoring and Alerting - Since all software fails eventually, you need to be prepared to defend against this with aggressive monitoring and alerting. The goal will be to fix the problem before any users notice. Ingress/Egress - This is the ability to send and receive data to the CHT. Pricing from Datacenters and Cloud is readily available and “Servers” above can not exist without it. CHT Core updates and system maintenance - Both the CHT and underlying operating system will be upgraded on a regular basis. This not only ensures there are no security vulnerabilities, but also ensures the deployments gains the benefit of new features and performance gains in the CHT. Active users - this is the total amount of users that engage with the CHT every day. If there are credentials that are created, but no users logging in with those credentials, these do not increase costs.","monthly-costs#Monthly costs":"Item Cost Count Total/mo Note EC2 t4g.small $0.01/hr 1 $8 Control-plane node EC2 c6g.2xlarge $0.32/hr 3 $692 Worker nodes EBS SSD (gp3) $0.09/mo 500 $45 500GB of shared storage TOTAL $745/mo* * These estimates are as of 2024.","on-going-costs-and-growth#On-going costs and growth":"When running a small instance, be sure to plan for future costs. Do not assume that costs will stay flat or go down. Assume they will go up. Areas where costs can increase are:\nBackups - As your CouchDB instance takes more and more room, backups will cost more and more to store. Storage - As with backups, if the 500GB of storage approaches being full, or upgrades require a burst of disk use, plan on adding more active storage. More users - offline and online CHT Core users increase the load on the system. Be prepared to either add more worker nodes or increase the size of existing worker nodes to add more CPU and RAM. As well, consider stronger CPUs which might have higher clock speeds, more cache and be more efficient.","production-vs-development#Production vs Development":"A production deployment means the CHT is hosted either at a cloud provider or in a datacenter. Both provide high quality connectivity, power and cooling so the cost is higher than a development instance. This ensures users do not have service interruptions and can continue to have trust the CHT will be up when they need to deliver care.\nWhen analyzing the hosting total cost of ownership (TCO), only production instances were looked at.\nNote\nA development environment can be no cost (or very low cost). Assuming a developer already has a laptop, this is all that is needed to host a development instance.","small-deployment-example-costs#Small deployment example costs":"In order to get a better idea of fixed monthly costs, let’s look at the smallest Kubernetes deployment per the requirements docs. These estimates use Amazon’s EC2 pricing and EBS pricing in Paris (eu-west2) availability zone. Note that different types of EC2 pricing may have different costs along with other cloud providers which will have different costs as well.\nFor more examples of deployments, but without costs, see Kubernetes vs Docker.","whats-included-in-the-per-user-cost#What\u0026rsquo;s included in the per user cost":"This document covers hosting cost and does not cover Total Cost of Ownership (TCO). Below is a list of what’s included in the hosting casts above and what is excluded."},"title":"Hosting Costs"},"/hosting/cht/docker/":{"data":{"":"Read the Docker vs Kubernetes documentation to select a style of hosting that best fits your CHT deployment. InstallationInstalling the CHT on Docker Adding TLS CertificatesEnsuring all traffic is encrypted LogsHow to view logs BackupsBacking up your production data"},"title":"Production Docker"},"/hosting/cht/docker/adding-tls-certificates/":{"data":{"":"By default, CHT will create a self-signed certificate for every deployment. These instructions are for changing to either a pre-existing certificate or automatically creating and renewing a Certbot based certificate using ACME, like Let’s Encrypt.\nThis guide assumes you’ve already met the hosting requirements, specifically around Docker being installed.","certbot-certificate#Certbot certificate":"This Feature available on CHT 4.2.0 or later\nIf you have a deployment with a static, public IP and a domain name pointing to that IP, you can have Certbot automatically create free TLS certificates by using their Docker image.\nAssuming your CHT instance is running with the default self signed cert. Be sure to change cht.example.com to your domain first though:\nAssuming your CHT instance is already running with the default self-signed cert:\nEdit the CHT’s environment file at /home/ubuntu/cht/upgrade-service/.env so this line is present: CERTIFICATE_MODE=AUTO_GENERATE This will ensure the deploy.sh script that certbot uses to deploy the certificates is available for use. Restart your CHT instance to ensure the new CERTIFICATE_MODE value takes effect: cd /home/ubuntu/cht/upgrade-service/ docker stop $(docker ps --filter \"name=^cht*\" -q) docker stop $(docker ps --filter \"name=^upgrade-service*\" -q) docker compose up --detach Create certbot compose and env files by copying and pasting this code: mkdir -p /home/ubuntu/cht/certbot cd /home/ubuntu/cht/certbot cat \u003e docker-compose.yml \u003c\u003c EOF version: '3.9' services: certbot: container_name: certbot hostname: certbot image: certbot/certbot volumes: - ssl-storage:/etc/nginx/private/ - ssl-storage:/var/log/letsencrypt/ command: certonly --debug --deploy-hook /etc/nginx/private/deploy.sh --webroot -w /etc/nginx/private/certbot/ --domain \\$DOMAIN --non-interactive --key-type rsa --agree-tos --register-unsafely-without-email \\$STAGING volumes: ssl-storage: name: \\${CHT_SSL_VOLUME} external: true EOF cat \u003e .env \u003c\u003c EOF DOMAIN=cht.example.com STAGING= CHT_SSL_VOLUME=cht_cht-ssl TZ=America/Whitehorse EOF Certbot only lets you create the identical certificates 5 times per 7 days. If you’re unsure of how this works you can change STAGING= to STAGING=--staging in the /home/ubuntu/cht/certbot/.env file to do repeated tests. Be sure to change this back to STAGING= when you’re ready to create production certificates. Generate certs: cd /home/ubuntu/cht/certbot docker compose up Run this command to find the name of your CHT ngnix container: docker ps --filter \"name=nginx\" --format '{{ .Names }}' Assuming the name is cht_nginx_1 from the prior step, reload your nginx config with this command: docker exec -it cht_nginx_1 nginx -s reload Attempt to renew your certificates once a week by adding this cronjob via crontab -e. Certbot will only renew them as needed: 0 0 * * 0 cd /home/ubuntu/cht/certbot\u0026\u0026docker compose up","loading-the-certificate#Loading the certificate":"Tip\ndocker compose should work, but you may need to use the older style docker-compose if you get an error docker: 'compose' is not a docker command.\nFind the name of your cht-ssl volume with this call:\ndocker volume ls --filter \"name=cht-ssl\" It is very likely that cht_cht-ssl is the name of our cht-ssl volume.\nUsing the volume name found in step 1, start a container called temp which allow us to copy files into the docker volume:\ndocker run -d --rm --name temp -v cht_cht-ssl:/etc/nginx/private/ alpine tail -f /dev/null Copy the two pem files into the volume via the temporary container:\ndocker cp key.pem temp:/etc/nginx/private/. docker cp cert.pem temp:/etc/nginx/private/. Stop the temp container:\ndocker kill temp Your certificates are now safely stored in the native docker volume. Restart your CHT instance the way you started it, being sure to set the correct CERTIFICATE_MODE and SSL_VOLUME_MOUNT_PATH per the prerequisites.","pre-existing-certificate#Pre-existing certificate":"To load your certificates into your CHT instance, we’ll be creating an interstitial container called cht-temp-tls which will enable you to copy your local certificate files into the native docker volume.","prerequisites#Prerequisites":"You have two files locally on your workstation in the directory you’re currently in:\nkey.pem - the private key for your TLS certificate cert.pem - both the public and any interstitial keys concatenated into one file Also, be sure you have started your CHT instance once and all your volumes are created.","proxying#Proxying":"ERR_TLS_CERT_ALTNAME_INVALID When proxying to HTTPS from HTTP (for example where an ingress does TLS termination in an SNI environment and then the traffic is proxied to an HTTPS service (eg, haproxy)), not including a servername for a request to the HTTPS server (eg, def.org) produces the following error:\n'ERR_TLS_CERT_ALTNAME_INVALID' \"RequestError: Error [ERR_TLS_CERT_ALTNAME_INVALID]: Hostname/IP does not match certificate's altnames: Host: abc.com. is not in the cert's altnames: DNS:def.org\" The addition of servername resolves this error by providing routing information. See docs for tls.connect(options[, callback]): “Server name for the SNI (Server Name Indication) TLS extension. It is the name of the host being connected to, and must be a host name, and not an IP address.”.\nA servername parameter may be added to all requests to the haproxy/couchdb by setting the environment variable ADD_SERVERNAME_TO_HTTP_AGENT to true.\nA similar change can be made for the http clients used in the application by setting PROXY_CHANGE_ORIGIN to true. This sets the changeOrigin parameter of all the http-proxy clients to true, which “changes the origin of the host header to the target URL”. See http-proxy: options.","troubleshooting#Troubleshooting":""},"title":"TLS Certificates"},"/hosting/cht/docker/backups/":{"data":{"":"","assumptions#Assumptions":"This guide assumes you have an Ubuntu server running CHT 4.x in Docker as described in our Self Hosting in CHT 4.x - Single CouchDB Node guide. If you run docker ps --format '{{.Names}}' you should see something like this:\ncht_nginx_1 cht_sentinel_1 cht_api_1 cht_haproxy_1 cht_healthcheck_1 cht_couchdb_1 upgrade-service-cht-upgrade-service-1 If you run docker volume ls you should see something like this:\nDRIVER VOLUME NAME local cht_cht-credentials local cht_cht-ssl Note - In the volumes listed above, there is no volume for CouchDB data. This is because the compose file declares this as a bind mount. Bind mounts use the host file system directly and do not show up in docker volume ls calls. It’s therefore assumed your CouchDB data location is declared in /home/ubuntu/cht/upgrade-service/.env which sets it with COUCHDB_DATA=/home/ubuntu/cht/couchdb.\nYou should have SSH access to the server with root access.","backup-software#Backup software":"It’s assumed you are using which ever tool you’re familiar with which might include rsync, borg, duplicity or other solution. The locations of the backups should follow the 3-2-1 rule:\nThere should be at least 3 copies of the data, stored on 2 different types of storage media, and one copy should be kept offsite, in a remote location. - Wikipedia\nDuplicity has the handy benefit of offering built in encryption using GPG. Consider using this if you don’t have an existing solution for encrypted backups.","couchdb#CouchDB":"Caution\nCouchDB backups, by necessity, will have PII and PHI. They should be safely stored to prevent unauthorized access including encrypting backups.\nAssuming your CouchDB is stored in /home/ubuntu/cht/couchdb, you should use these steps to back it up:\nWhile you don’t need to stop CouchDB to back it up, ensure you follow best practices to back it up. See the CouchDB site for more info. Note it is NOT recommended to use replication for backup. It is strongly recommended you encrypt your backups given the sensitivity of the contents. Do this now before copying the backup files to their long term location. Backup the CouchDB files using the software specified above","docker-compose-files#Docker Compose files":"Caution\nThe .env file contains cleartext passwords. It should be safely stored to prevent unauthorized access.\nAll compose files, and the corresponding .env file, are in these three locations:\n/home/ubuntu/cht/compose/*.yml /home/ubuntu/cht/upgrade-service/*.yml /home/ubuntu/cht/upgrade-service/.env While all three of these are trivial to recreate by downloading them again, they may change over time so should be archived with your CouchDB data. Further, when there’s been a critical failure of a production CHT instance, you want to be sure to make the restore process as speedy as possible.\nAs all of these files are only read when Docker first loads a service, you can simply copy them whenever you want without stopping any of the CHT services. They should be copied with the same frequency and put in the same location as the CouchDB data using the backup software specified above.","introduction#Introduction":"As CHT 4.x uses a container per service, the only data that needs to be backed up is:\nCouchDB database Docker Compose and .env files TLS certificates This is because Docker containers are inherently stateless so all the important binaries are already stored in CHT’s Docker images. Docker Compose files, including the .env file, store all of your deployment’s configuration. Finally, the TLS certificates should be backed up to reduce recovery time.\nHow to backup each of these three pieces of data is covered below.\nTherefore, you do not need to back up the docker images for:\nnginx sentinel api haproxy couchdb healthcheck upgrade-service","testing-backups#Testing backups":"A backup that isn’t tested, is effectively not a backup. For a backup to be successful, a complete restore from all locations in the 3-2-1 plan need to be fully tested and documented as to how a restore works. The more practiced and better documented the restore process, the less downtime a production CHT instance will have after data loss.","tls-certificates#TLS certificates":"Caution\nThe .key file is the private key for TLS certificate. It should be safely stored to prevent unauthorized access.\nLike the compose files, the TLS certificate files can easily be regenerated or re-downloaded from your Certificate Authority, like Let’s Encrypt for example. However, you want to have a backup of the at the ready to ease the restore process.\nCopy the cert and key files from the nginx container:\ndocker cp cht_nginx_1:/etc/nginx/private/key.pem . docker cp cht_nginx_1:/etc/nginx/private/cert.pem . Back the up to the same location and frequency as the CouchDB data using the backup software specified above."},"title":"Backups"},"/hosting/cht/docker/installation/":{"data":{"":"","directory-structure#Directory Structure":"Create the following directory structure:\n/home/ubuntu/cht/ compose/ certs/ couchdb/ upgrade-service/ By calling this mkdir commands:\nmkdir -p /home/ubuntu/cht/{compose,certs,upgrade-service,couchdb} compose - docker-compose files for cht-core and CouchDB certs - TLS certificates directory upgrade-service - where docker-compose file for the upgrade-service couchdb - the path for the docker-compose file of the upgrade-service (not used in multi-node)","download-required-docker-compose-files#Download required docker-compose files":"The following 3 curl commands download CHT version 4.11.0 compose files, which you can change as needed. Otherwise, call:\ncd /home/ubuntu/cht/ curl -s -o ./compose/cht-core.yml https://staging.dev.medicmobile.org/_couch/builds_4/medic:medic:4.11.0/docker-compose/cht-core.yml curl -s -o ./compose/cht-couchdb.yml https://staging.dev.medicmobile.org/_couch/builds_4/medic:medic:4.11.0/docker-compose/cht-couchdb.yml curl -s -o ./upgrade-service/docker-compose.yml https://raw.githubusercontent.com/medic/cht-upgrade-service/main/docker-compose.yml","launch-containers#Launch containers":"Important\nThis section has the first use of docker compose. If you get an error calling this, double check hosting requirements.\nTo start your CHT instance, run the following\ncd /home/ubuntu/cht/upgrade-service docker compose up --detach Docker will start the upgrade service, which in turn pulls the required images and starts all the services as defined by the compose files in /home/ubuntu/cht/compose.\nTo follow the progress tail the log of the upgrade service container by running this:\ndocker logs -f upgrade-service_cht-upgrade-service_1\nTo make sure everything is running correctly, call docker ps and make sure that 7 CHT containers show:\nCONTAINER ID IMAGE COMMAND CREATED STATUS PORTS NAMES 8c1c22d526f3 public.ecr.aws/s5s3h4s7/cht-nginx:4.0.1-4.0.1 \"/docker-entrypoint.…\" 17 minutes ago Up 8 minutes 0.0.0.0:80-\u003e80/tcp, :::80-\u003e80/tcp, 0.0.0.0:443-\u003e443/tcp, :::443-\u003e443/tcp cht_nginx_1 f7b596be2721 public.ecr.aws/s5s3h4s7/cht-api:4.0.1-4.0.1 \"/bin/bash /api/dock…\" 17 minutes ago Up 8 minutes 5988/tcp cht_api_1 029cd86ac721 public.ecr.aws/s5s3h4s7/cht-sentinel:4.0.1-4.0.1 \"/bin/bash /sentinel…\" 17 minutes ago Up 8 minutes cht_sentinel_1 61ee1e0b377b public.ecr.aws/s5s3h4s7/cht-haproxy-healthcheck:4.0.1-4.0.1 \"/bin/sh -c \\\"/app/ch…\" 17 minutes ago Up 8 minutes cht_healthcheck_1 87415a2d91ea public.ecr.aws/s5s3h4s7/cht-haproxy:4.0.1-4.0.1 \"/entrypoint.sh -f /…\" 17 minutes ago Up 8 minutes 5984/tcp cht_haproxy_1 58454457467a public.ecr.aws/s5s3h4s7/cht-couchdb:4.0.1-4.0.1 \"tini -- /docker-ent…\" 17 minutes ago Up 8 minutes 4369/tcp, 5984/tcp, 9100/tcp cht_couchdb_1 d01343658f3f public.ecr.aws/s5s3h4s7/cht-upgrade-service:latest \"node /app/src/index…\" 17 minutes ago Up 8 minutes upgrade-service-cht-upgrade-service-1 This should show related to the CHT core are running\ncht_nginx cht_api cht_sentinel cht_couchdb cht_healthcheck cht_haproxy cht-upgrade-service Take note of the STATUS column and make sure no errors are displayed there. If any container is restarting or mentioning any other error, check the logs using the docker logs command.\nIf all has gone well, nginx should now be listening at both port 80 and port 443. Port 80 has a permanent redirect to port 443, so you can only access the CHT using https.\nTo login as the medic user in the web app, you can find your password with this command:\ngrep COUCHDB_PASSWORD /home/ubuntu/cht/upgrade-service/.env | cut -d'=' -f2","prepare-environment-variables-file#Prepare Environment Variables file":"Prepare a .env file by running this code:\nsudo apt install wamerican uuid=$(uuidgen) couchdb_secret=$(shuf -n7 /usr/share/dict/words --random-source=/dev/random | tr '\\n' '-' | tr -d \"'\" | cut -d'-' -f1,2,3,4,5,6,7) couchdb_password=$(shuf -n7 /usr/share/dict/words --random-source=/dev/random | tr '\\n' '-' | tr -d \"'\" | cut -d'-' -f1,2,3,4,5,6,7) cat \u003e /home/ubuntu/cht/upgrade-service/.env \u003c\u003c EOF CHT_COMPOSE_PROJECT_NAME=cht COUCHDB_SECRET=${couchdb_secret} DOCKER_CONFIG_PATH=/home/ubuntu/cht/upgrade-service COUCHDB_DATA=/home/ubuntu/cht/couchdb CHT_COMPOSE_PATH=/home/ubuntu/cht/compose COUCHDB_USER=medic COUCHDB_PASSWORD=${couchdb_password} COUCHDB_UUID=${uuid} # : (optional, default: false, configures: api) Adds 'servername' to HTTP agent for certificate issues in receiving traffic when proxying HTTPS-\u003eHTTP in SNI environments with external TLS termination. # See 'tls.connect(options[, callback])' (https://nodejs.org/api/tls.html). May resolve 'ERR_TLS_CERT_ALTNAME_INVALID' error. # ADD_SERVERNAME_TO_HTTP_AGENT=true # : (optional, default: false, configures: api) See http-proxy (https://www.npmjs.com/package/http-proxy#options). Sets 'changeOrigin' to 'true' for HTTP clients. For certificate issues in proxying HTTP-\u003eHTTPS # PROXY_CHANGE_ORIGIN=true EOF Note that secure passwords and UUIDs were generated on the first four calls and saved in the resulting .env file. Uncomment optional items if required.","prerequisites#Prerequisites":"Be sure you have followed the requirements document including installing Docker. This guide assumes you’re using the ubuntu user and that it has sudo-less access to Docker.","tls-certificates#TLS Certificates":"See the TLS Certificates page for how to import your certificates.","upgrades#Upgrades":"During upgrades, the CHT upgrade service updates the docker-compose files located in /home/ubuntu/cht/compose/. This means that any and all changes made to the docker-compose files will be overwritten. If there is ever a need to make any changes to the docker-compose files, be sure to re-do them post upgrades or should consider implementing them outside of those docker-compose files.","upgrading-the-cht-upgrade-service#Upgrading the cht-upgrade-service":"The CHT Upgrade Service provides an interface between the CHT Core API and Docker to allow easy startup and one-click upgrades from the CHT Admin UI. Occasionally, the CHT Upgrade Service, itself, will need to be upgraded. If an upgrade is available, it is highly recommended that you install the upgrade for the CHT Upgrade Service before performing further upgrades on your CHT instance. This is done via the following steps:\nVerify that the version of the cht-upgrade-service image in your ./upgrade-service/docker-compose.yml files is set to latest. Pull the latest cht-upgrade-service image from Docker Hub and replace the current container by running the following command: cd /home/ubuntu/cht/upgrade-service docker compose pull docker compose up --detach Important\nUpgrading the CHT Upgrade Service will not cause a new CHT version to be installed. The CHT Core and CouchDB containers are not affected.\nFollow the Product Releases channel on the CHT forum to stay informed about new releases and upgrades."},"title":"Installation"},"/hosting/cht/docker/logs/":{"data":{"":"CHT has the following services running via Docker and each can have its logs queried:\nnginx sentinel api haproxy couchdb healthcheck upgrade-service","setting-log-level#Setting log level":"By default, the CHT server logs are set to the info level. To change the log level to debug, you can set the NODE_ENV environment variable to development. A log level of debug can affect system performance and cause log files sizes to grow rapidly. It is recommended to temporarily set the log level to debug only when needed for troubleshooting.","viewing-logs#Viewing logs":"First, find the actual names of the containers with the docker ps --format '{{.Names}}' command which should show something like this:\ncht_nginx_1 cht_sentinel_1 cht_api_1 cht_haproxy_1 cht_healthcheck_1 cht_couchdb_1 upgrade-service-cht-upgrade-service-1 You can then use the docker logs command to view the logs of any given container. For example, if we call docker logs cht_nginx_1 it will show ALL the logs from that container. To show only the last 5 lines, you can use the --tail flag to specify the number of lines like this docker logs cht_nginx_1 --tail 5. The result will look like this:\n10.131.161.1 - - [15/Feb/2023:21:08:35 +0000] \"GET /medic/_changes?feed=longpoll\u0026heartbeat=10000\u0026since=115-g1AAAAH5eJyF0LENwjAQBVCLRIAEFBTMgESBCA0lrACJBzgnRXSKoKJmClaAxEswRZbIDCTHZ4GzXPzCT-d_rowx8zIqzDK_3fOycKdkf9jucJIKVyMybmVtxhQp6E-s23jfME00B-LdUWQIOBBxmJkG3gXJHHtfM8WaA2ncQ6RnGmsOZLjG5mLtk2mmSKAUCPHGSkxT3dZAiK_IR28A1AMhzta2wbko2iJe3ndMC92iaIfAzwrTmn8as5aY\u0026limit=25 HTTP/1.1\" 499 0 \"https://10-131-161-159.local-ip.medicmobile.org/\" \"Mozilla/5.0 (X11; Ubuntu; Linux x86_64; rv:109.0) Gecko/20100101 Firefox/109.0\" 10.131.161.1 - - [15/Feb/2023:21:08:35 +0000] \"GET /medic-user-medic-meta/_changes?include_docs=true\u0026feed=longpoll\u0026heartbeat=10000\u0026since=13-g1AAAAH5eJyF0LENwkAMhWETKGkoWIICERpKWAESD3BOiugUQUXNFKwAiZdgiiyRGUjMY4FYV_zFfbJ8VxPRspqXtCpu96Iq5ZTuD9sdTlrjKgkka-Y8htkE-hOWjWrrOBCVo9noOBATzMwcB5JLVG0cB9LKw2xwHMh4XdCF-TktgTIg5I0nubYBQr5mnxiSaTsAIWfmzp2LRTvkpdq7Fov2CH7WYOMP5CCWMg\u0026limit=25 HTTP/1.1\" 499 0 \"https://10-131-161-159.local-ip.medicmobile.org/\" \"Mozilla/5.0 (X11; Ubuntu; Linux x86_64; rv:109.0) Gecko/20100101 Firefox/109.0\" 10.131.161.1 - - [15/Feb/2023:21:08:35 +0000] \"GET /fontawesome-webfont.woff2 HTTP/1.1\" 304 0 \"https://10-131-161-159.local-ip.medicmobile.org/styles.css\" \"Mozilla/5.0 (X11; Ubuntu; Linux x86_64; rv:109.0) Gecko/20100101 Firefox/109.0\" 10.131.161.1 - - [15/Feb/2023:21:08:35 +0000] \"GET /fonts/NotoSans-Bold.ttf HTTP/1.1\" 304 0 \"https://10-131-161-159.local-ip.medicmobile.org/styles.css\" \"Mozilla/5.0 (X11; Ubuntu; Linux x86_64; rv:109.0) Gecko/20100101 Firefox/109.0\" 10.131.161.1 - - [15/Feb/2023:21:08:35 +0000] \"GET /fonts/NotoSans-Regular.ttf HTTP/1.1\" 200 221787 \"https://10-131-161-159.local-ip.medicmobile.org/styles.css\" \"Mozilla/5.0 (X11; Ubuntu; Linux x86_64; rv:109.0) Gecko/20100101 Firefox/109.0 Sometimes you may want to search the logs for a specific string. To search, use the pipe (|) and grep commands to do this. Here we search for all the times HA Proxy thought CouchDB wasn’t reachable (DOWN) with this call docker logs cht_haproxy_1 2\u003e\u00261 | grep 'DOWN':\n\u003c145\u003eFeb 15 20:52:06 haproxy[25]: Server couchdb-servers/couchdb is DOWN, reason: Layer7 wrong status, code: 0, info: \"via agent : down\", check duration: 208ms. 0 active and 0 backup servers left. 0 sessions active, 0 requeued, 0 remaining in queue. [WARNING] 045/205206 (25) : Server couchdb-servers/couchdb is DOWN, reason: Layer7 wrong status, code: 0, info: \"via agent : down\", check duration: 208ms. 0 active and 0 backup servers left. 0 sessions active, 0 requeued, 0 remaining in queue. [WARNING] 045/205601 (25) : Server couchdb-servers/couchdb is DOWN, reason: Layer7 wrong status, code: 0, info: \"via agent : down\", check duration: 207ms. 0 active and 0 backup servers left. 5 sessions active, 0 requeued, 0 remaining in queue. \u003c145\u003eFeb 15 20:56:01 haproxy[25]: Server couchdb-servers/couchdb is DOWN, reason: Layer7 wrong status, code: 0, info: \"via agent : down\", check duration: 207ms. 0 active and 0 backup servers left. 5 sessions active, 0 requeued, 0 remaining in queue. If you want to watch the logs for a specific container in real time, you can use the --follow flag. This command would watch the requests come into API in realtime: docker logs cht_api_1 --follow. It’s nice to couple this with the --tail command so you only see the last 5 lines of the existing logs before watching for new lines with docker logs cht_api_1 --follow --tail 5 which would show this:\nRES d17d71f5-2dcb-4ebb-bb0e-7874b3000570 10.131.161.1 - GET /medic/_design/medic-client/_view/reports_by_subject?keys=%5B%22557e79b8-2d99-4bd1-a4d6-a44491d483d8%22%5D HTTP/1.0 200 - 12.452 ms RES e43c5d7f-4e32-433a-a96d-ef991f4298a3 10.131.161.1 - GET /medic/_design/medic/_view/doc_summaries_by_id?keys=%5B%22557e79b8-2d99-4bd1-a4d6-a44491d483d8%22%5D HTTP/1.0 200 - 31.226 ms REQ c656ecc7-e6af-4564-ad63-2cab2c42844a 10.131.161.1 - GET /medic/_all_docs?include_docs=true\u0026startkey=%22target~2023-02~557e79b8-2d99-4bd1-a4d6-a44491d483d8~%22\u0026endkey=%22target~2023-02~557e79b8-2d99-4bd1-a4d6-a44491d483d8~%EF%BF%B0%22 HTTP/1.0 RES c656ecc7-e6af-4564-ad63-2cab2c42844a 10.131.161.1 - GET /medic/_all_docs?include_docs=true\u0026startkey=%22target~2023-02~557e79b8-2d99-4bd1-a4d6-a44491d483d8~%22\u0026endkey=%22target~2023-02~557e79b8-2d99-4bd1-a4d6-a44491d483d8~%EF%BF%B0%22 HTTP/1.0 200 - 11.153 ms 2023-02-15 21:54:49 DEBUG: Checking for a configured outgoing message service"},"title":"Logs"},"/hosting/cht/kubernetes-vs-docker/":{"data":{"":"To deploy the CHT, you should use the technology you are most familiar and comfortable with. It is possible to deploy 20 CHT instances without using Kubernetes. Conversely, if a hosting organisation uses Kubernetes and intends to deploy a single instance of the CHT, that’s also fine.\nTip\nApplication development is more straightforward to setup with Docker.","cht-deployment-example-1#CHT Deployment Example 1":"This deployment hosts 47 production instances in a data center running Docker. It trades ease and simplicity of Docker Compose deployment for a bit of fragility: if a VM fails, there is no automatic failover, and a restore from backup is needed.\nCHT Instances: 47 Hosting: Docker Cores: 376 (47 VMs x 8 Cores/ea) RAM: 752 GB (47 VMs x 16 GB/ea) Disk: 4,700 GB (Max 700, Min 21) Multi-Node Couch: No Users: 50.6k","cht-deployment-example-2#CHT Deployment Example 2":"This deployment hosts 1 CHT production instance in a data center running K3s.\nCHT Instances: 1 Hosting: k3s (on VMware) Cores: 32 (4 VMs x 8 cores/ea) RAM: 64 GB (4 VMs x 16 GB/ea) Disk: 2,400 GB (4 VMs x 600 GB/ea) Multi-Node Couch: Yes Users: 9.5k","cht-deployment-example-3#CHT Deployment Example 3":"This deployment hosts 46 production instances on Amazon Elastic Kubernetes Service (EKS).\nCHT Instances: 46 Hosting: k8s on EKS Cores: 64 (8 VMs x 8 Cores/ea) RAM: 256 GB (8 VMs x 32 GB/ea) Disk: 8.6 TB (8 VMs x 500 GB/ea + 46 CHTs x ~100 GB/ea) Multi-Node Couch: 44 No, 2 Yes Users: 25.7k To give more specific examples of what’s running in the 46 instances, here’s details on two including their Apdex:\nOne large instance has 2.4k active users, 8.9M documents in the Medic database in CouchDB and a mean replication Apdex of 100.0. Another medium instance has 232 active users, 279k documents in the Medic database in CouchDB and a mean replication Apdex of 100.","docker#Docker":"Docker has stood the test of time and has many benefits:\nEasy to deploy by just downloading a compose file. Trivially scales down to a 4-core laptop and way up to a 48-core server. Easily integrates with existing Docker based solutions like Watchdog or other services running in Docker. Backup and restore can be achieved via simple file management via bind mounted volumes. Just enough complexity to securely and soundly run the CHT without extra complexities of Kubernetes Natively supports one-click CHT upgrades in the admin GUI Docker Compose deployment has the following services when running the CHT:\nA service for each CouchDB instance. A CHT API service. HAProxy Healthcheck service. HAProxy service. Upgrade Service service. A CHT Sentinel service. An nginx service to act as a reverse proxy and terminate TLS connections","example-deployments#Example deployments":"Below are examples from real world large-scale CHT deployments which have been anonymized. User counts represent the number of active users within a 30 days interval.","kubernetes-k8s#Kubernetes (k8s)":"Running CHT on k8s requires familiarity with the k8s platform and can be more complex to deploy.\nk8s offers:\nResilient network across either physical or VM nodes in the cluster. This allows strong distribution of the heavy CPU and RAM loads that CouchDB can incur under heavy use. Orchestration of multiple deployments ensuring easy hosting of multi-tenants. For example you may opt to have a user acceptance testing (UAT), staging, and production instances all in one cluster. Service discovery which enables routing of public requests to deployments within the cluster Integration with hypervisors such as VMware and ESX. This is possible due to CRD support in Kubernetes that allows third parties to create integrations Helm support and integration that makes it easy to deploy applications onto the cluster Highly efficient snapshot backups when used with a storage area network (SAN) or Amazon’s Elastic Block Storage (EBS). The main components of a Kubernetes CHT deployment include one less service than a Compose-based deployment as ingress via nginx isn’t needed as it’s handled externally:\nA pod for each CouchDB instance. A CHT API pod. A CHT HAProxy Healthcheck pod. A CHT HAProxy pod. Upgrade Service pod. CHT-Sentinel pod.","which-one-to-choose#Which one to choose?":"There is no one-size-fits-all solution for all deployments, and every solution comes with its advantages and disadvantages.\nDocker is suitable for most CHT deployments use cases. Use Kubernetes for multi-tenant or specific hardware constrained deployments, such as bare-metal servers with a low core-count.\nFor more details on the research behind why Docker and single-node CouchDB are preferable for CHT deployments, see this forum post. Results from this experiment show no clear advantage for CouchDB clustering, as the performance for view indexing and replication is the same when using a CouchDB cluster vs using a single machine with the same number of cores."},"title":"Kubernetes vs Docker"},"/hosting/cht/kubernetes/":{"data":{"":"Read the Docker vs Kubernetes documentation to select a style of hosting that best fits your CHT deployment. Content in this section Production Hosting CHT - Google Cloud Platform Production Hosting in CHT - Multiple CouchDB Nodes on k3s on VMWare"},"title":"Production Kubernetes"},"/hosting/cht/kubernetes/gcp-multinode/":{"data":{"":"Audience This page is intended for system administrators who are setting up a CHT Core system that has millions of documents, 400+ users and requires high performance. If you are interested in setting up a smaller scale CHT Core, see our guide here for setting up a simpler installation.\nPrerequisites Before you can start using Google Cloud Platform (GCP) to host the CHT, you need to meet certain requirements:\nGoogle Account: valid free Gmail or paid Google Workspace account Enable Billing: In GCP, enable billing, including a valid credit card GCP Project: Each resource in GCP must belong to it’s own project Create and manage Google Cloud Platform project\nThere are two ways to create a project in GCP\na. GCP UI: if you decide to use the UI, follow these steps b. GCP CLI: use below command after you have authenticated to your GCP account gcloud projects create my-new-project --set-as-default Setting up access for other users to your GCP Project Once we have a GCP project, let’s make sure everyone else on our team can help out!\nAt the welcome screen after creating a GCP project, we want to note the * Project ID:, marked by a * in the screenshot below. Clicking on Dashboard we arrive at a detailed screen of our GCP project.\nWelcome to dashboard\nAt the Dashboard page, looking at the “Project Info” section, clicking on “ADD PEOPLE TO THIS PROJECT” (see related image) opens up a dialog where we can add users by their Gmail address. To simplify this process until further specific permissions are determined, use basic Owner and Editor roles for users we create. If you have a Google Kubernetes Engine (GKE) setup with narrow permissions for users and systems, update these docs - we would greatly appreciate it!\nAdd User Details\nGKE (Google Kubernetes Engine) Cluster creation Create a cluster in GCP project Using the console UI, follow the create cluster steps. Be sure to click “enable Kubernetes API” when prompted.\nA sane default is to use the less costly option below unless required by scale. Google Cloud Blog: Regional vs zonal GKE clusters\nZonal cluster Pros: Less costly Cons: Single control plane in single zone Considerations: A single control plane becoming unavailable (going down) would result in no access for the administrator to modify any resources in the cluster. The workloads, such as containers and the application remain working for the end-user. Regional cluster Pros: Multiple control plane replicas across multiple compute zones Cons: High cost Considerations: Multiple administrators accessing the cluster may benefit from ensuring the control plane servers are redundant. Recommended for national-scale implementations VPC Network and Subnets We are going to create an isolated private network with one public subnet that will contain the Load Balancer, managed and automated by Google. The Load Balancer will have access to the private subnet which contains all of virtual machines or enabled private nodes that run the containers which make up the application. This separation ensures underlying system files and database files are not accessible or modifiable outside of application-level access.\nVPC CIDR: 10.128.0.0/20 (default network)\nWhen creating the cluster, make sure the 3 option boxes are checked:\nEnable Private Nodes Access using the control plane’s external IP address Access using the control plane’s internal IP address from any region Cluster Networking Options\nNodePool Configuration NodePools allow you to configure VM quanity, database cluster VMs, CPU and RAM. In our example, create 2 NodePools, one for the CouchDB cluster and one for CHT Core services (api, sentinel, haproxy, healthcheck, upgrade-service).\nBase Image Consideration In the case of a cht-core project with millions of docs in CouchDB, we have ran into issues with open file descriptors. In order to modify this parameter (ulimit)), we are required to select a modifiable base image (Ubuntu). More details for CouchDB performance\nCloud-vendor optimized container images such as Google-optimized container images and Amazon-optimized container images do not allow custom bootstrap scripts that modify parameters to the necessary levels to run CouchDB with large document numbers.\nCreating a 3 nodepool configuration for CouchDB: CouchDB nodepool\nAs noted in the previous paragraph, be sure to select Nodes under your new CouchDB nodepool in the left-side navigation bar. In the node details menu, select Ubuntu with containerd for image type, and n2-standard-8for machine type.\nCouchDB base image and machine types\nIn order for our CouchDB containers to be placed onto these specific virtual machines we designated for this nodepool, we need to add kubernetes labels to the nodepool, which we will correspond with nodeSelector parameters in our CouchDB deployment templates.\nClicking on Metadata on the left-side navigation bar underneath the nodepool name, we can add Kubernetes Labels.\nCouchDB nodepool kubernetes labels\nA separate nodepool configuration created for cht-core services. For the cht-core nodepool, select a 4 core, 16gb RAM machine, 20gb persistent disk, and there is no need to create specific kubernetes labels.\nCHT-Core nodepool\nClick on Create Cluster and wait a few minutes for everything to come up!\nAccessing your GKE Cluster","accessing-your-gke-cluster#Accessing your GKE Cluster":"","audience#Audience":"","base-image-consideration#Base Image Consideration":"","cht-core-component-deployment#CHT Core Component deployment":"apiVersion: apps/v1 kind: Deployment metadata: labels: cht.service: api name: api namespace: spec: replicas: 1 selector: matchLabels: cht.service: api strategy: type: RollingUpdate rollingUpdate: maxSurge: 0 maxUnavailable: 1 template: metadata: labels: cht.service: api spec: containers: - env: - name: BUILDS_URL value: https://staging.dev.medicmobile.org/_couch/builds_4 - name: COUCH_URL valueFrom: secretKeyRef: name: key: COUCH_URL - name: UPGRADE_SERVICE_URL value: http://upgrade-service..svc.cluster.local:5008 - name: API_PORT value: '5988' image: public.ecr.aws/medic/cht-api:4.15.0 name: api ports: - containerPort: 5988 resources: {} restartPolicy: Always --- apiVersion: apps/v1 kind: Deployment metadata: labels: cht.service: haproxy name: cht-haproxy namespace: spec: replicas: 1 selector: matchLabels: cht.service: haproxy strategy: {} template: metadata: labels: cht.service: haproxy spec: containers: - env: - name: COUCHDB_PASSWORD valueFrom: secretKeyRef: name: key: COUCHDB_PASSWORD - name: COUCHDB_SERVERS valueFrom: configMapKeyRef: name: key: COUCHDB_SERVERS - name: COUCHDB_USER valueFrom: secretKeyRef: name: key: COUCHDB_USER - name: HAPROXY_IP value: 0.0.0.0 - name: HAPROXY_PORT value: \"5984\" - name: HEALTHCHECK_ADDR value: healthcheck..svc.cluster.local image: public.ecr.aws/medic/cht-haproxy:4.15.0 name: cht-haproxy ports: - containerPort: 5984 resources: {} hostname: haproxy restartPolicy: Always --- apiVersion: apps/v1 kind: Deployment metadata: labels: cht.service: healthcheck name: haproxy-healthcheck namespace: spec: replicas: 1 selector: matchLabels: cht.service: healthcheck strategy: {} template: metadata: labels: cht.service: healthcheck spec: containers: - env: - name: COUCHDB_PASSWORD valueFrom: secretKeyRef: name: key: COUCHDB_PASSWORD - name: COUCHDB_SERVERS valueFrom: configMapKeyRef: name: key: COUCHDB_SERVERS - name: COUCHDB_USER valueFrom: secretKeyRef: name: key: COUCHDB_USER image: public.ecr.aws/medic/cht-haproxy-healthcheck:4.15.0 name: cht-haproxy-healthcheck ports: - containerPort: 5555 restartPolicy: Always --- apiVersion: apps/v1 kind: Deployment metadata: labels: cht.service: sentinel name: cht-sentinel namespace: spec: replicas: 1 selector: matchLabels: cht.service: sentinel strategy: {} template: metadata: labels: cht.service: sentinel spec: containers: - env: - name: API_HOST value: api..svc.cluster.local - name: COUCH_URL valueFrom: secretKeyRef: name: key: COUCH_URL - name: API_PORT value: '5988' image: public.ecr.aws/medic/cht-sentinel:4.15.0 name: cht-sentinel resources: {} restartPolicy: Always --- apiVersion: apps/v1 kind: Deployment metadata: labels: cht.service: upgrade-service name: upgrade-service namespace: spec: replicas: 1 selector: matchLabels: cht.service: upgrade-service strategy: type: RollingUpdate rollingUpdate: maxSurge: 0 maxUnavailable: 1 template: metadata: labels: cht.service: upgrade-service spec: restartPolicy: Always serviceAccountName: containers: - image: medicmobile/upgrade-service:0.32 name: upgrade-service resources: {} env: - name: CHT_NAMESPACE valueFrom: fieldRef: fieldPath: metadata.namespace - name: CHT_DEPLOYMENT_NAME valueFrom: fieldRef: fieldPath: metadata.labels['cht.service'] - name: UPGRADE_SERVICE_PORT value: '5008' ports: - containerPort: 5008 Apply the deployment configuration: kubectl apply -f .yaml Verify that the deployment was created successfully: kubectl get deployments kubectl get pods","cht-core-deployment#CHT-CORE Deployment":"Before deploying CHT core components let’s create service account for CHT upgrade component","cht-core-services-deployment#CHT-CORE Services deployment":"apiVersion: v1 kind: Service metadata: labels: cht.service: api name: api namespace: spec: ports: - port: 5988 targetPort: 5988 selector: cht.service: api --- apiVersion: v1 kind: Service metadata: labels: cht.service: couchdb-1 name: couchdb-1 namespace: spec: ports: - name: couchdb1-service port: 5984 protocol: TCP targetPort: 5984 - name: cluster-api port: 5986 protocol: TCP targetPort: 5986 - name: epmd port: 4369 protocol: TCP targetPort: 4369 - name: erlang port: 9100 protocol: TCP targetPort: 9100 selector: cht.service: couchdb-1 --- apiVersion: v1 kind: Service metadata: labels: cht.service: couchdb-2 name: couchdb-2 namespace: spec: ports: - name: couchdb2-service port: 5984 protocol: TCP targetPort: 5984 - name: cluster-api port: 5986 protocol: TCP targetPort: 5986 - name: epmd port: 4369 protocol: TCP targetPort: 4369 - name: erlang port: 9100 protocol: TCP targetPort: 9100 selector: cht.service: couchdb-2 --- apiVersion: v1 kind: Service metadata: labels: cht.service: couchdb-3 name: couchdb-3 namespace: spec: ports: - name: couchdb3-service port: 5984 protocol: TCP targetPort: 5984 - name: cluster-api port: 5986 protocol: TCP targetPort: 5986 - name: epmd port: 4369 protocol: TCP targetPort: 4369 - name: erlang port: 9100 protocol: TCP targetPort: 9100 selector: cht.service: couchdb-3 --- apiVersion: v1 kind: Service metadata: labels: cht.service: haproxy name: haproxy namespace: spec: ports: - name: \"5984\" port: 5984 targetPort: 5984 selector: cht.service: haproxy --- apiVersion: v1 kind: Service metadata: name: healthcheck namespace: spec: selector: cht.service: healthcheck ports: - protocol: TCP port: 5555 targetPort: 5555 --- apiVersion: v1 kind: Service metadata: name: upgrade-service namespace: spec: selector: cht.service: upgrade-service ports: - name: upgrade-service port: 5008 protocol: TCP targetPort: 5008 type: ClusterIP Apply the deployment configuration: kubectl apply -f Verify that the deployment was created successfully: kubectl get deployments kubectl get pods","configmap-configuration#Configmap configuration":"Fill out the configmap resource below with the namespace your cht-core project will run in\napiVersion: v1 kind: ConfigMap metadata: name: data: COUCHDB_SYNC_ADMINS_NODE: couchdb-1. Apply the secrets configuration: kubectl apply -f .yaml Verify that the configmap was created successfully: kubectl -n get configmap","connect-to-gke-cluster#Connect to GKE cluster":"You can connect to your cluster via command-line or using a dashboard.\nCommandline Connect to cluster\nIn above UI select your cluster and in click on connect, then copy the command and run it in your terminal and you can access any ressource in the cluster.\ngcloud container clusters get-credentials [cluster-name] --zone [Zone where the cluster is hosted] --project [Project ID] Dashboard GKE cluster dashboard","couchdb-cluster-deployment#CouchDB Cluster deployment":"apiVersion: apps/v1 kind: Deployment metadata: labels: cht.service: couchdb-1 name: spec: replicas: 1 selector: matchLabels: cht.service: couchdb-1 strategy: type: Recreate template: metadata: labels: cht.service: couchdb-1 spec: containers: - name: image: public.ecr.aws/medic/cht-couchdb:4.15.0 ports: - containerPort: 5984 env: - name: COUCHDB_LOG_LEVEL value: \"info\" - name: COUCHDB_PASSWORD valueFrom: secretKeyRef: name: key: COUCHDB_PASSWORD - name: COUCHDB_SECRET valueFrom: secretKeyRef: name: key: COUCHDB_SECRET - name: COUCHDB_USER valueFrom: secretKeyRef: name: key: COUCHDB_USER - name: COUCHDB_UUID valueFrom: secretKeyRef: name: key: COUCHDB_UUID - name: SVC_NAME value: \"..svc.cluster.local\" - name: NODE_COUNT value: \"3\" - name: CLUSTER_PEER_IPS valueFrom: configMapKeyRef: name: key: CLUSTER_PEER_IPS nodeSelector: env: volumeMounts: - mountPath: /opt/couchdb/data name: subPath: data - mountPath: /opt/couchdb/etc/local.d name: subPath: local.d securityContext: capabilities: add: [\"SYS_RESOURCE\"] restartPolicy: Always volumes: - name: persistentVolumeClaim: claimName: --- apiVersion: apps/v1 kind: Deployment metadata: labels: cht.service: couchdb-2 name: cht-couchdb-2 spec: replicas: 1 selector: matchLabels: cht.service: couchdb-2 strategy: type: Recreate template: metadata: labels: cht.service: couchdb-2 spec: containers: - name: cht-couchdb-2 image: public.ecr.aws/medic/cht-couchdb:4.15.0 ports: - containerPort: 5984 env: - name: COUCHDB_SYNC_ADMINS_NODE valueFrom: configMapKeyRef: name: key: COUCHDB_SYNC_ADMINS_NODE - name: COUCHDB_LOG_LEVEL value: \"info\" - name: COUCHDB_PASSWORD valueFrom: secretKeyRef: name: key: COUCHDB_PASSWORD - name: COUCHDB_SECRET valueFrom: secretKeyRef: name: key: COUCHDB_SECRET - name: COUCHDB_USER valueFrom: secretKeyRef: name: key: COUCHDB_USER - name: COUCHDB_UUID valueFrom: secretKeyRef: name: key: COUCHDB_UUID - name: SVC_NAME value: couchdb-2..svc.cluster.local - name: NODE_COUNT value: \"3\" nodeSelector: env: volumeMounts: - mountPath: /opt/couchdb/data name: couchdb2--claim - mountPath: /opt/couchdb/etc/local.d name: couchdb2--claim subPath: local.d restartPolicy: Always volumes: - name: couchdb2--claim persistentVolumeClaim: claimName: couchdb2--claim --- apiVersion: apps/v1 kind: Deployment metadata: labels: cht.service: couchdb-3 name: cht-couchdb-3 spec: replicas: 1 selector: matchLabels: cht.service: couchdb-3 strategy: type: Recreate template: metadata: labels: cht.service: couchdb-3 spec: containers: - name: cht-couchdb-3 image: public.ecr.aws/medic/cht-couchdb:4.15.0 ports: - containerPort: 5984 env: - name: COUCHDB_SYNC_ADMINS_NODE valueFrom: configMapKeyRef: name: key: COUCHDB_SYNC_ADMINS_NODE - name: COUCHDB_LOG_LEVEL value: \"info\" - name: COUCHDB_PASSWORD valueFrom: secretKeyRef: name: key: COUCHDB_PASSWORD - name: COUCHDB_SECRET valueFrom: secretKeyRef: name: key: COUCHDB_SECRET - name: COUCHDB_USER valueFrom: secretKeyRef: name: key: COUCHDB_USER - name: COUCHDB_UUID valueFrom: secretKeyRef: name: key: COUCHDB_UUID - name: SVC_NAME value: couchdb-3..svc.cluster.local - name: NODE_COUNT value: \"3\" nodeSelector: env: volumeMounts: - mountPath: /opt/couchdb/data name: couchdb3--claim - mountPath: /opt/couchdb/etc/local.d name: couchdb3--claim subPath: local.d restartPolicy: Always volumes: - name: couchdb3--claim persistentVolumeClaim: claimName: couchdb3--claim Apply the deployment configuration: kubectl apply -f .yaml Verify that the deployment was created successfully: kubectl get deployments kubectl get pods","couchdb-services-deployment#CouchDB services deployment":"Deploy the services first, to ensure the cluster can discover all its members and bootstrap accordingly.\n--- apiVersion: v1 kind: Service metadata: labels: cht.service: couchdb-1 name: couchdb-1 spec: ports: - name: couchdb1-service port: 5984 protocol: TCP targetPort: 5984 - name: cluster-api port: 5986 protocol: TCP targetPort: 5986 - name: epmd port: 4369 protocol: TCP targetPort: 4369 - name: erlang port: 9100 protocol: TCP targetPort: 9100 selector: cht.service: couchdb-1 --- apiVersion: v1 kind: Service metadata: labels: cht.service: couchdb-2 name: couchdb-2 spec: ports: - name: couchdb2-service port: 5984 protocol: TCP targetPort: 5984 - name: cluster-api port: 5986 protocol: TCP targetPort: 5986 - name: epmd port: 4369 protocol: TCP targetPort: 4369 - name: erlang port: 9100 protocol: TCP targetPort: 9100 selector: cht.service: couchdb-2 --- apiVersion: v1 kind: Service metadata: labels: cht.service: couchdb-3 name: couchdb-3 spec: ports: - name: couchdb3-service port: 5984 protocol: TCP targetPort: 5984 - name: cluster-api port: 5986 protocol: TCP targetPort: 5986 - name: epmd port: 4369 protocol: TCP targetPort: 4369 - name: erlang port: 9100 protocol: TCP targetPort: 9100 selector: cht.service: couchdb-3 --- After configuring the storage components, you need to create a deployment for CouchDB that will use the persistent storage. This deployment defines how your CouchDB instance will run within Kubernetes. We will also create configmap and secrets resource to hold our credentials in one location for all templates.\nApply the secrets configuration: kubectl apply -f .yaml Verify that the configmap was created successfully: kubectl -n get services","create-a-cluster-in-gcp-project#Create a cluster in GCP project":"","create-a-storage-disk-for-couchdb#Create a Storage Disk for CouchDB":"Creating separate storage disks are essential for persisting CouchDB data across VM restarts or replacements in your CHT deployment. This dedicated disk ensures your database information remains intact regardless of VM lifecycle events.\nBelow are the methods and steps to create a storage disk in GCP. We will need 3 storage disks, 1 for each CouchDB node.\nUI: Follow persistent disk creation here CLI: run below command to create volume gcloud compute disks create [DISK_NAME]\\ --size [DISK_SIZE]\\ --type [DISK_TYPE] --zone [ZONE]","create-namespace#Create namespace":"kubectl create namespace","deploy-a-storageclass-config-to-gke-cluster#Deploy a StorageClass config to GKE cluster":"To bind and apply the created storage disk to a cluster, use the following YAML script for configuring the storage class: apiVersion: storage.k8s.io/v1 kind: StorageClass metadata: name: provisioner: pd.csi.storage.gke.io parameters: type: pd-balanced csi.storage.k8s.io/fstype: xfs volumeBindingMode: Immediate reclaimPolicy: Retain allowVolumeExpansion: true Apply the configuration using kubectl apply kubectl apply -f .yaml Verify the StorageClass was successfully created and registered in the cluster: Kubernetes Engine \u003e Cluster \u003e Storage","gke-google-kubernetes-engine-cluster-creation#GKE (Google Kubernetes Engine) Cluster creation":"","install-google-cloud-sdk#Install google cloud SDK":"Google Cloud SDK (gcloud CLI) helps manage GCP resources via command line.\nFollow instruction to install Google Cloud SDK\nBelow are some basic Commands\n# Authenticate CLI with your Google account gcloud auth login #install kubectl for cluster management gcloud components install kubectl # Set an active project gcloud config set project [PROJECT_ID] # List VM instances gcloud compute instances list # List namespaces kubectl get namespaces","key-configurations#Key Configurations":"replicas: 1:\nSpecifies that only one instance of ech deployment should run strategy: type: RollingUpdate:\nTo ensure minimal downtime by gradually replacing old pods with new ones while maintaining service availability. Ensure that a specified number of healthy pods are always running during the update process, minimizing service interruption strategy: rollingUpdate: maxSurge: 0:\nEnsure zero-downtime deployment. strategy: rollingUpdate: maxUnavailable: 1\nEnsure one pod is updated at a time metadata: labels: cht.service\nThi assigns a label with the key in our case cht.service and the value [any value] and this value can be used to identify, group , or select this Pod selector: matchLabels: cht.service:\nThis ensures only the correct Pods receive traffic from the right service, even if multiple deployment running in the same cluster. Ensure the Pods created by this Deployment are correctly matched valueFrom: fieldRef: fieldPath: Used to extract values from the Pod’s metadata or environment\ncontainers: resources: {}: Used to define requests to resource and set limits for resources.If the resource is empty, the container does not request any specific CPU or memory and the scheduler will assign resources based on availability, and the container can use as much CPU/memory as allowed by the node\nenv:name: API_HOST: value: API_HOST is variable that store the CHT API back-end URL and the attribute value containt the actual URL.\napi.muso-app.svc.cluster.local :\nThis is local URL used by Kubernetes and allows pods to communicate with one another. It is structured like: api: The ame of the Kubernetes Service muso-app : Name of the Namespace where the service is running svc: Indicates that this is a Service in Kubernetes cluster.local: The default domain for services inside the Kubernetes cluster.","key-configurations-explained#Key Configurations Explained":"volumeBindingMode: Immediate : Creates and binds Persistent Volume (PV) immediately Triggers PV creation when Persistent Volume Claim (PVC) is created reclaimPolicy: Retain : Preserves volume and data after PVC deletion Prevents accidental data loss allowVolumeExpansion: true : Enables PVC size expansion without recreation Provides storage flexibility","key-configurations-explained-1#Key Configurations Explained":"storageClassName: :\nReferences the Storage Class created in the previous step Ensures consistent storage provisioning policies capacity: storage: :\nDefines the size of the persistent volume (e.g., 100Gi) Should match or be less than the actual GCP disk size accessModes: - ReadWriteOnce:\nAllows the volume to be mounted as read-write by a single node Appropriate for CouchDB which typically runs on a single node volumeHandle:\nReferences the specific GCP disk created earlier Format: projects//zones//disks/","key-configurations-explained-2#Key Configurations Explained":"labels: cht.service: :\nIdentifies the PVC as part of your CHT deployment Used for service discovery and organization accessModes: - ReadWriteOnce:\nCorresponds to the same access mode defined in the PV Ensures compatibility between PV and PVC resources: requests: storage: :\nMust be less than or equal to the size specified in the PV Defines how much storage will be claimed from the PV volumeName: :\nDirectly references the specific PV created earlier Creates a static binding between this PVC and the specific PV storageClassName: :\nMust match the storage class name specified in the PV Ensures consistent storage policies","key-configurations-explained-3#Key Configurations Explained":"replicas: 1:\nSpecifies that only one instance of CouchDB should run CouchDB in the CHT typically runs as a single instance per node strategy: type: Recreate:\nEnsures the existing pod is terminated before a new one is created Prevents data conflicts since CouchDB uses disk storage that can’t be simultaneously accessed volumeMounts:\nMaps two specific directories from the container to the persistent storage: /opt/couchdb/data: Where CouchDB stores all database files /opt/couchdb/etc/local.d: Where configuration files are stored Uses subPath to organize different types of data within the same PVC securityContext: capabilities: add: [\"SYS_RESOURCE\"]:\nThis is a critical configuration for CouchDB performance and stability Grants the container the Linux capability to exceed system resource limits Specifically allows to increase the number of open file descriptors (ulimit) Without this capability, CouchDB may encounter “too many open files” errors under heavy load This is particularly important for production CHT instances that handle substantial traffic The SYS_RESOURCE capability enables CouchDB to set its own resource limits beyond the defaults env:\nContains essential environment variables for CouchDB configuration COUCHDB_PASSWORD \u0026 COUCHDB_USER: Authentication credentials COUCHDB_SECRET: Used for cookie authentication between nodes COUCHDB_UUID: Unique identifier for this CouchDB instance SVC_NAME: The service name that will be used for network discovery volumes:\nReferences the Persistent Volume Claim created earlier Creates the link between the deployment and the persistent storage","kubernetes-concepts#Kubernetes concepts":"Deployment - This is the main kubernetes resource that contains information regarding all the cht services that will be deployed. ConfigMaps - This contains configuration files, or credentials that containers can retrieve. If you edit the configmap, you should delete containers, which will trigger a new container to download your new edits to any configurations for that service ServiceAccounts - This is used by the upgrade-service that is running inside the cht-core pods (as a container titled upgrade-service). This serviceAccount restricts the upgrade-service from interacting with any other cht-core projects outside of its namespace, and gives the upgrade-service permissions to talk to kubernetes API to upgrade container images when a CHT ADMIN clicks upgrade through the Admin interface. Ingress - This is what forwards traffic to a particular project or pods. In most use-cases, there is an nginx deployed outside of the k3s cluster than contains DNS entries for existing projects, and contains a proxy_pass parameter to send traffic based on host header to any of the k3s server IPs. Inside the k3s cluster, the traefik container and servicelb-traefik containers in kube-system namespace will handle forwarding traffic to the correct cht-core containers based on url Persistent Volume Claim - This is where our project data will be stored. Important to ensure you have configured this correctly, with retain policies intact so the data is not deleted if the project is removed. It’s also vital to ensure you have a backup policy either set-up in VMware vCenter GUI or you have configured the csi-snapshotter that comes with vSphere CSI. Services - This is utilized for CouchDB nodes to discover each other through DNS rather than internal IPs, which can change. This is also used in the COUCH_URL so API containers can discover where CouchDB is running.","load-balancer-and-ingress-configuration#Load Balancer and Ingress Configuration":"Deploying an ingress with specific annotations, will create the GCP Load Balancer with internal routes to forward traffic to the API container.\nOnce we tie in an DNS entry to point to the GCP Load Balancer, we will have completed the ability for the end-user to navigate to the URL in their browser or app.\napiVersion: networking.k8s.io/v1 kind: Ingress metadata: name: api-ingress annotations: kubernetes.io/ingress.class: \"gce\" spec: #ingressClassName: alb rules: - host: http: paths: - path: / pathType: Prefix backend: service: name: api port: number: 5988 tls: - hosts: - secretName: Apply the deployment configuration: kubectl apply -f Remaining work: Map the rest of the following annotations to GCP Load Balancer\nannotations: alb.ingress.kubernetes.io/scheme: internet-facing alb.ingress.kubernetes.io/tags: {{ .Values.ingress.annotations.tags }} alb.ingress.kubernetes.io/group.name: {{ .Values.ingress.annotations.groupname }} alb.ingress.kubernetes.io/ssl-redirect: '443' alb.ingress.kubernetes.io/target-type: ip alb.ingress.kubernetes.io/healthcheck-port: traffic-port alb.ingress.kubernetes.io/certificate-arn: {{ .Values.ingress.annotations.certificate }} alb.ingress.kubernetes.io/listen-ports: '[{\"HTTP\": 80}, {\"HTTPS\": 443}]'","migrate-existing-data-to-newly-created-storage-disk#Migrate existing data to newly created Storage Disk":"Skip this step if you do not have pre-existing CouchDB data that you need to migrate into your GKE cluster.\nWe will launch a virtual machine in the same public subnet as the load balancer, with access via SSH. Attach and mount our created storage disk from the previous steps to this virtual machine.\nOnce mounted, log into your old server, create a session, and run the following rsync command to send data to your new disk. You may have to format the disk in xfs before being able to complete the mount.\nBefore running rsync, run the screen command first which allows the rsync command to when you disconnect\nscreen rsync -avhWt --no-compress --info=progress2 -e \"ssh -i /tmp/identity.pem\" /opt/couchdb/data ubuntu@://\nRun this command from each CouchDB node to a separate storage disk","nodepool-configuration#NodePool Configuration":"","persistent-volume-claim-configuration#Persistent Volume Claim Configuration":"After creating the Persistent Volume, you need to create a Persistent Volume Claim (PVC) that ties the PV to your CouchDB container. apiVersion: v1 kind: PersistentVolumeClaim metadata: labels: cht.service: name: spec: accessModes: - ReadWriteOnce resources: requests: storage: volumeName: storageClassName: Apply the configuration using kubectl: kubectl apply -f .yaml Verify the Persistent Volume Claim was successfully created and bound: kubectl get pvc","persistent-volume-configuration#Persistent Volume Configuration":"After setting up the StorageClass, you need to create a Persistent Volume (PV) that ties the storage disk to your GKE cluster. Create 1 PV for each Storage Disk, using naming conventions: cht-couchdb-1- apiVersion: v1 kind: PersistentVolume metadata: name: spec: storageClassName: capacity: storage: volumeMode: Filesystem accessModes: - ReadWriteOnce persistentVolumeReclaimPolicy: Retain csi: driver: pd.csi.storage.gke.io volumeHandle: projects//zones//disks/ fsType: xfs Apply the configuration using kubectl: kubectl apply -f .yaml Verify the Persistent Volume was successfully created: kubectl get pv","prerequisites#Prerequisites":"","regional-cluster#Regional cluster":"","secrets-resources-configuration#Secrets resources configuration":"For the secrets resource, fill out the necessary environment variable values.\napiVersion: v1 kind: Secret metadata: name: type: Opaque stringData: COUCHDB_PASSWORD: COUCHDB_SECRET: COUCHDB_USER: Apply the secrets configuration: kubectl apply -f .yaml Verify that the secrets were created successfully: kubectl -n get secret","setting-up-access-for-other-users-to-your-gcp-project#Setting up access for other users to your GCP Project":"","setup-couchdb-cluster-resources-in-gke#Setup CouchDB Cluster Resources in GKE":"For CouchDB nodes in a cluster to communicate, they have to be able to resolve each other’s location. We utilize kubernetes service resources for this DNS service discovery for cluster databases.\nDeploying a service resource allows you to interact with the process that service forwards traffic to over a DNS route simplified to ..svc.cluster.local.\nLet’s configure some components before deploying service","ssl-certificate-upload--preparation#SSL Certificate Upload / Preparation":"Using Certbot, ensure the dependencies of one of the challenges is met.\nOnce the certs are generated, create a kubernetes secret tls\nkubectl -n create secret tls --cert=/etc/letsencrypt/live//fullchain.pem --key=/etc/letsencrypt/live//privkey.pem Verify the secret was created by running:\nkubectl -n get secrets","upgrade-service-roles#Upgrade service roles:":"These roles are required to upgrade to newer versions of cht-core\napiVersion: v1 kind: ServiceAccount metadata: name: --- apiVersion: rbac.authorization.k8s.io/v1 kind: Role metadata: name: deployment-manager rules: - apiGroups: - apps - \"\" resources: - deployments - pods verbs: - get - update - watch - patch - list --- apiVersion: rbac.authorization.k8s.io/v1 kind: RoleBinding metadata: name: roleRef: apiGroup: rbac.authorization.k8s.io kind: Role name: deployment-manager subjects: - apiGroup: \"\" kind: ServiceAccount name: Apply the deployment configuration: kubectl apply -f .yaml Verify that the deployment was created successfully: kubectl get sa","vpc-network-and-subnets#VPC Network and Subnets":"","zonal-cluster#Zonal cluster":""},"title":"GCP + GKS Multi Node"},"/hosting/cht/kubernetes/self-hosting-k3s-multinode/":{"data":{"":"This page covers an example k3s cluster setup on a VMware datacenter with vSphere 7+ for a national deployment across 50 counties capable of supporting 20,000+ CHWs concurrently. After setup, administrators should only add VMs to the cluster or deploy CHT Core projects to be orchestrated.","about-container-orchestration#About container orchestration":"A container orchestrator helps easily allocate hardware resources spread across a datacenter. For national scale projects, or a deployments with a large number of CHT Core instances, you can use a lightweight Kubernetes orchestrator called k3s. The orchestrator will:\nmonitor resources across a group of virtual machines (aka “nodes”) place CHT Core projects where there is available resource migrate projects to spare resources if combined utilization is high or there are underlying issues. Instead of provisioning one VM per CHT Core project, we will provision larger VMs and deploy multiple CHT Core projects on one VM, with each project receiving optional resource limitations, like CPU and RAM.\nIn this example an orchestrator is deploying 50 CHT Core projects, one for each county. We will provision 9 large VMs and place 6 CHT Core projects on each VM. This allows for spare resources for failovers and lets the orchestrator decide on which VM projects live. Further, we get automated efficient use of datacenter resource utilization and avoids future manual allocations.","add-roles-and-permissions-to-our-vms#Add Roles and Permissions to our VMs":"Following the vSphere docs, first create the following vSphere roles in vSphere for Container Storage (CSN):\nCNS-VM CNS-DATASTORE CNS-SEARCH-AND-SPBM Now, on the VM settings, we can apply these roles as described in the above document.\nAny provisioned VM in the previous step, should receive CNS-VM role. The top-level vCenter server will receive CNS-SEARCH-AND-SPBM role. Virtual-SAN should receive CNS-DATASTORE. And all servers should have the READONLY role (this may already be active)","agentworker-vms#Agent/Worker VMs":"Now we will add our k3s agent/worker servers that will handle cht-core projects, workloads, and containers. This process is the same for any additional Agent/Worker servers you want to add to your k3s cluster.\nEnsure that the appropriate roles, and extra configuration parameters are set correctly.\nFill out these values before running the command:\n: Required to be the same token you used above : The IP of one of the control plane servers you set up above : This is the UUID of this VM that we are adding as an agent/worker server in our k3s cluster curl -sfL https://get.k3s.io | K3S_KUBECONFIG_MODE=\"644\" \\ INSTALL_K3S_EXEC=\"agent\" INSTALL_K3S_VERSION=\"v1.25.14+k3s1\" sh -s - \\ --docker --token \\ --server https://:6443 \\ --kubelet-arg=\"cloud-provider=external\" \\ --kubelet-arg=\"provider-id=vsphere://\"","create-storageclass-in-k3s-cluster#Create StorageClass in k3s cluster":"We’ll need to create a global StorageClass resource in our k3s cluster, so CHT Core deployments will be able to ask for persistent storage volumes from the k3s cluster.\nInside one of the control-plane servers, create a file vmware-storageclass.yaml with the following contents:\nkind: StorageClass apiVersion: storage.k8s.io/v1 metadata: name: vmware-sc annotations: storageclass.kubernetes.io/is-default-class: \"true\" provisioner: csi.vsphere.vmware.com parameters: csi.storage.k8s.io/fstype: \"ext4\" #Optional Parameter Deploy this template to the k3s cluster via:\n/usr/local/bin/k3s kubectl apply -f vmware-storageclass.yaml","deploy-vmware-cloud-provisioner-interface-cpi-to-your-k3s-cluster#Deploy VMware Cloud Provisioner Interface (CPI) to your k3s cluster":"SSH into one of your control plane servers. Download the template for CPI, ensure you are aware of your current working directory. This will be the location where the CPI template is saved.\npwd wget https://raw.githubusercontent.com/kubernetes/cloud-provider-vsphere/release-1.25/releases/v1.25/vsphere-cloud-controller-manager.yaml Modify the vsphere-cloud-controller-manager.yaml file downloaded above and update vCenter Server information.\nAdd your and , to the section below inside that yaml:\napiVersion: v1 kind: Secret metadata: name: vsphere-cloud-secret labels: vsphere-cpi-infra: secret component: cloud-controller-manager namespace: kube-system # NOTE: this is just an example configuration, update with real values based on your environment stringData: .username: \"\" .password: \"\" Add your and , and to the ConfigMap section inside that yaml.\nNote: If your vCenter actively uses https with valid certificates, then inside the global: stanza, you will want to set insecureFlag: false. Most set-ups will want this to remain true withinsecureFlag: true .\napiVersion: v1 kind: ConfigMap metadata: name: vsphere-cloud-config labels: vsphere-cpi-infra: config component: cloud-controller-manager namespace: kube-system data: # NOTE: this is just an example configuration, update with real values based on your environment vsphere.conf: | # Global properties in this section will be used for all specified vCenters unless overridden in VirtualCenter section. global: port: 443 # set insecureFlag to true if the vCenter uses a self-signed cert insecureFlag: true # settings for using k8s secret secretName: vsphere-cloud-secret secretNamespace: kube-system # vcenter section vcenter: my-vc-name: server: user: password: datacenters: - Deploy the template!\n/usr/local/bin/k3s kubectl -n kube-system apply -f vsphere-cloud-controller-manager.yaml Verify CPI containers are running:\n/usr/local/bin/k3s kubectl -n kube-system get pods -o wide /usr/local/bin/k3s kubectl -n kube-system logs vsphere-cloud-controller-manager- You will see 3 vsphere-cloud-controller-manager pods running, one per control-plane server.\nTake a peak at all 3 vsphere-controller-manager pods logs to ensure nothing is immediately erring. Common errors are using the incorrect datacenter name, UUIDs for VMs in the k3s curl command, or invalid credentials in the configmap and secrets resources created in step 2 above. If one of these errors is displaying in the log, you will want to delete the deployment (in step 3 above, replace apply with delete, edit the yaml and re-deploy (run step 3 again).","deploy-vmware-container-storage-interface-csi-to-your-k3s-cluster#Deploy VMware Container Storage Interface (CSI) to your k3s cluster":"Follow the VMware documentation for CSI with these steps:\nRun the following command from inside a control-plane server:\n/usr/local/bin/k3s kubectl create namespace vmware-system-csi Taint your control-lane node servers by running the following command. This taint may already exist, if so, that’s okay. Replace with each of your control plane servers.\nYou can retrieve the names by running `/usr/local/bin/k3s kubectl get nodes -o wide` /usr/local/bin/k3s kubectl taint node node-role.kubernetes.io/control-plane=:NoSchedule Create kubernetes secret, which will map authentication credentials and datacenter name to CSI containers. First, create a file /etc/kubernetes/csi-vsphere.conf. Be sure to replace , , , , , and with your values:\n[Global] cluster-id = \"\" [VirtualCenter \"\"] insecure-flag = \"\" user = \"\" password = \"\" port = \"\" datacenters = \", , ...\" Create the secret resource in the namespace we created in step 1 by running the following command in the same directory you created the csi-vsphere.conf file:\n/usr/local/bin/k3s kubectl create secret generic vsphere-config-secret --from-file=csi-vsphere.conf --namespace=vmware-system-csi Download the vSphere CSI v2.7.2 template\nThere is one minor edit, typically found on line 217-218, under the deployment specification for vsphere-csi-controller.\nBefore edit (original value)\nnodeSelector: node-role.kubernetes.io/control-plane: \"\" Add true as the value for this key, seen below:\nnodeSelector: node-role.kubernetes.io/control-plane: \"true\" Now, let’s deploy VMware CSI by running the following command:\n/usr/local/bin/k3s kubectl -n vmware-system-csi apply -f vsphere-csi-driver.yaml Follow the verification steps seen here in Step 2 of Procedure","deploying-a-cht-core-project-to-your-new-k3s-cluster-running-on-vmware#Deploying a CHT-Core Project to your new k3s Cluster running on VMware":"This step will neatly fit into helm chart configurations, but here are the manual steps for time being.\nYour persistent volume (PVC) template for all CouchDB’s should be as shown below. Note the storageClassName parameter should be identical to the storageClass we deployed earlier:\n# Source: cht-chart/templates/couchdb-n-claim0-persistentvolumeclaim.yaml apiVersion: v1 kind: PersistentVolumeClaim metadata: labels: cht.service: couchdb-1-claim0 name: couchdb-1-claim0 spec: accessModes: - ReadWriteOnce resources: requests: storage: 4Gi storageClassName: vmware-sc status: {}","enable-necessary-extra-parameters-on-all-vms#Enable Necessary Extra Parameters on all VMs":"Following along the above document, we want to verify VM Hardware Version is 15 or greater, and that disk.EnableUUID parameter is configured.\nOn each node, through vSphere Client (GUI):\ndisk.EnableUUID\nIn the vSphere Client, right-click the VM and select Edit Settings. Click the VM Options tab and expand the Advanced menu. Click Edit Configuration next to Configuration Parameters. Configure the disk.EnableUUID parameter. If the parameter exists, make sure that its value is set to True. If the parameter is not present, add it and set its value to True. Verify VM hardware version at 15 or higher, and upgrade if necessary\nIn the vSphere Client, navigate to the virtual machine. Select Actions \u003e Compatibility \u003e Upgrade VM Compatibility. Click Yes to confirm the upgrade. Select a compatibility and click OK. Add VMware Paravirtual SCSI storage controller to the VM\nIn the vSphere Client, right-click the VM and select Edit Settings. On the Virtual Hardware tab, click the Add New Device button. Select SCSI Controller from the drop-down menu. Expand New SCSI controller and from the Change Type menu, select VMware Paravirtual. Click OK.","first-control-plane-vm#First Control-Plane VM":"SSH into your first control-plane VM that was provisioned and configured above and install docker.\nFor k3s version compatibility with vCenter and vMware CPI/CSI, we will need to use k3s v1.25, cpi v1.25, and csi v2.7.2 per the curl call below.\nRun the following CLI command inside the control-plane VM, filling out these two specific values:\n: Generate a token ID, and save it. This will be required for the entirety of the k3s cluster existence and required to add additional servers to the k3s cluster : This was the UUID for this specific VM that we identified earlier curl -sfL https://get.k3s.io | K3S_KUBECONFIG_MODE=\"644\" \\ INSTALL_K3S_EXEC=\"server\" INSTALL_K3S_VERSION=\"v1.25.14+k3s1\" sh -s - \\ --docker --token \\ --cluster-init --disable-cloud-controller \\ --kubelet-arg=\"cloud-provider=external\" \\ --kubelet-arg=\"provider-id=vsphere://\"","identify-vsphere-provider-ids-node-ids-and-datacenter-name#Identify vSphere Provider IDs, Node IDs, and datacenter name":"Bootstrap parameters for k3s on VMware require UUID identification of each node that will join the cluster.\nFor each of the provisioned VMs, you can navigate to the VM in vCenter interface and retrieve the UUID.\nAnother method is to make the following calls to vCenter Server API. You may have a VPN that you connect to first before being able to access your vCenter GUI. These commands should be run from the same network that allows that access.\nWhen running the commands below, be sure to replace the placeholders with your own values:\nAnd any others as well!\nGet an authentication-token:\ncurl -k -X POST https:///rest/com/vmware/cis/session -u ':' ID= List all your VMs and identify the VM-number that was provisioned earlier:\ncurl -k -X GET -H \"vmware-api-session-id: $ID\" https:///api/vcenter/vm Retrieve your instance_uuid by first making a curl call:\ncurl -k -X GET -H \"vmware-api-session-id: $ID\" https:///api/vcenter/vm/vm- Inside the JSON response of the curl call get the, instance_uuid, in this case it’s 215cc603-e8da-5iua-3333-a2402c05121, but yours will be different:\n\"identity\":{\"name\":\"k3s_worker_node_4\",\"instance_uuid\":\"215cc603-e8da-5iua-3333-a2402c05121\"} Retrieve your datacenter name, to be used in configuration files for VMware CSI and CPI\ncurl -k -X GET -H \"vmware-api-session-id: $ID\" https:///rest/vcenter/datacenter You will want to save the “name” of your datacenter.\nRetrieve your cluster-id, to be used in config file for VMware CSI curl -k -X GET -H \"vmware-api-session-id: $ID\" https:///api/vcenter/cluster You can also use the govc cli tool to retrieve this information:\nexport GOVC_INSECURE=1 export GOVC_URL='https://:@ govc ls / /vm \\ /network \\ /host \\ /datastore #To retrieve all Node VMs govc ls //vm \\ /vm/ \\ /vm/ \\ /vm/ \\ /vm/ \\ /vm/","install-k3s#Install k3s":"","kubernetes-concepts#Kubernetes Concepts":"Here are links to docs surrounding the kubernetes concepts that we use in a cht-core project deployed to a k3s cluster.\nDeployment - This is the main kubernetes resource that contains information regarding all the cht services that will be deployed. ConfigMaps - This contains configuration files, or credentials that containers can retrieve. If you edit the configmap, you should delete containers, which will trigger a new container to download your new edits to any configurations for that service ServiceAccounts - This is used by the upgrade-service that is running inside the cht-core pods (as a container titled upgrade-service). This serviceAccount restricts the upgrade-service from interacting with any other cht-core projects outside of its namespace, and gives the upgrade-service permissions to talk to kubernetes API to upgrade container images when a CHT ADMIN clicks upgrade through the Admin interface. Ingress - This is what forwards traffic to a particular project or pods. In most use-cases, there is an nginx deployed outside of the k3s cluster than contains DNS entries for existing projects, and contains a proxy_pass parameter to send traffic based on host header to any of the k3s server IPs. Inside the k3s cluster, the traefik container and servicelb-traefik containers in kube-system namespace will handle forwarding traffic to the correct cht-core containers based on url Persistent Volume Claim - This is where our project data will be stored. Important to ensure you have configured this correctly, with retain policies intact so the data is not deleted if the project is removed. It’s also vital to ensure you have a backup policy either set-up in VMware vCenter GUI or you have configured the csi-snapshotter that comes with vSphere CSI. Services - This is utilized for CouchDB nodes to discover each other through DNS rather than internal IPs, which can change. This is also used in the COUCH_URL so API containers can discover where CouchDB is running.","network#Network":"Ensure the above provisioned VMs:\nabide by Inbound Rules for k3s Server Nodes If you’re using Ubuntu’s ufw, follow firewall considerations for k3s on Ubuntu are restricted to the IP addresses of the k3s nodes so only they can connect to the service ports","nodes#Nodes":"We’ll be using two types of k3s nodes in this deployment:\nHA control-plane nodes - these enable high availability (HA) and provide access to kube API. These are containers running inside kube-system namespace which are often associated with the control-plane. They include coreDNS, traefik (ingress), servicelb, VMware Cloud Provisioner Interface (CPI), and VMWare Container Storage Interface (CSI)\nAgent or worker nodes - these run the CHT Core containers and projects. They will also run services that tie in networking and storage. VMware CSI-node will be running here which enables agents to mount volumes from VMware Virtual-SAN for block data storage. Agents will also run servicelb-traefik containers which allow the nodes to route traffic to correct projects and handle load-balancing and internal networking.","prerequisites#Prerequisites":"","second-and-third-control-plane-vms#Second and third Control-Plane VMs":"SSH into your second/third control-plane VM.\nFill out these values below and run the cli command:\n: Required to be the same token you used in the first control-plane setup : This is the IP of the first control-plane server you setup, and allows this second server to discover the initial one. : This is the UUID for this second VM that we identified earlier. This will be different than the one you used for control plane 1. curl -sfL https://get.k3s.io | K3S_KUBECONFIG_MODE=\"644\" \\ INSTALL_K3S_EXEC=\"server\" INSTALL_K3S_VERSION=\"v1.25.14+k3s1\" sh -s \\ --docker --token \\ --server https://","servers--virtual-machines#Servers / Virtual Machines":"Provision 3 Ubuntu servers (22.04 as of this writing) that meet k3s specifications for HA etcd\nAs we’re provisioning an example deployment here for 50 counties and over 20,000 CHWs, the RAM, CPU and storage numbers will differ for you specific deployment.\nTo support all 50 counties, provision 3 Ubuntu servers (22.04 as of this writing) with 4 vCPU and 8GB Ram. Ensure they also meet k3s specifications for HA etcd.\nProvision 9 Ubuntu servers (again 22.04 as of this writing) for your k3s agent/worker servers. Each should have 48 vCPU, 192 GB Ram, and 50gb local storage.\nFor any additional VMs you add to the k3s cluster, you will need to ensure networking, roles, and extra configuration parameters that are noted below are configured on the VM.\nTo ensure your hardware is not over-provisioned, add more VMs to your k3s cluster when you want to deploy more CHT Core projects. This gives you flexibility of not needing to provision them initially as they can easily be added later."},"title":"VMWare + k3s Multiple Node"},"/hosting/cht/migration/":{"data":{"":"To K3s Multi-nodeGuide to migrate existing data from CHT 3.x Docker Compose deployment to CHT 4.x clustered K3s deployment with 3 CouchDB nodes To K3s Single-nodeGuide on how to migrate existing data from CHT 3.x Docker Compose deployment to CHT 4.x single-node K3s deployment To Docker Single-NodeGuide to migrate existent data from CHT 3.x to CHT 4.x","related-forum-posts#Related forum posts":"“Restoring corrupted couchdb database”"},"title":"Migration Guides"},"/hosting/cht/migration/data-migration-3x-docker-to-4x-k3s-multi/":{"data":{"":"The hosting architecture differs entirely between CHT Core 3.x and CHT Core 4.x. When migrating from Docker Compose to K3s, specific steps are required using the couchdb-migration tool. This tool interfaces with CouchDB to update shard maps and database metadata.\nTip\nIf after upgrading you get an error, Cannot convert undefined or null to object - see issue #8040 for a work around. This only affects CHT 4.0.0, 4.0.1, 4.1.0 and 4.1.1. It was fixed in CHT 4.2.0.","create-directories-on-secondary-nodes#Create directories on secondary nodes":"ssh @ \"sudo mkdir -p /srv/couchdb2/data/shards /srv/couchdb2/data/.shards\" ssh @ \"sudo mkdir -p /srv/couchdb3/data/shards /srv/couchdb3/data/.shards\"","create-valuesyaml-for-k3s-deployment#Create values.yaml for K3s Deployment":"Be sure to update the following values in your YAML file:\n(two occurrences) - 4.x version you’re upgrading to - retrieved from get-env call above - retrieved from get-env call above - needs to be the same as used in 3.x - likely medic - retrieved from get-env call above - the URL of your production instance goes here (eg example.org) - path to TLS files on disk Storage Configuration Notes:\nThe storage related values don’t need to be changed but here’s an explanation:\npreExistingDataAvailable: \"true\" - If this is false, the CHT gets launched with empty data. dataPathOnDiskForCouchDB: \"data\" - Leave as data because that’s the directory we created above when moving the existing data. partition: \"0\" - Leave as 0 to use the whole disk. If you have moved data to a separate partition in a partitioned hard disk, then you’d put the partition number here. project_name: \"\" namespace: \"\" chtversion: upstream_servers: docker_registry: \"public.ecr.aws/medic\" builds_url: \"https://staging.dev.medicmobile.org/_couch/builds_4\" upgrade_service: tag: 0.32 couchdb: password: \"\" secret: \"\" user: \"\" uuid: \"\" clusteredCouch_enabled: true couchdb_node_storage_size: 100Gi clusteredCouch: noOfCouchDBNodes: 3 ingress: host: \"\" environment: \"remote\" cluster_type: \"k3s-k3d\" cert_source: \"specify-file-path\" certificate_crt_file_path: \"/fullchain.crt\" certificate_key_file_path: \"/privkey.key\" nodes: node-1: \"couch01\" node-2: \"couch02\" node-3: \"couch03\" couchdb_data: preExistingDataAvailable: \"true\" dataPathOnDiskForCouchDB: \"data\" partition: \"0\" local_storage: preExistingDiskPath-1: \"/srv/couchdb1\" preExistingDiskPath-2: \"/srv/couchdb2\" preExistingDiskPath-3: \"/srv/couchdb3\"","deploy-to-k3s#Deploy to K3s":"We are going to use cht-deploy from the cht-core repo.\ncd cht-core/scripts/deploy ./cht-deploy -f /path/to/your/values.yaml","distribute-shards#Distribute Shards":"Move shards to Node 2:\n# Copy main shards first sudo rsync -avz --progress --partial --partial-dir=/tmp/rsync-partial \\ /srv/couchdb1/data/shards/20000000-3fffffff \\ /srv/couchdb1/data/shards/80000000-9fffffff \\ /srv/couchdb1/data/shards/e0000000-ffffffff \\ user@node2-hostname:/srv/couchdb2/data/shards/ # Then copy hidden shards sudo rsync -avz --progress --partial --partial-dir=/tmp/rsync-partial \\ /srv/couchdb1/data/.shards/20000000-3fffffff \\ /srv/couchdb1/data/.shards/80000000-9fffffff \\ /srv/couchdb1/data/.shards/e0000000-ffffffff \\ user@node2-hostname:/srv/couchdb2/data/.shards/ # Touch the .shards to ensure they're newer ssh user@node2-hostname \"sudo find /srv/couchdb2/data/.shards -type f -exec touch {} +\" Move shards to Node 3:\n# Copy main shards first sudo rsync -avz --progress --partial --partial-dir=/tmp/rsync-partial \\ /srv/couchdb1/data/shards/40000000-5fffffff \\ /srv/couchdb1/data/shards/a0000000-bfffffff \\ user@node3-hostname:/srv/couchdb3/data/shards/ # Then copy hidden shards sudo rsync -avz --progress --partial --partial-dir=/tmp/rsync-partial \\ /srv/couchdb1/data/.shards/40000000-5fffffff \\ /srv/couchdb1/data/.shards/a0000000-bfffffff \\ user@node3-hostname:/srv/couchdb3/data/.shards/ # Touch the .shards to ensure they're newer ssh user@node3-hostname \"sudo find /srv/couchdb3/data/.shards -type f -exec touch {} +\"","get-shard-distribution-instructions#Get Shard Distribution Instructions":"Access the primary CouchDB pod, being sure to replace with the name of your actual namespace:\nkubectl exec -it -n $(kubectl get pod -n -l cht.service=couchdb-1 -o name) -- bash Set up the migration tool:\ncurl -fsSL https://deb.nodesource.com/setup_16.x | bash - apt install -y nodejs npm git git clone https://github.com/medic/couchdb-migration.git cd couchdb-migration npm ci --omit=dev # Create a global symlink to enable running commands directly # Note: This may require sudo if npm's global directories aren't writable npm link export ADMIN_USER= export ADMIN_PASSWORD= export COUCH_URL=\"http://${ADMIN_USER}:${ADMIN_PASSWORD}@localhost:5984\" # Get shard distribution instructions shard_matrix=$(generate-shard-distribution-matrix) shard-move-instructions $shard_matrix Example output:\nMove /shards/00000000-1fffffff to /shards/00000000-1fffffff Move /.shards/00000000-1fffffff to /.shards/00000000-1fffffff Move /shards/20000000-3fffffff to /shards/20000000-3fffffff ... Note\nThe actual shard ranges in your output may differ. Adjust the following rsync commands to match your specific shard distribution instructions.","install-migration-tool#Install Migration Tool":"mkdir -p ~/couchdb-migration/ cd ~/couchdb-migration/ curl -s -o ./docker-compose.yml https://raw.githubusercontent.com/medic/couchdb-migration/main/docker-compose.yml docker compose up","prepare-node-storage#Prepare Node Storage":"# Create directory on the node sudo mkdir -p /srv/couchdb1/data # Copy data from Docker Compose installation to the k3s node sudo rsync -avz --progress --partial --partial-dir=/tmp/rsync-partial \\ /srv/storage/medic-core/couchdb/data/ \\ @:/srv/couchdb1/data/","run-pre-migration-commands#Run Pre-Migration Commands":"cd ~/couchdb-migration/ docker compose run couch-migration pre-index-views Important\nIf pre-indexing is omitted, 4.x API will fail to respond to requests until all views are indexed. For large databases, this could take many hours or days.","save-couchdb-configuration#Save CouchDB Configuration":"cd ~/couchdb-migration/ docker compose run couch-migration get-env Save the output containing:\nCouchDB secret (used for encrypting passwords and session tokens) CouchDB server UUID (used for replication checkpointing) CouchDB admin credentials The next part of the guide assumes your K3s cluster is already prepared. If not, run the set of commands here.\nWe are also going to utilize the cht-deploy script from the cht-core repo. If you don’t already have that, clone it.","set-up-environment-variables#Set Up Environment Variables":"Be sure to replace both and with your actual username and password. As well, update to the CouchDB URL from the Docker Compose setup:\nexport COUCH_URL=http://:@:5984","update-cluster-configuration#Update Cluster Configuration":"In the primary CouchDB pod:\n# Apply shard distribution move-shards $shard_matrix # Remove old node configuration remove-node couchdb@127.0.0.1 # Verify migration verify"},"title":"To K3s Multi-node"},"/hosting/cht/migration/data-migration-3x-docker-to-4x-k3s-single/":{"data":{"":"The hosting architecture differs entirely between CHT Core 3.x and CHT Core 4.x. When migrating from Docker Compose to K3s, specific steps are required using the couchdb-migration tool. This tool interfaces with CouchDB to update shard maps and database metadata.\nTip\nIf after upgrading you get an error, Cannot convert undefined or null to object - see issue #8040 for a work around. This only affects CHT 4.0.0, 4.0.1, 4.1.0 and 4.1.1. It was fixed in CHT 4.2.0.","create-valuesyaml-for-k3s-deployment#Create values.yaml for K3s Deployment":"Be sure to update the following values in your YAML file:\n(two occurrences) - 4.x version you’re upgrading to - retrieved from get-env call above - retrieved from get-env call above - needs to be the same as used in 3.x - likely medic - retrieved from get-env call above - the URL of your production instance goes here (eg example.org) - path to TLS files on disk Storage Configuration Notes:\nThe storage related values don’t need to be changed but here’s an explanation:\npreExistingDataAvailable: \"true\" - If this is false, the CHT gets launched with empty data. dataPathOnDiskForCouchDB: \"data\" - Leave as data because that’s the directory we created above when moving the existing data. partition: \"0\" - Leave as 0 to use the whole disk. If you have moved data to a separate partition in a partitioned hard disk, then you’d put the partition number here. project_name: \"\" namespace: \"\" chtversion: upstream_servers: docker_registry: \"public.ecr.aws/medic\" builds_url: \"https://staging.dev.medicmobile.org/_couch/builds_4\" upgrade_service: tag: 0.32 couchdb: password: \"\" secret: \"\" user: \"\" uuid: \"\" clusteredCouch_enabled: false couchdb_node_storage_size: 100Gi ingress: host: \"\" environment: \"remote\" cluster_type: \"k3s-k3d\" cert_source: \"specify-file-path\" certificate_crt_file_path: \"/fullchain.crt\" certificate_key_file_path: \"/privkey.key\" nodes: node-1: \"couch01\" couchdb_data: preExistingDataAvailable: \"true\" dataPathOnDiskForCouchDB: \"data\" partition: \"0\" local_storage: preExistingDiskPath-1: \"/srv/couchdb1\"","deploy-to-k3s#Deploy to K3s":"We are going to use cht-deploy from the cht-core repo.\ncd cht-core/scripts/deploy ./cht-deploy -f /path/to/your/values.yaml","install-migration-tool#Install Migration Tool":"mkdir -p ~/couchdb-migration/ cd ~/couchdb-migration/ curl -s -o ./docker-compose.yml https://raw.githubusercontent.com/medic/couchdb-migration/main/docker-compose.yml docker compose up","prepare-node-storage#Prepare Node Storage":"# Create directory on the node sudo mkdir -p /srv/couchdb1/data # Copy data from Docker Compose installation to the k3s node sudo rsync -avz --progress --partial --partial-dir=/tmp/rsync-partial \\ /srv/storage/medic-core/couchdb/data/ \\ @:/srv/couchdb1/data/","run-migration-commands#Run Migration Commands":"First verify CouchDB is running by getting the pod status and running curl inside the couchdb service to see if localhost is accessible. Be sure to replace with your actual namespace:\nkubectl get pods -n kubectl exec -it -n $(kubectl get pod -n -l cht.service=couchdb -o name) -- \\ curl -s http://localhost:5984/_up Access the CouchDB pod:\nkubectl exec -it -n $(kubectl get pod -n -l cht.service=couchdb -o name) -- bash Set up migration tool in pod:\ncurl -fsSL https://deb.nodesource.com/setup_16.x | bash - apt install -y nodejs npm git git clone https://github.com/medic/couchdb-migration.git cd couchdb-migration npm ci --omit=dev # Create a global symlink to enable running commands directly # Note: This may require sudo if npm's global directories aren't writable npm link export ADMIN_USER= export ADMIN_PASSWORD= export COUCH_URL=\"http://${ADMIN_USER}:${ADMIN_PASSWORD}@localhost:5984\" # Verify CouchDB is up and responding check-couchdb-up # Update node configuration move-node # Verify migration verify","run-pre-migration-commands#Run Pre-Migration Commands":"cd ~/couchdb-migration/ docker compose run couch-migration pre-index-views Important\nIf pre-indexing is omitted, 4.x API will fail to respond to requests until all views are indexed. For large databases, this could take many hours or days.","save-couchdb-configuration#Save CouchDB Configuration":"cd ~/couchdb-migration/ docker compose run couch-migration get-env Save the output containing:\nCouchDB secret (used for encrypting passwords and session tokens) CouchDB server UUID (used for replication checkpointing) CouchDB admin credentials The next part of the guide assumes your K3s cluster is already prepared. If not, run the set of commands here.\nWe are also going to utilize the cht-deploy script from the cht-core repo. If you don’t already have that, clone it.","set-up-environment-variables#Set Up Environment Variables":"Be sure to replace both and with your actual username and password. As well, update to the CouchDB URL from the Docker Compose setup:\nexport COUCH_URL=http://:@:5984"},"title":"To K3s Single-Node"},"/hosting/cht/migration/migration-to-4x-docker/":{"data":{"":"The hosting architecture differs entirely between CHT-Core 3.x and CHT-Core 4.x. Migrating data from an existing instance running CHT 3.x requires a few manual steps. This guide will present the required steps while using a migration helping tool, called couchdb-migration. This tool interfaces with CouchDb, to update shard maps and database metadata. By the end of this guide, your CHT-Core 3.x CouchDb will be down and CHT-Core 4.x ready to be used. Using this tool is not required, and the same result can be achieved by calling CouchDb endpoints directly. Consult CouchDB documentation for details about moving shards.\nTip\nIf after upgrading you get an error, Cannot convert undefined or null to object - please see issue #8040 for a work around. This only affects CHT 4.0.0, 4.0.1, 4.1.0 and 4.1.1. It was fixed in CHT 4.2.0.\n1. Install CHT data migration tool Open your terminal and run these commands. They will create a new directory, download a docker compose file and download the required docker image.\nmkdir -p ~/couchdb-migration/ cd ~/couchdb-migration/ curl -s -o ./docker-compose.yml https://raw.githubusercontent.com/medic/couchdb-migration/main/docker-compose.yml docker compose up For the following steps, the tool needs access to your CouchDb installation. To allow this access, you will need to provide a URL to your CouchDB installation that includes authentication. If your installation exposes a different port for CouchDb cluster API endpoints, export that port. If running against an installation of MedicOS, make sure that the protocol of the URL is https.\nexport COUCH_URL=http(s)://@: For simplicity, you could store these required values in an .env file:\ncat \u003e ${HOME}/couchdb-migration/.env \u003c\u003c EOF COUCH_URL=http(s)://@: EOF 2. Prepare CHT-Core 3.x installation for upgrading Backup your data! If you encounter any problems executing the instructions of this guide, you should be able to restore your CHT 3X instance using the backup data. Double check your backups are up to date. Ensure no changes happen to your CouchDB data in your CHT 3.x server after you have begun the migration process.\nTo minimize downtime when upgrading, it’s advised to prepare the 3.x installation for the 4.x upgrade, and pre-index all views that are required by 4.x.\nThe migration tool provides a command which will download all 4.x views to your 3.x CouchDb, and initiate view indexing. is any version at or above 4.0.0:\ncd ~/couchdb-migration/ docker compose run couch-migration pre-index-views Once view indexing is finished, proceed with the next step.\nCaution\nIf this step is omitted, 4.x API will fail to respond to requests until all views are indexed. Depending on the size of the database, this could take many hours, or even days.\n3. Save existent CouchDb configuration Some CouchDb configuration values must be ported from existent CouchDb to the 4.x installation. Store them in a safe location before shutting down 3.x CouchDb. Use the migration tool to obtain these values:\ncd ~/couchdb-migration/ docker compose run couch-migration get-env a) CouchDB secret Used in encrypting all CouchDb passwords and session tokens.\nb) CouchDb server uuid Used in generating replication checkpointer documents, which track where replication progress between every client and the server, and ensure that clients don’t re-download or re-upload documents.\n4. Locate and make a copy of your CouchDb Data folder a) If running in MedicOS, CouchDB data folder can be found at /srv/storage/medic-core/couchdb/data.\nb) If running a custom installation of CouchDb, data would be typically stored at /opt/couchdb/data.\n5. Stop your 3.x CouchDb / CHT-Core installation and launch 4.x CouchDb installation Depending on your project scalability needs and technical possibilities, you must decide whether you will deploy CouchDb in a single node or in a cluster with multiple nodes. Consult this guide about clustering and horizontal scalability to make an informed decision. Note\nYou can start with single node and then change to a cluster. This involves running the migration tool again to distribute shards from the existent node to the new nodes.\nDepending on your choice, follow the instructions that match your deployment below:\nSingle node a) Download 4.x single-node CouchDb docker-compose file:\nmkdir -p ~/couchdb-single/ cd ~/couchdb-single/ curl -s -o ./docker-compose.yml https://staging.dev.medicmobile.org/_couch/builds_4/medic:medic:/docker-compose/cht-couchdb.yml a) Make a copy of the 3.x CouchDb data folder from step 4.\nb) Set the correct environment variables:\ncat \u003e ${HOME}/couchdb-single/.env \u003c\u003c EOF COUCHDB_USER= COUCHDB_PASSWORD= COUCHDB_SECRET= COUCHDB_UUID= COUCHDB_DATA= EOF c) Start 4.x CouchDb.\ncd ~/couchdb-single/ docker compose up -d d) Update couchdb-migration environment variables. Depending on your setup, it’s possible you will need to update CHT_NETWORK and COUCH_URL to match the newly started 4.x CouchDb. From this point on, the couchdb-migration container should connect to the same docker network as your CouchDb installation, in order to access APIs that are only available on protected ports. Correctly setting CHT_NETWORK is required for the next steps to succeed. To get the correct docker-network-name and docker-service-name, you can use docker network ls to list all networks and docker network inspect to get the name of the CouchDb container that exists in this network.\ncat \u003e ${HOME}/couchdb-migration/.env \u003c\u003c EOF CHT_NETWORK= COUCH_URL=http://@: EOF e) Check that couchdb-migration can connect to the CouchDb instance and that CouchDb is running. You’ll know it is working when the docker compose call exits without errors and logs CouchDb is Ready.\ncd ~/couchdb-migration/ docker compose run couch-migration check-couchdb-up f) Change metadata to match the new CouchDb node\ncd ~/couchdb-migration/ docker compose run couch-migration move-node g) Run the verify command to check whether the migration was successful.\ndocker compose run couch-migration verify If all checks pass, you should see a message Migration verification passed. It is then safe to proceed with starting CHT-Core 4.x, using the same environment variables you saved in ~/couchdb-single/.env.\nh) Remove unnecessary containers.\nMulti node a) Download 4.x clustered CouchDb docker-compose file:\nmkdir -p ~/couchdb-cluster/ cd ~/couchdb-cluster/ curl -s -o ./docker-compose.yml https://staging.dev.medicmobile.org/_couch/builds_4/medic:medic:/docker-compose/cht-couchdb-clustered.yml b) Create a data folder for every one of the CouchDb nodes. If you were going to a 3 cluster node, this would be:\nmkdir -p ~/couchdb-data/main mkdir -p ~/couchdb-data/secondary1 mkdir -p ~/couchdb-data/secondary2 c) Copy the 3.x CouchDb data folder into ~/couchdb-data/main, which will be your main CouchDb node. This main node will create your cluster and the other secondary nodes will be added to it. In main’s environment variable file, define CLUSTER_PEER_IPS. In all other secondary nodes, declare the COUCHDB_SYNC_ADMINS_NODE variable instead.\nd) Create a shards and a .shards directory in every secondary node folder.\ne) Set the correct environment variables:\ncat \u003e ${HOME}/couchdb-cluster/.env \u003c\u003c EOF COUCHDB_USER= COUCHDB_PASSWORD= COUCHDB_SECRET= COUCHDB_UUID= DB1_DATA= DB2_DATA= DB3_DATA= EOF f) Start 4.x CouchDb.\ncd ~/couchdb-cluster/ docker compose up -d g) Update couchdb-migration environment variables. Depending on your setup, it’s possible you will need to update CHT_NETWORK and COUCH_URL to match the newly started 4.x CouchDb. From this point on, the couchdb-migration container should connect to the same docker network as your CouchDb installation, in order to access APIs that are only available on protected ports. Correctly setting CHT_NETWORK is required for the next steps to succeed. To get the correct docker-network-name and docker-service-name, you can use docker network ls to list all networks and docker network inspect to get the name of the CouchDb container that exists in this network.\ncat \u003e ${HOME}/couchdb-migration/.env \u003c\u003c EOF CHT_NETWORK= COUCH_URL=http://@: EOF h) Check that couchdb-migration can connect to the CouchDb instance and that CouchDb is running. You’ll know it is working when the docker compose call exits without errors and logs CouchDb Cluster is Ready.\ncd ~/couchdb-migration/ docker compose run couch-migration check-couchdb-up i) Generate the shard distribution matrix and get instructions for final shard locations.\ncd ~/couchdb-migration/ shard_matrix=$(docker compose run couch-migration generate-shard-distribution-matrix) docker compose run couch-migration shard-move-instructions $shard_matrix j) Follow the instructions from the step above and move the shard files to the correct location, according to the shard distribution matrix. This is a manual step that requires to physically move data around on disk.\nExample of moving one shard from one node to another:\n/couchdb_data_main /.delete /_dbs.couch /_nodes.couch /_users.couch /.shards /00000000-15555554 /2aaaaaaa-3ffffffe /3fffffff-55555553 /6aaaaaa9-7ffffffd /7ffffffe-95555552 /15555555-2aaaaaa9 /55555554-6aaaaaa8 /95555553-aaaaaaa7 /shards /00000000-15555554 /2aaaaaaa-3ffffffe /3fffffff-55555553 /6aaaaaa9-7ffffffd /7ffffffe-95555552 /15555555-2aaaaaa9 /55555554-6aaaaaa8 /95555553-aaaaaaa7 /couchdb_data_secondary /.shards /shards After moving two shards: 55555554-6aaaaaa8 and 6aaaaaa9-7ffffffd\n/couchdb_data_main /.delete /_dbs.couch /_nodes.couch /_users.couch /.shards /00000000-15555554 /2aaaaaaa-3ffffffe /3fffffff-55555553 /7ffffffe-95555552 /15555555-2aaaaaa9 /95555553-aaaaaaa7 /shards /00000000-15555554 /2aaaaaaa-3ffffffe /3fffffff-55555553 /7ffffffe-95555552 /15555555-2aaaaaa9 /95555553-aaaaaaa7 /couchdb_data_secondary /.shards /6aaaaaa9-7ffffffd /55555554-6aaaaaa8 /shards /6aaaaaa9-7ffffffd /55555554-6aaaaaa8 k) Change metadata to match the new shard distribution. We declared $shard_matrix in step “g” above, so it is still set now:\ndocker compose run couch-migration move-shards $shard_matrix l) Remove old node from the cluster:\ndocker compose run couch-migration remove-node couchdb@127.0.0.1 j) Run the verify command to check whether the migration was successful.\ndocker compose run couch-migration verify If all checks pass, you should see a message Migration verification passed. It is then safe to proceed with starting CHT-Core 4.x, using the same environment variables you saved in ~/couchdb-cluster/.env.\nk) Remove unnecessary containers.\n6. Cleanup It’s very important to remove temporary containers that were used during migration and containers that deployed the previous CHT-Core 3.x installation. Only follow this step after making sure your CHT-Core 4.x installation is ready and can be used.\nWarning\nEven if these containers are stopped, depending on their configuration, they could restart when the Docker engine is restarted, for example on system reboot.","1-install-cht-data-migration-tool#1. Install CHT data migration tool":"","2-prepare-cht-core-3x-installation-for-upgrading#2. Prepare CHT-Core 3.x installation for upgrading":"","3-save-existent-couchdb-configuration#3. Save existent CouchDb configuration":"","4-locate-and-make-a-copy-of-your-couchdb-data-folder#4. Locate and make a copy of your CouchDb Data folder":"","5-stop-your-3x-couchdb--cht-core-installation-and-launch-4x-couchdb-installation#5. Stop your 3.x CouchDb / CHT-Core installation and launch 4.x CouchDb installation":"","6-cleanup#6. Cleanup":"","a-couchdb-secret#a) CouchDB secret":"","b-couchdb-server-uuid#b) CouchDb server uuid":"","multi-node#Multi node":"","risks-for-not-removing-containers-include#Risks for not removing containers include":"resource contention - where your new CHT installation might not have access to certain resources (for example network ports) because they are already used. data corruption - when multiple CouchDb installations are accessing the same data source. data loss - when multiple CouchDb installation are exposing on the same port. To get a list of all containers run:\ndocker ps -a From this list, you should find the names for :\ncontainers that ran CHT-Core 3.x, likely named medic-os and haproxy. temporary single node CouchDb containers, likely named couchdb-single-couchdb-1 temporary clustered CouchDb containers, likely named couchdb-cluster-couchdb-2.local-1, couchdb-cluster-couchdb-1.local-1 and couchdb-cluster-couchdb-3.local-1 To remove containers, run these commands:\ndocker stop docker rm","single-node#Single node":""},"title":"To Docker Single-Node"},"/hosting/cht/migration/preparing-for-4/":{"data":{"":"Note\nThis guide applies to both self-hosted and Medic hosted deployments.","active#Active":"A regression added in 4.6.0, causes the contact selector functionality to not work as expected when loading contact data into the inputs group when the group is non-relevant. More details, including a viable workaround, are documented on the issue.","active-user-counts#Active user counts":"You can check the monitoring API with curl to check active users for the last 30 days. Remember that the users can send a telemetry report once per day, so this active user count will be less than the counts from the query above.\nWe’ll use jq to filter out the unrelated metrics. Be sure to replace CHT-URL-HERE with your production CHT URL:\ncurl -s https://CHT-URL-HERE/api/v2/monitoring\\?connected_user_interval\\=30 | \\ jq '. | {connected_users}' This call will show the JSON with active users for the last 30 days:\n{ \"connected_users\": { \"count\": 80 } }","cht-android-v100#CHT Android v1.0.0+":"This change is straightforward in that CHT 4.x no longer supports versions before 1.0.0, so deployments need to update their Play Store app. As of this writing, CHT Android is at 1.0.4. See the Android docs on how to update your app and release it. Note that Google’s Play Store can often have delays which deployments have no control over. Again, the sooner you start, the better.","cht-conf#CHT Conf":"CHT Conf has been upgraded to be aware of forms written to work in CHT 3.x that may not work in CHT 4.x. Upgrading, can help you identify forms in need of fixing when pushing to dev instances as outlined below.\nTo upgrade app, run npm update cht-conf","cht-conf-test-harness#cht-conf-test-harness":"The cht-conf-test-harness has been upgraded (in version 3.x of the cht-conf-test-harness) to support testing CHT 4.x forms. When preparing to upgrade to CHT 4.x, it is important to use the latest version of the cht-conf-test-harness for automated testing.\n(Note that the 3.x version of cht-conf-test-harness only supports CHT 4.x. If you are still running CHT 3.x, you should continue using cht-conf-test-harness 2.x.)\nThe breaking Enketo changes included in CHT 4.x are reflected in cht-conf-test-harness 3.x. Running your automated tests with the latest test harness can help identify potential form issues.","community-cht-upgrade-helper#Community cht-upgrade-helper":"An unofficial cht-upgrade-helper utility has been created by a community member that can help flag form elements that should be manually reviewed before upgrading to 4.0.0. It is not officially supported by Medic and is provided as-is.","enketo#Enketo":"CHT 4.0 upgrades the version of Enketo used to render forms. This upgrade provides a ton of bug fixes and enhancements (particularly around ODK spec compliance) which will make the forms experience in the CHT even better! (For example, we now have proper support for repeats with a dynamic length, including the various XPath functions necessary to take full advantage of this functionality!) That being said, it does introduce a few changes which may affect the way your forms function (or even cause some forms to fail to load at all).","introduction#Introduction":"Medic uses Semantic Versioning (aka “SemVer”) which means that the CHT upgrade from the major 3.x version to the 4.x version denotes there are breaking changes. The key to a successful upgrade will be to understand and plan for these breaking changes. Aside from the Docker hosting infrastructure (out of scope for this prep document), the two breaking changes are around CHT Android and Enketo. Upgrading to CHT 4.0 can be quite time consuming, especially for large deployments that may need to do handset upgrades in a worst case. The sooner deployments start preparing for the upgrade, the easier it will be when it comes to the upgrade itself. Conveniently, all device and Android app changes to prepare for 4.x are backwards compatible with 3.x. Prepare now, so you will be ready to upgrade sooner than later!","known-issues#Known issues":"","layout#Layout":"The horizontal and horizontal-compact appearances are now deprecated (a warning will be displayed by cht-conf when uploading to the server). The columns, columns-pack, and columns-n appearances should be used instead. See the documentation for more details. Markdown syntax is now supported for all question labels (and not just note fields).","manual-testing#Manual testing":"You can also manually test your forms on a non-prod CHT instance. It is possible to test your forms against the new Enekto changes without having to uplift your non-prod CHT instance to the new 4.0 architecture.\nAn easy way of doing this is to use the CHT 3.x Docker Helper to deploy a 3.x CHT instance. After you have your dev instance up and running, use Horticulturalist to upgrade to the 3.17.0-FR-enketo-upgrade feature release:\nCOUCH_URL=https://medic:password@*your-my.local.ip.co-address*:8443/medic horti --local --install=3.17.0-FR-enketo-upgrade-beta.1 After pushing your app config (see “CHT Conf” above), you can proceed to go through each of your forms in a browser and on a device to ensure there’s no errors.","new-xpath-functions#New XPath functions":"Custom CHT functions: add-date - Adds the provided number of years/months/days/hours/minutes to a date value. ODK Functions: Repeats and other node sets: position - Returns the current iteration index within a repeat group. count/count-non-empty - Returns the number of elements in a repeat group. Now is re-calculated when the size of the repeat changes once - Returns the value of the given expression if the question’s value is empty. Otherwise, returns the current value of the question. checklist/weighted-checklist - Returns True when the required number of affirmative responses is given.","notable-changes-to-form-behavior#Notable changes to form behavior":"","resolved#Resolved":"The answer to a non-relevant question is not immediately cleared when the question becomes non-relevant and is still provided to XPath expressions that reference the question. When the form is submitted, the non-relevant answers will be cleared and any dependent XPath expressions will be re-evaluated. This behavior applies both to questions that were answered and later became non-relevant as well as to questions which have configured default values. This issue was resolved in CHT 4.6.0 and so only affects versions 4.0 - 4.5. In 3.x versions of the CHT you could simulate a bulleted list in a form label (e.g. a note) by using - or *. Now, in 4.x, the bullets are no longer properly displayed in the label due to this bug. This issue was resolved in CHT 4.6.0 and so only affects versions 4.0 - 4.5.","updated-xpath-functions#Updated XPath functions":"The format-date and format-date-time functions no longer accept month values that are \u003c= 0 (e.g. 1984-00-23). This is notable because some patterns for calculating dates based on an offset of a certain amount of years/months relied on this functionality (e.g. birth date). See the details below regarding the new add-date function for a cleaner way of calculating dates based on an offset. The behavior of the today function has changed to return the current date at midnight in the current timezone instead of at the current time. To get the current date and current time use the now function. decimal-date-time: The behavior of this function has changed with regard to the default timezone used when calculating the decimal value of a date that does not include any timezone information. (Note that the values from basic date questions do NOT include time zone information.) Previously, the timezone used in the calculation for dates with no timezone information was UTC. Now, the user’s current timezone will be used. Practically speaking, this means it is no longer safe to assume that the output from decimal-date-time, for a value from a basic date question, will be a whole number. Now it is likely that a decimal value will be returned (with the numbers after the decimal point representing the offset of the user’s timezone from UTC). Previously this function would accept various string parameters (e.g. date strings with various formats) as input. Now, the only string values it will only accept are ones formatted according to ISO 8601 (e.g. 2022-10-03). Strings containing date values should be parsed with the date function before calling decimal-date-time.","users-in-need-of-upgrade#Users in need of upgrade":"In the above table we can see there’s 4 users in the most recent month that are on version v0.11.0-webview. Let’s find their username so we can follow up with them directly. This query is hard coded for the current year (2022), the current month (3) and the version v0.11.0-webview. Be sure to update the query to fit your needs according to which month, year and version you need to search for:\nselect distinct doc#\u003e\u003e'{metadata,user}' as user, doc#\u003e\u003e'{device,deviceInfo,app,version}' as cht_android_version from couchdb_users_meta where doc#\u003e\u003e'{type}' = 'telemetry' and doc#\u003e\u003e'{device,deviceInfo,app,version}' is not null and doc#\u003e\u003e'{metadata,year}' = to_char(current_date, 'yyyy') and doc#\u003e\u003e'{metadata,month}' = to_char(current_date, 'FMMM') and doc#\u003e\u003e'{device,deviceInfo,app,version}' = 'v0.11.0-webview' In this case only one user is found:\nuser cht_android_version adj v0.11.0-webview A twist on this query is to remove the version filter. Do not remove the year and month filter as you will get duplicate values for users who have upgraded over time:\nselect distinct doc#\u003e\u003e'{metadata,user}' as user, doc#\u003e\u003e'{device,deviceInfo,app,version}' as cht_android_version from couchdb_users_meta where doc#\u003e\u003e'{type}' = 'telemetry' and doc#\u003e\u003e'{device,deviceInfo,app,version}' is not null and doc#\u003e\u003e'{metadata,year}' = to_char(current_date, 'yyyy') and doc#\u003e\u003e'{metadata,month}' = to_char(current_date, 'FMMM') This will give a list of every user and the version they’re running as of the current month and year:\nuser cht_android_version moh-west-chw-1 v1.0.1-4 moh-west-chw-12 v1.0.1-4 moh-west-chw-14 v1.0.1-4 moh-west-chw-3 v1.0.1-4 moh-west-chw-3 v1.0.1-5 moh-west-chw-4 v1.0.1-5 moh-west-chw-5 v1.0.1-4 moh-west-chw-6 v1.0.1-5 moh-west-chw-7 v1.0.1-5 moh-west-chw-8 v1.0.1-4 adj v0.11.0-webview","versions-in-use#Versions in use":"After you have published your app, you need to instruct your users to check the Play Store for upgrades. You can then check CHT Telemetry to see what CHT Android versions are in use. Assuming you have CHT Sync set up to pull in your CouchDB data to a PostgreSQL database, this query will list Android versions counts for the current year, broken out by month, year and version:\nSELECT concat(doc#\u003e\u003e'{metadata,year}','-',lpad(doc#\u003e\u003e'{metadata,month}',2,'0')) as telemetry_month, doc#\u003e\u003e'{device,deviceInfo,app,version}' as cht_android_version, count(distinct(doc#\u003e\u003e'{metadata,user}')) AS count_distinct_users, count(distinct(doc#\u003e\u003e'{metadata,deviceId}')) AS count_distinct_devices, count(*) AS count_telemetry FROM couchdb_users_meta WHERE doc#\u003e\u003e'{type}' = 'telemetry' AND doc#\u003e\u003e'{metadata,year}' = to_char(current_date, 'yyyy') AND doc#\u003e\u003e'{device,deviceInfo,app,version}' is not null GROUP BY telemetry_month, cht_android_version\tORDER BY telemetry_month DESC, cht_android_version DESC NULLS LAST Note that each user can submit many telemetry docs (count_telemetry), so the query breaks out users (count_distinct_users) and devices (count_distinct_devices) for the given month. This means that telemetry counts will be higher than the number of active users. As well, early in the current month, many users may not have had a chance to synchronize their telemetry data yet. For example, this report was run on the 5th of October, so the counts for all three tables are low. Refer to prior months in this case.\nNote\nIn some cases users are accessing the system via the progressive web app (PWA) or are online users. We see the cht_android_version field is empty in this case.\ntelemetry_month cht_android_version count_distinct_users count_distinct_devices count_telemetry 2022-10 v0.8.0-xwalk 8 8 12 2022-10 v0.8.0-webview 140 140 244 2022-10 v0.4.34 2 2 2 2022-10 10 10 12 2022-09 v0.8.0-xwalk 17 18 139 2022-09 v0.8.0-webview 350 351 3255 2022-09 v0.5.0 1 1 8 2022-09 v0.4.34 24 24 69 2022-09 64 61 143 2022-08 v0.8.0-xwalk 27 30 181 2022-08 v0.8.0-webview 365 376 3169 2022-08 v0.5.0 1 1 12 2022-08 v0.4.34 25 25 92 2022-08 81 86 158","xpath-expressions#XPath expressions":"Proper syntax in XPath expressions is more strictly enforced (e.g. parameters passed to the concat function must be separated by commas) The + operator can no longer be used to concatenate string values in an expression. Although previous versions of Enketo supported this functionality, it was never part of the ODK Specification. The concat function should be used instead. The behavior of expressions referencing invalid XPath paths (both absolute and relative) has changed. Previously, an invalid XPath path (one pointing to a non-existent node) was evaluated as being equivalent to an empty string. So, /invalid/xpath/path = '' would evaluate to true. Now that expression will evaluate to false since invalid XPath paths are no longer considered equivalent to empty strings. Validation has been added to cht-conf that can detect many invalid XPath paths and will provide an error when trying to upload a form. The value returned for an unanswered number question, when referenced from an XPath expression, has changed from 0 to NaN. This can affect existing logic comparing number values to 0."},"title":"Preparing to upgrade to CHT 4.0"},"/hosting/cht/requirements/":{"data":{"":"For production CHT deployments, Linux is recommended, with Ubuntu the most commonly used. For App Developer Hosting, Linux or macOS may be used. Windows can be used for either, but without recommendation. Per the Kubernetes vs Docker page, CHT Core can be deployed with either Docker or Kubernetes.","app-developer-hosting#App Developer Hosting":"This leverages Docker and requires:\n4 GB RAM / 2 CPU / 8 GB SSD Root Access TLS certificates - if using Docker Helper these are provided for you. Current version of docker or current version of Docker Desktop both of which include docker compose. Note that the older docker-compose is no longer supported.","docker#Docker":"8 GB RAM / 4 CPU / 100 GB SSD Root Access Static IP with DNS entry - will be used to provision a valid TLS certificate Current version of docker and docker compose","kubernetes#Kubernetes":"This guide refers to “Kubernetes”, and a lightweight orchestrator called K3s can be used for bare-metal hosts. The requirements below refer to K3s deployments but can be translated to other Kubernetes hosting. For example, for cloud hosting, CHT is widely deployed with Amazon Elastic Kubernetes Service (EKS). Additionally, the CHT is succesfully deployed in a large K3s deployment based on VMWare.\nBe sure to see the cht-deploy script that leverage the helm application.\n1 x HA control-plane nodes: 2 GB RAM / 2 CPU / 20 GB SSD 3 x worker servers: 16 GB RAM / 8 CPU / 50 GB SSD 500GB storage area network (SAN)* - Will host Persistent Volume Claims Root Access Static IP with DNS entry - Kubernetes will use this to provision a valid TLS certificate helm application K3s Current version of docker (used to bootstrap K3s) During some upgrades, up to 5x current space used by CouchDB can be needed.","production-hosting#Production Hosting":"","required-skills#Required skills":"In addition to the hosting requirements, system administrators should have a basic understanding of command line interface, Kubernetes, Docker, container orchestration, deployment, databases (CouchDB, Postgres), networking components (TLS, IP addresses, DNS)."},"title":"Requirements"},"/hosting/cht/upgrade-troubleshooting/":{"data":{"":"4.0.0 was released in November of 2022 so 4.x is mature and users have learned a number of important lessons on how to fix failed upgrades. Below are some specific tips as well as general practices on upgrading. There’s a concept of upgrades “getting stuck” which mainly means that after many many hours an upgrade is not making any progress. Most likely, this will manifest as the progress bars in the upgrade admin web UI not increasing and “sticking” at a certain percentage. An alternate possibility is that the progress bars disappear altogether.\nWarning\nAll tips apply to both Docker and Kubernetes based deployments unless otherwise specified. All upgrades are expected to succeed without issue. Do not attempt any fixes unless you actively have a problem upgrading.","a-go-to-fix-restart#A go-to fix: restart":"A safe fix for any upgrade getting stuck is to restart all services. Any views that were being re-indexed will be picked up where they left off without losing any work. This should be your first step when trouble shooting a stuck upgrade.\nIf you’re able to, after a restart go back into the admin web GUI and try to upgrade again. Consider trying this at least twice.","cht-400---422-view-indexing-can-become-stuck-after-indexing-is-finished#CHT 4.0.0 - 4.2.2: view indexing can become stuck after indexing is finished":"Issue #9617: Starting an upgrade that involves view indexing can become stuck after indexing is finished\nUpgrade process stalls while trying to index staged views:\nCHT Core admin UI showing upgrade progress bar stalled at 4%\nFix:\nWhen API goes stuck after view indexing, simply restart API. The admin upgrade page will say that the upgrade was interrupted, click retry upgrade. Depending on the state of the database, you might see view indexing again. Depending on how many docs need to be indexed, indexing might get stuck again. Go back to 1 if that happens. Eventually, when indexing jobs are short enough not to trigger a request hang, you will get the button to complete the upgrade.","cht-401---490-couchdb-restart-causes-all-services-to-go-down#CHT 4.0.1 - 4.9.0: CouchDB restart causes all services to go down":"Note - This is a Docker only issue.\nIssue #9284: A couchdb restart in single node docker takes down the whole instance. The upgrade will fail and you will see the logs below when you have this issue.\nHaproxy reports NOSRV errors:\n\u003c150\u003eJul 25 18:11:03 haproxy[12]: 172.18.0.9,,503,0,1001,0,GET,/,-,admin,'-',241,-1,-,'-' API logs:\nStatusCodeError: 503 - {\"error\":\"503 Service Unavailable\",\"reason\":\"No server is available to handle this request\",\"server\":\"haproxy\"} nginx reports:\n2024/07/25 18:40:28 [error] 43#43: *5757 connect() failed (111: Connection refused) while connecting to upstream, client: 172.18.0.1, Fix: Restart all services","cht-40x---43x-couchdb-crashes#CHT 4.0.x - 4.3.x: CouchDB Crashes":"Issue #9286: Starting an upgrade that involves view indexing can cause CouchDB to crash on large databases (\u003e30m docs). The upgrade will fail and you will see the logs below when you have this issue.\nHAProxy:\n\u003c150\u003eJul 26 20:57:39 haproxy[12]: 172.22.0.4,,503,0,0,0,GET,/,-,medic,'-',217,-1,-,'-' \u003c150\u003eJul 26 20:57:40 haproxy[12]: 172.22.0.4,,503,0,0,0,GET,/,-,medic,'-',217,-1,-,'-' \u003c150\u003eJul 26 20:57:41 haproxy[12]: 172.22.0.4,,503,0,0,0,GET,/,-,medic,'-',217,-1,-,'-' CouchDB\n[notice] 2024-07-26T20:52:45.229027Z couchdb@127.0.0.1 \u003c0.10998.4\u003e dca1387a05 haproxy:5984 172.22.0.4 medic GET /_active_tasks 200 ok 1 [notice] 2024-07-26T20:52:45.234397Z couchdb@127.0.0.1 \u003c0.10986.4\u003e 2715cd1e47 haproxy:5984 172.22.0.4 medic GET /medic-logs/_all_docs?descending=true\u0026include_docs=true\u0026startkey=%22upgrade_log%3A1722027165223%3A%22\u0026limit=1 200 ok 6 [notice] 2024-07-26T20:52:45.468469Z couchdb@127.0.0.1 \u003c0.11029.4\u003e 3bf85c6071 haproxy:5984 172.22.0.4 medic GET /_active_tasks 200 ok 1 Fix:\nCheck that all the indexes are warmed by loading them one by one in fauxton. Restart all services, retry upgrade from Admin GUI, do not cancel and upgrade. Here’s a screenshot showing the retry button: Admin web GUI showing Retry upgrade button in the lower right","cht-42x-upgrade-to-411----kubernetes-has-pods-stuck-in-indeterminate-state#CHT 4.2.x upgrade to 4.11  - Kubernetes has pods stuck in indeterminate state":"Note - This is a Kubernetes only issue.\nIssue*: A number of pods were stuck in indeterminate state, presumably because of failed garbage collection\nAPI Logs:\n2024-11-04 19:33:56 ERROR: Server error: StatusCodeError: 500 - {\"message\":\"Error: Can't upgrade right now. The following pods are not ready....\"} Running kubectl get po shows 3 pods with status of ContainerStatusUnknown:\nCLI screenshot showing 3 pods with STATUS of ContainerStatusUnknown\nFix: delete pods so they get recreated and start cleanly\nkubectl delete po 'cht.service in (api, sentinel, haproxy, couchdb)' * See eCHIS Kenya Issue #2579 - a private repo and not available to the public","cht-4xx-upgrade-to-4xx---no-more-free-disk-space#CHT 4.x.x upgrade to 4.x.x - no more free disk space":"Issue*: Couch is crashing during upgrade. The upgrade will fail and you will see the logs below when you have this issue. While there’s two log scenarios, both have the same fix.\nCouchDB logs scenario 1:\n[error] 2024-11-04T20:42:37.275307Z couchdb@127.0.0.1 \u003c0.29099.2438\u003e -------- rexi_server: from: couchdb@127.0.0.1(\u003c0.3643.2436\u003e) mfa: fabric_rpc:all_docs/3 exit:timeout [{rexi,init_stream,1,[{file,\"src/rexi.erl\"},{line,265}]},{rexi,stream2,3,[{file,\"src/rexi.erl\"},{line,205}]},{fabric_rpc,view_cb,2,[{file,\"src/fabric_rpc.erl\"},{line,462}]},{couch_mrview,finish_fold,2,[{file,\"src/couch_mrview.erl\"},{line,682}]},{rexi_server,init_p,3,[{file,\"src/rexi_server.erl\"},{line,140}]}] [error] 2024-11-04T20:42:37.275303Z couchdb@127.0.0.1 \u003c0.10933.2445\u003e -------- rexi_server: from: couchdb@127.0.0.1(\u003c0.3643.2436\u003e) mfa: fabric_rpc:all_docs/3 exit:timeout [{rexi,init_stream,1,[{file,\"src/rexi.erl\"},{line,265}]},{rexi,stream2,3,[{file,\"src/rexi.erl\"},{line,205}]},{fabric_rpc,view_cb,2,[{file,\"src/fabric_rpc.erl\"},{line,462}]},{couch_mrview,map_fold,3,[{file,\"src/couch_mrview.erl\"},{line,526}]},{couch_bt_engine,include_reductions,4,[{file,\"src/couch_bt_engine.erl\"},{line,1074}]},{couch_bt_engine,skip_deleted,4,[{file,\"src/couch_bt_engine.erl\"},{line,1069}]},{couch_btree,stream_kv_node2,8,[{file,\"src/couch_btree.erl\"},{line,848}]},{couch_btree,stream_kp_node,8,[{file,\"src/couch_btree.erl\"},{line,819}]}] [error] 2024-11-04T20:42:37.275377Z couchdb@127.0.0.1 \u003c0.7374.2434\u003e -------- rexi_server: from: couchdb@127.0.0.1(\u003c0.3643.2436\u003e) mfa: fabric_rpc:all_docs/3 exit:timeout [{rexi,init_stream,1,[{file,\"src/rexi.erl\"},{line,265}]},{rexi,stream2,3,[{file,\"src/rexi.erl\"},{line,205}]},{fabric_rpc,view_cb,2,[{file,\"src/fabric_rpc.erl\"},{line,462}]},{couch_mrview,map_fold,3,[{file,\"src/couch_mrview.erl\"},{line,526}]},{couch_bt_engine,include_reductions,4,[{file,\"src/couch_bt_engine.erl\"},{line,1074}]},{couch_bt_engine,skip_deleted,4,[{file,\"src/couch_bt_engine.erl\"},{line,1069}]},{couch_btree,stream_kv_node2,8,[{file,\"src/couch_btree.erl\"},{line,848}]},{couch_btree,stream_kp_node,8,[{file,\"src/couch_btree.erl\"},{line,819}]}] CouchDB logs scenario 2:\n[info] 2024-11-04T20:18:46.692239Z couchdb@127.0.0.1 \u003c0.6832.4663\u003e -------- Starting compaction for db \"shards/7ffffffe-95555552/medic-user-mikehaya-meta.1690191139\" at 10 [info] 2024-11-04T20:19:47.821999Z couchdb@127.0.0.1 \u003c0.7017.4653\u003e -------- Starting compaction for db \"shards/7ffffffe-95555552/medic-user-marnyakoa-meta.1690202463\" at 21 [info] 2024-11-04T20:21:24.529822Z couchdb@127.0.0.1 \u003c0.24125.4661\u003e -------- Starting compaction for db \"shards/7ffffffe-95555552/medic-user-lilian_lubanga-meta.1690115504\" at 15 Fix: Give CouchDB more disk and Restart all services\n* See eCHIS Kenya Issue #2578 - a private repo and not available to the public","considerations#Considerations":"When troubleshooting, consider making sure there are:\nBackups exist and restores have been tested Extra disk space is availabe (up to 5x!) The upgrade has been tested on a development instance with production data"},"title":"Troubleshooting upgrades"},"/hosting/couch2pg/":{"data":{"":"CHT couch2pg is deprecated. For data synchronization, refer to CHT Sync. Content in this section Setup and Development Migration Local couch2pg Setup Fixing couch2pg Memory Errors"},"title":"couch2pg"},"/hosting/couch2pg/couch2pg-oom-errors/":{"data":{"":"CHT couch2pg is deprecated. For data synchronization, refer to CHT Sync. Some times when couch2pg is replicating documents to postgres, it encounters very large info docs that are larger than the memory allocation of the document sync array and causes out-of-memory errors. To fix this, we need to delete this document so that couch2pg can proceed. Below are steps to follow to achieve this.\nReduce the size of the replicated docs to a value of say 4 in the couch2pg.conf file so that you can get within the range of the failing document. Clone the existing couch2pg repo so that you can run couch2pg locally Edit the file lib/importer.js in the couch2pg source code to be able to log the doc-id of the problem doc Edit just logs doc_ids to the console, around line 100 of importer.js console.log(row.doc._id); Get the remote couch2pg environment variable settings and export them into your profile terminal Create an ssh reverse tunnel from the postgres server to your laptop Run couch2pg locally so that you can see the doc-ids on console till it fails From the ids printed on console try loading the docs in the couchdb web access(Futon or Fauxton), the problem doc is usually big and won’t load This will help you identify the problem doc Curl the document to your pc and back it up Back up the document for further analysis Delete the document using curl curl --head \"\u003cHOST\u003e/\u003cDB\u003e/\u003cDOC_ID\u003e\" This returns something like HTTP/1.1 200 OK Cache-Control: must-revalidate Content-Length: 307 Content-Type: application/json Date: Tue, 25 Jun 2019 11:58:29 GMT ETag: \"2-6beeb38da9b096bacfe2fa769e5171be\" Server: CouchDB/2.3.1 (Erlang OTP/21) X-Couch-Request-ID: e4aa7a8696 X-CouchDB-Body-Time: 0 The ETag is the rev. Delete document with curl: curl -X DELETE \"\u003cHOST\u003e/\u003cDB\u003e/\u003cDOC_ID\u003e?rev=\u003cTHE_REV\u003e\""},"title":"Memory Errors"},"/hosting/couch2pg/couch2pg-setup/":{"data":{"":"CHT couch2pg is deprecated. For data synchronization, refer to CHT Sync. This tutorial will take you through setting up a couch2pg service.\nBy the end of the tutorial you should be able to:\nSet up a couch2pg service Run the couch2pg service CHT Couch2pg is a background process that moves data from Couchdb to Postgres through one way replication. It therefore, needs to have full read and write access to both the Postgres Database and Couchdb upstream. It is built in nodejs and can be set up as a background process using systemd. Review this architecture diagram to get a conceptual understanding of how couch2pg works.","brief-overview-of-key-environmental-variables#Brief Overview of key environmental variables":"COUCHDB_URL is the CouchDB instance URL with no trailing slash after /medic, format: https://[user]:[password]@localhost:[port]/medic\nPOSTGRESQL_URL is the PostgreSQL instance URL, format: postgres://[user]:[password]@localhost:[port]/[database name]\nCOUCH2PG_SLEEP_MINS is the interval size in minutes Couch2pg will use to poll Couchdb.\nCOUCH2PG_DOC_LIMIT is the number of documents Couch2pg will fetch in each query.\nCOUCH2PG_RETRY_COUNT is the amount of times couch2pg should retry a failed connection before it fails.\nCOUCH2PG_CHANGES_LIMIT is the number of changes to query since the last sync operation.\nTo read more about environmental variables, see the CHT Couch2pg readme.","known-issues#Known issues":"Node version compatibility Version 14 and 16 have been known to fail silently, and you can conveniently switch between node versions using nvm. Postgres authentication If the error Error: Unknown authenticationOk message typeMessage { name: 'authenticationOk', length: 23 } is observed, it is because Postgres is setup to use a different password encryption algorithm compared to what Couch2pg uses. Couch2pg was made to work with md5 which is the default method in Postgres v10-13. However, on postgres v14 the default method is scram-sha-256 detailed in the notes.\nThe setting can be updated in the Postgres configuration file which is in /etc/postgresql/14/main/postgres.conf in Ubuntu 20.04. The key password_encryption should be set to md5. After updating the setting, restart the Postgres service.\nTo confirm that the role used with couch2pg has an md5 encrypted password use the query SELECT rolname, rolpassword FROM pg_authid. The role password should start with md5.","prerequisites#Prerequisites":"You should have a functioning CHT instance installed locally\nYou should have a working database with a user that has full creation rights on the database. A database POSTGRES_DB_NAME and couch2pg user can be created and access granted using the following query:\nCREATE DATABASE POSTGRES_DB_NAME; CREATE USER couch2pg WITH ENCRYPTED PASSWORD 'mypassword'; GRANT ALL PRIVILEGES ON DATABASE POSTGRES_DB_NAME TO couch2pg; All steps below require you to have a local clone of the repo.\ngit clone https://github.com/medic/cht-couch2pg.git","required-resources#Required Resources":"Before you begin, you need to have some useful software and tools that are required for things to work:\nnodejs 8 up to 12. npm PostgreSQL 9.4 or later","setting-up-with-environment-variables#Setting up with environment variables":"Change directory into the repo’s directory where you cloned it: cd /path/to/cht-couch2pg\nInstall dependencies: npm ci\nExport the four variables with the correct values:\nexport POSTGRESQL_URL=postgres://[user]:[password]@localhost:[port]/[database name] export COUCHDB_URL=https://[user]:[password]@localhost:[port]/medic export COUCH2PG_DOC_LIMIT=1000 export COUCH2PG_RETRY_COUNT=5 export COUCH2PG_SLEEP_MINS=120 export COUCH2PG_CHANGES_LIMIT=1000 Run: node . If you want to set and save all possible variables:\nCopy sample.env to couch2pg.env: cp sample.env couch2pg.env\nEdit couch2pg.env to have all the variables you need.\nPOSTGRESQL_URL shouldn’t be edited as it is defined by the variables above it. Run: . ./couch2pg.env \u0026\u0026 node . To run cht-couch2pg in interactive mode, use node . -i. You will be prompted to answer questions to capture the same the environmental variables. For each question, you will be given suggestions for an answer.","using-docker-compose#Using docker compose":"The simplest way to run couch2pg is with docker compose which only needs configuration of the CouchDB instance URL. The compose file will then create a PostgreSQL container, connect to the CouchDB server and proceed to download couchDB documents to the PostgreSQL container:\nChange directory into the repo’s directory where you cloned it: cd /path/to/cht-couch2pg\nSet the URL for CouchDB in the COUCHDB_URL env variable. e.g.\nexport COUCHDB_URL=https://medic:password@192-168-68-26.local-ip.medicmobile.org:8442/medic Note\nThe CouchDB URL needs to be reachable from the docker container (i.e. not localhost).\nRun: docker compose up\nConnect to the PostgreSQL instance with login cht_couch2pg, password cht_couch2pg_password and database cht.\nNote\nTo set all possible variables or store the variables in configuration file, follow steps 5 and 6 above. To connect to the PostgreSQL instance, use the server from POSTGRES_SERVER_NAME, use login from COUCH2PG_USER, password from COUCH2PG_USER_PASSWORD and the database from POSTGRES_DB_NAME."},"title":"Local Setup"},"/hosting/couch2pg/migration/":{"data":{"":"CHT couch2pg is deprecated. For data synchronization, refer to CHT Sync.","assumptions--prerequisites#Assumptions \u0026amp; Prerequisites":"This guide assumes:\nYour CHT instance set up. Your Postgres server is set up. We’ll be using 10.195.130.93 in this documentation, but be sure to use your production Postgres address. The server needs to have pg_dump command available. Your CHT couch2pg (aka couch2pg) instance is set up. In this guide, we’ll assume it’s on the same server as the Postgres instance. You want to move both couch2pg instance and the Postgres data to a new server Further, be sure you meet the following prerequisites:\nHave provisioned a new Postgres server. The server needs to have pg_restore command available. Have access to existing Postgres server to be able to dump the data Have access to couch2pg instance, including the CHT Core credentials it’s using Have 3x the disk space as your data on both the old and new server - see below Note: If you don’t mind waiting and don’t want to deal with the trouble of copying large data files around as documented on this page, it will be easier to set up a clean install of couch2pg","cleanup#Cleanup":"When you’re 100% sure the migration was successful - don’t rush this part! - be sure to clean up file, servers and services that may still be running:\nDelete any *.tar and *.tar.gz files on the old Postgres server, on your computer and on the new Postgres server Stop couch2pg running on the old service If the data is truly not needed, drop the cht database on the old Postgres server Delete any backups of the old server and service","current-postgres-data-and-couch2pg-config#Current Postgres data and couch2pg config":"SSH to your postgres server Connect to the cht database and run this query: select count(*) from couchdb; We’ll use this in the next server to validate data was imported. On large datasets this may take a long while to run. Create a tarball of your database. This assumes you’re using the default cht name for your database with a username of couch2pg. Replace with your database and username if they’re different: pg_dump -U couch2pg -d cht -F tar -f couch2pg.tar gzip couch2pg.tar Note - If you get errors like query failed: ERROR: permission denied - run this command as the postgres user. Check the size of the gzip - we’ll use this in the next section: ls -al couch2pg.tar.gz Copy the resulting couch2pg.tar.gz file to your computer - scp is good for this! Check the values for all the environment variables for couch2pg. For example, here’s what our current couch2pg has for it’s config. In our case the POSTGRESQL_URL is localhost because we’re on the same server as the Postgres server. Be sure to use POSTGRESQL_URL and COUCHDB_URL that match your deployment: POSTGRESQL_URL=postgres://couch2pg:passwordHere1@localhost:5432/cht COUCHDB_URL=https://medic:passwordHere2@192-168-68-23.local-ip.medicmobile.org:10443/medic COUCH2PG_SLEEP_MINS=360 COUCH2PG_DOC_LIMIT=100 COUCH2PG_CHANGES_LIMIT=5000 COUCH2PG_RETRY_COUNT=5 COUCH2PG_USERS_META_DOC_LIMIT=50","dashboards#Dashboards":"Check the logs of couch2pg. Be sure there’s no errors and that materialized views are updating as expected. Complex materialized views can take hours to update. Don’t hesitate to let multiple periods of COUCH2PG_SLEEP_MINS (how frequently couch2pg runs) pass to ensure no errors occur.\nDouble check data is synchronizing by running a SQL query one of your dashboards uses. Make sure the data is both accurate and up to date. When you are confident the data is valid and working correctly, change any downstream sources, like Superset or Klipfolio, to use the new Postgres server IP and credentials\nIf at a later date you find there’s substantial errors, you can always change your downstream sources back to using the old Postgres server and attempt the migration again, fixing errors where needed.","disk-space-prerequisites#Disk space prerequisites":"You need 3 times the database size of free disk space on both the old and new Postgres servers. The 3x number comes from 3 sources of data:\nExisting Postgres database Dump of this same data via pg_dump making a compressed copy with gzip While you may not fully need all of 3x the disk space, having the extra space will be important to ensure you don’t accidentally fill up the disk on a production instance.\nFor example, on a Postgres server with 400GB disk with millions of documents in Postgres:\n175GB - Existing Postgres database 175GB - Dump of this same data via pg_dump ~60GB - making a compressed copy with gzip The server is healthy woth just over 40% of the disk used day to day. However, if you make a copy of the data (175GB + 175GB = 350GB), you now have the disk over 85% full with only 50GB free. You very likely will not have room to compress the data (175GB + 175GB + 60GB = 410GB).\nThe best work around is to increase the size of your Postgres server assuming you’re on a cloud provider that offers this. Another work around can be to run pg_dump from another computer with more disk space, but note that this will send the uncompressed data over the network which may take a long time. The same is true doing the restore over the network - it will be much slower than if you did it locally.\nTo show disk use of all databases, run this command, being sure to replace couch2pg with your user:\npsql -U couch2pg -c '\\l+'","instructions#Instructions":"","new-postgres-server-and-couch2pg-instance#New Postgres server and couch2pg instance":"Copy the couch2pg.tar.gz file to the new Postgres server SSH to the new Postgres server Make sure the gzip’s bytes on disk exactly match the one from step 4 in the prior section: ls -al couch2pg.tar.gz Uncompress the file: gunzip couch2pg.tar.gz Ensure your have a cht database already created on your new Postgres instance: CREATE DATABASE cht; Stop couch2pg if it is running Load the data from the dump file, again be sure to use the current user if couch2pg is the same for you: pg_restore -U couch2pg -d cht couch2pg.tar Connect to the cht database and run this query: select count(*) from couchdb; This should match the same number as on step 2 above. On large datasets this may take a long while to run. Start couch2pg, being sure to use the exact same environment variables as step 6 above, but possibly with different POSTGRES_* values if they’ve changed for the new Postgres server Check the logs of couch2pg and ensure there’s no errors.","time-to-copy#Time to copy":"Copying and loading large amounts of Postgres data can take a long time. If you make a mistake, going back to the first step can take more time. Don’t plan a production migration without doing at least one dry run! Do more dry runs until your confident that everything works as expected.\nConsider keeping your old couch2pg system running alongside your new one. This will allow you to fail over to the old one easily and it will be up to date with data from your CHT instance. It is safe to run multiple couch2pg instances against the same CHT instance.\nWhen you’re confident the new system is up and running, is stable and performant, go ahead and decommission the old system."},"title":"Migration"},"/hosting/couch2pg/setup-and-devlopment/":{"data":{"":"CHT couch2pg is deprecated. For data synchronization, refer to CHT Sync. Create read-only replicas of CouchDB data inside PostgresSQL.\nThe focus is specifically on CHT application data currently stored in CouchDB. If you are looking to have a read-only replica of CouchDB data for your application that isn’t the CHT, consider couch2pg.\nThis version is built for medic/cht-core#3.0.0 and above. For replicating data from earlier versions, see the 2.0.x branch and associated tags.","clone#Clone":"All steps below require you to have a local clone of the repo.\ngit clone https://github.com/medic/cht-couch2pg.git","commit-format#Commit format":"The commit format should follow this conventional-changelog angular preset. Examples are provided below.\nType Example commit message Release type Bug fixes fix(#123): infinite loop when materialized views doesn’t exist patch Performance perf(#789): Refresh materialized views faster patch Features feat(#456): Support real-time sync minor Non-code chore(#123): update README none Breaking perf(#2): remove support for pg 7 BREAKING CHANGE: postgres 7 no longer supported major","database-setup#Database setup":"cht-couch2pg supports PostgreSQL 9.4 and greater. The user passed in POSTGRESQL_URL needs to have full creation rights on the database in POSTGRES_DB_NAME.","error-checksum-failed-for-migration--when-upgrading-from-320-to-latest#Error \u0026ldquo;Checksum failed for migration \u0026hellip;\u0026rdquo; when upgrading from 3.2.0 to latest":"An SQL migration file was changed in version 3.2.0. This made upgrades from 3.1.x impossible, with the process crashing upon startup after the upgrade. See more details about the error.\nThis was fixed in version 3.2.1, by reverting the changes made to the migration file. Fresh installations of 3.2.0 should execute this SQL before upgrading:\nUPDATE xmlforms_migrations SET md5 = 'e0535c9fe3faef6e66a31691deebf1a8' WHERE version = '201606200952' AND md5 = '40187aa5ee95eda0e154ecefd7512cda'; See more details about the error in #78.","error-installing-deps-err--node-pre-gyp-install---fallback-to-build#Error installing deps \u003ccode\u003eERR! ... node-pre-gyp install --fallback-to-build\u003c/code\u003e":"When installing Node.js dependencies locally or building the docker image, you might get an error like:\n... npm ERR! code ELIFECYCLE npm ERR! errno 1 npm ERR! node-libcurl@1.3.3 install: `node-pre-gyp install --fallback-to-build` It is probably related to a gcc library that is failing with some versions of Node and npm, try with Node 10 without updating the npm version that comes with it.","in-docker-compose#In docker-compose":"The simplest way to run with docker-compose is to specify the CouchDB instance that your CHT is using. The compose file will then create a dockerized PostgresSQL instance, connect to the CouchDB server and proceed to download all the data to the PostgresSQL instance:\ncd into it this repo’s directory where you cloned it. When starting the docker compose services, you need to set the URL for CouchDB in the COUCHDB_URL env variable. This URL needs to be reachable the docker container (ie not localhost). Ensuring you’re in the same directory where you ran the curl call in the prior step, run: export COUCHDB_URL=https://medic:password@192-168-68-26.my.local-ip.co:8442/medic docker-compose up Connect to the PostgresSQL instance with login cht_couch2pg, password cht_couch2pg_password and database cht. As these are insecure, do not use with production data. See below for how to harden these. If you want to set all possible variables, or be able to store the variables in configuration file:\ncd into it this repo’s directory where you cloned it. Copy sample.env to couch2pg.env Edit couch2pg.env to have all the variables you need. Note that POSTGRESQL_URL shouldn’t be edited as it’s defined by the variables above it. If you’re using the built-in PostgresSQL server, be sure to keep the POSTGRES_SERVER_NAME set to postgres as this is the correct internal service name in docker. Be sure to also set secure passwords for all PostgresSQL accounts. Run docker and specify the environment file you just edited: docker-compose --env-file couch2pg.env up To connect to the PostgresSQL instance, use the server from POSTGRES_SERVER_NAME, use login from COUCH2PG_USER, password from COUCH2PG_USER_PASSWORD and the database from POSTGRES_DB_NAME.","interactive#Interactive":"Run it locally in interactive mode with node . -i and you will see the ASCII art:\n____ _ _ _____ ____ _ ____ ____ / ___| | | | | |_ _| / ___| ___ _ _ ___ | |__ |___ \\ | _ \\ __ _ | | | |_| | | | _____ | | / _ \\ | | | | / __| | '_ \\ __) | | |_) | / _` | | |___ | _ | | | |_____| | |___ | (_) | | |_| | | (__ | | | | / __/ | __/ | (_| | \\____| |_| |_| |_| \\____| \\___/ \\__,_| \\___| |_| |_| |_____| |_| \\__, | |___/ Instead of environment variables, you will be prompted to answer the following questions. For each question, you will be given suggestions for an answer:\nEnter CHT’s couch url Enter cht-couch2pg postgres url Select the number of minutes interval between checking for updates Select the number of documents to grab concurrently. Increasing this number will cut down on HTTP GETs and may improve performance, decreasing this number will cut down on node memory usage, and may increase stability. Select the number of document ids to grab per change limit request. Increasing this number will cut down on HTTP GETs and may improve performance, decreasing this number will cut down on node memory usage slightly, and may increase stability. Select whether or not to have verbose logging. Select how many times to internally retry continued unsuccessful runs before exiting. If unset cht-couch2pg will retry indefinitely. If set it will retry N times, and then exit with status code 1 indefinitely Select the number of documents to grab concurrently from the users-meta database. Increasing this number will cut down on HTTP GETs and may improve performance, decreasing this number will cut down on node memory usage, and may increase stability. These documents are larger so set a limit lower than the docLimit","known-issues#Known issues":"","locally-with-environment-variables#Locally with environment variables":"cd into it this repo’s directory where you cloned it. Install dependencies: npm ci Export these four variables with the values you need.: export POSTGRESQL_URL=postgres://postgres:postgres@localhost:15432/postgres export COUCHDB_URL=https://admin:pass@localhost:5984/medic export COUCH2PG_DOC_LIMIT=1000 export COUCH2PG_RETRY_COUNT=5 Run: node . If you want to set and save all possible variables:\ncd into it this repo’s directory where you cloned it. Copy sample.env to couch2pg.env Edit couch2pg.env to have all the variables you need. Note that POSTGRESQL_URL shouldn’t be edited as it’s defined by the variables above it. Be sure to change POSTGRES_SERVER_NAME to where ever your postgress server is running. If it’s local, then use localost. The default value of postgres won’t work. Run: . ./couch2pg.env\u0026\u0026node .","node-and-npm#Node and npm":"You will need to install the following to run locally, but not for docker:\nNode.js 8.11.x up to 12.x.x. Must be an LTS release. LTS is designated with an even major version number. npm 6.x.x above NOTE: Currently, cht-couch2pg only runs in node versions 8, 10 and 12. Later versions of node have been known to fail.","prerequisites#Prerequisites":"","releasing#Releasing":"Create a pull request with prep for the new release. Get the pull request reviewed and approved. When doing the squash and merge, make sure that your commit message is clear and readable and follows the strict format described in the commit format section below. If the commit message does not comply, automatic release will fail. In case you are planning to merge the pull request with a merge commit, make sure that every commit in your branch respects the format.","running#Running":"","supported-environment-variables#Supported environment variables":"All three methods of running cht-couch2pg listed above use these variables:\nCOUCHDB_URL - CouchDB instance URL with no trailing slash after /medic, format: https://[user]:[password]@localhost:[port]/medic COUCH2PG_SLEEP_MINS - Number of minutes between synchronization. It defaults to 60. COUCH2PG_DOC_LIMIT - Number of documents cht-couch2pg fetches from CouchDB everytime. Suggested: 1000 COUCH2PG_RETRY_COUNT - Number of times cht-couch2pg will retry synchronizing documents from CouchDB after experiencing an error COUCH2PG_USERS_META_DOC_LIMIT - Number of documents to grab concurrently from the users-meta database. These documents are larger so set a limit lower than the docLimit. It defaults to 50. COUCH2PG_CHANGES_LIMIT - The number of document ids to fetch per change limit request. Suggested: 100 COUCH2PG_USER - The user that couch2pg will use to login in to the CouchDB server. Suggested cht_couch2pg COUCH2PG_USER_PASSWORD - The password that couch2pg will use to login in to the CouchDB server. POSTGRES_SERVER_NAME - The server or IP where the postgres server is. This should be set to postgres when using docker. POSTGRES_USER_NAME - The admin user for postgres in docker. Suggested: postgres_root POSTGRES_PASSWORD - The admin password for postgres in docker. POSTGRES_DB_NAME - The name of the PostgreSQL database to sync to.. Suggested: cht POSTGRES_PORT - Port where PostgresSQL can be found. Suggested: 5432 POSTGRESQL_URL - PostgresSQL instance URL, format: postgres://[user]:[password]@localhost:[port]/[database name] SYNC_DB_MEDIC - Whether to sync the content of the medic database. Suggested: true SYNC_DB_SENTINEL - Whether to sync the content of the medic-sentinel database. Suggested: true SYNC_DB_USER_META - Whether to sync the content of the medic-users-meta database. Suggested: true SYNC_DB_LOGS - Whether to sync the content of medic-logs database. Suggested: true SYNC_DB_USERS - Whether to sync the CouchDB _users database without security information. Suggested: true","tests#Tests":"Run tests with docker-compose:\ndocker-compose -f docker-compose.test.yml build cht-couch2pg docker-compose -f docker-compose.test.yml run cht-couch2pg grunt test Run tests in interactive watch mode with: docker-compose -f docker-compose.test.yml run cht-couch2pg npm run watch\nRun entrypoint script tests with\ndocker-compose -f docker-compose.test.yml run cht-couch2pg ./tests/bash/bats/bin/bats /app/tests/bash/test.bats"},"title":"Setup \u0026 Development"},"/hosting/medic/":{"data":{"":"Content in this section Migration from CHT 3.x to CHT 4.x in EKS - Kubernetes Deploy CHT Core on Medic hosted EKS"},"title":"At Medic"},"/hosting/medic/data-migration-3x-eks-to-4x-eks/":{"data":{"":"Like the Deploy to EKS guide, this guide is meant for Medic Teammates migrating Medic hosted CHT Core deployments. However, given there may be other users who will benefit from understanding the process, this document is published for all to read.\nCHT Core hosting architecture differs entirely between 3.x and 4.x. When both versions are running in Kubernetes, migrating data requires specific steps using the couchdb-migration tool. This tool interfaces with CouchDB to update shard maps and database metadata.\nTip\nIf after upgrading you get an error, Cannot convert undefined or null to object - see issue #8040 for a work around. This only affects CHT 4.0.0, 4.0.1, 4.1.0 and 4.1.1. It was fixed in CHT 4.2.0.","access-the-source-couchdb-3x#Access the Source CouchDB (3.x)":"# List all pods to find medic-os pod kubectl get pods -n $NAMESPACE # Access the medic-os pod kubectl exec -it -n $NAMESPACE -- bash","clone-the-3x-data-volume#Clone the 3.x Data Volume":"First, identify the volume ID from your 3.x data:\n# Get the PVC name kubectl get pvc -n $NAMESPACE # Get the volume ID from the PVC VOLUME_ID=$(kubectl get pvc -n $NAMESPACE -o jsonpath='{.spec.volumeName}') EBS_VOLUME_ID=$(kubectl get pv $VOLUME_ID -o jsonpath='{.spec.awsElasticBlockStore.volumeID}' | cut -d'/' -f4) echo \"Your 3.x EBS Volume ID is: $EBS_VOLUME_ID\" # Create a snapshot of the 3.x volume SNAPSHOT_ID=$(aws ec2 create-snapshot \\ --region eu-west-2 \\ --volume-id $EBS_VOLUME_ID \\ --description \"CHT 3.x to 4.x migration snapshot\" \\ --query 'SnapshotId' \\ --output text) echo \"Created snapshot: $SNAPSHOT_ID\" # Wait for the snapshot to complete aws ec2 wait snapshot-completed --snapshot-ids $SNAPSHOT_ID # Set cluster-specific variables # For development: AVAILABILITY_ZONE=\"eu-west-2b\" CLUSTER_NAME=\"dev-cht-eks\" # For production, comment out above and uncomment below: # AVAILABILITY_ZONE=\"eu-west-2a\" # CLUSTER_NAME=\"prod-cht-eks\" # Create a new volume from the snapshot NEW_VOLUME_ID=$(aws ec2 create-volume \\ --region eu-west-2 \\ --availability-zone $AVAILABILITY_ZONE \\ --snapshot-id $SNAPSHOT_ID \\ --volume-type gp2 \\ --query 'VolumeId' \\ --output text) echo \"Created new volume: $NEW_VOLUME_ID\" # Tag the new volume for Kubernetes use aws ec2 create-tags \\ --resources $NEW_VOLUME_ID \\ --tags Key=kubernetes.io/cluster/$CLUSTER_NAME,Value=owned Key=KubernetesCluster,Value=$CLUSTER_NAME # Verify your tags took effect aws ec2 describe-volumes --region eu-west-2 --volume-id $NEW_VOLUME_ID | jq '.Volumes[0].Tags'","deploy-cht-4x-with-existing-data#Deploy CHT 4.x with Existing Data":"Create a values.yaml file using the volume ID from the previous step:\nFor single node deployment, create a YAML file with this contents, being sure to update:\n(two occurrences) - 4.x version you’re upgrading to - retrieved from get-env call above - retrieved from get-env call above - needs to be the same as used in 3.x - likely medic - retrieved from get-env call above - Size of original 3.x EBS volume, eg 100Mi for 100 Megabytes or 100Gi for 100 Gigabytes (two occurrences) - For production use prod-couchdb-only, for dev use dev-couchdb-only - For production use prod-cht-alb, for dev use dev-cht-alb - For production use prod, for dev use dev - For production use SRE, for dev use QA - For production use your-url.app.medicmobile.org, for dev use your-url.dev.medicmobile.org load_balancer - For dev, use: dualstack.k8s-devchtalb-3eb0781cbb-694321496.eu-west-2.elb.amazonaws.com For prod, use: k8s-prodchtalb-dcc00345ac-1792311525.eu-west-2.elb.amazonaws.com certificate - Inquire what the latest certificates are. For 2024 dev, use: arn:aws:iam::720541322708:server-certificate/2024-wildcard-dev-medicmobile-org-chain. For 2024 prod, use: arn:aws:iam::720541322708:server-certificate/2024-wildcard-app-medicmobile-org-chain. - NEW_VOLUME_ID from previous step, is volume containing 3.x data project_name: \"\" namespace: \"\" chtversion: upstream_servers: docker_registry: \"public.ecr.aws/medic\" builds_url: \"https://staging.dev.medicmobile.org/_couch/builds_4\" upgrade_service: tag: 0.32 couchdb: password: \"\" secret: \"\" user: \"\" uuid: \"\" clusteredCouch_enabled: false couchdb_node_storage_size: \"\" toleration: key: \"\" operator: \"Equal\" value: \"true\" effect: \"NoSchedule\" ingress: annotations: groupname: \"\" tags: \"Environment=,Team=\" certificate: \"\" host: \"\" hosted_zone_id: \"Z3304WUAJTCM7P\" load_balancer: \"\" environment: \"remote\" cluster_type: \"eks\" cert_source: \"eks-medic\" couchdb_data: preExistingDataAvailable: \"true\" dataPathOnDiskForCouchDB: \"storage/medic-core/couchdb/data\" partition: \"0\" ebs: preExistingEBSVolumeID-1: \"\" preExistingEBSVolumeSize: \"\" A Note about the following section:\ncouchdb_data: preExistingDataAvailable: \"true\" dataPathOnDiskForCouchDB: \"storage/medic-core/couchdb/data\" # Use subPath from 3.x instance partition: \"0\" The value for partition is usually \"0\" - not partitioned. If you would like to change this, you can go to your 3.x pod and run df -h and observe if the existing data is on a specific partition. You then update this value to be the partition number.\nFor a clustered deployment, create a YAML file with this contents, being sure to update:\n(two occurrences) - 4.x version you’re upgrading too - retrieved from get-env call above - retrieved from get-env call above - needs to be the same as used in 3.x - likely medic - retrieved from get-env call above - Size of original 3.x EBS volume, eg 100Mi for 100 Megabytes or 100Gi for 100 Gigabytes (two occurrences) - For production use prod-couchdb-only, for dev use dev-couchdb-only - For production use prod-cht-alb, for dev use dev-cht-alb - For production use prod, for dev use dev - For production use SRE, for dev use QA - For production use your-url.app.medicmobile.org, for dev use your-url.dev.medicmobile.org - For dev, use: dualstack.k8s-devchtalb-3eb0781cbb-694321496.eu-west-2.elb.amazonaws.com For prod, use: k8s-prodchtalb-dcc00345ac-1792311525.eu-west-2.elb.amazonaws.com - Inquire what the latest certificates are. For 2024 dev, use: arn:aws:iam::720541322708:server-certificate/2024-wildcard-dev-medicmobile-org-chain. For 2024 prod, use: arn:aws:iam::720541322708:server-certificate/2024-wildcard-app-medicmobile-org-chain. - NEW_VOLUME_ID from previous step, is volume containing 3.x data project_name: \"\" namespace: \"\" chtversion: upstream_servers: docker_registry: \"public.ecr.aws/medic\" builds_url: \"https://staging.dev.medicmobile.org/_couch/builds_4\" upgrade_service: tag: 0.32 couchdb: password: \"\" secret: \"\" user: \"\" uuid: \"\" clusteredCouch_enabled: true couchdb_node_storage_size: \"\" clusteredCouch: # Only relevant if clusteredCouch_enabled is true noOfCouchDBNodes: 3 toleration: key: \"\" operator: \"Equal\" value: \"true\" effect: \"NoSchedule\" ingress: annotations: groupname: \"\" tags: \"Environment=,Team=\" certificate: \"\" host: \"\" hosted_zone_id: \"Z3304WUAJTCM7P\" load_balancer: \"\" environment: \"remote\" cluster_type: \"eks\" cert_source: \"eks-medic\" # Only need to specify nodes if deploying on k3s and want to use specific nodes for CouchDB pods #nodes: # node-1: # Only for k3s deployments # node-2: # Only for k3s deployments # node-3: # Only for k3s deployments couchdb_data: preExistingDataAvailable: \"true\" dataPathOnDiskForCouchDB: \"storage/medic-core/couchdb/data\" # Use subPath from 3.x instance partition: \"0\" ebs: preExistingEBSVolumeID-1: \"\" preExistingEBSVolumeID-2: \"\" # Leave empty for secondary nodes preExistingEBSVolumeID-3: \"\" # Leave empty for tertiary nodes preExistingEBSVolumeSize: \"\" A Note about the following section:\ncouchdb_data: preExistingDataAvailable: \"true\" dataPathOnDiskForCouchDB: \"storage/medic-core/couchdb/data\" # Use subPath from 3.x instance partition: \"0\" The value for partition is usually \"0\" - not partitioned. If you would like to change this, you can go to your 3.x pod and run df -h and observe if the existing data is on a specific partition. You then update this value to be the partition number.\nDeploy using cht-deploy script from cht-core repository:\ncd cht-core/scripts/deploy ./cht-deploy -f PATH_TO/values.yaml","initial-setup#Initial Setup":"# Set your namespace NAMESPACE=","run-pre-migration-commands-on-3x#Run Pre-Migration Commands on 3.x":"While still execed in the medic-os container, get credentials from 1Password and set them inside the pod:\nexport ADMIN_USER= export ADMIN_PASSWORD= # Set COUCH_URL export COUCH_URL=\"http://${ADMIN_USER}:${ADMIN_PASSWORD}@localhost:5984\" # Verify connection curl -s $COUCH_URL/_up Pre-index views to minimize downtime:\npre-index-views Warning\nIf pre-indexing is omitted, 4.x API will fail to respond to requests until all views are indexed. For large databases, this could take many hours or days.\nSave CouchDB configuration:\nget-env Save the output containing:\nCouchDB secret (used for encrypting passwords and session tokens) CouchDB server UUID (used for replication checkpointing) CouchDB admin credentials You can now exit the medic-os container by running exit.","set-up-migration-tool-inside-3x-pod#Set Up Migration Tool Inside 3.x Pod":"Once inside the pod, install required dependencies:\n# Add node apt repository and update apt curl -fsSL https://deb.nodesource.com/setup_16.x | bash - apt update # Ensure nodejs, npm and git are installed apt install -y nodejs npm git # clone repository git clone https://github.com/medic/couchdb-migration.git cd couchdb-migration npm ci --omit=dev # Create a global symlink to enable running commands directly # Note: This may require sudo if npm's global directories aren't writable npm link","verify-deployment-and-run-migration-commands#Verify Deployment and Run Migration Commands":"First verify CouchDB is running properly:\n# Check pod status kubectl get pods -n $NAMESPACE # For single node check CouchDB is up kubectl exec -it -n $NAMESPACE $(kubectl get pod -n $NAMESPACE -l cht.service=couchdb -o name) -- \\ curl -s http://localhost:5984/_up # For clustered setup (check all nodes) kubectl exec -it -n $NAMESPACE $(kubectl get pod -n $NAMESPACE -l cht.service=couchdb-1 -o name) -- \\ curl -s http://localhost:5984/_up Access the new CouchDB pod based on your deployment type.\nFor single node:\nkubectl exec -it -n $NAMESPACE $(kubectl get pod -n $NAMESPACE -l cht.service=couchdb -o name) -- bash For clustered setup (always use couchdb-1):\nkubectl exec -it -n $NAMESPACE $(kubectl get pod -n $NAMESPACE -l cht.service=couchdb-1 -o name) -- bash Once inside the pod, set up the migration tool again:\ncurl -fsSL https://deb.nodesource.com/setup_16.x | bash - apt install -y nodejs npm git git clone https://github.com/medic/couchdb-migration.git cd couchdb-migration npm ci --omit=dev # Create a global symlink to enable running commands directly # Note: This may require sudo if npm's global directories aren't writable npm link # Set up CouchDB connection export ADMIN_USER= export ADMIN_PASSWORD= export COUCH_URL=\"http://${ADMIN_USER}:${ADMIN_PASSWORD}@localhost:5984\" # Verify CouchDB is up and responding check-couchdb-up For single node deployment:\nmove-node verify For clustered deployment:\nCaution\nFor clustered setups, shards must be moved both in software (using the migration commands) and physically (the actual data must be moved between EBS volumes). Follow the instructions from shard-move-instructions carefully.\n# Generate distribution matrix shard_matrix=$(generate-shard-distribution-matrix) # Get movement instructions shard-move-instructions $shard_matrix # After moving shards according to instructions move-shards $shard_matrix # Remove old node from cluster remove-node couchdb@127.0.0.1 # Verify the migration verify"},"title":"Migration: 3.x EKS to 4.x EKS"},"/hosting/medic/deploy-on-eks/":{"data":{"":"While not directly available to the public who might be doing CHT Core development, having Medic’s process for using our Amazon Elastic Kubernetes Service (AWS EKS) publicly documented will help Medic employees new to EKS. As well, hopefully external developers looking to re-use Medic tools and process to use EKS will find it helpful.\nWhile these instructions assume you work at Medic and have access to private GitHub repositories, many of the tools are fully open source.","cloning-a-medic-hosted-instance#Cloning a Medic hosted instance":"Sometimes a Medic teammate will need to run tests on data from an instance hosted in a Medic EKS deployment. When cloning a production instance, use extreme caution as it will have real PII/PHI in it. This includes, but is not limited to:\nUsing a secure password Only ever share credentials over 1Password Deleting the instances, volume and snapshot when they’re no longer being used Otherwise, as Medic has selected AWS as it’s provider to host production instances, making clones is safe when the above basic security measures are followed.","command-line#Command Line":"Be sure you have these tools installed and repos cloned:\nawscli: version 2 or newer kubectl: Must be within one minor version of cluster. If cluster is 1.24.x, use 1.23.x, 1.24.x or 1.25.x. helm jq node version 22 or later. Be sure that npm was installed as well with node (it normally is)","debugging#Debugging":"A summary of the utilities in cht-core/scripts/deploy directory, assuming mrjones-dev namespace:\nlist all resources: ./troubleshooting/list-all-resources mrjones-dev view logs, assuming cht-couchdb-1 returned from prior command: ./troubleshooting/view-logs mrjones-dev cht-couchdb-1 describe deployment, assuming cht-couchdb-1 returned from 1st command: ./troubleshooting/describe-deployment mrjones-dev cht-couchdb-1 list all deployments: ./troubleshooting/list-all-resources mrjones-dev","first-time-setup#First time setup":"These steps only need to be run once!\nAfter you have created a ticket per “Request permission” above, you should get a link to sign up for AWS. Click the link and:\nCreate new password ensure it’s 10+ characters including one alpha (a-z) and one special (~!@#$%^\u0026*_-+=`|\\(){}[]:;\"'\u003c\u003e,.?/) character.\nSetup MFA. In top-right corner of browser, there is a drop-down menu with your username @ medic. Click that and then on “My Security Credentials”\nAssign an MFA device and give it the same name as your username: In AWS web GUI, click your name in upper right:\nSecurity Credentials scroll down to “Multi-factor authentication (MFA)” click “Assign MFA device” enter a “Device name” (should match username) “Select MFA device” that you’re using Create Access Keys for Command Line Interface: In AWS web GUI, click your name in upper right -\u003e Security Credentials -\u003e scroll down to “Access keys” -\u003e click “Create access key” -\u003e for use case choose “Command Line Interface” -\u003e click “Next” -\u003e enter description and click “Create access key”\nRun aws configure and place appropriate access keys during prompts. Use eu-west-2 region. It should look like this:\n$ aws configure AWS Access Key ID [None]: AWS Secret Access Key [None]: Default region name [None]: eu-west-2 Default output format [None]: Run the Update Kubeconfig command, assuming username is mrjones and namespace is mrjones-dev - be sure to place these with yours: aws eks update-kubeconfig --name dev-cht-eks --profile mrjones --region eu-west-2","getting-shell#Getting shell":"Sometimes you need to look at files and other key pieces of data that are not available with the current troubleshooting/view-logs script. In this case, getting an interactive shell on the pod can be helpful.\nFirst, get a list pods for your namespace: kubectl -n NAMESPACE get pods After finding the pod you’re interested, connect to the pod to get a shell: kubectl -n NAMESPACE exec -it PODNAME/CONTAINERNAME -- /bin/bash","invalid-apiversion-error#\u003ccode\u003einvalid apiVersion\u003c/code\u003e Error":"If you get the error:\nexec plugin: invalid apiVersion “client.authentication.k8s.io/v1alpha1” when running kubectl version\nYou might be using an version of kubernetes api client.authentication.k8s.io which is not supported by your kubectl client. This can sometimes happen in EKS clusters if aws cli is an older version, in most cases you need at least version 2 of aws cli. Check version by running: aws --version and note that version 2 cannot be installed through pip (See Command Line section above for installation instructions)","optional--autocomplete#Optional:  Autocomplete":"Both helm and kubectl have autocomplete libraries. For power users and beginners alike, it adds a lot of discoverability. This code is for zsh, but bash, fish and powershell are supported as well:\nsource \u003c(kubectl completion \"$(basename \"$SHELL\")\") source \u003c(helm completion \"$(basename \"$SHELL\")\") See helm and kubectl docs to automatically loading these on every new session.","overview#Overview":"The cloning process assumes you have access to EKS and to the snapshots and volumes you wish to clone and create. This is not a permission granted to normal teammates who use EKS, so check with SRE as needed.\nAfter checking your permissions, first find a snapshot of the data you’re wanting to clone. Only production data has automated snapshots, so when cloning a development instance, manually create a snapshot first. After finding the snapshot and its ID (e.g. snap-081d1cc18de16d8c7), create a new volume from this snapshot. Now label the volume so it’s flagged for EKS use. Finally, put your newly created volume ID (e.g. vol-047f57544f4085fb2) in a values.yml file to use with helm and the deploy script.\nRead on below for the exact steps on how to do this.","prerequisites#Prerequisites":"","references-and-debugging#References and Debugging":"More information on cht-deploy script is available in the CHT Core GitHub repository which includes specifics of the values.yaml file and more details about the debugging utilities listed below.","request-permission#Request permission":"By default, Medic teammates do not have EKS access and must file a ticket to request it:\nCreate a ticket to get your DNS and Namespace created for EKS, which should match each other. As an example, a mrjones-dev name space would match mrjones.dev.medicmobile.org DNS. The ticket should include requesting EKS access to be granted. Once the ticket in step one is complete, follow the CLI setup guide. NB - Security key (e.g. Yubikey) users need to add a TOTP MFA (Time-based, One-Time Password Multi-Factor Authentication) too! CLI requires the TOTP values (6-digit number) and security keys are not supported. Security keys can only be used on web logins.","sre-steps-for-granting-users-access-to-a-namespace#SRE Steps for granting users access to a namespace":"If you’re on the SRE/Infra team and want to grant a Medic teammate access to EKS:\nTools required: aws, eksctl, kubectl Create AWS User. Attach IAM policy: Force_MFA and share auto-generated password safely Have user log in and finish MFA, access key setup SRE adds you to mfa-required-users group Add the namespaces and users to tf/eks/dev/access/main.tf Run tofu apply in the folder tf/eks/dev/access Create identitymapping if needed: Reading the AWS guide for principal access may help here!","starting-and-stopping-aka-deleting#Starting and stopping (aka deleting)":"Login with eks-aws-mfa-login script in the infra repo:\n./eks-aws-mfa-login USERNAME TOTP_HERE Ensure you’re using dev EKS cluster:\nkubectl config use-context arn:aws:eks:eu-west-2:720541322708:cluster/dev-cht-eks If get an error no context exists with the name, change use-context to set-context in the command. This will create the entry the first time. Subsequent calls should use use-context.\nCreate a new values.yaml file by copying this one. Be sure to update these values after you create it:\nSingle node CouchDBMulti node CouchDB and - set both USERNAME-dev - for example mrjones-dev - put in a strong - this instance is exposed to the Internet! * - your username. For example: mrjones.dev.medicmobile.org and - set both USERNAME-dev - for example mrjones-dev - put in a strong - this instance is exposed to the Internet! * - your username. For example: mrjones.dev.medicmobile.org clusteredCouch_enabled - set to true * Note some characters are unsupported in password: :, @, \", ', etc. Be sure to enclose it in quotes \"\" and do not use spaces in your password. Your deployment will succeed but you won’t be able to log into the CHT instance. 5. Ensure you have the latest code of cht-core repo:\ngit checkout master;git pull origin Ensure you have node dependencies installed for cht-deploy script: cd scripts/deploy;npm install Run deploy, being sure to update PATH_TO to be where you saved it in the prior step: ./cht-deploy -f PATH_TO/values.yaml Delete it when you’re done: helm delete USERNAME-dev --namespace USERNAME-dev","steps#Steps":"Note that a number of these steps can be done either on the command line or in the AWS web admin GUI. Do it the way you feel most comfortable!\nAlways always be sure of which context you’re working on! Start off by setting your context to dev-cht-eks:\nkubectl config use-context arn:aws:eks:eu-west-2:720541322708:cluster/dev-cht-eks And then follow these steps:\nFind the ID of the snapshot by using the production URL to retrieve the ID and date of the latest snapshot. Be sure to replace moh-foo.app with the real URL of the instance (note: this doesn’t matter what context you’re on):\naws ec2 describe-snapshots --region=eu-west-2 --filters \"Name=tag:Address,Values='moh-foo.app.medicmobile.org'\" | jq '.Snapshots[0]' This should result with the following JSON from which you can both verify it is current, but also that it is the correct instance to get the SnapshotId value from. This JSON truncated for brevity:\n{ \"Description\": \"Created for policy: policy-43210483209 schedule: Default Schedule\", \"SnapshotId\": \"snap-432490821280432092\", \"StartTime\": \"2024-08-18T15:52:59.831000+00:00\", \"State\": \"completed\", \"VolumeId\": \"vol-4392148120483212\", \"VolumeSize\": 900, \"Tags\": [ { \"Key\": \"Address\", \"Value\": \"moh-foo.app.medicmobile.org\" }, { \"Key\": \"Name\", \"Value\": \"Production: moh-foo.app.medicmobile.org\" }, { \"Key\": \"Description\", \"Value\": \"4x foo production for bar\" } ] } Now that you found your snapshot ID, create a volume from it. Being sure to replace snap-432490821280432092 with your ID, call:\naws ec2 create-volume --region eu-west-2 --availability-zone eu-west-2b --snapshot-id snap-432490821280432092 Be sure to grab the VolumeId from the resulting JSON, vol-f9dsa0f9sad09f0dsa in this case:\n{ \"AvailabilityZone\": \"eu-west-2b\", \"CreateTime\": \"2024-08-23T21:31:27+00:00\", \"Encrypted\": false, \"Size\": 900, \"SnapshotId\": \"snap-432490821280432092\", \"State\": \"creating\", \"VolumeId\": \"vol-f9dsa0f9sad09f0dsa\", \"Iops\": 2700, \"Tags\": [], \"VolumeType\": \"gp2\", \"MultiAttachEnabled\": false } Run describe-volumes until that volume has a State of available:\naws ec2 describe-volumes --region eu-west-2 --volume-id vol-f9dsa0f9sad09f0dsa | jq '.Volumes[0].State' \"available\" Once you have that volume created and available, tag it with kubernetes.io/cluster/dev-cht-eks: owned and KubernetesCluster: dev-cht-eks:\naws ec2 create-tags --resources vol-f9dsa0f9sad09f0dsa --tags Key=kubernetes.io/cluster/dev-cht-eks,Value=owned Key=KubernetesCluster,Value=dev-cht-eks You can verify your tags took effect by calling describe-volumes again:\naws ec2 describe-volumes --region eu-west-2 --volume-id vol-f9dsa0f9sad09f0dsa | jq '.Volumes[0].Tags' Which should result in this JSON:\n[ { \"Key\": \"kubernetes.io/cluster/dev-cht-eks\", \"Value\": \"owned\" }, { \"Key\": \"KubernetesCluster\", \"Value\": \"dev-cht-eks\" } ] Switch to the production cluster and then find the subPath of the deployment you made the snapshot from. The COUCH-DB-NAME is usually cht-couchdb. But, it can sometimes be cht-couchdb-1 (check ./troubleshooting/list-deployments if you still don’t know). Including the use-context, the two calls are below. Note that troubleshooting directory is in the CHT Core repo:\nkubectl config use-context arn:aws:eks:eu-west-2:720541322708:cluster/prod-cht-eks ./troubleshooting/get-volume-binding | jq '.subPath' Which shows the path like this:\n\"storage/medic-core/couchdb/data\" Create a values.yml file from this template and edit the following fields:\nproject_name - likely your username followed by -dev. For example mrjones-dev namespace - likely the same as project name, your user followed by -dev. For example mrjones-dev chtversion - this should match the version you cloned from password - this should match the version you cloned from secret - this should match the version you cloned from user - use medic user uuid - this should match the version you cloned from couchdb_node_storage_size - use the same size as the volume you just cloned account-id - this should always be 720541322708 host - this should be your username followed by dev.medicmobile.org. For example mrjones.dev.medicmobile.org hosted_zone_id - this should always be Z3304WUAJTCM7P preExistingDataAvailable - set this to be true dataPathOnDiskForCouchDB - use the subPath you got in the step above. For example storage/medic-core/couchdb/data preExistingEBSVolumeID-1 - set this to be the ID from step 2. For example vol-f9dsa0f9sad09f0dsa preExistingEBSVolumeSize - use the same size as the volume you just cloned Deploy this to development per the steps above. NB - Be sure to call kubectl config use-context arn:aws:eks:eu-west-2:720541322708:cluster/dev-cht-eks before you call ./cht-deploy! Always create test instances on the dev cluster.\nLogin using the user and password set above, which should match the production instance.\nWhen you’re done with this deployment, you can delete it with helm:\nhelm delete USERNAME-dev --namespace USERNAME-dev Now that no resources are using the volume, you should delete it. If you created a snapshot, you should delete that as well. Be sure to replace vol-f9dsa0f9sad09f0dsa and snap-432490821280432092 with your actual IDs. You only need to delete the snapshot if you created it above, do no delete snapshots you did not create:\naws ec2 delete-volume --region eu-west-2 --volume-id vol-f9dsa0f9sad09f0dsa aws ec2 delete-snapshot --snapshot-id snap-432490821280432092"},"title":"Deploy to EKS"},"/hosting/monitoring/":{"data":{"":"Content in this section Introduction to monitoring and alerting CHT Watchdog Setup Production CHT Watchdog Custom Postgres metrics in CHT Watchdog Integrating CHT Watchdog CHT Watchdog Dashboards \u0026 Metrics Reference"},"title":"Monitoring and Alerting"},"/hosting/monitoring/dashboards/":{"data":{"":"","api-server#API Server":"API server metrics (see prometheus-api-metrics).","details#Details":"These 8 graphs show growth overtime of the respective sources. This is really great to get a timestamp for changes in growth which can then be further investigated to see what else changed.\nIf CHWs are reporting that they’re not seeing the data they’re expecting, or if syncing is taking a long time, the “Sentinel Backlog” graph is great first place to check. In this case, there’s small healthy spikes of backlog that resolved over a short amount of time. If there were gaps in data that would represent an outage. If there were an ever increasing backlog, that would suggest resource contention (CPU).","metrics-reference#Metrics Reference":"All CHT metrics in Prometheus:\nOpenMetrics name Type label(s) Description cht_api_* N/A API server metrics (see prometheus-api-metrics). Requires CHT Core 4.3.0 or later. Includes stats like server response time in seconds and response size in bytes. cht_conflict_count Gauge Number of doc conflicts which need to be resolved manually. cht_connected_users_count Gauge Number of users that have connected to the api recently. By default the time interval is 7 days. Otherwise it is equal to the connected_user_interval parameter value used when making the /monitoring request. cht_couchdb_doc_del_total Counter db The number of deleted docs in the db. cht_couchdb_doc_total Counter db The number of docs in the db. cht_couchdb_fragmentation Gauge db The fragmentation of the entire db (including view indexes) as stored on disk. A lower value is better. 1 is no fragmentation. cht_couchdb_size_bytes Gauge db, type The size in bytes of the database. This includes documents, metadata, and attachments, but does not include view indexes. Type: active is the size of the live data inside the database, while type: file value is the size of the database file on disk. Requires CHT Core 4.11.0 or later. cht_couchdb_update_sequence Counter db The number of changes in the db. cht_couchdb_view_index_size_bytes Gauge db, type, view_index The size in bytes of the view index. Type: active is the size of the live data inside the view, while type: file value is the size of the view as stored on disk. Requires CHT Core 4.11.0 or later. cht_date_current_millis Counter The current server date in millis since the epoch, useful for ensuring the server time is correct. cht_date_uptime_seconds Counter How long API has been running. cht_feedback_total Counter Number of feedback docs created usually indicative of client side errors. cht_messaging_outgoing_last_hundred Gauge group, status Counts of last 100 messages that have received status updates. cht_messaging_outgoing_total Counter status Counts of the total number of messages. cht_outbound_push_backlog_count Gauge Number of changes yet to be processed by Outbound Push. cht_replication_limit_count Gauge Number of users that exceeded the replication limit of documents. cht_sentinel_backlog_count Gauge Number of changes yet to be processed by Sentinel. cht_version N/A app, node, couchdb Version information for the CHT instance (recorded in labels)","overview#Overview":"This is the main dashboard for Watchdog. It gives you high level details on your CHT instance. Starting from the upper left and going from right to left you have:\nWatchdog title and link to docs CHT version information Growth of 4 main databases: This is good to check the health of your instance. Are you seeing the same growth day over day? Your users are probably good and successfully uploading documents. Do you see a drop off of growth? Maybe you deployed an app settings that changed or broke your deployment! CHT Uptime: How long since the last reboot Server time accurate: Is your server’s time in sync with the correct time Monthly active users: This is nice to compare with number of users in your database vs how many are active. From this you can derive your engagement rate User over replication limit: the number of users that are trying to replicate in excess of 10k docs DB Conflicts rate: Rate of creation of doc conflicts which need to be resolved manually. DB Fragmentation: The fragmentation of the db, lower is better, “1” is no fragmentation. Outbound push backlog: Number of changes yet to be processed by Outbound Push. If this is persistently above 0 you likely have a configuration error in your outbound push Sentinel backlog: Number of changes yet to be processed by Sentinel. If this is persistently above 0 you may have resource contention CHT Sync Backlog: Number of CouchDB changes that have not yet been processed by CHT Sync. Requires setup of SQL integration. Client Feedback/Error Rate: Number of feedback docs created usually indicative of client side errors. Alerts: Alerts that need attention. In this screenshot, you can see that the Client Feedback/Error Rate is too high and should be investigated. See alerts for more information.","replication#Replication":"Replication Apdex: A score of 100 means all successful syncs proceeded by the server are fast enough to satisfy user’s expectations (the sync completes in less than 3 mins). When the server takes longer than 3 minutes, users begin to be less satisfied and this ApDex number reduces. Users tolerate syncs which take between 3mins and 6mins. Users are frustrated by sync times over 6mins. See the Apdex Wikipedia article for more details.\nUser State Threshold Satisfied \u003c180s (3min) Tolerated \u003e= 180 (3min) \u003c 360s (6min) Frustrated \u003e= 360s (6min) Note that this is not the same as client side form Apdex."},"title":"Dashboards \u0026 Reference"},"/hosting/monitoring/integration/":{"data":{"":"","additional-flows#Additional Flows":"Your Prometheus instance from CHT Watchdog can ingest data from any supported data source accessible via an HTTPS request. These data sources might be hosted on the same server as CHT Core or on a completely different server.\nThe focus of this guide is to collect metrics on Docker container usage and performance from the server hosting our CHT Core instance using cAdvisor.\nflowchart LR subgraph core[\"cht.example.com\"] mon_api[\"Monitoring API (443)\"]:::client_node cAdvisor:::client_node end subgraph watchdog[\"watchdog.example.com\"] json[JSON Exporter] --\u003e Prometheus Prometheus --\u003e Grafana end mon_api --\u003e json cAdvisor[\"cAdvisor (8443)\"] --\u003e Prometheus Note that because CHT Core is listening on port 443 already, we’ll have cAdvisor listen on port 8443.\nBy reading this guide you should not only be able to set up cAdvisor, but also be familiar with extending CHT Watchdog to support any other vital metrics.","caddy-config-and-compose-files#Caddy Config and Compose files":"Like we did in the TLS section, we’ll add both a /home/ubuntu/Caddyfile and a /home/ubuntu/cht/compose/caddy-compose.yml.\nStarting with the Caddyfile, let’s assume your server’s DNS entry is cht.example.com. We can expose cAdvisor’s service running on localhost port 8443 with this compose file. This tells Caddy to reverse proxy requests to the public interface to the private Docker network interface on port 8080 where cAdvisor is running:\ncht.example.com:8443 { reverse_proxy cadvisor:8080 } Then we can add the compose file to run Caddy. Note that it’s mounting the config file we just created:\nservices: caddy: image: caddy:2-alpine restart: unless-stopped ports: - \"8443:8443\" volumes: - /home/ubuntu/Caddyfile:/etc/caddy/Caddyfile networks: - cht-net","cadvisor-compose-file#cAdvisor Compose file":"On your CHT instance, add a Docker composer file for the new cAdvisor service. Note this also includes a Redis caching layer. Also note that we’re reducing cAdvisors CPU usage by adding 3 extra flags in the command stanza. In our example, we’ve put this file in /home/ubuntu/cht/compose/cadvisor_compose.yml with these contents:\nservices: cadvisor: image: gcr.io/cadvisor/cadvisor:latest container_name: cadvisor volumes: - /:/rootfs:ro - /var/run:/var/run:rw - /sys:/sys:ro - /var/lib/docker/:/var/lib/docker:ro depends_on: - redis networks: - cht-net command: - \"--housekeeping_interval=30s\" - \"--docker_only=true\" - \"--disable_metrics=percpu,sched,tcp,udp,disk,diskIO,accelerator,hugetlb,referenced_memory,cpu_topology,resctrl\" redis: image: redis:latest container_name: redis networks: - cht-net","default-flow#Default Flow":"Let’s look at how the default deployment of Watchdog works when configured to only gather metrics from CHT Core’s monitoring API:\nflowchart LR subgraph core[\"cht.example.com\"] mon_api[\"Monitoring API (443)\"]:::client_node end subgraph watchdog[\"watchdog.example.com\"] json[JSON Exporter] --\u003e Prometheus Prometheus --\u003e Grafana end mon_api --\u003e json","going-beyond-basic-setup#Going beyond basic setup":"After you have done the setup of CHT Watchdog and configured it to run with TLS and have backups enabled, you may want to extend it to scrape other Prometheus data sources so that Grafana can send alerts on non-CHT Core metrics.\nThis guide uses example instances of CHT Core (cht.example.com) and CHT Watchdog (watchdog.example.com). When deploying, be sure to replace with your own hostnames.","import-grafana-dashboard#Import Grafana Dashboard":"Now that cAdvisor is running on your CHT Core instance and CHT Watchdog’s Prometheus has additional scrape configs to ingest the cAdvisor metrics, we can now visualize it in a Grafana Dashboard and then alert on it.\nLog into your Watchdog instance Click the upper left hamburger menu and click “Dashboards” Find the “New” button on the left, click and choose “Import” from the drop down On the next page, scroll down to find “Import via grafana.com”, enter ID 193 (for the Docker monitoring dashboard) and click “Load” Confirm the “Name” and “Folder” values and select “Prometheus” as the data source in the dropdown. Finally, click the “Import” button at the bottom of the page. That’s it! After following these steps, you should be looking at the cAdvisor dashboard as shown above. From here, you can both customize this dashboard as well as add alerts as needed.","integrating-with-cadvisor#Integrating with cAdvisor":"","load-new-compose-files-with-existing-ones#Load new Compose files with existing ones":"Now that you’ve added the new configuration files, we can load it alongside the existing ones. Assuming you’ve followed the Watchdog Setup, this would be:\ncd ~/cht-monitoring docker compose -f docker-compose.yml -f ../cadvisor-compose.yml up -d","on-cht-core#On CHT Core":"","on-cht-watchdog#On CHT Watchdog":"","scrape-config#Scrape config":"We’ll first create the ~/cadvisor-prometheus-conf.yml file and point the config to our CHT Core URL:\nscrape_configs: - job_name: 'cadvisor' scrape_interval: 5s scheme: 'https' static_configs: - targets: ['cht.example.com:8443'] CHT Watchdog allows you to use additional Docker Compose files to add as many additional Prometheus scrape configs as are needed. Here, we’ll create one in ~/cadvisor-compose.yml pointing to our cadvisor-prometheus-conf.yml file from above.\nservices: prometheus: volumes: - /root/cadvisor-prometheus-conf.yml:/etc/prometheus/scrape_configs/cadvisor.yml:ro","start-cadvisor-caddy-and-cht-core-with-docker#Start cAdvisor, Caddy and CHT Core with Docker":"Now that we have all the config files in place, you need to have Docker start everything together. This is so that the containers can see each other on the same CHT Net Docker network. You will need to specify each of the compose files every time you start, stop or restart CHT instance so all the services stay running and connected.\nAssuming you followed the production steps to install the CHT, you use this Compose call to first stop all containers and then start them all up, including the new services:\ncd /home/ubuntu/cht/upgrade-service docker stop $(docker ps --quiet) docker compose up --detach Note that the CHT Upgrade Service will process all Docker Compose file in the /home/ubuntu/cht/compose directory for us and we don’t need to explicitly specify them in the docker compose up command.","steps-to-new-integrations#Steps to new integrations":"While this is a specific example for cAdvisor, these same steps will be taken to extend Watchdog for other metrics:\nCHT Core: Create both cAdvisor and Caddy Docker Compose files CHT Core: Start the Caddy and a cAdvisor containers along with the CHT Core CHT Watchdog: Adding new scrape and compose configs CHT Watchdog: Restart the Prometheus and Grafana server to include the new scrape config mounts CHT Watchdog: Importing an existing cAdvisor dashboard from grafana.com After completing these steps, we now have Docker metrics we can alert on:\nScreenshot of Grafana Dashboard showing data from Prometheus\nRead on below on how to set this up!"},"title":"Integrating"},"/hosting/monitoring/introduction/":{"data":{"":"Be sure to see how to deploy a solution to monitor and alert on production CHT instances. Each deployment will experience different stresses on its resources. Be sure to tune any alerting levels in the case of a false positive so that you may avoid them in the future. Any thresholds for alerts, and even what is alerted on, is just a guideline, not a guarantee of uptime.","elements-types-and-samples#Elements, types and samples":"The names below are extrapolated from the paths in the JSON returned by the API and should be easy to find when viewing the Monitoring API URL on your CHT instance:\nName Type Example Value Conflict Count growth 23,318 CouchDB Medic Doc Count growth 16,254,271 CouchDB Medic Fragmentation growth 1.4366029665729645 CouchDB Sentinel Doc Count growth 15,756,449 CouchDB Sentinel Fragmentation growth 2.388733774539664 CouchDB Users Doc Count growth 535 CouchDB Users Fragmentation growth 2.356411021364134 CouchDB Users Meta Doc Count growth 10,761,549 Feedback Count growth 10,714,368 Messaging Outgoing State Due growth 3,807 Messaging Outgoing State Failed non-zero 0 Outbound Push Backlog non-zero 0 Sentinel Backlog non-zero 0 Date Uptime zero 1,626,508.148","explosive-growth#Explosive Growth":"Many of the values in the monitoring API do not mean much in isolation. For example if an instance has 10,714,278 feedback docs, is that bad? If it’s years old and has thousands of users, then this is normal. If it is 4 months old and has 100 users, this is a dire problem!\nYou should monitor these metrics for unexpected growth as measured by percent change over 24 hours. Ideally this can be subjectively calculated when it is more than 5% growth than the prior day. They’re marked as growth in the table below.","inside-the-cht#Inside the CHT":"The monitoring API was added in 3.9.0 and does not require any authentication and so can easily be used with third party tools as they do not need a CHT user account.\nAll metrics need to be monitored over time so that you can easily see longitudinal patterns when debugging an outage or slow down.","monitoring-vs-alerting#Monitoring vs Alerting":"Monitoring allows CHT admins to see statistics about their server, often over time. This can be helpful when you want to be aware of growth in your deployment (eg number of active users or number of reports per region). It should not be assumed that these will be checked regularly enough to notice a problem, for example a spike in number of feedback documents.\nAlerting is a push mechanism designed to notify users who can act on the alert. These can go over SMS, email, Slack, WhatsApp or any other channel to notify the right users.\nThe process of setting up monitoring and alerting should be done together. Monitoring sets the baseline and then alerting tells admins when the metric has gone beyond the baseline to a critical state. Certain metrics, like uptime for example, likely do not need to have a monitoring visualization on a dashboard, but the monitoring system should still be the authority to send an alert to denote when the service has restarted unexpectedly.","non-zero-values#Non-Zero Values":"Other values should always be zero, and you should alert when they are not. You may opt to alert only when they are non-zero for more than 24 hours. These are marked as non-zero in the table below.","outside-the-cht#Outside the CHT":"Be sure to monitor important items that the CHT depends on in order to be healthy. You should alert when any of these are close to their maximum (disk space) or minimum (days left of valid TLS certificate):\nDomain expiration with registrar TLS certificate expiration Disk \u0026 swap space CPU utilization Memory utilization Network utilization Process count OS Uptime","specific-of-monitoring#Specific of monitoring":"","zero-or-near-zero-values#Zero or Near Zero Values":"Finally, these values should always be not zero, and you should alert when are zero or very close to it. You may opt to alert only when they are zero for more than 24 hours. They’re marked with zero below."},"title":"Introduction"},"/hosting/monitoring/postgres-ingest/":{"data":{"":"","add-new-postgres-exporter#Add new Postgres Exporter":"In a new file, ~/docker-compose.custom-sql.yml, define your new Postgres exporter as well as add a mount to the existing Grafana and Prometheus services. Note that you will need to add the following environment variables to your Watchdog ~/cht-watchdog/.env file:\nCUSTOM_SQL_USER - Postgres user to use when logging in CUSTOM_SQL_PASS - Password for CUSTOM_SQL_USER above CUSTOM_SQL_SERVER - URL or IP for your Postgres server CUSTOM_SQL_PORT - Port of server, defaults to 5432 it not declared. CUSTOM_SQL_DATABASE - Actual string of database name (eg extra_monitoring or health_stats), will be different for each install. services: prometheus: volumes: - ./scrape_config.custom-sql.yml:/etc/prometheus/scrape_configs/custom-sql.yml:ro custom_sql_exporter: image: prometheuscommunity/postgres-exporter:latest command: # disables the collection of all metrics except for custom queries - '--no-collector.database' - '--no-collector.postmaster' - '--no-collector.process_idle' - '--no-collector.replication' - '--no-collector.replication_slot' - '--no-collector.stat_bgwriter' - '--no-collector.stat_database' - '--no-collector.statio_user_tables' - '--no-collector.stat_statements' - '--no-collector.stat_user_tables' - '--disable-default-metrics' - '--disable-settings-metrics' volumes: - ../custom-sql-queries.yml:/custom-sql-queries.yml environment: DATA_SOURCE_NAME: \"postgresql://${CUSTOM_SQL_USER:-NO DB USER SPECIFIED}:${CUSTOM_SQL_PASS:-NO DB PASSWORD SPECIFIED}@${CUSTOM_SQL_SERVER:-.NO DB SERVER SPECIFIED}:${CUSTOM_SQL_PORT:-5432}/${CUSTOM_SQL_DATABASE:-.NO DB SPECIFIED}?sslmode=disable\" PG_EXPORTER_EXTEND_QUERY_PATH: \"/custom-sql-queries.yml\" restart: always networks: - cht-watchdog-net Launch Watchdog with the new compose file\nNow that you’ve added the new configuration files, we can load it alongside the existing ones. Assuming you’ve followed the Watchdog Setup, this would be:\ncd ~/cht-watchdog docker compose -f docker-compose.yml -f ../docker-compose.custom-sql.yml up -d","adding-new-scrape-config#Adding new scrape config":"Create the ~/scrape_config.custom-sql.yml file and point the config to our new Postgres Exporter (custom_sql_exporter:9187). This will tell Prometheus to scrape the new data every 1 minute:\nscrape_configs: - job_name: 'custom-sql' scrape_interval: 1m static_configs: - targets: ['custom_sql_exporter:9187']","base-flow#Base Flow":"This is the initial basic flow of data from a CHT instance to Watchdog:\nflowchart LR subgraph core[\"cht.example.com\"] mon_api[\"Monitoring API (443)\"] end subgraph watchdog[\"watchdog.example.com\"] json[JSON Exporter] --\u003e Prometheus Prometheus --\u003e Grafana end mon_api --\u003e json","configure-the-dashboard#Configure the dashboard":"Now that the new Postgres Exporter is running on your Watchdog instance and CHT Watchdog’s Prometheus has additional scrape configs to ingest the new metrics, we can now visualize it in a Grafana Dashboard and then alert on it:\nIn the “Metric” field enter dwh_impact_replication_failure_total from the step above where we defined custom-sql-queries.yml Click the blue “Run query” in the upper right. We’ll make this a table, but you can configure the dashboard as desired. Click “Add to dashboard” Grafana showing data data explorer","full-dashboard-json#Full Dashboard JSON":"For reference, here is the full JSON of the dashboard we created above as shown in the “Save” modal:\n{ \"annotations\": { \"list\": [ { \"builtIn\": 1, \"datasource\": { \"type\": \"grafana\", \"uid\": \"-- Grafana --\" }, \"enable\": true, \"hide\": true, \"iconColor\": \"rgba(0, 211, 255, 1)\", \"name\": \"Annotations \u0026 Alerts\", \"type\": \"dashboard\" } ] }, \"editable\": true, \"fiscalYearStartMonth\": 0, \"graphTooltip\": 0, \"links\": [ { \"asDropdown\": true, \"icon\": \"external link\", \"includeVars\": true, \"keepTime\": true, \"tags\": [], \"targetBlank\": false, \"title\": \"CHT Admin Extra SQL\", \"tooltip\": \"\", \"type\": \"dashboards\", \"url\": \"\" } ], \"liveNow\": false, \"panels\": [ { \"datasource\": { \"type\": \"prometheus\", \"uid\": \"PBFA97CFB590B2093\" }, \"fieldConfig\": { \"defaults\": { \"custom\": { \"align\": \"auto\", \"cellOptions\": { \"type\": \"auto\" }, \"inspect\": false }, \"mappings\": [], \"thresholds\": { \"mode\": \"absolute\", \"steps\": [ { \"color\": \"green\", \"value\": null }, { \"color\": \"red\", \"value\": 80 } ] }, \"unit\": \"short\" }, \"overrides\": [ { \"matcher\": { \"id\": \"byName\", \"options\": \"__name__\" }, \"properties\": [ { \"id\": \"custom.hidden\", \"value\": true } ] }, { \"matcher\": { \"id\": \"byName\", \"options\": \"instance\" }, \"properties\": [ { \"id\": \"custom.hidden\", \"value\": true } ] }, { \"matcher\": { \"id\": \"byName\", \"options\": \"job\" }, \"properties\": [ { \"id\": \"custom.hidden\", \"value\": true } ] }, { \"matcher\": { \"id\": \"byName\", \"options\": \"server\" }, \"properties\": [ { \"id\": \"custom.hidden\", \"value\": true } ] }, { \"matcher\": { \"id\": \"byName\", \"options\": \"Time\" }, \"properties\": [ { \"id\": \"custom.hidden\", \"value\": true } ] }, { \"matcher\": { \"id\": \"byName\", \"options\": \"failure\" }, \"properties\": [ { \"id\": \"custom.width\", \"value\": 462 } ] } ] }, \"gridPos\": { \"h\": 10, \"w\": 18, \"x\": 0, \"y\": 0 }, \"id\": 1, \"options\": { \"cellHeight\": \"sm\", \"footer\": { \"countRows\": false, \"fields\": \"\", \"reducer\": [ \"sum\" ], \"show\": false }, \"showHeader\": false, \"sortBy\": [ { \"desc\": true, \"displayName\": \"Value\" } ] }, \"pluginVersion\": \"10.0.1\", \"targets\": [ { \"datasource\": { \"type\": \"prometheus\", \"uid\": \"PBFA97CFB590B2093\" }, \"editorMode\": \"builder\", \"exemplar\": false, \"expr\": \"dwh_impact_replication_failure_total\", \"format\": \"table\", \"instant\": true, \"key\": \"Q-e238fdbd-aed6-4215-a3e8-c611c6586c64-0\", \"legendFormat\": \"\", \"range\": false, \"refId\": \"A\" } ], \"title\": \"Replication failure reason\", \"type\": \"table\" } ], \"refresh\": \"5s\", \"schemaVersion\": 38, \"style\": \"dark\", \"tags\": [], \"templating\": { \"list\": [] }, \"time\": { \"from\": \"now-5m\", \"to\": \"now\" }, \"timepicker\": {}, \"timezone\": \"\", \"title\": \"CHT Admin Extra SQL\", \"uid\": \"a71db640-cc40-452c-aa92-222a9b49d43b\", \"version\": 8, \"weekStart\": \"\" }","introduction#Introduction":"After setting up your Watchdog instance and making it production ready, you can include additional custom metrics from your deployment. These metrics should be ingested by Prometheus and then can be used to create new Grafana dashboards and alerts. Example use cases include monitoring and alerting on health metrics like CHW visits per county or household registration rates, etc.\nThis guide will walk you through adding a custom metric from Postgres data. The following naming convention is used throughout to reference the relevant server instances: CHT Core (cht.example.com), CHT Watchdog (watchdog.example.com) and a Postgres server (db.example.com).","optional-add-dashboard-to-cht-dropdown-in-grafana#Optional: Add Dashboard to CHT Dropdown in Grafana":"An additional optional step is to make your dashboard a peer of the existing “Admin Details” and “Admin Overview”. Do this by editing the JSON by finding the line with \"graphTooltip\": 0, and add this JSON after it:\n\"links\": [ { \"asDropdown\": true, \"icon\": \"external link\", \"includeVars\": true, \"keepTime\": true, \"tags\": [], \"targetBlank\": false, \"title\": \"CHT Admin Extra SQL\", \"tooltip\": \"\", \"type\": \"dashboards\", \"url\": \"\" } ], This will make your new dashboard show up natively with the two existing CHT dashboards:\nGrafana with a third Admin Extra SQL option showing in the existing CHT navigation menu","postgres-flow#Postgres Flow":"This guide will have you deploy a Postgres Exporter on your Watchdog server (watchdog.example.com). This, in turn, will query your Postgres server (db.example.com):\nflowchart LR subgraph core[\"cht.example.com\"] mon_api[\"Monitoring API (443)\"] end subgraph watchdog[\"watchdog.example.com\"] json[JSON Exporter] --\u003e Prometheus postgres-exp[Postgres Exporter] --\u003e Prometheus Prometheus --\u003e Grafana end subgraph db[\"db.example.com\"] postgres[\"Postgres (5431)\"] end mon_api --\u003e json postgres --\u003e postgres-exp Adding a custom Postgres metric\nThe following steps are all performed on the CHT Watchdog instance and assume you installed Watchdog in ~/cht-watchdog. Note that user credentials with READ access to your Postgres server are required.\nPrepare query in config file Adding new scrape config Add new Postgres Exporter Configure the dashboard Optional: Add Dashboard to CHT Dropdown in Grafana","prepare-query-in-config-file#Prepare query in config file":"Add a YAML file for with your query called ~/custom-sql-queries.yml. In this example we’ll be using a query from the App Monitoring Data Ingestion repo, but it can be any query as long as the user you’re using in the next step has access to the database and table:\ndwh_impact_replication_failure: query: | SELECT metric as reason, count as total FROM public.app_monitoring_replication_failure_reasons WHERE partner_name IN ('partner_name_here') metrics: - reason: usage: \"LABEL\" description: \"Name of the failure\" - total: usage: \"GAUGE\" description: \"Replication failure reasons\" This configuration will generate a metric named dwh_impact_replication_failure_total with a label named reason which contains the string key value identifying the aggregated reason for the given replication failures. These metric/label names are fully customizable, but to avoid confusion you should follow the Prometheus best practices when choosing names."},"title":"Custom Postgres Metrics"},"/hosting/monitoring/production/":{"data":{"":"","accessing-grafana-over-tls#Accessing Grafana over TLS":"By default, the docker-compose.yml has the service bind to 127.0.0.1. This means if you deploy it on a remote server you can not access Grafana’s web UI because you are not on the localhost. The best solution to expose it to the Internet is to use a reverse proxy. You can use Caddy for this, but any reverse proxy will suffice. A big benefit with Caddy is that with just two files you ensure all traffic, and critically, all login credentials, are always encrypted when being sent and it handles all TLS certificate management tasks for you.","backup#Backup":"When you deployed your CHT Watchdog instance, you created two directories:\n~/cht-watchdog/grafana/data ~/cht-watchdog/prometheus/data These are the only directories you need to back up. Whether you use something as simple as zip + scp + cron or a more full-featured solution like borgbackup or AWS Data Lifecycle Manager, be sure you follow the 3-2-1 backup rule:\nThe 3-2-1 rule can aid in the backup process. It states that there should be at least 3 copies of the data, stored on 2 different types of storage media, and one copy should be kept offsite, in a remote location","default-grafana-url#Default Grafana URL":"The default URL that Grafana uses is http://localhost:3000. In a production environment, specifically when alerts are being sent, you need to tell Grafana what its URL is. Do this by editing the ./grafana/grafana.ini you created at install and set the root_url value. In this example, we’ll set it to monitor.example.com:\n#################################### Server ############################## [server] root_url = https://monitor.example.com/","monitoring-over-tls#Monitoring over TLS":"All monitoring should happen over TLS. This means the cht-instances.yml file should have all the URLs in it start with - https.","reverse-proxy-and-docker-files#Reverse Proxy and Docker files":"Assuming you have the DNS entry of monitor.example.com pointing to your server, you would create the Caddyfile file with this code.\ncat \u003e /root/Caddyfile \u003c\u003c EOF monitor.example.com { reverse_proxy grafana:3000 } EOF Using the awesome secure defaults of Caddy, this file will tell Caddy to:\nCreate a free certificate for monitor.example.com using Let’s Encrypt (and renew it!) Redirect any requests to HTTP to go to the HTTPS port Reverse proxy all traffic to the grafana docker instance. The reverse proxy will only work if the Caddy container is on the same docker network as Grafana. That’s where the caddy-compose.yml file comes in, specifically using the cht-watchdog-net network. Create the file with this code\ncat \u003e /root/caddy-compose.yml \u003c\u003c EOF version: \"3.9\" services: caddy: image: caddy:2-alpine restart: unless-stopped ports: - \"80:80\" - \"443:443\" volumes: - /root/Caddyfile:/etc/caddy/Caddyfile networks: - cht-watchdog-net EOF","running#Running":"To start the reverse proxy, us the following command. Note that on first run it will provision your certificates:\ncd ~/cht-watchdog docker compose -f docker-compose.yml -f ../caddy-compose.yml up -d Because both the CHT Watchdog and Caddy compose files have the restart: unless-stopped setting, the services will start when the server first boots.","upgrades#Upgrades":"Upgrades can be done along with upgrades to your CHT Watchdog docker images:\ncd ~/cht-watchdog docker compose -f docker-compose.yml -f ../caddy-compose.yml pull docker compose -f docker-compose.yml -f ../caddy-compose.yml up -d","what-it-means-to-run-in-production#What it means to run in production":"When you run CHT Watchdog in production, and it is publicly accessible on the Internet, and has mission-critical data on it, you should take extra precautions around security and backup. This mainly consists of:\nusing TLS for all HTTP connections using VPN or SSH for insecure protocols like ssl=false in Postgres ensuring if the server were to fail, you can recover the data This guide assumes you have already set up TLS on your CHT instance and have gone through the Setup steps to deploy an instance of CHT Watchdog on server with a static IP and DNS entry, monitor.example.com for example.\nWarning\nAlways run Watchdog on a different server than the CHT Core. This ensures Watchdog doesn’t fail if the CHT Core server fails and alerts will always be sent. The instructions assume you’re connecting over the public Internet and no special VPN or routing is required."},"title":"Production"},"/hosting/monitoring/setup/":{"data":{"":"Medic maintains CHT Watchdog which is an opinionated configuration of Prometheus (including json_exporter) and Grafana which can easily be deployed using Docker. It is supported on CHT 3.12 and later, including CHT 4.x. By using this solution a CHT deployment can easily get longitudinal monitoring and push alerts using Email, Slack or other mechanisms. All tools are open source and have no licensing fees.\nThe solution provides both an overview dashboard as well as a detail dashboard. Here is a portion of the overview dashboard:\nScreenshot of Grafana Dashboard showing data from Prometheus\nPrometheus supports four metric types: Counter, Gauge, Histogram, and Summary. Currently, the CHT only provides Counter and Gauge type metrics. When building panels for Grafana dashboards, Prometheus Functions can be used to manipulate the metric data. Refer to the Grafana Documentation for best practices on building dashboards.","additional-configuration#Additional Configuration":"When making any changes to your CHT Watchdog configuration (e.g. adding/removing instances from the cht-instances.yml file) make sure to restart all services to pick up the changes:\ncd ~/cht-watchdog docker compose down docker compose up -d","alerts#Alerts":"This configuration includes number of pre-provisioned alert rules. Additional alerting rules (and other contact points) can be set in the Grafana UI.\nSee both the Grafana high level alert Documentation and provisioning alerts in the UI for more information.","cht-sync-data-local#CHT Sync Data (Local)":"With the release of 1.1.0, Watchdog now supports easily ingesting CHT Sync data read in from a Postgres database (supports Postgres \u003e= 9.x).\nCopy the example config file, so you can add the correct contents in them:\ncd ~/cht-watchdog cp exporters/postgres/sql_servers_example.yml exporters/postgres/sql_servers.yml Edit sql_servers.yml you just created and add your target postgres connection URL. For example, if your postgres server was db.example.com, your user was db_user and your password was db_password, the config would be:\n- targets: \"db-example-com\": 'postgres://db_user:db_password@db.example.com:5432/cht?sslmode=disable' # //NOSONAR - password is safe to commit You may add as many targets as you would like here - one for each CHT Core instance in your cht-instances.yml file. Be sure to match the key (db-example-com in this example) to the exact value defined in your cht-instances.yml file while ensuring the entry is unique.\nStart your instance up, being sure to include both the existing docker-compose.yml and the docker-compose.postgres-exporter.yml file:\ncd ~/cht-watchdog docker compose -f docker-compose.yml -f exporters/postgres/compose.yml up -d Warning\nAlways run this longer version of the docker compose command which specifies both compose files for all future upgrades.","cht-sync-data-remote#CHT Sync Data (Remote)":"While not the default setup, and not what most deployments need, you may want to set up a way to monitor CHT Sync data without sharing any Postgres credentials. Instead of sharing credentials, you expose an HTTP endpoint that requires no login or password. Of course, similar to CHT Core’s Monitoring API, this endpoint should be configured to not share sensitive information (since it will be publicly accessible).\nThis section has two steps. The first is to expose the password-less metrics endpoint and the second is to scrape it with Prometheus. Here’s documentation on how to set up a Kubernetes or Docker endpoint for CHT Sync.","cht-watchdog#CHT Watchdog":"When you see a new version in the GitHub repository, first review the release notes and upgrade instructions. Then, run the following commands to deploy the new configuration (be sure to replace TAG with the tag name associated with the release (e.g. 1.1.0)):\ncd ~/cht-watchdog git fetch git -c advice.detachedHead=false checkout TAG docker compose pull docker compose down docker compose up -d --remove-orphans","configuring-contact-points#Configuring Contact Points":"Grafana supports sending alerts via a number of different methods. Two likely options are Email and Slack.","deleting-provisioned-alert-rules#Deleting provisioned alert rules":"The provisioned alert rules shipped with CHT Watchdog are intended to be the generally applicable for most CHT deployments. However, not all the alert rules will necessarily be useful for everyone. If you would like to delete any of the provisioned alert rules, you can do so with the following steps:\nIn Grafana, navigate to “Alerting” and then “Alert Rules” and click the eye icon for the rule you want to delete. Copy the Rule UID which can be found on the right and is a 10 character value like mASYtCQ2j.\nCreate a delete-rules.yml file\ncd ~/cht-watchdog cp grafana/provisioning/alerting/delete-rules.example.yml grafana/provisioning/alerting/delete-rules.yml Update your new delete-rules.yml file to include the Rule UID(s) of the alert rule(s) you want to delete\nRestart Grafana\ndocker compose restart grafana If you ever want to re-enable the alert rules you deleted, you can simply remove the Rule UID(s) from the delete-rules.yml file and restart Grafana again.","email#Email":"To support sending email alerts from Grafana, you must update the smtp section of your grafana/grafana.ini file with your SMTP server configuration. Then, in the web interface, add the desired recipient email addresses in the grafana-default-email contact point settings.","environment-variables#Environment Variables":"See the example .env file for a list of all environment variables that can be set.","modifying-provisioned-alert-rules#Modifying provisioned alert rules":"The provisioned alert rules cannot be modified directly. Instead, you can copy the configuration of a provisioned alert into a new custom alert with the desired changes. Then, remove the provisioned alert.\nOpen the alert rule you would like to modify in the Grafana alert rules UI and select the “Copy” button. Update the copied alert rule with the desired changes and save it into a new Evaluation group. Remove the provisioned alert.","postgres-exporter-on-docker#Postgres exporter on Docker":"These commands set up a SQL Exporter and should be run on your Postgres server:\nClone this repo: git clone git@github.com:medic/cht-watchdog.git and cd into cht-watchdog Copy exporters/postgres/sql_servers_example.yml to exporters/postgres/sql_servers.yml Edit the new exporters/postgres/sql_servers.yml file to have the correct credentials for your server. You need to update the USERNAME and PASSWORD. You may need to update the IP address and port also, but likely the default values are correct. Copy .env.example to .env In the new .env file, edit SQL_EXPORTER_IP to be the public IP of the Posgtres server Start the service with these two compose files*: docker compose --env-file .env -f exporters/postgres/compose.yml -f exporters/postgres/compose.stand-alone.yml up -d Verify that you see the SQL Exporters metrics: If SQL_EXPORTER_IP was set to 10.220.249.15, then this would be: http://10.220.249.15:9399/metrics. The last line starting with up{job=\"db_targets\"... should end in a 1 denoting the system is working. If it ends in 0 - check your docker logs for errors. Continue on to set up the scrape on Watchdog.","postgres-exporter-on-kubernetes#Postgres exporter on Kubernetes":"Uncomment the metrics_exporter value in your values.yaml file and make sure enabled is set to true. Expose the metrics endpoint to the internet. This can be done by setting the service.type to LoadBalancer or NodePort in your values.yaml file. Continue on to set up the scrape on Watchdog.","prerequisites#Prerequisites":"Docker Docker Compose git URL(s) of the CHT instance(s) Warning\nAlways run Watchdog on a different server than the CHT Core. This ensures Watchdog doesn’t fail if the CHT Core server fails and alerts will always be sent. The instructions assume you’re connecting over the public Internet and no special VPN or routing is required.","prometheus-grafana-and-json-exporter#Prometheus, Grafana and JSON Exporter":"To upgrade these dependencies, update the version numbers set in your .env file (or leave them set to latest). Then run the following commands:\ndocker compose pull docker compose up -d","prometheus-retention-and-storage#Prometheus Retention and Storage":"By default, historical monitoring data will be stored in Prometheus (PROMETHEUS_DATA directory) for 60 days (configurable by PROMETHEUS_RETENTION_TIME). A longer retention time can be configured to allow for longer-term analysis of the data. However, this will increase the size of the Prometheus data volume. See the Prometheus documentation for more information.\nLocal storage is not suitable for storing large amounts of monitoring data. If you intend to store multiple years worth of metrics, you should consider integrating Prometheus with a Remote Storage.","set-up-watchdog-to-scrape-the-sql-exporter#Set up Watchdog to scrape the SQL Exporter":"No matter which way you set up your SQL exporter, follow these steps to tell your Watchdog instance to scrape the new endpoint.\nOn your watchdog instance, create a custom scrape definition file: cp exporters/postgres/scrape.yml ./exporters/postgres/scrape-custom.yml Edit scrape-custom.yml so that it has the ip address of SQL_EXPORTER_IP from step 7 above. If that was 10.220.249.15, then you file would look like: scrape_configs: - job_name: sql_exporter static_configs: - targets: ['10.220.249.15:9399'] Finally, on your watchdog instance, start (or restart) your server including the compose.scrape-only.yml compose file: docker compose --env-file .env -f exporters/postgres/compose.yml -f exporters/postgres/compose.scrape-only.yml up -d * The compose.stand-alone.yml and compose.scrape-only.yml compose files override some services. This is done so that no manual edits are needed to any compose files.","setup#Setup":"These instructions have been tested against Ubuntu, but should work against any OS that meets the prerequisites. They follow a happy path assuming you need to only set a secure password and specify the URL(s) to monitor:\nRun the following commands to clone this repository, initialize your .env file, create a secure password and create your data directories:\ncd ~ git clone https://github.com/medic/cht-watchdog.git cd cht-watchdog cp cht-instances.example.yml cht-instances.yml cp grafana/grafana.example.ini grafana/grafana.ini mkdir -p grafana/data \u0026\u0026 mkdir -p prometheus/data sudo apt install -y wamerican # ensures /usr/share/dict/words is present for shuf call below cp .env.example .env password=$(shuf -n7 /usr/share/dict/words --random-source=/dev/random | tr '\\n' '-' | tr -d \"'\" | cut -d'-' -f1,2,3,4,5,6,7) sed -i -e \"s/password/$password/g\" .env echo;echo \"Initial project structure created! To log into Grafana in the browser:\";echo echo \" username: medic\" echo \" password: ${password}\";echo If you’re using docker-compose v2.x, it doesn’t support relative paths and you’ll have to edit your .env file to update paths to absolute path.\nNote that in step 4 below you’ll need the username and password which is printed after you run the above command.\nEdit the cht-instances.yml file to have the URLs of your CHT instances. You may include as many URLs of CHT instances as you like.\nHere is an example:\n- targets: - https://subsub.sub.example.com - https://cht.domain.com - https://website.org Run the following command to deploy the stack:\ncd ~/cht-watchdog docker compose up -d Grafana is available at http://localhost:3000. See the output from step 1 for your username and password.\nIf you would like to do more customizing of your deployment, see “Additional Configuration”.","slack#Slack":"Slack alerts can be configured within the Grafana web GUI for the specific rules you would like to alert on.","upgrading#Upgrading":"Before upgrading, you should back up both your current configuration settings as well as your Prometheus/Grafana data directories."},"title":"Setup"},"/hosting/sso/":{"data":{"":"Introduced in 4.20.0. This feature is only compatible with cht-android version v1.5.2 or greater.","detailed-guides#Detailed guides":"For more detailed guides and requirements, see the following documents:\nKeyCloakAuthenticating with KeyCloak Microsoft EntraAuthenticating with Entra Technical ReferenceSequence diagrams and more","overview#Overview":"The CHT supports Single Sign-On (SSO) via integration with an external authentication server. Users connecting to a CHT instance authenticate with their SSO credentials instead of needing a CHT-specific username and password.\nSSO authentication is implemented with the industry standard OpenID Connect (OIDC) protocol. Any OIDC-compliant authentication server can be integrated with the CHT. For example:\nKeycloak - Free and open-source, self-hostable identity and access management server Microsoft Entra ID - Paid, cloud-based identity and access management service.","quick-start#Quick Start":"Add a new client to your OIDC Provider with the redirect URL of https:///medic/login/oidc. You will need your client id, client secret, and the discovery URL of your OIDC Provider for the next steps. Be sure to replace CHT_URL with your real URL.\nAdd the Client App ID (APP_ID), OIDC Provider discovery URL (WELL_KNOWN_OIDC_URL) and CHT URL (CHT_URL) to your app_settings.json using CHT Conf. Be sure to replace APP_ID, WELL_KNOWN_OIDC_URL and CHT_URL with your real URLs:\n\"oidc_provider\": { \"client_id\": \"\", \"discovery_url\": \"https://\" }, \"app_url\": \"https:///\" Upload the secret from step 1 to the CHT. Be sure to replace CHT_URL , USER, PASSWORD and SECRET with the correct values: curl -X PUT https://:@/api/v1/credentials/oidc:client-secret -H \"Content-Type: text/plain\" --data \"\"\nBefore logging into the CHT, each SSO user must have a CHT user provisioned with an “SSO Email Address” that matches the email address configured for the user with the OIDC Provider.\nUse the “Login with SSO” button on the CHT login page."},"title":"SSO"},"/hosting/sso/entra/":{"data":{"":"Introduced in 4.20.0. This feature is only compatible with cht-android version v1.5.2 or greater.","add-a-test-user-optional#Add a test user (optional)":"","add-cht-user#Add CHT user":"From the “App Management” console in the CHT, go to “Users” \u003e “Add user”\nUser name: test SSO Email Address: test@test.com (must match email from prior step) Note - the E-mail address field is not used for SSO.","add-entra-user-screen-1#Add Entra user: Screen 1":"Navigate to “Users” \u003e “All users” \u003e “New user” \u003e “Create new user” Enter details for your test user. Specifically note the “Mail nickname” value as this will need to match the email value for your CHT user. Specify “User principal name” of test which will translate to test@.com where DOMAIN is the domain you have configured for Entra. Be sure to copy the principal name and the generated password","add-entra-user-screen-2#Add Entra user: Screen 2":"On the 2nd “Properties” screen, you must paste the exact “User principal name” into “Contact Information” -\u003e “Email” from the prior screen. This is what will get passed to the CHT:","add-new-client#Add new Client":"Navigate to “Applications” \u003e “App registrations” \u003e “New registration” Add a “user-facing display name” of CHT Under “Redirect URI (optional)” select Web Enter https:///medic/login/oidc as the redirect URI, being sure to replace CHT_URL with your production CHT URL","cht-app-settings#CHT App Settings":"In the config directory for your app, update your app_settings.json file to contain this additional JSON at the end, before the very last }\nBe sure to replace APP_ID with the Application (client) ID and DIRECTORY_ID with Directory (tenant) ID both from step 4 above. Replace the CHT_URL with the production URL of your CHT instance. If you’re using a development instance, be sure the CHT_URL includes your port.\n\"oidc_provider\": { \"client_id\": \"\", \"discovery_url\": \"https://login.microsoftonline.com//v2.0/.well-known/openid-configuration\" }, \"app_url\": \"https:///\"","cht-setup#CHT Setup":"","client-secret-in-cht#Client Secret in CHT":"Use the /api/v1/credentials REST api to set the client secret as the oidc:client-secret credential.\nProductionDevelopment Be sure to replace SECRET with the value from step 3 above. As well, replace CHT_URL with the production URL of your CHT instance, USER with your admin user and PASSWORD with your password:\ncurl -X PUT https://:@/api/v1/credentials/oidc:client-secret \\ -H \"Content-Type: text/plain\" \\ --data \"\" Be sure to replace SECRET with the value from step 3 above. As well, replace CHT_URL with the docker helper URL, including port:\ncurl -X PUT https://medic:password@/api/v1/credentials/oidc:client-secret \\ -H \"Content-Type: text/plain\" \\ --data \"\" Upon success, curl should show the JSON {\"ok\":true} .\nFurther, going to the CHT login screen should now show an extra login button “Login with SSO”. You may need to hold down the “shift” key and click reload to clear the browser cache:","copy-discovery-url#Copy Discovery URL":"From the “Overview” page copy the “Application (client) ID” and the “Directory (tenant) ID” which are needed for the client_id and discovery_url respectively in step 1 below.","copy-secret#Copy Secret":"Navigate to “Certificates \u0026 secrets” \u003e “Client secrets” \u003e “New client secret”. Add a new secret and copy the Value string","entra-setup#Entra Setup":"","introduction#Introduction":"These steps document how to configure Microsoft Entra as the Single Sign On (SSO) identity provider for the CHT. As well, it walks through provisioning a single user for SSO.","login#Login":"Login to Entra","prerequisites#Prerequisites":"Microsoft Entra business account with credit card added. Free trial accounts work, but require a credit card. CHT server - ensure you are running version 4.20.0 or later. This can be an instance of Docker Helper. DNS Entries and TLS enabled on CHT","references#References":"tk","test-login#Test login":"Logout as the Admin user and then on the CHT login screen, select “Login with SSO”\nYour browser will be redirected to the Entra login screen Enter the username/password for your Entra user You will be redirected back to the CHT app and logged in as your CHT user","upload-cht-config#Upload CHT config":"ProductionDevelopment Upload the config using CHT Conf. Replace CHT_URL with the production URL of your CHT instance, USER with your admin user and PASSWORD with your password:\ncht --url=https://:@ compile-app-settings upload-app-settings Upload the config using CHT Conf. Replace CHT_URL with the docker helper URL, including port:\ncht --url=https://medic:password@ compile-app-settings upload-app-settings"},"title":"Entra"},"/hosting/sso/keycloak/":{"data":{"":"Introduced in 4.20.0. This feature is only compatible with cht-android version v1.5.2 or greater.","add-a-test-user-optional#Add a test user (optional)":"","add-cht-user#Add CHT user":"From the “App Management” console in the CHT, go to “Users” \u003e “Add user”\nUser name: test SSO Email Address: test@test.com (must match email from step #1) Note - the E-mail address field is not used for SSO.","add-keycloak-user#Add Keycloak user":"In Keycloak, create a new user by going to “Users” \u003e “Add user”. Specify username of test and and email of test@test.com","add-new-client#Add new Client":"Add new Client in Keycloak by going to “Clients” \u003e “Create Client”. Be sure to replace CHT_URL with the production URL of your CHT instance. If you’re on a development instance be sure to include the port:\nClient Type: OpenID Connect Client ID: CHT Client authentication: On Authentication Flow: Standard flow Valid redirect URIs: https:///medic/login/oidc","cht-app-settings#CHT App Settings":"In the config directory for your app, update your app_settings.json file to contain this additional JSON at the end, before the very last }\nBe sure to replace KEYCLOAK_URL with the production URL of your Keycloak instance and CHT_URL with the production URL of your CHT instance. If you’re using a development instance, be sure the CHT_URL includes your port.\n\"oidc_provider\": { \"client_id\": \"CHT\", \"discovery_url\": \"https:///realms/master/.well-known/openid-configuration\" }, \"app_url\": \"https:///\"","cht-setup#CHT Setup":"","client-secret-in-cht#Client Secret in CHT":"Use the /api/v1/credentials REST api to set the client secret as the oidc:client-secret credential.\nProductionDevelopment Be sure to replace SECRET with the value from step 5 above. As well, replace CHT_URL with the production URL of your CHT instance, USER with your admin user and PASSWORD with your password:\ncurl -X PUT https://:@/api/v1/credentials/oidc:client-secret \\ -H \"Content-Type: text/plain\" \\ --data \"\" Be sure to replace SECRET with the value from step 5 above. As well, replace CHT_URL with the docker helper URL, including port:\ncurl -X PUT https://medic:password@/api/v1/credentials/oidc:client-secret \\ -H \"Content-Type: text/plain\" \\ --data \"\" Upon success, curl should show the JSON {\"ok\":true} .\nFurther, going to the CHT login screen should now show an extra login button “Login with SSO”. You may need to hold down the “shift” key and click reload to clear the browser cache:","copy-secret#Copy Secret":"On the new CHT client go to “Credentials” and copy the “Client Secret” value. You’ll need this later when configuring the CHT.","introduction#Introduction":"These steps document how to configure Keycloak as the Single Sign On (SSO) identity provider for the CHT. As well, it walks through provisioning a single user for SSO.","keycloak-setup#Keycloak Setup":"","open-keycloak#Open Keycloak":"Be sure you’re logged in","prerequisites#Prerequisites":"ProductionDevelopment Keycloak server - ensure you are running a supported version CHT server - ensure you are running version 4.20.0 or later DNS Entries for CHT and Keycloak TLS enabled on CHT and Keycloak Start with creating a Keycloak compose file and two cert files in a new ~/cht-keycloak directory by running this code:\nmkdir -p $HOME/cht-keycloak/data curl -so $HOME/cht-keycloak/server.crt https://local-ip.medicmobile.org/fullchain curl -so $HOME/cht-keycloak/server.key https://local-ip.medicmobile.org/key cat \u003e $HOME/cht-keycloak/compose.yaml \u003c\u003c EOF services: keycloak: image: quay.io/keycloak/keycloak environment: KEYCLOAK_ADMIN: medic KEYCLOAK_ADMIN_PASSWORD: password KC_HTTPS_CERTIFICATE_FILE: /opt/keycloak/conf/server.crt KC_HTTPS_CERTIFICATE_KEY_FILE: /opt/keycloak/conf/server.key ports: - \"8443:8443\" command: start-dev volumes: - $HOME/cht-keycloak/server.crt:/opt/keycloak/conf/server.crt - $HOME/cht-keycloak/server.key:/opt/keycloak/conf/server.key - $HOME/cht-keycloak/data:/opt/keycloak/data EOF cd $HOME/cht-keycloak docker compose up -d The Keycloak instance is accessible on your Docker Helper URL, but on port 8443. For example https://192-168-68-26.local-ip.medicmobile.org:8443. The username is medic and the password is password.\nNow create an instance of Docker Helper.","references#References":"Keycloak Docker Quickstart","set-keycloak-userss-password#Set Keycloak users\u0026rsquo;s password":"Go to the user’s “Credentials” tab and select “Set password”","test-login#Test login":"Logout as the Admin user and then on the CHT login screen, select “Login with SSO”\nYour browser will be redirected to the Keycloak login screen Enter the username/password for your Keycloak user You will be redirected back to the CHT app and logged in as your CHT user","upload-cht-config#Upload CHT config":"ProductionDevelopment Upload the config using CHT Conf. Replace CHT_URL with the production URL of your CHT instance, USER with your admin user and PASSWORD with your password:\ncht --url=https://:@ compile-app-settings upload-app-settings Upload the config using CHT Conf. Replace CHT_URL with the docker helper URL, including port:\ncht --url=https://medic:password@ compile-app-settings upload-app-settings"},"title":"Keycloak"},"/hosting/sso/technical/":{"data":{"":"Introduced in 4.20.0. This feature is only compatible with cht-android version v1.5.2 or greater. CHT 4.20.0 introduced the single sign on (SSO) feature allowing deployments to use the industry standard OpenID Connect (OIDC) protocol to authenticate users. Below are some key points on the SSO functionality in the CHT. See the technical design document for all the details.","cht-user-session#CHT User session":"Once an SSO user has successfully authenticated with the CHT (by completing the OIDC flow), their browser receives a valid Couch session cookie (equivalent to the session cookies provided to normal CHT users). For all subsequent operations, the CHT does not distinguish between SSO and non-SSO users since both types of users are authenticating with the same type of session cookie.\nIt is very important to note that once an SSO user has successfully authenticated with the CHT, the CHT does not contact the OIDC Provider for subsequent requests from that user. If the user is removed from the OIDC Provider (or their OIDC session is otherwise invalidated), they will still be able to access the CHT. This is because their CHT session cookie is still valid. You can prevent the user from accessing the CHT by disabling their CHT user account, updating their “SSO Email Address” or removing it and setting a new password for the user.","limitations#Limitations":"While completely compliant with the OIDC specification, the SSO functionality in the CHT currently has several notable limitations (any of which may be addressed in future releases):\nUser auto-provisioning is not supported. Users must be created in the CHT before they can log in with SSO. The CHT does not automatically create users when they log in with SSO for the first time. Back-channel logout is not supported. As noted above, when a user’s OIDC session is ended, it does not automatically end their CHT session. User mapping between OIDC and CHT users only supports matching on the email claim from the OIDC user. The CHT does not support mapping on other claims (e.g. sub or preferred_username).","oidc-login-sequence#OIDC Login Sequence":"The following diagram demonstrates the sequence of events when a user logs in to the CHT using SSO:\nsequenceDiagram autonumber participant cht as CHT (api server) participant user_agent as User (web browser) participant auth_server as OIDC Provider (authorization server) user_agent-\u003e\u003echt: Request SSO login authorization cht-\u003e\u003euser_agent: Redirect to authorize endpoint on OIDC provider user_agent-\u003e\u003eauth_server: Request OIDC authorization (happens automatically) auth_server-\u003e\u003euser_agent: Respond with authentication challenge (e.g. login page) user_agent-\u003e\u003eauth_server: User authenticates (e.g. submits SSO username/password) auth_server--\u003e\u003eauth_server: Authenticate user auth_server-\u003e\u003euser_agent: Redirect back to CHT (with authorization_code) user_agent-\u003e\u003echt: Submit authorization_code (happens automatically) cht--\u003e\u003eauth_server: Request id_token with email scope auth_server--\u003e\u003eauth_server: Validates authorization_code and client credentials auth_server--\u003e\u003echt: Reply with id_token (including email claim) cht-\u003e\u003euser_agent: Reply with session cookie Note over cht,user_agent: Subsequent requests are made with the session cookie and do not require contactingthe OIDC provider","setup#Setup":"Follow the setup steps to configure your CHT instance for SSO Login. Once the server has been properly configured, the “Login with SSO” button will be visible on the CHT Login page. CHT users with the oidc_username property will be able to log in with their SSO credentials. The “SSO Email Address” field will be also be visible in the create/update users modal in the App Management interface.","user-mapping#User Mapping":"Note that the “SSO Email Address” field is used to populate the user’s oidc_username property. The oidc_username is stored separately from the user’s normal email property (populated from the “Email Address” field in the App Management interface) and different values can be provided for each. Only the oidc_username will be considered when logging in an SSO user. Users with the can_edit_profile permission are able to edit their email value, but only administrators can edit a user’s oidc_username.\nIf someone selects the “Login with SSO” button and successfully authenticates with the OIDC provider, but their OIDC user account does not have a corresponding CHT user (the email claim from the OIDC user does not match any CHT user oidc_username), they will not be logged into the CHT. Instead they will be redirected back to the login page with an error message indicating that they are not allowed to log in with SSO.\nUsers with a currently active OIDC session may not be required to re-authenticate. Instead, when logging into the CHT for the first time they will be prompted by their OIDC Provider to allow the CHT to access their user information.\nA user with the oidc_username property is only allowed to log in with SSO. Any other authentication method (e.g. username/password or token login) will fail.\nTo convert an SSO user in the CHT back to a normal CHT user (with username/password authentication), simply remove the user’s oidc_username (by deleting the value from the “SSO Email Address” field). A new password must then be set for the user. All the user’s existing sessions will be invalidated and the user must log in again (this time by using their CHT username/password)."},"title":"Technical"},"/reference-apps/":{"data":{"":"The Community Health Toolkit’s examples and reference apps provide templates for structuring and organizing a community health workflow, its configuration code, and testing framework. They include a foundation for forms, data fields, and analytics, and can be deployed as-is or easily customized by a developer for your unique context.\nContent in this section Maternal and Newborn Health Contact Tracing Primary Health Care Adaptations for COVID-19 COVID-19 Education and Training for CHWs COVID-19 Testing with Rapid Diagnostic Tests Direct-to-client, Two-way Texting Workflows with CHT and RapidPro Event Based Surveillance Learning and Care Loss to Follow Up Pharmacovigilance YendaNafe CHT app by PIH in Malawi Remote Onboarding and Training Stock Monitoring CHW Supervision and Performance Management"},"title":"Reference Apps"},"/reference-apps/contact-tracing/":{"data":{"":"The CHT’s Contact Tracing functionality enables effective disease surveillance within communities to help control infectious disease outbreaks. It is a community public health tool that is designed to:\nCentrally register patient cases and track contacts to prevent secondary spread of diseases in communities Create a coordinated approach to contact tracing within existing health systems Communicate the importance of self-isolation and symptom screening to exposed individuals and their families","problem-being-addressed#Problem Being Addressed":"An essential part of containing disease outbreaks, such as COVID-19, requires public health organizations to rapidly notify people who have come into contact with confirmed or suspected patient cases. In many health systems, existing health management information systems are ill equipped to handle the necessary rapid tracking, triage, and care referrals for large numbers of patient cases and contacts to prevent secondary spread of viruses.","solution-overview#Solution Overview":"Contact Tracing with the CHT offers a rapidly scalable surveillance strategy by registering patient cases and their contacts within communities in a responsive and empathetic way. Through proactive tracing of contacts, active symptom screening, and referrals to care or self-isolation, the app can be deployed to assist in:\nDisrupting secondary transmission via coordinated registration of patient cases Enrolling all contacts and households in monitoring during isolation periods Referring symptomatic cases for skilled care following triage Engaging in community education and follow-up during isolation","users-and-hierarchy-example#Users and Hierarchy Example":"User Location Devices Role Data Entry Facility level Desktop, laptop or tablet Responsible for ensuring all contacts are traced. Create contact list based on confirmed cases. Assign contacts to Tracers for follow-up. Notified of unsuccessful traces and symptomatic cases. Tracer Community level Smartphone Responsible for tracing and screening the contacts of the confirmed case upon notification, verifying symptomatic contacts on self-monitoring and escalating them for further investigation. COVID-19 Patient Community level Identified and contacted by staff to ensure all contacts are captured for follow-up. Contacts Community level Feature phone Receive notification alert upon registration of Tracer follow-up. Submit self-monitoring check during self-quarantine via SMS. Referred to care if symptomatic.","workflow-example#Workflow Example":"This demo illustrates how a CHT workflow for tracing of contacts of suspected or confirmed patient cases can be deployed to support a COVID-19 health program response. It works on both SMS and the CHT app. It can be combined with other care workflows and configured to suit specific health system needs, particularly in terms of tracer roles.\nMore background information can be found in this summary deck."},"title":"Contact Tracing"},"/reference-apps/covid-education/":{"data":{"":"The COVID-19 pandemic has created unique challenges to providing in-person Community Health Worker training. To support CHWs, three learning modules were created to rapidly and remotely train them on COVID-19 safety protocols and patient care. Through CHT app and SMS deployments, Supervisors can now train CHWs on care workflows without being physically present. This example covers the following learning modules:\nHealth safety protocols for preventing the spread of COVID-19 Preventing the dissemination of misinformation about COVID-19 Recognizing COVID-19 and caring for patients with suspected infection","problem-being-addressed#Problem Being Addressed":"It is important for Community Health Workers to stay safe and serve their communities by understanding effective health protocols for preventing the spread of COVID-19. Training would traditionally be done in person, however, due to public health concerns, travel and gatherings of people are limited. Health systems have been forced to quickly adapt to deliver training content in a safely distanced, timely, and effective manner.","solution-overview#Solution Overview":"The CHT provides a flexible way to deliver timely COVID-19 remote training and education to CHWs. In collaboration with Stanford’s Digital Medic Team, and vetted by a team of health experts at Stanford, three remote learning modules were designed. CHWs can progress through training at their own pace, and receive tasks in their CHT app to encourage them to complete the modules. The training modules:\nBuild on verifiable health safety guidance from the CDC and WHO Can be deployed using the CHT app or SMS workflows Capture assessment and understanding of CHW knowledge through quizzes, which can be tracked by Supervisors","users-and-hierarchy-example#Users and Hierarchy Example":"User Location Devices Role National Officials and County Teams Central and district offices Desktop, laptop and smartphones Monitor central analytics regarding onboarding and training completion. Revisit content where needed. Sub-County Teams Facilities or local offices Tablet or smartphone Review CHW progress on aggregate. Support CHW supervisors and monitor location-specific analytics. CHW Supervisors Community level, based at facilities Smartphones and personal phones Verify CHW onboarding and training completion. Follow-up with those who have not completed training. Complete their own onboarding and training tasks. CHWs and Volunteers Community level Feature phones and some smartphones Complete onboarding and training via SMS or App. Provide feedback and ask for support where needed.","workflow-example#Workflow Example":"This demo illustrates how a CHT workflow can be easily adapted to integrate a sequence of learning modules through the usage of tasks. These modules are designed to be delivered sequentially to promote engagement and absorption of content. Learning can be tracked across CHWs to inform opportunities to provide additional support. The sequence can also be modified to interact with the CHW through SMS, using question-and-answer text-based workflows. More background on the SMS workflow content and key considerations for adapting it can be found in this summary document."},"title":"COVID-19 Education"},"/reference-apps/covid-rdt-reference-app/":{"data":{"":"Medic has worked with FIND to build a CHT reference application for COVID-19 point-of-care testing with Rapid Diagnostic Tests (RDT). Using the reference app as an example, CHT app developers can easily include the provisioning and capture of RDT in workflows. These workflows can include third-party applications, like Dimagi’s RD-Toolkit, that guide health workers through the use of the RDT.\nYou can find the code for this application in the CHT Core repository on GitHub.","base64-image-extraction#Base64 image extraction":"To extract the binary image from the ASCII value in a report, you can view it in the CHT or you can use a script to do so. Here’s an example of using Bash utilities (sed, cut, tr and base64) in Linux to loop over each line of the output.csv file from the above call to reports API. This results in numbered binary image files called imageNUMBER.jpg for each line in the export:\ni=1 n=0 while read -r line; do ((n \u003e= i )) \u0026\u0026 echo $line | cut -d',' -f15 | tr -d '\"' | base64 -d \u003e image$n.jpg ((n++)) done \u003c output.csv This code snippet is good just to validate data ad hoc, but more likely you’ll be doing either an extract-transform-load (ETL) process into a third-party system, or just import the raw contents and then display the base64 as an image, as done in the CHT.\nWhen retrieving JSON, this value is found in capture.android-app-outputs.rdt_session_bundle.rdt_session_result_bundle.rdt_session_result_extra_images.cropped field.\nThe reports API always outputs in CSV, but the COVID-19 application uses Base64 encoding to store the images as text as noted above. These may misbehave when opened them in a spreadsheet application like LibreOffice (“maximum number of characters per cell exceeded”) or Excel (silently clipped to 32k chars) as they’re thousands, if not hundreds of thousands, of characters long. Be sure to programmatically process these into image files as needed.","capture#Capture":"This second video shows the right side of the workflow above to capture RDT results for a patient. The CHW is shown viewing the “Capture Covid-19 RDT” task after the 15 minute timer from the RD-Toolkit app has completed. After selecting the task, the CHW is brought to the CHT form which has the session information for the RD-Toolkit already loaded. The test results are recorded and then returned to the CHT from the RD-Toolkit. The last part of the video shows the completed capture report in the CHT, including the result and image of the RDT:","capture-1#Capture":"The rdt_session_result_extra_images.cropped field is truncated as it normally exceeds 10,000 characters. { \"_id\": \"a5f92d70-a3c0-4684-8ee7-fe435b49c974\", \"_rev\": \"1-a6cac66d104d779d91e7cfe16a2ee970\", \"form\": \"covid19_rdt_capture\", \"type\": \"data_record\", \"content_type\": \"xml\", \"reported_date\": 1631313478618, \"contact\": { \"_id\": \"d0bd9d0e-7a6e-4424-baea-f2ad13cc6e27\", \"parent\": { \"_id\": \"ca70460f-157d-415c-82a8-beeddaee54be\", \"parent\": { \"_id\": \"5821ca69-af9d-4245-8495-64092e2ed7f1\" } } }, \"from\": \"+13125551211\", \"hidden_fields\": [ \"inputs\", \"patient_age_in_years\", \"patient_age_in_months\", \"patient_age_in_days\", \"test-information\", \"capture\", \"summary.summary_header\", \"summary.summary_details\", \"summary.summary_name\", \"summary.summary_info\", \"summary.summary_rdt_loinc_long_common_name\", \"summary.summary_results\", \"meta\" ], \"fields\": { \"inputs\": { \"source\": \"task\", \"contact\": { \"_id\": \"bf3b7049-219d-44ef-a2a4-1647b75157e1\", \"patient_id\": \"34150\", \"first_name\": \"Jessica\", \"last_name\": \"Whitehouse\", \"name\": \"Jessica Whitehouse\", \"date_of_birth\": \"1984-06-05\", \"sex\": \"female\", \"phone\": \"+13125551222\", \"phone_alternate\": \"+13125551233\", \"address\": \"45 Frank ST, Kent Town\", \"parent\": { \"_id\": \"a894c6b9-d4be-428e-a855-27cd8082be3c\", \"name\": \"Jessica Whitehouse's Household\", \"address\": \"\", \"parent\": { \"_id\": \"ca70460f-157d-415c-82a8-beeddaee54be\", \"name\": \"Blue Tree Health Center\", \"address\": \"23 Willard ST, Kent Town\" } } } }, \"patient_uuid\": \"bf3b7049-219d-44ef-a2a4-1647b75157e1\", \"patient_name\": \"Jessica Whitehouse\", \"patient_age_in_years\": \"37\", \"patient_age_in_months\": \"447\", \"patient_age_in_days\": \"13611\", \"age\": \"37 years old\", \"test-information\": { \"session_id\": \"0faf0709-3c5f-405c-a692-1e0c96166782\", \"administrator_id\": \"d0bd9d0e-7a6e-4424-baea-f2ad13cc6e27\", \"administrator_name\": \"mrjones\", \"test_id\": \"69f30b96-c9cd-4a4e-acd2-72933f8b564b\", \"facility_id\": \"ca70460f-157d-415c-82a8-beeddaee54be\", \"facility_name\": \"Blue Tree Health Center\", \"facility_address\": \"23 Willard ST, Kent Town\", \"facility_test_setting\": \"\", \"other_test_setting\": \"\", \"test_reason\": \"symptomatic\", \"symptoms\": \"sore_throat cough loss_of_taste_or_smell\", \"days_since_symptoms_began\": \"4\", \"specimen_type\": \"nasopharyngeal\", \"specimen_type_other\": \"\", \"rdt_lot\": \"LOT12BA\", \"rdt_lot_expiry_date\": \"2021-09-17\", \"additional_notes\": \"All seals intact, all doses kept at correct temperature.\" }, \"capture\": { \"rdtoolkit-capture\": { \"action\": \"org.rdtoolkit.action.Capture\", \"note_instructions_provision\": \"\", \"android-app-inputs\": { \"rdt_session_id\": \"69f30b96-c9cd-4a4e-acd2-72933f8b564b\" }, \"android-app-outputs\": { \"rdt_session_bundle\": { \"rdt_session_state\": \"QUEUED\", \"rdt_session_time_started\": \"1631312461680\", \"rdt_session_time_resolved\": \"1631313361680\", \"rdt_session_time_expired\": \"1631313661680\", \"rdt_session_test_profile\": \"premier_medical_sure_status_c19\", \"rdt_session_result_bundle\": { \"rdt_session_result_time_read\": \"1631313440887\", \"rdt_session_result_extra_images\": { \"cropped\": \"/9j/4AAQSkZJRgABAQAAAQABAAD/4gIoSUNDX1BST0ZJTEUAAQEAAAIYAAAAAAIQAABtbnRyUkdCIFhZWiAAAAAAAAAAAAAAAABhY3NwAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAQAA9tYAAQAAAADTLQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAlkZXNjAAAA8AAAAHRyWFlaAAABZAAAABRnWFlaAAABeAAAABRiWFlaAAABjAAAABRyVFJDAAABoAAAAChnVFJDAAABoAAAAChiVFJDAAABoAAAACh3dHB0AAAByAAAABRjcHJ0AAAB3AAAADxtbHVjAAAAAAAAAAEAAAAMZW5VUwAAAFgAAAAcAHMAUgBHAEIAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAFhZWiAAAAAAAABvogAAOPUAAAOQWFlaIAAAAAAAAGKZAAC3hQAAGNpYWVogAAAAAAAAJKAAAA+EAAC2z3BhcmEAAAAAAAQAAAACZmYAAPKnAAANWQAAE9+-----SNIP-----+SkUbNztxB28pg/3WxqNihXn/ZSlB//Z\" }, \"rdt_session_result_map\": { \"sars_cov2\": \"sars_cov2_pos\" } } } }, \"preview_session_state\": \"COMPLETED\" }, \"note_continue_1\": \"\", \"note_continue_2\": \"\" }, \"repeat-test\": { \"repeat_test\": \"no\" }, \"summary\": { \"time_started\": \"10 Sep, 2021 at 15:21:01\", \"time_read\": \"10 Sep, 2021 at 15:37:20\", \"time_expired\": \"10 Sep, 2021 at 15:41:01\", \"results_expired\": \"FALSE\", \"result\": \"Positive\", \"summary_header\": \"\", \"summary_details\": \"\", \"summary_name\": \"\", \"summary_info\": \"\", \"summary_rdt_loinc_long_common_name\": \"\", \"summary_results\": \"\", \"summary_image\": \"\" }, \"meta\": { \"instanceID\": \"uuid:3225ed73-209f-4ddf-864a-ee0e4d2a51e3\", \"deprecatedID\": \"\" } }, \"geolocation_log\": [ { \"timestamp\": 1631313478752, \"recording\": { \"latitude\": 5.9950304, \"longitude\": -5.0981426, \"altitude\": 706.6073668124792, \"accuracy\": 11.522000312805176, \"altitudeAccuracy\": null, \"heading\": null, \"speed\": null } } ], \"geolocation\": { \"latitude\": 5.9950304, \"longitude\": -5.0981426, \"altitude\": 706.6073668124792, \"accuracy\": 11.522000312805176, \"altitudeAccuracy\": null, \"heading\": null, \"speed\": null }, \"_attachments\": { \"user-file/covid19_rdt_capture/summary/summary_image\": { \"content_type\": \"image/png\", \"revpos\": 1, \"digest\": \"md5-H537gv0l2mOyltmyzBRaZA==\", \"length\": 211302, \"stub\": true }, \"content\": { \"content_type\": \"application/xml\", \"revpos\": 1, \"digest\": \"md5-cwJDPyvLshux7nfuJxjnzQ==\", \"length\": 287073, \"stub\": true } } }","customizing-the-application#Customizing the application":"These are the files in the COVID-19 app where you’ll want to focus your customization efforts:\n├── forms │ ├── app │ │ ├── covid19_rdt_capture.properties.json │ │ ├── covid19_rdt_capture.xlsx │ │ ├── covid19_rdt_capture.xml │ │ ├── covid19_rdt_provision.properties.json │ │ ├── covid19_rdt_provision.xlsx │ │ └── covid19_rdt_provision.xml ├── tasks.js The forms/app/covid19_rdt_provision and forms/app/covid19_rdt_capture forms (xlsx, xml and properties.json) represent the provision and capture portions of the forms. The tasks that get created are defined in tasks.js. Not shown are standard contact definitions in forms/contact/* as well as supporting configurations for icons and other CHT application settings.\nTo read more about how these files all work together, see app forms, contact forms, and task reference documentation","example-form-submission#Example form submission":"While likely too verbose for humans to read, these unredacted sample JSON documents from the COVID-19 application can be used for reference to know where to find fields when querying the CHT API or Postgres.","images#Images":"27 high resolutions images taken from a demonstration CHW device are available for download. These cover the entire usage of the reference app.","problem-being-addressed#Problem Being Addressed":"The original call for proposals best describes why Medic created this app:\nFIND is working towards supporting countries in implementing an effective test-trace-isolate response using digital tools. To this end, FIND is looking to partner with leading digital solution providers to accelerate the development and deployment of a set of minimum functionalities for the collection of COVID RDT data and supporting incorporation of these functionalities into existing digital tools for use in low- and middle-income country settings.","provision#Provision":"This first video shows the left side of the workflow above to provision an RDT for a patient. The CHW is shown finding Jessica Whitehouse’s contact and choosing a new action of “RDT Covid-19 - Provision”. The CHW then does pre-test set up, checking Jessica’s symptoms and location and confirming the test method and lot information. You can see the CHW launching the RD-Toolkit, reading the instructions and then, starting the session and timer. With the RD-Toolkit sending back all the information to the CHT, a task “Capture Covid-19 RDT” can be seen in the CHT for the CHW to follow up on when the RD-Timer has completed. The last part of the video shows the completed provision report in the CHT:","provision-1#Provision":"{ \"_id\": \"8ef8b4c4-59fc-4139-b760-64414637ed65\", \"_rev\": \"2-f64dd6048aebaf8f9bbaa38452640cf3\", \"form\": \"covid19_rdt_provision\", \"type\": \"data_record\", \"content_type\": \"xml\", \"reported_date\": 1631312469783, \"contact\": { \"_id\": \"d0bd9d0e-7a6e-4424-baea-f2ad13cc6e27\", \"parent\": { \"_id\": \"ca70460f-157d-415c-82a8-beeddaee54be\", \"parent\": { \"_id\": \"5821ca69-af9d-4245-8495-64092e2ed7f1\" } } }, \"from\": \"+13125551211\", \"hidden_fields\": [ \"patient_age_in_years\", \"patient_age_in_months\", \"patient_age_in_days\", \"provision\", \"summary\", \"meta\" ], \"fields\": { \"inputs\": { \"meta\": { \"location\": { \"lat\": \"\", \"long\": \"\", \"error\": \"\", \"message\": \"\" }, \"deprecatedID\": \"\" }, \"user\": { \"contact_id\": \"d0bd9d0e-7a6e-4424-baea-f2ad13cc6e27\", \"facility_id\": \"ca70460f-157d-415c-82a8-beeddaee54be\", \"name\": \"CHW123\" }, \"source\": \"contact\", \"contact\": { \"_id\": \"bf3b7049-219d-44ef-a2a4-1647b75157e1\", \"patient_id\": \"34150\", \"first_name\": \"Jessica\", \"last_name\": \"Whitehouse\", \"name\": \"Jessica Whitehouse\", \"date_of_birth\": \"1984-06-05\", \"sex\": \"female\", \"phone\": \"+13125551222\", \"phone_alternate\": \"+13125551233\", \"address\": \"45 Frank ST, Kent Town\", \"parent\": { \"_id\": \"a894c6b9-d4be-428e-a855-27cd8082be3c\", \"name\": \"Jessica Whitehouse's Household\", \"address\": \"\", \"parent\": { \"_id\": \"ca70460f-157d-415c-82a8-beeddaee54be\", \"name\": \"Blue Tree Health Center\", \"address\": \"23 Willard ST, Kent Town\" } } } }, \"patient_uuid\": \"bf3b7049-219d-44ef-a2a4-1647b75157e1\", \"patient_name\": \"Jessica Whitehouse\", \"patient_age_in_years\": \"37\", \"patient_age_in_months\": \"447\", \"patient_age_in_days\": \"13611\", \"age\": \"37 years old\", \"preview_time_expired\": \"15:41:01 on 10 Sep, 2021\", \"test-reference\": { \"session_id\": \"0faf0709-3c5f-405c-a692-1e0c96166782\", \"test_id\": \"69f30b96-c9cd-4a4e-acd2-72933f8b564b\", \"facility_id\": \"ca70460f-157d-415c-82a8-beeddaee54be\", \"facility_name\": \"Blue Tree Health Center\", \"facility_address\": \"23 Willard ST, Kent Town\", \"facility_confirm_ask\": \"yes\", \"test_reason\": \"symptomatic\", \"symptoms\": \"sore_throat cough loss_of_taste_or_smell\", \"days_since_symptoms_began\": \"4\" }, \"spec-lot\": { \"specimen_type\": \"nasopharyngeal\", \"rdt_lot\": \"LOT12BA\", \"rdt_lot_expiry_date\": \"2021-09-17\", \"additional_notes\": \"All seals intact, all doses kept at correct temperature.\" }, \"provision\": { \"rdtoolkit-provision\": { \"action\": \"org.rdtoolkit.action.Provision\", \"note_instructions_provision\": \"\", \"android-app-inputs\": { \"rdt_session_id\": \"69f30b96-c9cd-4a4e-acd2-72933f8b564b\", \"rdt_config_bundle\": { \"rdt_config_classifier_mode\": \"PRE_POPULATE\", \"rdt_config_session_type\": \"TWO_PHASE\", \"rdt_config_provision_mode\": \"CRITERIA_SET_AND\", \"rdt_config_provision_mode_data\": \"sars_cov2\", \"rdt_config_flavor_one\": \"bf3b7049-219d-44ef-a2a4-1647b75157e1\", \"rdt_config_flavor_two\": \"Jessica Whitehouse\", \"rdt_config_cloudworks_dns\": \"\" } }, \"android-app-outputs\": { \"rdt_session_bundle\": { \"rdt_session_state\": \"RUNNING\", \"rdt_session_time_started\": \"1631312461680\", \"rdt_session_time_resolved\": \"1631313361680\", \"rdt_session_time_expired\": \"1631313661680\", \"rdt_session_test_profile\": \"premier_medical_sure_status_c19\" } }, \"preview_session_state\": \"RUNNING\" }, \"note_continue_1\": \"\", \"note_continue_2\": \"\" }, \"summary\": { \"syndrome_test_type\": \"COVID-19\", \"rdt_loinc_code\": \"94558-4\", \"rdt_loinc_long_common_name\": \"SARS-CoV-2 (COVID-19) Ag [Presence] in Respiratory specimen by Rapid immunoassay\", \"summary_header\": \"\", \"summary_details\": \"\", \"summary_name\": \"\", \"summary_info\": \"\", \"summary_test_name\": \"\", \"summary_test_expire\": \"\" }, \"meta\": { \"instanceID\": \"uuid:e21e1079-462b-4f56-9a33-c1e9e22a6643\" } }, \"geolocation_log\": [ { \"timestamp\": 1631312469904, \"recording\": { \"latitude\": 5.9949813, \"longitude\": -5.0980983, \"altitude\": 706.7633651675733, \"accuracy\": 16.44700050354004, \"altitudeAccuracy\": null, \"heading\": null, \"speed\": null } } ], \"geolocation\": { \"latitude\": 5.9949813, \"longitude\": -5.0980983, \"altitude\": 706.7633651675733, \"accuracy\": 16.44700050354004, \"altitudeAccuracy\": null, \"heading\": null, \"speed\": null }, \"_attachments\": { \"content\": { \"content_type\": \"application/xml\", \"revpos\": 1, \"digest\": \"md5-VkGDlztsrWtyqNI6X4U9Yg==\", \"length\": 5612, \"stub\": true } } }","reports-and-dashboards#Reports and Dashboards":"Like all applications written for the CHT, there are built-in mechanisms to retrieve raw and aggregate data to generate reports and dashboards. Here are some ways that the data can be accessed:\nIn app targets: Gives the CHW or their supervisor an aggregate view of any of the form fields. Since targets rely on the data on the device, if targets include data from other users then permissions must be set on the relevant forms so that the data can be replicated and synchronized accordingly. API Calls: Given that all form submissions are captured in JSON and that we know the data model well, you can easily do API calls to a CHT server instance and use some custom code (node, python etc) to gather and show stats on a daily basis. You can export to either JSON or CSV. See API docs for reports as well as monitoring metadata. PostgreSQL queries: CHT ships with a utility to export all the data that the API has to a relational database, Postgres. You have all the raw data the API has, but can now use the power of joins and groupings to come up with totally customizable stats by day, week, month etc. Data can be synched near real time from the CHT. Dashboards: Medic has used both Klipfolio and, more recently, Superset to create more complex yet still user-friendly dashboards. This is particular useful for those who need to view the data but wouldn’t otherwise be logging in to CHT apps. These dashboards generally access the relational data in the Postgres database as the back end. Third-Party Applications: Connecting to third-party applications can be done using built-in integrations, or building a workflow with custom integrations.","sample-api-call#Sample API call":"Start with finding out the names of the forms you can get reports from. If you had deployed this application without any customizations, you would have these forms available as seen by calling the forms API:\ncurl \"http://LOGIN:PASSWORD@HOSTNAME/api/v1/forms\" | jq The resulting JSON is formatted by jq for you to get an easy to read list.\n[ \"contact:clinic:create.xml\", \"contact:clinic:edit.xml\", \"contact:district_hospital:create.xml\", \"contact:district_hospital:edit.xml\", \"contact:health_center:create.xml\", \"contact:health_center:edit.xml\", \"contact:person:create.xml\", \"contact:person:edit.xml\", \"covid19_rdt_capture.xml\", \"covid19_rdt_provision.xml\" ] The last two forms can be used to query the reports API to get RDT provions and captures. To get all the capture reports into a file called output.csv, you would use this call:\ncurl \"http://LOGIN:PASSWORD@HOSTNAME/api/v2/export/reports?filters[search]=\u0026filters[forms][selected][0][code]=covid19_rdt_capture\" \u003e output.csv As all API calls need to be authenticated, be sure to use a login with admin permissions with this structure: http://LOGIN:PASSWORD@HOSTNAME.","solution-overview#Solution Overview":"This reference app provides a base layer of functionality that you can easily customize to meet the needs of your health program. Specifically, this application has examples of:\nProvisioning COVID-19 RDT tests Capturing COVID-19 RDT results Storing all RDT data, including pictures, in the CHT Best practices for RDT workflows in the CHT Your instance of CHT needs to be on v3.13+ which has features developed to support this reference application, including:\nDisplay Base64 Image - show ASCII encoded images inline Android App Launcher - integrate with third party apps like the RD-Toolkit Parse Timestamp to Date - convert epoch time stamps (1628945040308) to your desired format (Sun Mar 19 13:25:08). For more information on these features, see the “Related Content”.\nAdditional requirements for this application beyond CHT 3.13, include CHT Android 0.10.0 or later and Dimagi’s RD-Toolkit 0.9.8 or later.\nWhile this application calls the RD-Toolkit, the integration features in the CHT Core and CHT Android are generic. This means you could use a different RDT Android application if you prefer. Beyond the scope of RDTs, you could use this integration feature to launch any other Android app to perform an action and save the result in the CHT. To read more about this feature, see the Android App Launcher section in the Forms reference documentation.","training-materials#Training Materials":"Medic is providing images and videos for use in training CHWs on how to use the CHT with the RD-Toolkit. These could be combined with existing in app training if needed. As well, the RD-Toolkit has in app instructions for how to use specific RDTs.","videos#Videos":"Provided here are two videos of the Provision and Capture forms in the COVID-19 application.","workflow#Workflow":"There are three main components to this application:\nThe CHT forms to provision and capture RDTs (Green) Using a third-party app to use an RDT (Yellow) Tasks to remind CHWs to complete an RDT that has been started (Blue)"},"title":"COVID-19 Testing"},"/reference-apps/direct-to-client/":{"data":{"":"This documentation provides a guide for designing and deploying direct-to-client (D2C), two-way texting (2wT) workflows to support client follow-up care using the community health toolkit (CHT). 2wT is a mobile text messaging system built on open-source, CHT tools to engage clients in their health care; to facilitate prompt client - healthcare provider interactions; to provide low-cost telehealth; and, to improve health care outcomes through the early identification of, and referral for, potential complications.\nThe hybrid 2wT system is used for relaying automated health education and check in messages to clients, generating tasks to improve client follow-up and health provider reporting, while also allowing for free text interaction between clients and healthcare providers. This document describes the hybrid 2wT system features and its functionalities. It also provides an opportunity for digital health implementers to explore and learn how direct-to-client communication can be achieved through integrating app features within the CHT, with messaging technologies such as RapidPro and SMS aggregators.\nProblem being addressed Recipients of health care in sub-Saharan Africa face significant barriers in accessing quality services. These barriers include geographical distance, limited availability of skilled health care workers, and both direct and indirect costs - all of which can present major challenges in clients getting timely access to health care. It is important to bring healthcare services closer to client’s households, especially those who live in remote areas. The D2C / 2wT workflows assist in addressing the health needs of such clients through connecting clients with health care providers based at the facility or community, including both clinicians or lower-level healthcare workers. Unlike phone calls which must be answered, D2C / 2wT offers convenient care – allowing both parties to communicate when needed or wanted. Unlike interventions that require a smartphone or downloading an app, 2wT clients communicate directly via the SMS capability in even basic mobile phones. D2C / 2wT can help improve healthcare access, encourage client engagement in care, promote healthy behaviors and support delivery of client centered care, including in harder to reach rural or remote areas.\nSolution overview The CHT offers general guidance on how SMS workflows can be built on CHT. CHT SMS based workflows can be configured to support D2C / 2wT between health care providers and clients. The D2C / 2wT workflows can be designed to support:\nRegular client check-ins to help keep track of the client’s condition Sending of client follow up appointment reminders with confirmation requests Sharing of information and educational health messages with the clients Client tracing and client review tasks can be assigned to specific healthcare workers. Escalated workflows can result in tasks in CHT apps for CHWs, clerks or nurses, depending on need Two-way conversation messaging between healthcare providers and clients 2wT-based telehealth, providing a lower cost format for clinical triaging, reassurance or referral to in-person care via SMS Furthermore, CHT allows integration with other health information systems including District Health Information Software 2 (DHIS2) and facility-based electronic medical record systems such as OpenMRS.\nCHT SMS workflow technical overview The SMS workflows in CHT can integrate with RapidPro flows to support two way interactive messaging between healthcare providers and household members. RapidPro is an open source tool that has the capability to support conversational messaging flows via SMS, Interactive Voice Response (IVR), Telegram, Facebook Messenger and WhatsApp. With the CHT-RapidPro integration, it is possible to design and configure SMS workflows in the two systems. Data is shared between CHT and Rapidpro via the APIs; and the information from the interactive texting is used to update clients details on CHT through CouchDB which can trigger tasks on CHT.\nCHT-RapidPro SMS workflows allows for automated visit scheduling, replying and routing to an SMS based gateway based on preconfigured SMS logic, thus eliminating the need for a healthcare worker (clerk or clinician, depending on the intervention specifics) to send, monitor and reply to each text. To use SMS workflows with CHT, you will need a texting channel (a service that enables you to send or receive messages or a phone call). CHT can be integrated with a texting channel like an SMS aggregator which provides a reliable cloud based platform to send and receive an unlimited number of SMSs to and from clients or household members.\nDirect-to-client, two-way texting, technical architecture The CHT-RapidPro integration enables App builders to build complex conversational SMS workflows that support client care and support coordination of care at the facility and community levels.\nClients are enrolled directly using the CHT D2C, 2wT app using a phone, tablet or computer. Clients need only simple phones and do not need to download an app. The resulting client data is then stored and managed using CouchDB and a PostgreSQL database system. Through the CHT application programming interface (API), client messages are sent to Rapidpro, and RapidPro pushes summary data back to the CHT to update client responses and status. On the client interface these can be automated messages or interactive free text with healthcare providers. An SMS text message aggregator service and a short code channel linked to RapidPro streamlines the incoming and outgoing SMS text messages; while the CHT generates the appropriate tasks (help clinicians triage, refer, track, and trace clients)and reports (keep track of completed actions and monitor clients) as represented in figure 1.\nFigure 1: System architecture of direct-to-client (D2C), two-way texting (2wT) for voluntary medical male circumcision (VMMC) postoperative care. API: application programming interface; CHT: Community Health Toolkit.\nThe CHT core framework has inbuilt privacy/security features including two- factor authentication, role based authorization, data security, and a range of protected data access endpoints. The system can be configured to manage user roles and permissions for access of CHT applications. Responsible data practices is enforced through the Privacy and Data Protection Policy.\nThe D2C, 2wT app incorporates the CHT security features in order to protect client data and ensure the confidentiality and privacy of client information. Users are encouraged to use password protected user accounts, the app also has full disk encryption and auto-lock screens for users’ devices (android phones and tablets) in order to minimize the risk of unwarranted access. Role based access controls also make sure that users can only view and edit information that the permissions assigned to the user role allow them to.\nCase adaptation: Voluntary medical male circumcision app co-designed by I-TECH and Medic The University of Washington, Department of Global Health’s International Training and Education Center for Health (I-TECH), Medic, and local partners including Zim-TTECH, Lighthouse Trust, and Aurum Institute, collaboratively designed, developed, and scaled a CHT-based voluntary medical male circumcision (VMMC) app for post-operative follow-up with support from the National Institute of Health, USA The D2C, 2wT app supports automated, interactive telehealth via direct-to-client messaging between VMMC nurses and clients. 2wT telehealth helps improve the quality and efficiency of care, maintaining client safety while lowering follow-up care costs. In the spirit of contributing to the growth of the public global goods, I-TECH and Medic have coordinated to release the application source code of the D2C, 2wT app.\nUsers and hierarchy Users Location Devices Roles Program managers / M\u0026E Admin level Laptop Users at this level have access to all sites. They can access many sites via the CHT D2C messaging App. They can download information from the dashboard. Hub / Super nurse Admin level Laptop / Desktop Users have access to multiple sites within the district and can access them via the CHT D2C messaging App. They are online users and are able to triage, refer clients to health facilities to be reviewed by site nurses. Site nurse Health facility or outreach site Smartphone Users are routine MC nurses at health facilities or outreach sites who enroll D2C clients and interact with clients enrolled at their site via the CHT D2C messaging app. In higher volume facilities, data clerks may also be involved in data entry of client enrolment details. VMMC Clients Community / household level Smartphone / feature phone VMMC clients with access to mobile devices and who have consented to participate in and have been enrolled into the D2C, 2wT app. They will receive daily check in messages and can communicate with their health care providers via text. Workflows Current workflow for voluntary medical male circumcision client enrollment, screening and procedures, before direct-to-client messaging was introduced:\n1. Enrolment - Static/Outreach Site visit 2. HIV Testing, screening \u0026 counseling 3. Procedure 4. Static/Outreach Site visit 5. Follow up visit Nurse enrols clients Client tested for HIV, screened for wounds, any form of bleeding, and any other medical issues. Counselling provided as needed. If client’s HIV status doesn’t pose risks, procedure is done. Post-operative counseling offered Register after surgery On Day 2 and Day 7 after surgery 1. Automated check-in workflow to support client care Eligible male clients with access to mobile phones are registered on the VMMC app to enable them to receive daily check-in texts to help track the condition of the clients for 13 days after the circumcision. During registration (Day 0), details about the method of circumcision; whether the client is an adult or a minor, and the preferred phone numbers to be used for communication are recorded. Each client receives an enrollment confirmation to ensure that the communication channel is open. Clients also receive postoperative counseling using the 2wT flip-book on how to respond to the daily SMS text message and review photos that illustrate the signs of complications for reporting via daily SMS text messages. VMMC clients, including those with 2wT, have the option to attend routine pre-scheduled visits on day 2 and day 7 post-op.\nAfter the registration, the VMMC clients registered on the VMMC app receive preconfigured, bidirectional daily follow up texts to check on their healing. These are in the form of automated daily SMS text messages on days 1 to 13 in the predominant languages of the area. The clients respond to the daily SMS text message with a single numeric (0=no problem or 1=I need help) response. They could respond to any daily SMS text message at any time. They could also initiate an unrestricted, freely-worded text response at any time, and in any language - instead of or in addition to the daily numeric response.\nAn adverse event (AE) is any complication or problem that may happen during or after a surgery, including a VMMC surgery. AEs may be mild, moderate or severe. All moderate and severe AEs should be reviewed by a clinician. Moderate and severe AEs after VMMC are rare, but occur about 2% of the time. . Identifying AEs swiftly and managing them properly is a sign of a quality surgical program, including VMMC programs.\nDirect to client messaging for voluntary male circumcision clients without AE:\nEnrolment Automated, daily check-in SMS {{No Action}} 1a Static/Outreach Site visit Data Clerk/Site Nurse enrolls eligible clients into the D2C program using the enrollment form 2 System sends automated daily SMS to client to see how they are doing. 3 SMS response AE absent 1b Registration and SMS confirmation Client gets a confirmation of enrollment Via SMS 2a Client SMS response with potential AE present Continue automated daily check-in SMS until day 13 2b Client SMS response AE absent 2. Triaging to care workflow for clients with potential complications Clients with potential AEs (those who respond with 1 or a free text indicating concerns) are followed up by nurses and given care via the D2C, 2wT intervention. Clients may be followed up via SMS / call. Nurses provide education and reassurance, or refer in cases where they need to go to a health facility for in-person review if an emergency was suspected. The clients could request a call back to speak with the nurse during routine clinic hours; the nurse could also initiate calls to follow up with clients when desired.\nDirect-to-client messaging for voluntary male circumcision clients without AEs:\nEnrolment Automated, daily check-in SMS Referral for care task Client review visit 1a Static/Outreach Site visit. Data Clerk/Site Nurse enrolls eligible VMMC clients into the D2C, 2wT program using the enrollment form 2 Check in SMS of Wellbeing. System sends automated daily SMS to client to see how they are doing. 3 2wT/HUB Nurse triages patient, provides guidance.2wT/HUB Nurse triages patient, provides guidance.2wT/HUB Nurse triages patient, provides guidance. 4 When the client comes to the health facility after a referral, the clinicians (nurses or clinical associates) at site level use the Client in-person visit form to complete the details of the review 1b Registration and SMS confirmation. Client gets a confirmation of enrollment Via SMS 2a Client SMS response with potential AE present 3a If nurse and client satisfied, no further response. If client just comes into the clinic, the site Nurse completes the Client in-person visit form to complete the details of the review 2b Client SMS response AE absent 3b If nurse thinks client may have AE referral for care task is cleared by completing the Referral for Care form, calling site nurse to alert of referral. and the client is informed via call or message 3. Escalated workflow to generate tasks when clients do not respond If the client has not responded to any of the daily check in-messages by day 3, they get a reminder message to check on them and prompt a response. A tracing follow up task is triggered for the 2WT nurse if a VMMC client does not respond to any of the daily check in texts by day 4 for both minors and adults. The 2WT nurse then records the tracing method and outcomes by completing the trace client task.\nA VMMC client who responds with a potential complication triggers a Client review: Potential complication task for the 2WT nurse. They then report and fill in whether the client was reviewed by a clinician. If the client has been reviewed by a clinician, they record the details of the review, time, place and adverse events identified. If the client has not been reviewed by a clinician, the 2WT nurse will try and trace them by SMS, phone call or a home visit; and report the tracing outcomes as shown in figure 6 below.\nDirect-to-client messaging for voluntary male circumcision clients without adverse effects:\nEnrolment Automated, daily check-in SMS Tracing follow up task Client review visit 1a Static/Outreach Site visit Data Clerk/Site Nurse enrols eligible VMMC clients into the D2C, 2wT program using the enrolment form 2 Check in SMS of Wellbeing System sends automated daily SMS to client to see how they are doing. 3a No client response by day 3= additional check-in SMS at noon 4 When the client comes to the health facility after a referral, the clinicians (nurses or clinical associates) at site level use the Client in-person visit form to complete the details of the review 1b Registration and SMS confirmation Client gets a confirmation of enrollment Via SMS 2a Client SMS response with potential AE present 3b No client response by day 4. Trace Client task is generated 2wT/HUB Nurse initiates the tracing activity. - Client traced and no concern; no action - Client traced \u0026 AE referral follow up task - Client reviewed complete review form - No response at all Notes in tracing report If client just comes into the clinic, the site Nurse completes the Client in-person visit form to complete the details of the review 2b Client SMS response AE absent 3c 2wT/HUB Nurse triages patient, provides guidance. If nurse and client satisfied, no further response. If nurse thinks client may have AE referral for care task is cleared by completing the Referral for Care form, calling site nurse to alert of referral, and the client is informed via call or message 4. Clients can share requests by messaging health care providers. Clients registered in the intervention can also initiate the bidirectional messaging with a 2WT Nurse by messaging a central phone number or a short code. Clients can report any concern, ask a question about wound healing, or request for help from health care providers via SMS. For this workflow, the logic can be preconfigured to support health triage and clinical referrals. Using the messaging functionality on CHT, health care providers based at the facility can view, manage and respond to incoming texts from VMMC clients.\nEvidence of Impact In collaboration with researchers at the University of Washington, we assessed the effectiveness of the 2wT intervention through randomized controlled trials in Zimbabwe and South Africa. The foundational randomized control trial in Zimbabwe in 2018, demonstrated that post-surgical client follow up via SMS was as safe as follow up care at the clinic, and that the transition to SMS-based follow-up option enabled an 85% reduction in unnecessary clinic visits. Similar findings were reported in South Africa. This approach to messaging with clients was more efficient and cheaper than standard care, thereby lowering costs. Both clients and clinicians both found the approach to be highly usable and acceptable for post-operative care and further usability studies found that it was preferred by clients and providers alike (see “Benefits” below). We are also expanding our application of D2C, 2wT for antiretroviral therapy (ART) clients in Malawi, aiming to have similarly positive impact on engagement in ART and retention in HIV care.\nBenefits For Clients Reduced cost of follow-up Comfort and ease of usability of 2WT Real-time clinical support in your pocket Rapid support in case of suspected AE Of Participation Increase demand/interest from men who would opt for MMC but not for the follow-up visits Early identification of AE’s Ability to scale based on organizational needs Less clinical time spend on unnecessary followup-visits Publications Great focus/time on incoming clients for MMC More scenarios where direct-to-client messaging can be used to support client care 1. Facility appointment reminders workflow Appointment reminders can be configured on CHT so that household members and clients can receive facility appointment reminders. Facility appointment reminders are configured as per the recommended health guidelines for specific use cases. The clinic visit appointment reminders can be configured to automatically stop once a client completes the expected clinic visits.\n2. Active case finding by messaging household members with survey questions Active case finding by messaging households with survey questions about the health of family members.\nFrequently Asked Questions Is the client charged for receiving or sending the SMS? It is possible for health programs to acquire a zero rated short code service which is free for clients and household members to send and receive texts from the short code. What are ways to handle exceptions? Exceptions can occur when programs and flows do not work as expected. This may occur due to various technical issues and may be unavoidable. One possible way to handle these unwanted issues and errors is to set up the mail group such that a notification email is sent whenever there is any exception. Another method is to keep track of whether the flow was completed i.e., all the responses from start to finish nodes were received. For the participants whose flow may have been interrupted or incomplete, one may run the workflow again. Ways to improve response rate from clients? The workflows in RapidPro can be set up in such a way that they expire after a certain time period. Workflows can expire when there is no response from a client within a time period. You can handle such situations by repeating the workflow i.e., sending them again to the client after a certain time interval. Alternatively, it can be beneficial to do some research on which time to send the message. For example, a person may be busy at work and/or away from the phone during working hours. It may be easier for them to respond during early morning or later in the evening than in the afternoon. Resources VMMC code can be accessed using the following link D2C messaging app for post-op care.","1-automated-check-in-workflow-to-support-client-care#1. Automated check-in workflow to support client care":"","1-facility-appointment-reminders-workflow#1. Facility appointment reminders workflow":"","2-active-case-finding-by-messaging-household-members-with-survey-questions#2. Active case finding by messaging household members with survey questions":"","2-triaging-to-care-workflow-for-clients-with-potential-complications#2. Triaging to care workflow for clients with potential complications":"","3-escalated-workflow-to-generate-tasks-when-clients-do-not-respond#3. Escalated workflow to generate tasks when clients do not respond":"","4-clients-can-share-requests-by-messaging-health-care-providers#4. Clients can share requests by messaging health care providers.":"","benefits#Benefits":"","case-adaptation-voluntary-medical-male-circumcision-app-co-designed-by-i-tech-and-medic#Case adaptation: Voluntary medical male circumcision app co-designed by I-TECH and Medic":"","cht-sms-workflow-technical-overview#CHT SMS workflow technical overview":"","direct-to-client-two-way-texting-technical-architecture#Direct-to-client, two-way texting, technical architecture":"","evidence-of-impact#Evidence of Impact":"","for-clients#For Clients":"","frequently-asked-questions#Frequently Asked Questions":"","more-scenarios-where-direct-to-client-messaging-can-be-used-to-support-client-care#More scenarios where direct-to-client messaging can be used to support client care":"","of-participation#Of Participation":"","problem-being-addressed#Problem being addressed":"","publications#Publications":"2wT is safe and improves efficiency over routine visits: Evidence from South Africa and from Zimbabwe 2wT is highly usable among clients: Evidence from South Africa and from Zimbabwe 2wT saves program costs: Evidence from South Africa and from Zimbabwe 2wT is usable for healthcare workers: Evidence from South Africa 2wT is scale up, reaching over 45,000 in Zimbabwe Related pages - UW website, I-TECH/Aurum page.\nFunding: 2wT Zimbabwe was supported by the Fogarty International Center of the National Institutes of Health under Award Number R21TW010583, PI Feldacker. 2wT South Africa is supported by National Institute of Nursing Research of the National Institutes of Health (NIH) under award number 5R01NR019229, PIs Feldacker and Setswe. The content is solely the responsibility of the collaborators and authors and does not necessarily represent the official views of the National Institutes of Health.","resources#Resources":"","solution-overview#Solution overview":"","training-materials#Training materials":"User guide including tools for the nurses and clients Illustrative Videos","users-and-hierarchy#Users and hierarchy":"","workflows#Workflows":""},"title":"Direct-to-client, Two-way Texting Workflows"},"/reference-apps/ebs/":{"data":{"":"The CHT’s Event Based Surveillance (EBS) functionality enables rapid capture of information about community events that are a potential risk to public health. Deployed at the community level, this functionality is designed to:\nAchieve earliest possible detection of COVID-19 cases in communities Provide visibility into signals, reports, and investigations centrally for follow-up Coordinate and support local action based on existing roles in disease surveillance","problem-being-addressed#Problem Being Addressed":"Patient reporting through traditional primary health care channels is not well suited for detecting rapidly spreading outbreaks at a community scale. Timely detection of outbreaks and important public health events can be delayed or missed when relying on individual patient data and traditional health management information systems.","solution-overview#Solution Overview":"Event Based Surveillance with the CHT offers opportunities for rapid deployment and measurable community impact for reportable diseases, including COVID-19. Through more timely event data reporting and analysis, the CHT provides early indicators of emerging issues to community health workers across the health system. The CHT solution offers:\nTiered reporting, verification, and escalation process, which can improve speed and quality of data Signal data that can be mapped for data-driven decision-making Pre-populated with Supervisor and CHW contact information Health program continuity with the inclusion of pre-existing care workflows System scalability through training CHWs remotely on their role and responsibilities","users-and-hierarchy-example#Users and Hierarchy Example":"User Location Devices Role National and District Officials Central and district offices Desktop, laptop and smartphones Monitor overall system and analytics regarding verified, investigated and missing cases. Sub-District Investigators Facilities or local offices Tablet or smartphone Investigate verified reports within 24 hours of signal report; add data to signal case. CHW Supervisors Community level, based at facilities Smartphones and personal phones Verify COVID-19 signals. Provide feedback and guidance to CHWs. CHWs and Volunteers Community level Feature phones and some smartphones Detect and report signals. Provide guidance and health education to patients and families.","workflow-example#Workflow Example":"This demo illustrates a workflow that enables CHWs to use SMS to report signal codes for specific community health threats. The CHW Supervisor can then verify the initial report and, if warranted, escalate to the sub-county for investigation and follow-up. It is designed to be flexible and can be combined with other complimentary care workflows.\nMore background information can be found in this summary deck."},"title":"Event Based Surveillance"},"/reference-apps/interoperability/":{"data":{"":"","intended-users#Intended Users":"The intended users of the interoperable systems are CHWs on the CHT side and Healthcare Givers on the requesting system side. System administrators can access the mediator on the administration console.\nSee the sequence diagram below showcasing the with the loss to follow up flow:\nThe systems exchanging data:\nCHT OpenHIM: Mediator (middleware) Requesting System (e.g. health facility) OpenHIM was chosen as the main component of the interoperability layer and custom mediators were built to deal with the different workflows as it provides a central point of control for managing data exchange and security.","loss-to-follow-up-workflow-ltfu#Loss to Follow Up Workflow (LTFU)":"This workflow describes a use case where a health facility or a requesting system generates a list of patients who have missed follow-up appointments that were made through the CHT. A CHW would then follow up with the listed patients through SMS, a physical visit or a phone call.","problem-being-addressed#Problem Being Addressed":"Data exchange between the CHT and other systems has primarily been at peer-to-peer level. This means that the integration is built to meet the specific need in the unique scenarios. This presents a problem during maintenance and scalability as there are no defined standards that have been used. Interoperability allows technical teams to scale in an efficient and repeatable manner due to the already predefined standards.","solution-overview#Solution Overview":"This is a model for interoperability that can be used for Loss to Follow up flows between the CHT and a health facility or a requesting system. Community health workers routinely follow up on patients physically at their residences or place of work. In instances where the patient needs to visit a health facility for routine checkups or specialized care, the CHW has no visibility of the process outside the CHT. The interoperability layer built allows other systems including health facilities to exchange data in a standardized format."},"title":"Loss to Follow Up"},"/reference-apps/learning-care/":{"data":{"":"The Learning \u0026 Care Apps in the Community Health Toolkit are designed to onboard community health workers remotely to new digital training tools, and help them learn new information and care delivery responsibilities through customized educational modules.\nThe modules can be deployed both (i) via the Android integration with the Academy App (powered by OppiaMobile) described in this documentation, and (ii) within the CHT core alone, to provide a seamless online \u0026 offline experience for CHWs, supervisors, and government partners.\nIt is important to consider the potential use cases for which a CHT core \u003c\u003e OppiaMobile integration is intended, as well as the digital landscape in which it is being designed and deployed. The CHT core \u003c\u003e OppiaMobile integration may be best suited for settings where both apps are already in use, given the inherent complexities in onboarding users remotely to two apps.","covid-19-learning-and-care-supported-by-the-cht#COVID-19 Learning and Care Supported by the CHT":"","integrated-learning-and-care-apps-covid-19-supported-by-the-cht-and-oppiamobile#Integrated Learning and Care Apps COVID-19 Supported by the CHT and OppiaMobile":"More background information can be found in this summary deck","problem-being-addressed#Problem Being Addressed":"The Community Health Academy at Last Mile Health, with a range of content partners including Digital Medic, is building a library of open-access learning materials for community health workers.\nWith the spread of COVID-19, it is imperative that access to learning, integrated with care protocols, routine task and care workflows, is available to CHWs without relying on face-to-face training.","solution-overview#Solution Overview":"The Community Health Academy and Medic set out to deliver a fully-integrated Learning and Care solution, with targeted COVID-19 learning experiences as a global public good.\nThis integrated Learning \u0026 Care App leverages the remote onboarding, task \u0026 scheduling, and target features of the CHT core framework with the curated, multimedia educational content from the Academy’s COVID-19 library.","users-and-hierarchy-example#Users and Hierarchy Example":"User Location Devices Role CHW Community level Feature phone or smartphone Receive notifications about new courses, complete modules and educational assessments; provide feedback and ask for support where needed; discuss content and quizzes with supervisors; support fellow CHWs in onboarding \u0026 modules. CHW Supervisors Community level, based at facilities Smartphones and personal phones Monitor progress \u0026 ensure CHWs complete modules and quizzes; liaise with local government partners to be aware of policy updates, and to share CHW training progress \u0026 implementation feedback; view customize dashboards and provide support to CHW users. Government \u0026 Local Implementing Partners Central and district offices Desktop, laptop and smartphones Monitor progress of catchment area CHWs and supervisors through analytics \u0026 dashboards, provide up-to-date information on country-wide guidelines \u0026 global best practices (e.g., from WHO).","workflow-examples#Workflow Examples":""},"title":"Learning \u0026 Care"},"/reference-apps/maternal-newborn/":{"data":{"":"This “reference application” for maternal and newborn health provides a template for structuring and organizing your Community Health Toolkit digital health app, its configuration, and test code. It can be used as is, or serve as a great way to learn about the CHT’s foundation for forms, data fields, and analytics that can be easily customized to fit your context.","additional-resources-to-get-started#Additional Resources to Get Started":"Here are a few additional resources to help get you started with the maternal and newborn health reference application.\nView the configuration code for this reference app Install the reference app following these easy installation instructions Modify the maternal and newborn reference application for your project context using configuration best practices Understand the basis for measuring the impact of maternal and newborn workflows by reviewing the World Health Organization’s Core Health Indicators","delivery-workflow#Delivery Workflow":"Condition Task Resolution ConditionA currently registered pregnant person has reached a gestational age of 42 weeks and has not had a miscarriage or a delivery reported. TaskA Delivery Task requesting that the CHW check in on the woman to see whether she has delivered. ResolutionCHW submits a Delivery Form, confirming the pregnancy outcomes. Profiles are created for each baby that is alive. This “ends” the pregnancy workflow. ConditionA CHW submits a Delivery Form that contains a danger sign for mom or baby, or reports that either mom or baby are “alive and unwell.” TaskA Danger Sign Follow-Up Task appears immediately and is due 3 days later. Persists for 7 days after due date. ResolutionThe CHW calls or visits woman to confirm that she attended and submits a Danger Sign Follow-Up Form. If this is not received, another Danger Sign Follow-Up Task is triggered. ConditionIf the CHW notices danger signs at any time, then she submits a Danger Sign Form and immediately refers the patient to the facility. TaskA Danger Sign Follow-Up Task will appear immediately and is due 3 days later. Tasks persists for 7 days after due date. ResolutionCHW submits Danger Sign Follow-Up Form, verifying that she called or visited the woman to confirm that she attended the facility. If this is not received, another Danger Sign Follow-Up Task is triggered.","forms-hierarchy#Forms Hierarchy":"Once a hierarchy of people and places is established, forms are added at different levels. This diagram indicates the forms that can be filled about a person in the app (in this case, family members at the household level), as well as the person/user who will access these forms and make the reports (CHWs at the CHW Area level). Some forms are accessible as actions from the family member’s profile as actions, others from the CHW’s task list as tasks, and some as either.\nSee Also: Controlling form properties","pregnancy-workflow#Pregnancy Workflow":"Condition Task Resolution ConditionUpon discovering a pregnancy, a CHW submits a Pregnancy Form confirming a new pregnancy with the estimated gestational age. TaskAt the 8 ANC touchpoints defined by the WHO, the CHW receives a Pregnancy Home Visit Task to let her know that it’s time to check in on the pregnant woman. ResolutionCHW submits Pregnancy Home Visit Form, demonstrating that she provided ANC counseling, gathered information from prior facility visits, and screened for danger signs. ConditionA Pregnancy Form is submitted with the gestational age unknown. TaskA Pregnancy Visit Task appears every 2 weeks for 42 weeks. ResolutionCHW submits Pregnancy Home Visit Form. If the gestational age is entered, the workflow will change to Pregnancy Home Visit Tasks. ConditionA CHW submits a Pregnancy Home Visit Form that includes an upcoming facility visit date. TaskA Health Facility ANC Reminder Task 1 week ahead of the facility visit to remind the woman to attend. ResolutionCHW submits Health Facility ANC Reminder Form, confirming that she called or visited the woman to remind her of her upcoming facility visit. ConditionIf the CHW notices danger signs at any time, then she submits a Danger Sign Form and immediately refers the patient to the facility. TaskA Danger Sign Follow-Up Task will appear immediately and is due 3 days later. Tasks persists for 7 days after due date. ResolutionCHW submits a Danger Sign Follow-Up Form, verifying that she called or visited the woman to confirm that she attended the facility. If this is not received, another Danger Sign Follow-Up Task is triggered.","problem-being-addressed#Problem Being Addressed":"Access to quality maternal and newborn care is the cornerstone of many community health programs. For many women living in communities at the last mile, pregnancy can be a vulnerable time. There is a need for community health programs to support early pregnancy registration, consistent antenatal care (ANC) visits, and in-facility deliveries. In addition, the short time window following delivery for postnatal care (PNC) is a critical time for catching life-threatening danger signs for the new mother and baby.","solution-overview#Solution Overview":"The maternal and newborn health workflow ensures that women receive the care that they need during their pregnancy with the support of CHWs. Early pregnancy registration, timely antenatal care visits, and improved care coordination between CHWs and clinics increase the likelihood that women will deliver in a facility with the support of skilled birth attendants. This ultimately will help save the lives of mothers and babies, as well as strengthen the maternal and newborn health services of the health system. Community Health Toolkit applications with maternal and newborn workflows are used by health workers and clinical staff to:\nRegister pregnancies Provide a schedule for on-time ANC visits Offer education for the mother at each stage of pregnancy Screen for and report danger signs in the pregnant woman and newborn Refer and encourage pregnant women to deliver at a facility Ensure on-time PNC visits for mother and newborn","workflows#Workflows":"Both maternal and newborn care workflows are defined to connect form actions and data with people. Detailed documentation for these forms and task schedules are linked from the workflow diagrams below. Accompanying this documentation are tips and insights into the design decisions made along the way, and suggestions for how and where to customize the forms."},"title":"Maternal \u0026 Newborn Health"},"/reference-apps/pharmacovigilance-reference-app/":{"data":{"":"","death-reporting-and-confirmation-workflow#Death reporting and confirmation workflow":"A CHP uses the assessment form to report a death caused by an adverse drug reaction, vaccination/immunization, or poor quality medicine; submission of a death report triggers a death confirmation task for a CHA.","key-pharmacovigilance-areas-supported#Key Pharmacovigilance Areas Supported":"Adverse Drug Reactions (ADRs): detect and report ADRs resulting from pharmaceutical products. Adverse Effects Following Immunization (AEFI): monitor and report adverse effects following immunization. Poor Quality Health Products and Technologies: identify and report incidents related to the use of poor-quality health products and technologies. Death Monitoring: Monitor, identify, report and record deaths resulting from monitored conditions within household members in the Pharmacovigilance application.","pharmacovigilance-workflows#Pharmacovigilance workflows":"","problem-being-addressed#Problem Being Addressed":"Self-medication, unregulated medical products, and counterfeit drugs have led to a significant increase in the prevalence of adverse drug reactions (ADRs), adverse effects following Immunization (AEFI), and the proliferation of poor-quality health products and technologies. ADRs are a common cause of hospital admissions and contribute to patient mortality, placing a substantial economic burden on resource-limited healthcare systems, especially in African countries.\nNeed for Pharmacovigilance: Pharmacovigilance focuses on the detection, assessment, understanding and prevention of adverse effects and other potential drug-related problems. Pharmacovigilance facilitates early detection of unknown adverse reactions, identifies increases in frequency of known adverse reactions and helps disseminate information to improve drug prescription and regulation. To address these challenges, there is a crucial need for a robust pharmacovigilance system that enables the detection, reporting, and mitigation of adverse drug reactions and incidents.","reporting-referral-and-follow-up-of-patients#Reporting, referral and follow up of patients":"During a household visit, a CHP uses the pharmacovigilance app to assess household members for suspected severe adverse reactions to medication or recent vaccinations/immunizations. Using the assessment form, a CHP records any suspicious issues with the medication, such as unusual colour, smell, or packaging and adverse drug effects from medication and immunizations.\nA public report task is generated for a CHA once a CHP submits a suspected case of adverse reaction. The public report form captures information about the adverse effects and medication including side effects, onset date, and current status of the reaction. Additionally, the form captures medication details such as name of the medicine, manufacturer, purchase location, start date, stop date, and expiry date. In case of a variety of medicines, the form allows a CHA to perform multiple entries.\nThe CHA also uses the public report to record outcome details, including outcome specification and recovery status. Using the public report form, the CHA is able to refer household members to the nearest facility for further review and care, this action generates a referral follow up task for the CHP. The referral follow up task appears 7 days after facility referral and guides the CHP to follow up referred cases to confirm if patients attended the referral . The CHP can also check the condition of patients and once they complete the referral follow up task, the CHA gets patient status notification task.","resources-to-get-started#Resources to Get Started":"Here are a few additional resources to help get you started with the pharmacovigilance health reference application.\nView the configuration code for this reference app Install the reference app following these easy installation instructions Modify the pharmacovigilance reference application for your project context using configuration best practices The open sharing of digital health apps used by CHWs is a monumental milestone in the digital health space, and for the CHT Community. Reach out on the forum to share how you will leverage these resources, along with your feedback and continued innovations that could benefit the larger community.","solution-overview#Solution Overview":"The CHT Pharmacovigilance Reference app is designed and developed by IntelliSOFT Consulting LTD. Components of Kenya’s Pharmacovigilance Electronic Reporting System have been integrated into the Community Health Toolkit (CHT) to support community health providers (CHPs) and Community Health Assistants (CHAs) to efficiently identify, report, refer and manage ADRs and AEFI while delivering healthcare.\nIn the spirit of openness and as a contribution to the CHT open source project, Medic and IntelliSOFT have coordinated to provide the source code and documentation of the workflows of the CHT Pharmacovigilance Reference app. This reference app serves as an example application that other CHT Implementers can use to learn how to build pharmacovigilance workflows to help improve patient safety for the community members they serve.","users-and-hierarchy#Users and hierarchy":""},"title":"Pharmacovigilance"},"/reference-apps/phc-covid/":{"data":{"":"Primary Health Care (PHC) workflows using the CHT are easily adaptable to help communities and facilities strengthen continuity of routine primary care services during COVID-19. Adapting PHC workflows is designed to:\nAddress disruptions to PHC delivery within communities while keeping CHWs and patients safe Offer remote patient and CHW support through call and text-first protocols Limit physical contact between patients, CHW’s, and facility providers by modifying existing health assessments Contain transmission via embedded COVID-19 symptom screening and referral protocols","problem-being-addressed#Problem Being Addressed":"Most primary health care programs are not designed to address the specific health needs of pandemics, such as COVID-19. For CHWs and the communities they support, the impact of the pandemic has resulted in disruptions to much needed primary health care services, such as antenatal and postnatal care. This is particularly devastating for already vulnerable populations, such as patients who live in places that lack robust health care infrastructure or have co-morbidities, who face increased challenges when CHWs and care facilities are unable to provide adequate services.\nIn response, health program administrators are rapidly adapting digitally supported PHC programs to help respond to immediate patient and community health needs. Relying on CHWs and Supervisors to quickly learn and adhere to new care workflows on their own is a major challenge to successfully modifying PHC health programs to impact patients quickly and maintain the safety of health workers.","solution-overview#Solution Overview":"Maintaining primary health care is critical both in slowing the spread of COVID-19 and managing the care of patients at home with moderate cases, as well as ensuring that disruptions to PHC are addressed and that routine care is supported during the pandemic. Building on the success of existing digitally-supported health programs and CHW patient relationships enables more effective responses to the specific health needs of their communities.\nThrough adaptations to PHC workflows, health program administrators are able to:\nSupport COVID-19 prevention, detection, and containment efforts within communities Create a coordinated approach that safely serves health workers, facilities, and communities Support home-based care for non-emergent COVID-19 cases to reduce overburdening on hospital systems Capture program learnings to create more robust and resilient health systems beyond supporting the immediate COVID-19 response","users-and-hierarchy-example#Users and Hierarchy Example":"User Location Devices Role Program Staff Central, district or local offices Desktop, laptop and smartphones Oversee delivery of routine PHC services. Continually monitor care delivery for disruptions. Ensure compliance with program-specific, national and global care protocols. CHW Supervisor Community level, based at facilities Smartphone and personal phone Oversee CHWs and track completion of their remote training modules. Follow up with CHWs needing extra support. CHW Community level Feature phone or smartphone Provide care to community using adapted PHC workflows. Complete remote training for new workflows. Enable home-based care and offer remote support through call and text-first protocols. Patient Community level Seek care for non-emergent conditions. Examples: maternal and child health, other infectious diseases, non-communicable diseases.","workflow-example#Workflow Example":"This demo illustrates how a CHT workflow that currently supports PHC can be easily adapted to reflect a COVID-19 health program response. Remote support allows for the integration of new care protocols that follow “no touch” or “visual only” reviews, transition to call/text-first protocols, and embedding COVID-19 symptom screening within PHC workflows.\nMore background information can be found in this summary deck."},"title":"COVID-19 Adaptations"},"/reference-apps/pih/":{"data":{"":"Since 2017, Partners in Health (PIH) Malawi and Medic have collaboratively co-designed and developed YendaNafe, a digital health app for community based service provision. In the spirit of openness, Medic and PIH have coordinated the release of the full application source code of Yendanafe app as first of kind ‘‘Integrated CHT Reference app’’. This Reference app provides an example that CHT Implementers can learn how they can design and configure integrated workflows.","delivery-workflow#Delivery workflow":"Condition Task Resolution ConditionA currently registered pregnant person has reached a gestational age of 42 weeks and has not had a miscarriage or a delivery reported. TaskA Delivery Task requesting that the CHW check in on the woman to see whether she has delivered. Task appears from 38 weeks. ResolutionIf the woman has delivered and is available at home, CHW submits Delivery Form, confirming the pregnancy outcomes. Profiles are created for each baby that is alive. This “ends” the pregnancy workflow. ConditionWhen a woman delivers and is discharged from the health facility, a health facility staff (Site Supervisor) submits a Delivery Discharge Form. TaskCHW receives a Delivery Report Task to inform them to visit the mother and report the delivery. ResolutionCHW visits the mother, submits a Delivery Form, confirming the pregnancy outcomes. Profiles are created for each baby that is alive. This “ends” the pregnancy workflow.","family-planning-workflow#Family planning workflow":"The FP workflow ensures that eligible women receive their FP needs with support from the CHWs. The FP workflow supports CHWs to counsel eligible women on FP, refer women to facilities for FP services screen FP clients for side effects and refer and ensure ontime FP renewals.","family-planning-workflow-1#Family planning workflow":"Condition Task Resolution ConditionUpon discovering a woman who is not pregnant and not on FP, the CHW provides FP education, refers them to a health facility if necessary and submits a Family Planning Screening Form. TaskA Pregnancy Confirmation and FP Follow-up Task will appear 2 days and is due 3 days later. The task reminds the CHW to confirm referral attendance and FP status. ResolutionThe woman visits the health facility and is started on FP if eligible. ConditionA woman is found to be already on FP, the CHW records FP method, screen for side effects and counsel on adherence to method and clinic appointments. TaskEvery first day of the month, the CHW receives Family Planning Follow-Up Task to remind that it is time to check on the woman. ResolutionThe CHW submits Family Planning Follow-Up Form demonstrating that she screened for side effects, need to change FP methods, offered adherence counselling and remind the woman of her upcoming appointment. ConditionFor women on long term FP methods either IUCD or implant, the CHW records the FP expiry date. TaskOne month to the expiry date the CHW receives FP Expiry Follow-Up Task to remind the woman to renew their FP. Tasks persists for 30 days past the due date. ResolutionCHW submits a FP Expiry Follow-Up Form, verifying that she visited the woman to confirm that she attended the facility for either renewal or change of FP method.","human-immunodeficiency-virus-workflow#Human Immunodeficiency Virus workflow":"The Human Immunodeficiency Virus (HIV) workflow is designed to guide CHWs in HIV screening of household members, screening for side effects for persons on antiretroviral treatment and CHWs can use the workflows to trace defaulters who are on ART treatment.\nCondition Task Resolution ConditionCHW educates and screens over 5’s for duration since last HIV test. CHW refers any eligible person to the health facility and submits a HIV Screening Form. TaskA HIV testing referral Follow-up Task will appear within 2 days and is due 3 days later. The task is to remind the CHW to confirm referral attendance and HIV testing status. ResolutionCHW submits HIV Testing Referral Follow-up Form verifying that she visited the person to confirm that he went to the health facility. ConditionIf person tests HIV positive, he/she is enrolled into HIR/ART program and started on treatment. TaskIn the first year of treatment, the CHW visits the person daily and submits Daily Follow up Form. ResolutionThe CHW submits Daily Follow-up Form demonstrating that she provided adherence counselling, screened for danger signs/side effects and reminded the person of upcoming facility visits. ConditionA person walks into health facility without CHW referral and is enrolled into ART program. Site Supervisor submits a Treatment Enrollment Form indicating person has been enrolled in ART program. TaskA HIV Daily Follow-up Task will appear immediately on the CHW device. The task is meant to inform the CHW that the person has been enrolled in NCD program and needs their follow up. ResolutionThe CHW submits Daily Follow-up Form demonstrating that she provided adherence counselling, screened for danger signs/side effects and reminded the person upcoming facility visits.","imci-workflow#IMCI workflow":"Condition Task Resolution ConditionCHW visits, educates, and screens under 5 for cough, diarrhea, fast breathing, fever, and fever with convulsions. CHW submits a IMCHI Screening Form and refers to the health facility if necessary. TaskA IMCI Referral Follow-up Task will appear within 2 days and is due 3 days later. The task is to remind the CHW to confirm referral attendance. ResolutionA IMCI Referral Follow-up Form, verifying that she visited the child to confirm referral completion and offer adherence counselling or remind on upcoming appointments.","integrated-management-of-childhood-illness-imci-workflow#Integrated management of childhood illness (IMCI) workflow":"This workflow is designed to support CHWs to identify symptomatic children at the household level, refer symptomatic children and conduct on-time follow ups for children through the follow up tasks","malnutrition-workflow#Malnutrition workflow":"The workflow supports CHWs to assess and identify malnourished children, refer them to a health facility and conduct on time follow ups.","malnutrition-workflow-1#Malnutrition workflow":"Condition Task Resolution ConditionCHW counsels and screens under 5 for malnutrition using MUAC tape and danger signs. If suspected to be malnourished, the child is referred to the health facility. CHW submits a Malnutrition Screening Form. TaskA Malnutrition Referral Follow-up Task will appear within 2 days and is due 3 days later. The task is to remind the CHW to confirm referral attendance. ResolutionCHW submits Malnutrition Referral Follow up Form verifying that she visited the child to confirm that he was taken to health facility. ConditionIf Child is malnourished, he/she is enrolled into malnutrition program either Outpatient Therapeutic Programme (OTP) or Supplementary Feeding Programme (SFP). TaskOn the first day of every month, the CHW receives Malnutrition Treatment Follow-Up Task to remind them that it is time to check on the child. The task will continue showing till CHW indicates that the child has been exited from malnutrition programme. ResolutionThe CHW submits Malnutrition Treatment Follow-Up Form demonstrating that she provided adherence counselling, and reminded the caregiver of the child’s upcoming facility visit.","maternal-neonatal-health-workflow#Maternal neonatal health workflow":"This workflow consists of the pregnancy, delivery and postnatal workflows.The pregnancy workflow enables CHWs to register new pregnancies, screen pregnant mothers for danger signs and follow up pregnant mother to remind them to attend the scheduled ANC clinic appointments. The postnatal (PNC) workflow supports CHWs to follow up PNC women and newborns for danger signs screening and refer PNC women with danger signs to facilities to receive more care.","non-communicable-diseases-workflow#Non communicable diseases workflow":"The non communicable diseases workflows support health care workers to screen for NCD symptoms, refer suspected cases to facilities and trace clients who have defaulted treatment.\nCondition Task Resolution ConditionCHW educates and screens over 5’s for NCD symptoms. CHW refers any suspected person to the health facility and submits a NCD Screening Form. TaskA NCD referral Follow-up Task will appear within 2 ays and is due 3 days later. The task is to remind the CHW to confirm referral attendance. ResolutionCHW submits NCD Referral Follow-up Form verifying that she visited the person to confirm that he went to the health facility. ConditionPerson is to found to have either NCD (hypertension, diabetes, epilepsy, asthma, mental health or heart failure) and is enrolled into NCD program. TaskEvery first day of the month, CHW receives NCD Monthly Treatment Follow-up Task to remind the CHW it’s time to check on the person. ResolutionThe CHW submits NCD Monthly Treatment Follow-up Form demonstrating that she provided adherence counselling, screened for danger signs/side effects and reminded the person of upcoming facility visits. ConditionA person walks into health facility without CHW referral and is enrolled into NCD program. Site Supervisor submits a Treatment Enrollment Form indicating person has been enrolled in NCD program. TaskA NCD Monthly Treatment Follow-up Task will appear immediately on the CHW device. The task is meant to inform the CHW that the person has been enrolled in NCD program and needs their follow up. ResolutionThe CHW submits Monthly Treatment Follow-up Form demonstrating that she provided adherence counselling, screened for danger signs/side effects and reminded the person upcoming facility visits. Condition Task Resolution ConditionIf NCD patient reports danger sign during the follow ups, the CHW immediately refers or accompanies the patient to the facility depending on severity of the danger sign. TaskA NCD Danger Signs Follow-up Task will appear within 2 days and is due 3 days later. The task is to remind the CHW to confirm referral attendance. ResolutionThe CHW submits a NCD Danger Sign Follow-up Form verifying that she visited the NCD patient to confirm that she attended the facility. ConditionA NCD Client defaults on their clinic visit. Site Supervisor submits Trace Report indicating the missed visit details. TaskA TRACE Follow-up Task will appear immediately on the CHW device. The task is meant to inform the CHW that the person missed their clinic visit. ResolutionThe CHW submits TRACE Follow-up Form demonstrating that she visited the NCD patient and encouraged them to visit the health facility.","postnatal-workflow#Postnatal workflow":"Condition Task Resolution ConditionA woman delivers and CHW submits a Delivery Report. TaskA PNC Follow Up Task for both mother and baby appear on the 3rd and 5th day post delivery. The task is to remind the CHW to visit the postnatal mother. ResolutionCHW visits the mother and baby, submits a PNC Follow Up Task confirming that they visited the mother and/or baby, screened for danger and reminded them of upcoming facility appointment. ConditionIf the CHW notices danger signs at any time for either mother or baby, she submits a Danger Sign Form and immediately refers to the facility depending on severity. TaskA Danger Sign Follow-Up Task will appear within 2 days and is due 3 days later. Tasks persists for 7 days after due date. ResolutionCHW submits a Danger Sign Follow-Up Form, verifying that she visited the woman/child to confirm that she attended the facility.","pregnancy-workflow#Pregnancy workflow":"Condition Task Resolution ConditionUpon discovering a suspected pregnancy, a CHW escorts the woman to a health facility for a pregnancy test and submits a Pregnancy Screening Form. TaskA Pregnancy Confirmation and Referral Follow-up Task will appear immediately and is due 3 days later. The task is to remind the CHW to confirm referral attendance and pregnancy status. ResolutionThe woman visits the health facility, gets a pregnancy test and starts ANC clinic. ConditionIn case of a confirmed pregnancy(woman has started ANC visits) the CHW submits a Pregnancy Registration Form with gestational age and facility EDD if available. TaskEvery first day of the month, the CHW receives Pregnancy Follow-Up Task to remind that it is time to check into pregnant mother. The tasks continue for 42 weeks. ResolutionThe CHW submits Pregnancy Follow-Up Form demonstrating that she provided ANC counseling, gathered information from prior facility visits, screened for danger signs and reminded the woman of her upcoming facility ANC visit. ConditionIf the CHW notices danger signs at any time, she submits a Danger Sign Screening Form and immediately refers or accompanies the patient to the facility depending on severity. TaskA Danger Sign Follow-Up Task will appear immediately and is due 3 days later. Tasks persist for 7 days after due date. ResolutionCHW submits a Danger Sign Follow-Up Form, verifying that she visited the woman to confirm that she attended the facility.","problem-being-addressed#Problem being addressed":"Malawi is one of the countries with a high prevalence of HIV, high rates of infant and maternal mortality and a high burden of non communicable diseases (NCD) and tuberculosis. To help respond to community needs and reduce the disease burden, PIH in partnership with the Ministry of Health are implementing an integrated household model in Neno District. Under the model, community health workers (CHWs) and CHW supervisors have been equipped with the YendaNafe app, the app supports the health care workers to provide integrated community based health care services and to coordinate care.","resources-to-get-started#Resources to Get Started":"Here are a few additional resources to help get you started with the integrated health reference application.\nView the configuration code for this reference app Install the reference app following these easy installation instructions Modify the maternal and newborn reference application for your project context using configuration best practices The open sharing of digital health apps used by CHWs is a monumental milestone in the digital health space, and for the CHT Community. Reach out on the forum to share how you will leverage these resources, along with your feedback and continued innovations that could benefit the larger community.","solution-overview#Solution overview":"The YendaNafe app workflows support CHWs to conduct integrated disease screening, provide health care services, refer people in communities to facilities especially those who require facility based care and raise community awareness on health. The app is designed to support the following key health areas:\nMaternal child health (antenatal care and postnatal care) Family planning (FP) Malnutrition Immunization Integrated management of childhood illness (IMCI) Human Immunodeficiency Virus (HIV) Tuberculosis (TB) Non communicable diseases (NCDs)","tb-workflow-for-tb-confirmed-cases-and-tb-defaulters#TB workflow for TB confirmed cases and TB defaulters":"Condition Task Resolution ConditionPerson is on started on TB treatment. TaskA CHW visits the person daily and submits Daily Follow up Form. This will continue till the person is cured and CHW submits TB exit form. ResolutionThe CHW submits TB Daily Follow-Up Form demonstrating that she provided adherence counselling, screened for danger signs/side effects and reminded the person of upcoming facility visits. ConditionA person walks into health facility without CHW referral and is enrolled into TB program. Site Supervisor submits a TB Enrollment Form indicating person has been enrolled in TB program. TaskA TB Follow-Up Task will appear immediately on the CHW device. The task is meant to inform the CHW that the person has been enrolled in TB program and needs their follow up. ResolutionThe CHW submits TB Daily Follow-Up Form demonstrating that she provided adherence counselling, screened for danger signs/side effects and reminded the person of upcoming facility visits. ConditionA TB Client defaults on their clinic visit. Site Supervisor submits Trace Report indicating the missed visit details. TaskA TRACE Follow-Up Task will appear immediately on the CHW device. The task is meant to inform the CHW that the person missed their clinic visit. ResolutionThe CHW submits TRACE Follow-Up Form demonstrating that she visited the TB patient and encouraged them to visit the health facility.","tb-workflow-for-tb-suspected-cases-identified-in-a-community-setting#TB workflow for TB suspected cases identified in a community setting":"Condition Task Resolution ConditionCHW educates and screens over 5’s for TB using the cardinal signs. CHW refers any suspected person to the Senior CHW for sputum collection and submits a TB Screening Form. TaskA Sputum Collection Task will appear immediately on the SCHW device. The task is to inform the SCHW to collect sputum from the referred person. ResolutionSCHW submits Sputum Collection Form demonstrating that she collected the sputum from the referred person and submitted the samples to the health facility. ConditionWhen the TB results are ready, a Site Supervisors who is based at the health facility submits TB Results Form detailings the TB results outcome. TaskA TB Results Task will appear immediately on the CHW device while TB results Notification Task will appear on the SCHW device. ResolutionThe TB Results task indicates the TB results outcome: positive, negative, or rejected. The SCHW submits TB results notification form demonstrating that they have updated the TB results in the paper based cough register. ConditionPerson is found to be TB positive. CHW refers the person to the health facility for TB treatment commencement TaskA TB Referral Follow-Up Task will appear within 2 days on the CHW device and is due 3 days later. The task is meant to inform the CHW that it’s time to follow up on the person to confirm referral attendance. ResolutionThe CHW submits TB Follow-Up Form demonstrating that she visited the person to confirm if she went to the health facility. CHW refers other household members to health facility for TB contact tracing.","tb-workflows#TB workflows":"The TB workflow enables CHWs to screen patients for TB, refer suspected TB cases to senior CHW for sputum collection and follow up TB patients. Senior CHWs who are based at the community level submit the sputum collection form after collecting the sputum samples for TB testing and the Site supervisors who are based at the facility level support in notifying CHWs when the TB results are out and in tracing TB defaulters.","users-and-hierarchy#Users and hierarchy":"Users Location Devices Roles Community Health Director admin level Laptop or desktop Staff at this level will be given access to dashboards where they can monitor program indicators. Online only access to the app. CHW Manager and Officers admin level Laptop or desktop Staff at this level will be given access to dashboards where they can monitor program indicators. Online only access to the app. Site Supervisors (SS) admin level Laptop or desktop Staff at this level will be given access to dashboards where they can monitor program indicators. Online only access to the app. Senior CHWs (SCHW) - Supervisory role Facility and community levels Smartphone They supervise CHW and mentor CHWs, collect sputum for probable TB cases. They are offline users. CHWs Community level Smartphone CHWs register households, conduct household visits, case screening, referrals, follow-ups, and defaulter tracing. They are offline users.","workflows#Workflows":""},"title":"PIH Malawi"},"/reference-apps/stock-monitoring/":{"data":{"":"","problem-being-addressed#Problem Being Addressed":"Paper based commodity management systems are prone to errors due to reliance on manually updated registers, this greatly affects data quality. Further, it is time consuming for CHWs to reference stock balances and at the same time update stocks on the commodity management sheet while providing treatment to household members. In terms of supervision, CHW’s supervisors do not know when CHWs have stock outs in time for replenishing and ordering purposes. A stock monitoring application can help CHWs update their stocks seamlessly while strengthening data integrity.","solution-overview#Solution Overview":"CHT stock monitoring apps can be configured to support community drug and commodity management among CHWs and their supervisors. The workflow can be designed to:\nCapture stocks received from and returned to the health facility Provide stock status of every commodity Automatically deduct stocks when a CHW provides treatment to the community members Escalate stock out alerts to the supervisors when the CHW runs low on any of the commodities Some design considerations to make include:\nA stock condition card will appear on the CHW profile that will show a summary of the stock status In-built stock thresholds for different commodities Distinct colors for different stock thresholds Red: Low stock Green: Optimal stock Yellow: Medium stock Automated stock level updates when a CHW provides treatment within the workflows Stock out tasks to CHW supervisors CHW supervisor updates the stocks disbursed on respective CHW Area and the CHW receives a task to confirm the received stocks Ensure consistency of stock units across all the sections of the app","users-and-hierarchy-example#Users and Hierarchy Example":"User Location Devices Role MOH Central and district offices Desktop, laptop Access to dashboards where they monitor program indicators. Can view aggregate targets, not patient data. District Biostatistician Local office Desktop, laptop Equipped with dashboards. Can view aggregate targets. Supervisor Community level, based at facilities Desktop, laptop Equipped with CHT app. Can view CHW areas, their tasks and aggregate targets. CHW Community level Smartphones Equipped with CHT app for registrations, screening and monthly reports.","workflow-examples#Workflow Examples":""},"title":"Stock Monitoring"},"/reference-apps/supervisor-reference-app/":{"data":{"":"Medic has worked with D-tree International to build a CHT supervisor reference app. The app supports community health worker (CHW) supervisors to continually monitor and improve the program quality for Zanzibar National community health program Jamii ni Afya. The supervisor reference application is designed to enable supervisors to access CHW performance information and any other information required to supervise, mentor, and support CHWs to provide quality community health services. This reference app provides an example that CHT app developers can easily customize to meet the needs for their specific program areas to support CHW program management.\nThe code for this application will be available soon.\nProblem being addressed Community Health Workers (CHWs) play a critical role in delivering quality care as part of the integrated primary health system, in some settings CHWs often serve as the only connection between the health system and the vulnerable and remote populations. For many community health programs, CHWs face a lot of challenges, this includes significant workloads, delivering health services to large and dispersed communities while being supported by limited and inadequate supervision. To ensure sustained positive impacts on CHW programmes, there is a need for supervisory interventions to be embedded within the broader community health system strengthening. The supervisor reference app empowers supervisors with the ability to monitor in real time the performance of CHWs which can guide supervisors to support CHWs in provision of community health care services.\nSolution overview The supervisor reference app workflows enables supervisors to: provide quality assurance supervisory activities, plan and document CHW supervisory activities, support CHW activities and monitor CHW performance in real time. The supervisor reference app has been designed to:\nMonitor the performance of the CHW and supervisors using the in-app aggregate target and the supervisor targets functionalities respectively. Document and track CHW and supervisory activities. Schedule CHW monthly meetings quality monitoring visits and follow up visits. Support supervisors to report on health outcomes for their supervisory area. Identify CHWs who have not been visited by a supervisor. Follow up on CHW who have been inactive for 3 months. Forms hierarchy The diagram indicates forms and tasks that can be filled by a supervisor on the supervisor reference app. Some of the forms are accessible as actions on the supervisor and CHW profiles while others are accessible as tasks for a supervisor and a CHW.\nWorkflows CHW monthly meetings A Supervisor conducts a CHW monthly meeting with all the CHWs. During the meeting the supervisor mentors the CHWs, reviews the CHWs performance and discusses with the CHWs the challenges they might be facing in their provision of community health services.\nCHW monthly meeting workflow 1a Supervisor schedules for a CHW monthly meeting A supervisor schedules for a CHW monthly meeting by submitting a CHW monthly meeting 2a CHW monthly meeting task The task appears 3 days before the due date and the supervisor completes the task during the monthly meeting 1b The Supervisor can also receive a recurring CHW monthly meeting task every month 2b CHW monthly meeting form The CHW monthly meeting form can also be accessed through the action on the profile of the supervisor 2c Schedule Monthly Meeting The Supervisor can schedule the next CHW meeting form using the CHW monthly meeting form or task Quality monitoring With the supervisor reference app, a supervisor can schedule a quality monitoring visit to assess the quality of services being provided by a CHW. During the quality monitoring visit a supervisor shadows CHWs as they provide services to household members. A supervisor can schedule additional quality monitoring follow up visits for CHWs who are identified to have some weak areas and may need further support and mentorship from the supervisor.\nSupervision quality monitoring workflow 1a Supervisor checks/monitors their in-app CHW aggregate targets The supervisor checks the in app targets to monitor CHW target progress. 2a Quality Monitoring Planning form The supervisor schedules shadowing/quality monitoring visits with the CHWs that need support through the quality monitoring planning form 3a Quality monitoring task The task appears 2 days before the due date. During the visit the supervisor completes the quality monitoring task 1b Supervisor UHC mode Using the UHC mode, the supervisor is able to identify CHWs that have not been visited by a supervisor for a while 3b Shadowing reminder task - the task will appear on the CHW app two days before the visit to remind the CHW of the planned shadowing visit 3c Quality monitoring form The quality monitoring form can also be accessed as an action on the profile of the CHW 3d Quality Monitoring Follow up task Just in case a supervisor identifies some weak areas that a CHW need to improve on and be supported, they schedule for a quality monitoring follow up visit Group sessions CHW Group session workflow 1a A CHW organizes for a group session with community members Group session is a meeting coordinated and organized by CHW with community members to health educate community members of various health topics 2a Group session form Supervisor attends the group session meetings, provides supervision, supports the activity and submits the group session form CHW Inactivity A CHW activity task is generated for a supervisor if a CHW has been inactive for 3 months. This workflow enables a supervisor to follow up CHWs who have been inactive for three months and may need to be replaced.\nAdditional Features Targets A Supervisor has access to the analytics tab. The widgets on the in-app analytics tab enables a supervisor to view individual supervisor performance metrics and the supervisor progress towards the expected monthly goals. The supervisor also has access to CHW aggregate targets which will help the supervisor track metrics for individual CHWs, especially for supervisors overseeing a group of CHWs.This feature allows a supervisor to identify CHWs who may need to be supported actively.","additional-features#Additional Features":"","chw-aggregate-targets#CHW aggregate targets":"","chw-inactivity#CHW Inactivity":"","chw-monthly-meetings#CHW monthly meetings":"","forms-hierarchy#Forms hierarchy":"","group-sessions#Group sessions":"","problem-being-addressed#Problem being addressed":"","quality-monitoring#Quality monitoring":"","solution-overview#Solution overview":"","supervisor-uhc-mode#Supervisor UHC mode":"A supervisor is able to use this feature to view the last time each CHW was visited so that a supervisor can prioritize visiting CHWs who have not been visited for a while. The visit detail information is updated every time a quality monitoring form is submitted.","targets#Targets":"","workflows#Workflows":""},"title":"Supervision \u0026 Performance Management"},"/reference-apps/training/":{"data":{"":"The CHT’s Remote Onboarding and Training functionality enables Supervisors and Administrators to train CHWs on care workflows and related app use without being physically present. It is designed for:\nSafety: maintaining distance due to infectious disease Speed: faster deployment when timing is a critical Scalability: onboarding large numbers of users at the same time Measurability: evaluation to provide added support where needed Adaptability: integration with existing program and workflow structures","problem-being-addressed#Problem Being Addressed":"Providing consistent training for CHWs is critically important in the context of evolving health programs and use of digital support tools. In-person training is often not feasible (due to distance, infectious disease outbreaks, or similar), but is still required to build and maintain effective care programs. Relying on CHWs to learn to use these new digital tools and adhere to care workflows on their own is a major challenge to health program success.","remote-login-by-app#Remote Login by App":"Users may log into their app with a link sent to them via SMS. The link allows the user to directly enter their app, bypassing the need to enter their username and password.\nSee Also: Logging into CHT Apps","remote-training-by-app#Remote Training by App":"More background information can be found in this summary deck.","remote-training-by-sms#Remote Training by SMS":"","remote-training-overview#Remote Training Overview":"These SMS and App based workflow examples illustrate how the CHT enables remote training, tasking and communication at scale. Training can be done using simple guides, audio/videos suitable for low bandwidth, or interactive experiences on personal devices. Training programs can be easily configured to suit specific health program needs.","solution-overview#Solution Overview":"The CHT’s onboarding and training capabilities offer a remote way to provide education to CHWs and Supervisors about digital tools functionality and care workflows. It can be deployed in both SMS and App based modules. Through asynchronous communication, program administrators are able to:\nCreate customized training modules that match program requirements Capture assessments of CHW knowledge levels of training material Assess user training participation abandonment Identify CHWs who need additional Supervisor support","users-and-hierarchy-example#Users and Hierarchy Example":"User Location Devices Role National Officials and County Teams Central and district offices Desktop, laptop and smartphones Monitor central analytics regarding onboarding and training completion. Revisit content where needed. Sub-County Teams Facilities or local office Tablet or smartphone Review CHW progress on aggregate, support CHW supervisors, and monitor location specific analytics. CHW Supervisors Community level, based at facilities Smartphone Verify CHW onboarding and training completion, follow up with those who have not. Complete their own onboarding and training tasks to new workflows. CHWs Community level Feature phones and some smartphones Complete onboarding and training via SMS or app, provide feedback and ask for support where needed.","workflow-examples#Workflow Examples":""},"title":"Remote Onboarding \u0026 Training"},"/releases/":{"data":{"":"","2x#2.x":"2.18.1 - 2018-10-30 2.18.0 - 2018-08-29 2.17.0 - 2018-08-12 2.16.1 - 2018-07-24 2.16.0 - 2018-07-04 2.15.0 - 2018-06-13 2.14.3 - 2018-05-21 2.14.2 - 2018-04-24 2.14.1 - 2018-04-16 2.14.0 - 2018-03-15 2.13.7 - 2018-04-19 2.13.6 - 2018-04-16 2.13.5 - 2018-01-23 2.13.4 - 2018-01-23 2.13.3 - 2018-01-22 2.13.2 - 2018-01-19 2.13.1 - 2017-11-20 2.13.0 - 2017-10-01 2.12.5 - 2017-08-18 2.12.4 - 2017-08-10 2.12.3 - 2017-08-08 2.12.2 - 2017-08-01 2.12.1 - 2017-08-01 2.12.0 - 2017-06-27 2.11.3 - 2017-06-08 2.11.2 - 2017-06-06 2.11.1 - 2017-05-10 2.11.0 - 2017-04-12 2.10.3 - 2017-03-31 2.10.2 - 2017-03-24 2.10.1 - 2017-03-24 2.10.0 - 2017-03-10 2.9.1 - 2017-01-27 2.9.0 - 2016-12-08 2.8.5 - 2016-12-15 2.8.4 - 2016-11-29 2.8.3 - 2016-11-20 2.8.2 - 2016-10-17 2.8.1 - 2016-10-09 2.8.0 - 2016-08-31 2.7.3 - 2016-07-18 2.7.2 - 2016-07-11 2.7.1 - 2016-07-06 2.7.0 - 2016-06-27 2.6.3 - 2016-05-22 2.6.2 - 2016-05-06 2.6.1 - 2016-04-21 2.6.0 - 2016-04-13","3x#3.x":"3.17.2 - 2023-10-10 3.17.1 - 2022-12-02 3.17.0 - 2022-10-11 3.16.1 - 2022-12-02 3.16.0 - 2022-08-12 3.15.0 - 2022-05-03 3.14.2 - 2022-03-17 3.14.1 - 2022-03-08 3.14.0 - 2022-02-11 3.13.0 - 2021-09-28 3.12.1 - 2021-09-02 3.12.0 - 2021-07-28 3.11.3 - 2021-09-02 3.11.2 - 2021-07-21 3.11.1 - 2021-07-12 3.11.0 - 2021-04-20 3.10.5 - 2021-07-21 3.10.4 - 2021-07-12 3.10.3 - 2021-03-17 3.10.2 - 2021-01-25 3.10.1 - 2020-12-08 3.10.0 - 2020-09-08 3.9.2 - 2020-12-06 3.9.1 - 2020-08-20 3.9.0 - 2020-06-19 3.8.2 - 2020-08-20 3.8.1 - 2020-04-06 3.8.0 - 2020-02-10 3.7.1 - 2019-11-12 3.7.0 - 2019-10-22 3.6.2 - 2020-03-24 3.6.1 - 2019-08-06 3.6.0 - 2019-07-17 3.5.0 - 2019-06-28 3.4.1 - 2019-06-04 3.4.0 - 2019-03-27 3.3.0 - 2019-02-22 3.2.1 - 2019-01-22 3.2.0 - 2019-01-22 3.1.0 - 2018-11-21 3.0.0 - 2018-11-14","4x#4.x":"4.21.1 - 2025-07-30 4.21.0 - 2025-06-25 4.20.1 - 2025-07-30 4.20.0 - 2025-06-04 4.19.0 - 2025-05-13 4.18.0 - 2025-03-21 4.17.0 - 2025-02-05 4.16.0 - 2025-01-16 4.15.0 - 2024-11-19 4.14.0 - 2024-11-06 4.13.0 - 2024-10-22 4.12.0 - 2024-10-02 4.11.0 - 2024-09-26 4.10.0 - 2024-08-15 4.9.0 - 2024-06-26 4.8.1 - 2024-06-20 4.8.0 - 2024-05-23 4.7.2 - 2024-06-19 4.7.1 - 2024-05-15 4.7.0 - 2024-05-07 4.6.0 - 2024-03-22 4.5.2 - 2024-02-09 4.5.1 - 2023-12-12 4.5.0 - 2023-11-19 4.4.2 - 2023-12-12 4.4.1 - 2023-10-10 4.4.0 - 2023-09-21 4.3.2 - 2023-10-10 4.3.1 - 2023-08-30 4.3.0 - 2023-08-18 4.2.4 - 2023-10-10 4.2.3 - 2023-09-25 4.2.2 - 2023-07-07 4.2.1 - 2023-06-10 4.2.0 - 2023-05-25 4.1.2 - 2023-06-19 4.1.1 - 2023-03-21 4.1.0 - 2022-12-12 4.0.1 - 2022-12-01 4.0.0 - 2022-11-08","client-devices#Client Devices":"The following is the minimum specification recommendation for smartphones to handle the typical workload of front line health workers. Users with particularly high workloads or facility or supervisor workloads will require more powerful devices.\nSpecification Minimum Recommended Android version 5.0 9.0+ Processor 1.0GHz dual-core 2.0GHz quad-core RAM 1GB 2GB Storage 8GB 16GB If CHWs will be collecting GPS data, autonomous GPS sensors in addition to assisted GPS (A-GPS) for areas with poor GSM network connectivity will enhance the quality of GPS data collected. Autonomous GPS is usually labeled in terms of the supported navigation satellite system:\nGalileo BDS (BeiDou) GLONASS QZSS Devices with more navigation systems are more likely to get a more accurate location fix in varied locations. For example, Huawei Y5 has GPS specs listed on gsmarena.com as GPS: Yes, with A-GPS, GLONASS, BDS which makes it a good choice for GPS data collection.","dependencies#Dependencies":"The following table shows the dependencies for deploying the CHT.\ncht-core NodeJS CouchDB Supported browsers SMS bridge Android OS cht-android cht-sync 4.16.x+ 22 3.4.2+ Chrome 90+, Android System WebView 90+, Firefox latest cht-gateway 5.0+ 1.0+ 1.1.0+ 4.4.x-4.15.x N/A 3.3.2+ Chrome 90+, Android System WebView 90+, Firefox latest cht-gateway 5.0+ 1.0+ 1.1.0+ 4.0.x-4.3.x N/A 2.x Chrome 90+, Android System WebView 90+, Firefox latest cht-gateway 5.0+ 1.0+ 1.1.0+ 3.x 8.11+ 2.x Chrome 53+, Firefox latest cht-gateway 4.4+ 0.4.5+ 1.1.0+ 2.x 6+ 1.6+ Chrome 30+, Firefox latest cht-gateway 4.4+ Any N/A 0.4 0.12+ 1.6+ Chrome 30+, Firefox latest SMSSync N/A N/A N/A See Also: /hosting Requirements","earlier-releases#Earlier releases":"0.4.15 and earlier","release-notes#Release Notes":"","requirements#Requirements":"","supported-versions#Supported Versions":"Medic supports minor versions of the CHT Core Framework for three months after the next minor version is made available, and the latest minor of a major version for twelve months after the next major version is made available.\nOnce a version is no longer supported it will not receive any further patch releases and upgrading to a supported version will be required to resolve any issues you have.\nIt is recommended that all projects update regularly multiple times a year to get the benefits of bug fixes, security patches, and performance improvements. Being on a supported version also makes it easy to start using features coming in future releases. Most upgrades are quick, reliable, and easily adopted by users. Whenever an upgrade does require additional effort this will be outlined in the release notes.\nVersion Status Release date End of life 4.21.x Supported 25-Jun-2025 TBA 4.20.x Supported 04-Jun-2025 25-Sep-2025 4.19.x Supported 13-May-2025 04-Sep-2025 4.18.x Supported 20-Mar-2025 13-Aug-2025 4.17.x EOL 05-Feb-2025 20-Jun-2025 4.16.x EOL 16-Jan-2025 05-May-2025 4.15.x EOL 20-Nov-2024 16-Apr-2025 4.14.x EOL 31-Oct-2024 20-Feb-2025 4.13.x EOL 22-Oct-2024 31-Jan-2025 4.12.x EOL 02-Oct-2024 22-Jan-2025 4.11.x EOL 26-Sep-2024 02-Jan-2025 4.10.x EOL 15-Aug-2024 26-Dec-2024 4.9.x EOL 25-Jun-2024 15-Nov-2024 4.8.x EOL 22-May-2024 25-Sep-2024 4.7.x EOL 07-May-2024 22-Aug-2024 4.6.x EOL 20-Mar-2024 10-Aug-2024 4.5.x EOL 20-Nov-2023 20-Jun-2024 4.4.x EOL 20-Sep-2023 20-Feb-2024 4.3.x EOL 18-Aug-2023 20-Dec-2023 4.2.x EOL 25-May-2023 18-Nov-2023 4.1.x EOL 12-Dec-2022 25-Aug-2023 4.0.x EOL 03-Nov-2022 12-Mar-2023 3.17.x EOL 11-Oct-2022 03-Nov-2023 2.18.x EOL 30-Aug-2018 15-Nov-2019"},"title":"Releases"},"/releases/2_10_0/":{"data":{"":"","bug-fixes#Bug fixes":"Targets aren’t updated when no longer relevant. Issue: #3207 Task issues for restricted user when a report is deleted on the server. Issue: #3189 When navigating to the targets tab, I see a flash of the “no analytics modules configured” message. Issue: #3177 Update reports when loading the tab. Issue: #3178 Error after submitting form. Issue: #3157 Deleted message persists until refresh. Issue: #3003 Single delete and bulk delete does not immediately remove items from LHS in Reports tab. Issue: #3001 Tasks list says “no tasks found” before it’s loaded. Issue: #1935 Labels not translated for generated report fields. Issue: #3154 Getting 502s after submitting task; Tasks not cleared until refresh. Issue: #3111 Do not know if patient ID is valid when processing Registrations/Report Actions. Issue: #3082 Patient contact creation should happen if a patient contact doesn’t already exist. Issue: #3115 Task schedules created using the reported_date of a report do not show/hide at the expected time. Issue: #3097 Patients reports accepted even if no person has the patient_id. Issue: #3075 Registrations that clear previous registrations also clear themselves. Issue: #3074 Ensure useful commands is on medic-os $PATH by default. Issue: #2750 Family Members section header shows on person’s profile. Issue: #3108 Uncaught exception triggers 500 response for subsequent requests. Issue: #3099 Broken links in app settings. Issue: #3088 Edit function not working for reports sent by unknown number. Issue: #3087 SMS reports do not show name in summary. Issue: #3084 Auto replies and Scheduled SMS are truncated to fit in single SMS. Issue: #3083 Bubble task count not showing on browser refresh. Issue: #3028 Scheduled messages not showing accurate date. Issue: #3012 SMS API sets messages to scheduled on POST. Issue: #3011 Scheduled messages not being sent. Issue: #3010 JavaRosa Parser should give a better error message when form definition on the web app is mismatched with the submitted message using medic collect. Issue: #2638 Contact persons don’t show up in their places. Issue: #2385 setup_complete is set too fast, so setup wizard is likely to be skipped. Issue: #2376 Submitting a family survey doesn’t clear the task. Issue: #2265 Ages of children showing up strangely. Issue: #2191 Forms and icons fail to replicate on slow connections. Issue: #2113","features#Features":"Use reference to translation keys in app_settings. Issue: #3127 Add date of birth to person created by SMS. Issue: #3100 Configure the max number of SMS in multipart SMS. Issue: #3095 Load messages script fails to use https. Issue: #3081 Cannot access all fields for contact in select2. Issue: #3069 Configurable contact summary cards. Issue: #3037 Display additional information in contact profile. Issue: #2914 Support additional context for hiding/showing actions. Issue: #2913 Update Tour. Issue: #2212","performance-improvements#Performance improvements":"medic-api migration to remove couchmark. Issue: #3068 Extract XML forms into attachments. Issue: #3009","uiux-improvements#UI/UX improvements":"Clickable portion of action is smaller than item. Issue: #3104 “Targets” tab blank for admin users. Issue: #3029 Action button items get lost in RHS. Issue: #3005 Action button should always be left-most button in FAB. Issue: #3004 “Up” button at bottom of place/person pages. Issue: #2894 Status icon for delivered is orange instead of green. Issue: #2752 Display format for phone numbers. Issue: #1930"},"title":"2.10.0"},"/releases/2_10_1/":{"data":{"":"","bug-fixes#Bug fixes":"Sending a message from the Messages tab creates a message with uuid equal to database URL. Issue: #3242"},"title":"2.10.1"},"/releases/2_10_2/":{"data":{"":"","bug-fixes#Bug fixes":"Sentinel somehow infinitely loops and continually writes to its metadata file. Issue: #3275 API crashes after /medic/_bulk_docs gets called. Issue: #3268"},"title":"2.10.2"},"/releases/2_10_3/":{"data":{"":"","bug-fixes#Bug fixes":"Unicode support for storing enketo xml. Issue: #3308 Support negative values in xform fields better. Issue: medic/medic-projects#1624 Trigger enketo calc updates when option names are changed. Issue: #3281 New Household button missing. Issue: #3132 Change report form language without requiring refresh. Issue: #3174 Corrupted translation strings. Issue: #3305","uiux-improvements#UI/UX improvements":"Show report subject name on patient page. Issue: #3309 Translate task schedule group titles. Issue: #3283 Add additional supported moment locales. Issue: #3282 Translate contact forms. Issue: #3323"},"title":"2.10.3"},"/releases/2_11_0/":{"data":{"":"","bug-fixes#Bug fixes":"namespace-form-fields migration causing Express toString fail. Issue: #3371 Cannot use Collect with username/password fields. Issue: #3118 No permissions available for configuration on first run. Issue: #3251 Fix outdated npm shrinkwrap entry for enketo-core. Issue: #3352 Set user-agent header in Medic Collect. Issue: #3334 Buttons in LHS FAB disappear. Issue: #3321 Analytics tab Hindi text is not aligning properly. Issue: #3297 Relative times are not translated. Issue: #3282 Submitting feedback no longer works. Issue: #3273 Full access users cannot create users, even when they have the appropriate permissions. Issue: #3262 Sending a message from the Messages tab creates a message with uuid equal to database URL. Issue: #3242 API does not check if COUCH_NODE_NAME is set at startup. Issue: #3226 Support Nepali calendar in outgoing SMS. Issue: #3219 New reports for same time period do not replace previous ones. Issue: #3160 API is picky about trailing slashes for SMS endpoint. Issue: #3152 Couchdb’s startup.log does not include timestamps. Issue: #3131 Exporting feedback crashed api and it didn’t come back. Issue: #3107 Export server logs from webapp does not work. Issue: #3089 Requesting audit log makes server unresponsive. Issue: #1789 Unrecognized input type found when trying to reset. Issue: #1655","features#Features":"Drop id_format app setting in favour of auto-lengthening ids. Issue: #3230 Support for Nepali number characters. Issue: #3192 Show XForm in User’s language. Issue: #3174 Sentinel needs to support these patient_id use cases. Issue: #3166 Enable users to export, even if they do not have permission to configure. Issue: #3113 Support required_message and required_message translations in Enketo. Issue: #3056","migration-notes#Migration notes":"#3230 changes patient ID generation so it automatically increases the length as needed, up to 13 digits. If you are validating incoming patient_ids in Sentinel, be sure to remove or correct any length restrictions, e.g. ^[0-9]{5}$ would become ^[0-9]{5,13}$. #3166 adds a new transition that adds patient_ids to every created person: generate_patient_id_on_people. Enable this transition if you want to send SMS about patients that may be created through the webapp.","performance-improvements#Performance improvements":"enketo-core package.json is included in inbox.js bundle. Issue: #3293 Use enketo xml cache for contact forms too. Issue: #3325","uiux-improvements#UI/UX improvements":"Contact profile fields collapse on mobile. Issue: #3306 Disable cancel buttons when saving. Issue: #1650"},"title":"2.11.0"},"/releases/2_11_1/":{"data":{"":"","bug-fixes#Bug fixes":"Cannot report via SMS about people who are registered in the web app. Issue: #3401 Results page CSS messed up in v2.11. Issue: #3369 The user needs an associated contact to create a contact. Issue: #3394 Error when adding Place with new person. Issue: #3420 Error after canceling and re-opening any contact creation form. Issue: #3448 namespace-form-fields migration : report bulk errors. Issue: #3371 (second part)"},"title":"2.11.1"},"/releases/2_11_2/":{"data":{"":"","performance-improvements#Performance improvements":"Slow initial replication for users with lots of docs. Issue: #3508"},"title":"2.11.2"},"/releases/2_11_3/":{"data":{"":"","bug-fixes#Bug fixes":"The namespace-form-fields migration conflicts itself. Issue: #3534 In the create-patient-contacts migration provide a more complete list of potential patient_name locations. Issue: #3372"},"title":"2.11.3"},"/releases/2_12_0/":{"data":{"":"","bug-fixes#Bug fixes":"On small screen, cannot re-open date filter in history tab. Issue: #3467 Debug section of the About screen has some weird extra text. Issue: #3463 Medic Gateway runs into document update conflicts while trying to upload sms status. Issue: #3443 Stop maintain_info_doc transition from writing sentinel metadata. Issue: #3424 Webapp does not supply XML forms (XForms) to Collect. Issue: #3390 Cannot render form in Firefox. Issue: #3354 False positive error uploading translations. Issue: #3350 Exporting server logs fails with api 500. Issue: #3209 AWS EC2 AMI Regression: Does not currently boot. Issue: #3173 Form exits on Refresh/Reload in Tasks tab. Issue: #3090 Facility reference code fails to match when using integers and textforms. Issue: #1058","features#Features":"Add sync status indicator for offline users. Issue: #3357 Add gateway message delivery statuses. Issue: #3073 Add a replication_date property to records. Issue: #2180 Change patient id generation to store the length of id it’s generating. Issues: #3505 Allow form upload through Form Configuration UI. Issue: #3433","uiux-improvements#UI/UX improvements":"Bullet displayed incorrectly. Issue: #3020 File chooser for importing translations should filter for .properties files. Issue: #3474 Show loading progress when app is starting. Issue: #3384"},"title":"2.12.0"},"/releases/2_12_1/":{"data":{"":"","bug-fixes#Bug fixes":"Improved error messages for SMS endpoint. Issue: #3587 Allow for empty SMS message Content. Issue: #3656 Implement 500 item max for bulk delete. Issue: #3605","security#Security":"Fixed kanso packages that inadvertently cached credentials. Issue: #3648"},"title":"2.12.1"},"/releases/2_12_2/":{"data":{"":"","bug-fixes#Bug fixes":"Accept patient reports for patients created in app. Issue: #3740 Stop accept_patient_reports transition clearing messages for unrelated registrations. Issue: #3742"},"title":"2.12.2"},"/releases/2_12_3/":{"data":{"":"","bug-fixes#Bug fixes":"Accept messages with empty from or content. See: https://github.com/medic/medic-api/pull/185"},"title":"2.12.3"},"/releases/2_12_4/":{"data":{"":"","bug-fixes#Bug fixes":"Fix issue with /api/v1/records. Issue: #3770"},"title":"2.12.4"},"/releases/2_12_5/":{"data":{"":"","bug-fixes#Bug fixes":"Fix bug where id generation wouldn’t automatically increase id length when it ran out of ids. Issue: #3790"},"title":"2.12.5"},"/releases/2_13_0/":{"data":{"":"","bug-fixes#Bug fixes":"Couch responds with 200 when a bad app_settings file is uploaded. Issue: #3674 Select All in bulk delete doesn’t work. Issue: #3646 Only serve collect-specific XML forms to collect. Issue: #3642 Exporting when filtered by report type exports more reports than are displayed in the web app. Issue: #3615 Bulk delete fails when deleting more than a few hundred records. Issue: #3605 Exporting reports filtered by place results in an empty xml. Issue: #3593 Requesting forms should respond with 4xx on client error. Issue: #3569 Can’t view contacts for restricted user. Issue: #3517 Bad error message when associated contact is not available in the local DB. Issue: #3499 Gardener bug on startup when module_name is undefined. Issue: #3481 Reports list showing when user doesn’t have proper permission. Issue: #3452 select2 in a repeat group does not work as expected in an Xform. Issue: #3430 {{patient_name}} not found when patient was created by xform. Issue: #3419 Search doesn’t work in Nepali or with accented characters. Issue: #3392 Remove nested contacts. Issue: #2635","features#Features":"multi_report_alerts transition added to sentinel. See the documentation in cht-docs. Issue: #3416 Specify which forms can be downloaded using Collect. Issue: #3607 Validate sentinel transition configs at transition load time. Issue: #3585 Information from the contact-summary is now available as input to forms. Issue: #3413 Allow users to enter Bikram Sambat dates in Enketo forms on Android phones. Issue: #3513 Allow users to enter Bikram Sambat dates in Enketo forms in the web app. Issue: #3404 Registration of a person from a report/action form is now possible. Issue: #2912","migration-notes#Migration notes":"#2635 changes the context available to the configured contact summary script. The contact parameter no longer has information about parents. This information is now in an array called lineage. More information is available in the configuration documentation. #3546 changes the implementation of the contact_summary so instead of declaring the output on the last line of the script, now you have to return the output. Usually this is as easy as adding a return on the last line, so output; becomes return output;. More information is available in the configuration documentation.","performance-improvements#Performance improvements":"Remove modules.js attachment. Issue: #3684 Use alternative pagination method for running batched migrations. Issue: #3553 The read status of documents is now stored in a user specific database to reduce unnecessary doc updates. Issue: #2418","security#Security":"Password validation so when creating or updating users the new passwords have to be at least 8 characters long and reasonably complex. Issue: #1472 Don’t eval() user input. Issue: #3546 Set Secure setting on AuthSession cookie for HTTPS pages. Issue: #3182","uiux-improvements#UI/UX improvements":"Sync status cut off in mobile view. Issue: #3703 Hide Collect XForms from filter list in History tab. Issue: #3625 Split the form configuration page into JSON and XML tabs. Issue: #3559 Wrap text in tasks list. Issue: #3525 Task summary screen looks ugly on desktop. Issue: #3521 Send Report dropdown menu items are misaligned. Issue: #3469 Disable tasks tour for admins. Issue: #3144 Confirmation popup should not show on ‘Error loading form’. Issue: #3045 ‘May lose data’ warning displayed when form has no fields. Issue: #1601"},"title":"2.13.0"},"/releases/2_13_1/":{"data":{"":"","bug-fixes#Bug fixes":"Fix bug in extract-person-contacts migration introduced in 2.13.0 #4031 Remove the now invalid erlang migrations #4033"},"title":"2.13.1"},"/releases/2_13_2/":{"data":{"":"","bug-fixes#Bug fixes":"Force outputs to recalc on form load #4111"},"title":"2.13.2"},"/releases/2_13_3/":{"data":{"":"","improvements#Improvements":"Bump libphonenumber to the latest"},"title":"2.13.3"},"/releases/2_13_4/":{"data":{"":"","improvements#Improvements":"Bump libphonenumber for Nepal Smart Telecom."},"title":"2.13.4"},"/releases/2_13_5/":{"data":{"":"","bug-fixes#Bug fixes":"Update Notification transition crashes sentinel if the patient id is misconfigured. #4121"},"title":"2.13.5"},"/releases/2_13_6/":{"data":{"":"","performance-improvements#Performance improvements":"Drastically improve performance of form loading when the patient context is used, and that context is very large (e.g. you’re including lineages). #4430"},"title":"2.13.6"},"/releases/2_13_7/":{"data":{"":"","performance-improvements#Performance improvements":"Various PouchDB performance improvements were backported from 2.14. This includes increasing the PouchDB version and removing our use of pouchdb-worker."},"title":"2.13.7"},"/releases/2_14_0/":{"data":{"":"Additional release notes are available here.","bug-fixes#Bug fixes":"#3944: Unread reports bubble not working with deleted docs. #3563: Sentinel scheduling EDDs on a Sunday for all ANC registrations. #3821: Export api doesn’t handle errors during export gracefully. #4111: Enketo or-output never shows initial value. #4166: People created via sentinel transitions are not replicated. #4200: Sentinel nulls out parent when multiple docs generated from one form submission. #4201: PNC schedule is not generated when a delivery report is submitted.","features#Features":"#3096: Allow users to take a photo while filling in an xform in Enketo and upload the photo with the form. #3459: Add format-date-tr() to our custom xpath functions to support translations of days and months in xforms. #3450: Show the logout button in the hamburger menu for android users who have the new can_log_out_on_android permission set.","migration-notes#Migration notes":"#3449: We included a feature which makes it unnecessary to use a repeat-relevant node in Enketo forms to workaround a bug which created an empty child. This node should now be removed. #3629: We added more configurable text to the target widgets. Also, configuring an array of target titles is now deprecated in favor specifying a single translation key. Reconfigure your targets to specify values for translation_key, subtitle_translation_key, and percentage_count_translation_key properties. Full documentation. #3818: We changed the way groups of scheduled messages are silenced when using silence_for. Previously, only the first group found to be in the silence window was silenced. Now, all groups are. #4134: Review use of calculate=\".\" in all forms. If you have any XForm with with calculate=\".\" you will need to modify the corresponding XLSForm, reconvert, and upload. The changes to make are: From type calculate to string Make sure the calculation column is empty Have the appearance as hidden The label can be NO_LABEL to avoid warnings and bloat in the form","performance-improvements#Performance improvements":"#3950: Remove stats collection in API as it’s no longer used. #3913: Sentinel’s fetchHydratedDoc function should use only fetch contacts that aren’t already present in the lineage list. #4174: Remove WebWorker for improved client database performance.","security#Security":"#3873: Escape output to defend against javascript injection. #3239: Accessing webapp without logging in is possible.","uiux-improvements#UI/UX improvements":"#3945: Update the icons used for contacts. #3904: Make user type required in the edit user screen. #3758: Title of form is misaligned in list of reports and reports detail pane. #3736: Configurable profile field UI changes. #3735: Reports content row improvements. #3734: Tasks content row improvements. #3732: Message content row improvements. #3731: Update content row UI for consistency \u0026 improved readability. #3720: Improve display of icons in configurable profile cards. #3719: Person \u0026 place profile page UI changes. #3704: Improve password strength validation error messages. #3629: Update target widget cards and targets page layout. #3597: Update fonts to Noto. #3561: Display required fields when creating a “restricted to a place” user. #2522: Percentage target values are confusing."},"title":"2.14.0"},"/releases/2_14_1/":{"data":{"":"","performance-improvements#Performance improvements":"#4430: Drastically improve performance of form loading when the patient context is used, and that context is very large (e.g. you’re including lineages)."},"title":"2.14.1"},"/releases/2_14_2/":{"data":{"":"","bug-fixes#Bug fixes":"#3099: Uncaught exception triggers 500 response for subsequent requests."},"title":"2.14.2"},"/releases/2_14_3/":{"data":{"":"","bug-fixes#Bug fixes":"#4457: The z-score enketo widget is not usable. #4460: Uncaught Exception: write after end error."},"title":"2.14.3"},"/releases/2_15_0/":{"data":{"":"","after#After":"[#3961]","allow-users-to-compare-translations-to-translation-keys#Allow Users to Compare Translations to Translation Keys":"We’re making it easier to keep track of what you’re translating so we’re all speaking the same language, even when we’re not.\nIn 2.15.0, we added an option to the left side drop-down so that you can display the translation keys. This makes it easier to know what you are translating and where it will appear in the app. It also allows PMs to more easily update translations for scheduled messages, targets, and tasks titles, among other things.\n[#3022]","before#Before":"","bug-fixes#Bug Fixes":"","contact-pagination-fixed-for-restricted-users#Contact Pagination Fixed for Restricted Users":"Call off the search party, your missing families have been found!\nYou might have noticed that some contacts were not appearing on the people tab. Turns out we had a pagination bug. Sorry for those who couldn’t find their missing families! This is now fixed.\n[#4085]","death-reporting#Death Reporting":"More than a feature, we’re now supporting death reporting workflows which allow a user to report a death, another user to confirm that death, and all users to see which family members are deceased on both person and household profiles. Also includes the ever-popular “resurrection” feature which allows us to undo a death.\nOur app now supports an expanded workflow for death reporting. The sketch below outlines the basic death reporting workflow that can be done on SMS or in our app, or with a combination of both app and SMS. Some health systems may not require a confirmation of the death by someone other than the CHW, or the person doing the confirmations may not be a user of our tools. In that case, the workflow can be simplified to just step one, where the CHW reports the death.\nStep one (death report) can be submitted by the CHW via SMS or the mobile app. Once the death report is submitted, the manager or nurse can get an SMS notification or a task to follow up with the community to confirm the death (until the supervisor app is built, the manager/nurse would need access to patient reports in order to get this task). The manager or nurse would then confirm the death and submit a death confirmation report. Once the death is confirmed, the person is marked as deceased in the app.\nThere are a few things that can happen when someone is marked as deceased. First, the app can update a person’s profile to make it clear the person is deceased. It can also automatically update the family (or CHW area for SMS projects) profile to separate any deceased people from other people in the family or area. Finally, any deceased people will appear at the bottom of search results. Tech leads: make sure you also configure all tasks so that they are cleared when a person is confirmed to be deceased. The app will add a date_of_death field to the person’s doc once the death is confirmed.\nWhat happens if a death is confirmed but it turns out to have been done in error? We also support a workflow for undoing a death. A CHW can request a correction and if the nurse or manager agrees that a correction is needed, she can undo the death. This reverses all of the profile changes noted above.\nTo configure a death reporting workflow, you will need:\nDeath report form Death confirmation form Request correction form Undo death form Task or SMS notification for nurse or manager to confirm the death Task or SMS notification for nurse or manager to undo the death New configuration for all person-level tasks so that they clear as soon as the death confirmation form is submitted if that form indicates the person is actually deceased Enable the death_reporting Sentinel transition A death_reporting property in app_settings so that you can indicate which form should confirm deaths and which form should undo deaths Here’s an example of what you would add to app_settings to get the profile updates to work:\n\"transitions\": { \"death_reporting\": true }, \"death_reporting\": { \"mark_deceased_forms\": [ \"death_confirmation\" ], \"undo_deceased_forms\": [ \"undo_death\" ] } The Sentinel transition simply adds a date of death of the person to their profile doc. Currently, it will be the reported_date of the death confirmation form. This is not currently customizable, but you can choose to display the date the CHW entered as the date of death on the person’s profile. We are planning to improve this in 2.16.0 by allowing you to use a date_of_death field in your death confirmation form as the date that is transferred to the person’s doc. If you want to record dates of death for people but not have the profiles update, just use the transition and don’t add the death_reporting property to app_settings.\n[#3956]","export-to-csv#Export to CSV":"Ever use our export to XML feature? Nope? We didn’t either. Now you can export to CSV for all of your data analysis needs. Get your pivot table on!\nStarting in 2.15.0, you can now export data directly from the Medic webapp in CSV format. You can choose to export all records or you may use the filters on the reports page to export a subset of reports. Whatever is appearing when you click Export is what will download, so if some filters have been applied before clicking Export, then your CSV will only include the reports that fit your filter criteria. Every export will include all forms and all fields, so if you download more than one type of form, you may find that you have a lot of columns, but this is just to ensure that we have a column for each field in each form since forms have different field names. Only admins can export because exporting returns all reports so it’s only available to users who are allowed to access all data. \\\nNote that after you click Export, it may take 10 seconds or so before the Export starts downloading, so be patient! [#3594]","filter-bar-place-filter-highlighted#Filter bar, place filter highlighted":"image\nHowever, as we started using version 2 with our SMS projects, we needed the ability to filter by CHW area. In those projects, CHW areas are the 'clinic' level places. In order to avoid further performance issues for projects that register families, we made this a configurable option.\nimage\nThe default is to show only the district_hospital and health_center levels in the places filter. If you only want to see those two levels, there is no need to change your config. However, if you want to see the clinic places as well, you will need to add the following anywhere in your app_settings.json file:\n\"place_hierarchy_types\": [\"district_hospital\", \"health_center\", \"clinic\"], DO NOT display clinic places if your project is registering families as this will cause performance issues with admin or program manager (full access) users rendering the reports page.\n[#3902]","fine-grained-time-on-reports-list#Fine-Grained Time on Reports List":"At 15:02 on June 6th, we made it possible for you to see the exact time your reports came in.\nStarting in 2.15.0, reports received today show the exact time. This makes it easier to see how many reports have come in today at a glance. This way you can see if the gateway is working properly. Once you get to the next day, reports will use relative times and dates as they had prior to this change.\n[#3613]","improved-nurse-enabled-workflows-on-sms#Improved Nurse-Enabled Workflows on SMS":"Nurses are busy and can’t always sit down in front of the webapp. We’re now able to notify a CHW of when a nurse submits a patient report via SMS.\nThis feature is an enhancement for SMS workflows where nurses are confirming visits or deliveries using Textforms or Collect. We’ve made it possible for the CHW to receive an SMS notification when a nurse confirms a visit or delivery via SMS. The diagram below describes how the messages would flow.\nTo help make configuration easier, we have some new aliases available (mentioned earlier in this doc). The new aliases are clinic, health_center, and district and they are calculated off of the patient. The clinic is the CHW area, so the message goes to the CHW; health_center is the facility level, so the message goes to the primary contact of the health facility; and district is the district hospital level, so the message goes to the primary contact of the district hospital.\nIf your project has both the CHW and the nurse confirming visits, you’ll want to send only an auto-reply when the CHW reports a visit but you’ll want to send both an auto-reply and a notification when the nurse reports a visit so that the nurse knows the visit report was received and the CHW knows the patient went to the facility. You can use a bool_expr on the CHW notification so that it only goes out when it’s a nurse sending in the visit confirmation.\n[#3412]","just-in-time-messages#Just-in-Time Messages":"Just-in-time messages are available just in time for you to get those messages to that CHW who changed her phone number last week. And if she got any messages in the wrong language, we’ve got you covered.\nPreviously, the phone number and outgoing message language were set at the time that a schedule was created. If a CHW changed her phone number, only new registrations would go to the new phone number. Any schedules that were ongoing would still send messages to her old phone number.\nWith this new feature, any updates to phone numbers are reflected in real time for any scheduled messages that are not yet pending or sent. In addition, if there are messages in your schedule going to the nurse or a CHW supervisor and they have to change their phone number, any messages in existing schedules that are going to be sent to them in the future will go to the new numbers.\nAfter updating Elizabeth’s phone number, you’ll see the following. Note that the auto-reply will have been sent to her old phone number because it was sent immediately after registration. If you look at the outgoing messages, you’ll see that all have been updated to use Elizabeth’s new number.\nThis improvement also affects outgoing message language. If the outgoing message language is changed, all future messages, including those in ongoing schedules, will be sent in the new language. So if a CHW registers a pregnancy and the outgoing messages are generated in English initially, if the project changes the outgoing language to Swahili, any remaining messages will be sent out in Swahili.\nThese changes will occur as soon as you reload the report(s) affected by the update. You should see the new phone number appear as the recipient of any future scheduled messages. The future scheduled messages should also be in the new language for outgoing messages, if you’ve updated that.\nIn order for this feature to work for both phone number and translation updates, you must make sure your config:\nUses only translation keys for ALL outgoing messages, including scheduled messages, auto-replies, and notifications. You must remove ALL message arrays and replace with translation keys. Uses the correct alias for each message recipient for all scheduled messages. We are no longer recommending that you use reporting_unit as the message recipient for message schedules. Instead, use clinic (to send to the patient’s CHW), health_center (to send to the nurse / primary contact of the health center), or district (to send to the primary contact at the district level). This will help ensure that phone numbers are updated in real time. Using reporting_unit for auto-replies and notifications is completely fine as these go out immediately after a report is received. The exception to this might be in cases where both nurses and CHWs are confirming visits and/or deliveries via SMS and you want to notify the CHW. More on this below.\nYour config will look something like this (**See the Standard app_settings.json file for a full example):\n{ \"name\": \"ANC Reminders LMP\", \"translation_key\": \"schedule.anc_lmp\", \"summary\": \"\", \"description\": \"\", \"start_from\": \"lmp_date\", \"messages\": [ { \"translation_key\": \"messages.schedule.anc.reminder\", \"group\": 1, \"offset\": \"12 weeks\", \"send_day\": \"monday\", \"send_time\": \"09:00\", \"recipient\": \"clinic\" }, { \"translation_key\": \"messages.schedule.anc.followup\", \"group\": 1, \"offset\": \"13 weeks\", \"send_day\": \"monday\", \"send_time\": \"10:00\", \"recipient\": \"clinic\" },] } [#3627]","new-date-filter#New Date Filter":"Now you can format dates on condition cards in the way that most of the world talks about them: date then month. Up next: how to get the US on the metric system?\nWe added a new date filter to provide more flexibility in how dates are displayed in condition cards. Now you can display dates like birthdates or EDDs in the format shown below (DD Month). This makes the date easier to read at a glance. If you want your date to show up in this format, use the dayMonth filter for date fields in your contact-summary.js file.\n[#3721]","permissions-to-showhide-call-and-message-buttons#Permissions to Show/Hide Call and Message Buttons":"Call me, maybe.\nWe’ve added two new permissions to our list so that you can determine whether users should see the call and message buttons when they are viewing a person’s profile. These buttons will appear by default, but you can remove a user type’s access to them, in case you want to prevent CHWs from having the call or message options, for example.\n[#3657]","report-linkages#Report Linkages":"Please accept our apology… We know you loved showing off your SQL skills, but we’ve made it easier to link certain forms together in PostgreSQL with the addition of a few new fields.\nWe’ve added some new fields to reports to help make it easier to write queries in analytics. You’ll need to run sentinel transitions for these to work. All of these fields can be added to SMS forms and some can be added to app forms. Here’s a list of what’s been added:\nAny report that runs the registration transition and invokes the add_patient (or deprecated add_patient_id) trigger will create a patient doc with a source_id field referencing the report and a created_by field referencing the ID of the contact who submitted the report. This makes it possible to know who created each person and links the person to the form used to register them. Any report that clears a schedule either via the accept_patient_reports transition or the clear_schedule trigger in the registration transition will have the ID of the latest matching registration recorded in the registration_id field. If you register a pregnancy and then submit a V form, the V form will have a registration_id which is the ID of the most recent pregnancy registration. If you submit a D form for a pregnancy that was previously registered, the D form will have a registration_id which is the ID of the most recent pregnancy registration. This also applies to any other schedule that is generated by registering a patient (PNC, Immunizations, etc.). Any visit form will have the ID of the most recent registration. Any scheduled message that is cleared before being sent will have a cleared_by field with the report that caused the task to be cleared. If you register a pregnancy and receive the first visit reminder (Please remind Janet to go to the clinic for ANC), then submit a V form, the second reminder (Did Janet attend her visit?) would be cleared. That reminder would have a cleared_by field which is the ID of the V form. If you register a pregnancy and then send in a D form, all remaining reminders are cleared. Each of the reminders would have a cleared_by field which is the ID of the V form. This also applied to any other scheduled messages that are cleared - we will always know which report cleared the message. [#3959]","reports-tab-shows-patient-name#Reports Tab Shows Patient Name":"Have you been wondering why your CHW has been pregnant 58 times? Now you’ll be able to see the patient name associated with the pregnancy from the main list of the Reports tab.\nPreviously, the Reports tab displayed the name of the person who submitted a particular report. We received feedback that it was more useful to display the name of the patient, so we have updated the reports list and the report detail page to show the patient’s name at the top.\nIn the reports list, we show the patient’s name first so that a CHW or manager can easily see which patient the report is about. Next is the type of form, which is the same as in previous versions. Below the name of the form, we have included the patient’s hierarchy so that it’s easy to see at a glance which CHW area that patient belongs to.\nIf you then click on a report, you get to the report detail view, which again shows the patient’s name at the top. Below is the name of the form, which is the same as in previous versions. After the form name is the patient’s hierarchy, so it’s clear which CHW area the patient belongs to. Finally, we list the person who sent the report and that person’s phone number. In this case it’s the CHW, Brandon Bone, but it could also be a nurse or another person in the health system. If the phone number does not match anyone in the Medic system, it will simply show the phone number of the person who submitted the report with no name listed.\n[#4053]","updated-enketo-ui#Updated Enketo UI":"UI fairy dust alert! We made forms prettier.\nStarting in 2.15.0, Enketo forms have a larger font for the questions, more space between questions, and larger clickable areas for radio buttons and checkboxes. On Desktop, all forms have a header that persists for all pages of the form so that the user knows which form she is filling in.","updated-icon-for-chw-area#Updated Icon for CHW Area":"Wondering what that petri dish icon was for? We’re experimenting with a new icon for CHW areas.\nSwap out for your projects! The new icon is available in medic-projects and we’ll be shipping it as the default icon starting in 2.16.0.","updated-styling-for-tasks-due-today#Updated Styling for Tasks Due Today":"Now you have no excuse not to complete your tasks, especially if you hate the color blue.\nWe made a small update to the Tasks list so that tasks due today are easier to find in the list. Starting in 2.15.0, tasks due today now have bold, blue due dates. This helps to distinguish them from tasks due in the past, which are bold and red, and tasks due in the future, which are still gray and regular weight.\n[#4000]","view-clinic-places-in-places-filter#View \u0026lsquo;clinic\u0026rsquo; Places in Places Filter":"You might have noticed that for SMS projects, CHW areas went missing from the places filter in the Reports tab. Good news! They are back.\nWhen we started having CHWs log into the Medic app and register families, the places filter on the reports page became crowded with thousands of families, creating a performance issue. To get around that issue, we removed 'clinic' level places from this filter drop-down so that users would only see health centers and CHW areas, no families. This meant that no one could filter by family, but that wasn’t a needed feature.","whats-new#What\u0026rsquo;s New":""},"title":"2.15.0"},"/releases/2_16_0/":{"data":{"":"","ability-to-add-more-user-roles#Ability to add more user roles":"Because CHW Janet, CHW Supervisor Ann, and Paul the Data Guy don’t wear the same hat in real life and now they don’t have to in the app, either.\nIn order to make it possible to show the UHC mode features for some CHWs and not others, we decided to go ahead and implement configurable user roles. Up until now, we were limited to one user role for users that need offline access to their data. You have probably heard of the “restricted” user - this is the user type that allowed a CHW or manager to access data offline. However, this was limiting because every user that had offline data access had to have the same set of permissions. So, for example, a CHW and a supervisor had to have the same set of permissions, requiring both to have the permission to do something (such as delete reports) or neither would have permission to do it. This led to restrictions in what supervisors could do in order to avoid giving too many permissions to CHWs.\nWith 2.16.0, we now have configurable roles! This means that a CHW and a supervisor can both access data offline but can have unique roles so that they can have different permissions. For example, a CHW might not be able to delete data, review reports, or bulk delete, but a supervisor could be given the ability to do one or more of these actions without affecting the permissions of the CHW.\nNew roles can be created in the configuration pages. Instead of a permissions page, we now have a roles \u0026 permissions page. On this page we have a new tab for creating and managing user roles. Creating a new user role is as simple as creating a name and translation key for the user role and making sure you select the “Offline” checkbox if this user type needs access to data offline.\nScreenshot\nThe permissions page has also been updated to better accommodate a greater number of roles. We’ve changed the layout to a new format. This layout is temporary for now and we expect to improve it later in the year. You can see in this example that we now have roles for Supervisor, CHW and Online User, but you can create as many roles as you need, both for users that need access to data offline and for those accessing the app online.\nScreenshot\n[#4525]","add-new-statuses-to-the-status-filter-on-the-reports-page#Add new statuses to the status filter on the reports page":"Because even Superheros could use some help organizing their Inbox.\nWith the new feature that allows managers to review reports, we’ve updated the status filter to help managers easily find reports they need to review or reports they marked as having errors that need follow up. With these changes, we have retained the ability to filter by valid and invalid SMS reports. Here’s what happens when you select each of these filter options:\nManager review - “Not reviewed”: displays all valid reports (SMS and app) that have not been marked as correct or having errors by a manager Manager review - “Reviewed: errors”: displays all reports (app or SMS) that were marked as having errors by a manager Manager review - “Reviewed: correct”: displays all reports (app or SMS) that were marked as correct by a manager SMS validity - “Valid SMS”: displays all SMS reports that were valid when received (regardless of whether they are “Not reviewed”, “Reviewed: errors”, or “Reviewed: correct”) SMS validity - “Invalid SMS”: displays all SMS reports that were invalid when received and have red dots (applied automatically) For example, if a manager wanted to review any recent patient assessments that they might have access to, she would filter by the patient assessment form type and the “Manager review - Not reviewed” status filter. This would give a list of assessment forms that have not yet been reviewed.\nComparison","after#After":"Screenshot\n[#4577]","after-1#After":"Screenshot\n[#4576]","allow-death-confirmation-form-to-specify-the-date-of-death#Allow death confirmation form to specify the date of death":"Because the only thing worse than getting your birthday wrong is…\nIn 2.15.0, we added support for death reporting workflows. One glitch we realized was that the date of death was being set to the date that the death confirmation form was submitted. With 2.16.0, we’ve added an improvement to the workflow. It’s now possible to set a specific date of death in your death confirmation form. This makes the workflow more flexible by allowing a nurse to enter the confirmed date of death in the death confirmation form.\nIn order to include a user-selected date of death as the official date of death listed in the Medic app, you’ll need to make sure there is a field in the death confirmation form that lists the exact date of death and then indicate in your app_settings that this field should be used for the date of death.\nExample XLSForm with date_of_death field:\nScreenshot\nExample app_settings configuration:\n\"transitions\": { \"death_reporting\": true }, \"death_reporting\": { \"mark_deceased_forms\": [ \"death_confirmation\" ], \"undo_deceased_forms\": [ \"undo_death\" ], \"date_field\": \"fields.date_of_death\" } [#4636]","allow-supervisors-to-review-specific-patient-reports#Allow supervisors to review specific patient reports":"We call this feature Super-Vision! Supervisors now have the magical ability to see reports about patients without being able to view the patients themselves. #superpowers-for-supervisors\nApart from Standard, where we have very small numbers of users, supervisors are not able to view all patient reports due to device storage limits and app performance issues. However, there may be times when there are specific reports about patients that supervisors need to see, review, or take action on. This feature is not meant to allow supervisors to view all patient reports about every patient and it does not give supervisors the ability to see patient profiles. It is meant to better support workflows like reviewing mRDT images or confirming death reports. Currently, if a supervisor wanted to review an mRDT image in a patient assessment form or get a death confirmation task, she would need to have access to the patient. With this new feature, the supervisor only needs access to the patient assessment form or the death report form in order to do the review or receive the task.\nBelow you’ll see the Reports page from the supervisor’s view. In this example, the supervisor has access to families and family reports, but does not have access to patients. Using this feature, we’ve configured it so that the supervisor does have access to patient assessment forms so that they can be reviewed, even though she doesn’t have access to the patients themselves. As you can see in the screenshots below, the CHW has access to all patient- and family-level reports while the supervisor has access to all family-level reports AND the patient assessment report, but no other patient-level reports.\nComparison\nIf you want a report submitted by the CHW about a patient to be viewable by the supervisor, you’ll need to make sure that the supervisor has access to families (replication_depth of 2 in most cases) but no access to patients. You will also need to add a field to the patient-level form that the supervisor needs access to. The field should be a hidden field called needs_signoff that must be set to true in cases where the report needs to be reviewed by a manager. For example, if you only wanted a manager to review patient assessments where an mRDT was conducted, come up with a conditional statement to set the variable to true only for assessments where the mRDT was done. This hidden field must be a top-level field (not in any group and will be in doc.fields.needs_signoff when you submit). To test, upload your form with this field, fill it out and submit. Log in as a user who is the supervisor of the CHW who submitted the form and make sure you are able to see the form you just submitted.\nExample XLSForm: XLSForm\n[#4591]","before#Before":"Screenshot","before-1#Before":"Screenshot","bug-fixes#Bug Fixes":"","changed-use-of-colored-dot-on-the-reports-page#Changed use of colored dot on the reports page":"Seeing spots? Or do we mean dots? Either way, you’re about to see a whole lot less of them. If they don’t go away, consult a tech lead or your family eye doctor.\nOur use of the controversial “green dot” and “red dot” on the reports page hearkens back to the days when 100% of Medic users where using SMS. It was a quick way to see which reports were valid and which were not. Once we started having users on the mobile app, this feature became less useful because every single report was valid. This is because we have more control over how the data is entered and do not rely on the end user entering a valid Medic ID. We decided to modernize our use of red and green dots so that they make more sense across our SMS and app projects. Here’s our new approach:\nWe’ve removed the green dot completely from valid incoming reports. No dot = all good here = no attention needed. This is regardless of whether it came from the mobile app, a TextForm, or Medic Collect. Without green dots on every report, red and green dots now have more meaning. Using our new manager review feature (#4529), a manager can now use a green dot to indicate that a form is correct, and a red dot if it contains an error. We also know that it’s important to be able to see invalid reports coming in over SMS, either TextForms or Collect forms. For these invalid SMS reports, the red dot with an “x” is automatically applied. You can filter to see all invalid SMS reports by using the status filter dropdown. Here’s a summary of how the red and green dots now work: Comparison\nHere’s a look at the reports list so you can see the before and after:\nComparison\nThe screenshot on the left shows the current use of dots for an SMS project. On a mobile app project, there’s a green dot on every report.\nIn the screenshot on the right, we’ve removed the green dots from valid reports. The green dot can be applied when a supervisor has reviewed a report and marked it correct. The red dot for invalid SMS reports is still automatically applied. Additionally, a supervisor can review a report and apply the red dot if the report has errors.\nThe supervisor review feature is optional and should only be encouraged if it’s part of their workflow. It’s also perfectly fine for supervisors to use it selectively - to only mark reports with errors or to only review certain reports (such as mRDT, but not child assessments). The intention isn’t to give supervisors more review work but to reduce the noise on the Reports page and make the information that gets shown there more meaningful.\n[#4574]","expand-use-of-the-verify-button-for-manager-review-of-chw-reports#Expand use of the verify button for manager review of CHW reports":"The exciting world of data cleaning just got better.\nWe’ve created a new and improved verification workflow for managers. Before, we just had two states for each report, verified and unverified. A report was verified by clicking the verify button.\nComparison\nWith the new feature, clicking on the verify button opens a small menu with two options: Correct and Has errors. This allows a manager to review a report and mark it correct if it looks good and mark it as having errors if they need to follow up with the CHW for further verification. The status will also be synced to the CHW’s phone so they can see which reports were marked correct by their manager and which were marked as having errors.\nWith our new configurable roles, it is also possible for managers to have the ability to review reports while preventing CHWs from having this option, even if both are restricted/offline-first users.\nThis feature was built to support the mRDT error-checking workflow for the Muso Innovation Network. Supervisors must log in to view photos of the mRDTs (built in 2.14.0) and check that the diagnosis reported by the CHW matches the photos. If the supervisor sees an error, they can now use this feature to mark it as such. Error rates are part of the CHW’s performance metrics so supervisors can see which CHWs are in need of additional training on implementing mRDTs. To complement this workflow, we built a widget on the CHP’s Targets page to accompany this workflow that tracks their monthly error rate.\nComparison\n[#4529]","fixed-a-performance-issue-with-loading-contacts#Fixed a performance issue with loading contacts":"CHWs see a lot of people every day. That’s a lot of searching! We’ve improved search performance by 30% which really adds up.\nLoading contacts is now done with an allDocs request instead of using custom views. This improves performance of searching on the people tab and on the reports tab. It’s a workaround for now as we look further into the root cause of the slowness. [#4666]","sample-xlsform#Sample XLSForm":"XLSForm\n[#4600]","sort-places-by-date-last-visited#Sort places by date last visited":"Puts the households who haven’t been seen in the longest time at the top, because you know how you hated it in school when the kids whose last names ended in “A” always got to be first in line?\nWhen you enable the permission to see the date last visited in the people tab list, you will notice that a new icon appears in the top bar. This icon is for sorting the list of people. The default sort is alphabetical, as you have probably noticed. The new icon allows you to sort your families or households by the date last visited. You will need to enable the permission for viewing the date last visited and configure one or more forms to be included in the calculation of the last visit date for each family (see previous section). Once you’ve done that, the sort will just work. By default, when you sort by “date last visited,” the households you saw least recently will be at the top, gradually increasing to those you saw most recently. Because you know, you should prioritize the households who haven’t been seen in the longest amount of time.\nFun fact: We drew this feature for the first time while chatting about visit practices in a workshop with LG CHPs in Uganda. See the drawings on the lower right that shows a family list being reordered by date, with those visited least recently at the top.\nImage\nComparison\n#4524","toggle-universal-health-coverage-mode-on-and-off#Toggle Universal Health Coverage mode on and off":"We’re not trying to play bi-partisan politics, we’re just trying to test some new features.\nShowing the date last visited and being able to sort contacts by the date they were last visited by a CHW are the first two features designed to achieve Universal Health Coverage (UHC). While the world is quickly catching onto the importance of this, we know that not all programs are ready to implement this approach. Feature #4525 makes it possible to turn these UHC features on or off. It’s still very early in our UHC design process so we’ll be closely monitoring these features and conduct feedback sessions, so the UHC features previously described may still undergo some iteration. Check on the status of these features before implementing them in your project.\nAs was described earlier, enabling UHC mode is as simple as giving a user the permission can_view_last_visited_date. This will give the user the last visit date in the people list and the ability to sort by the last visit date. Make sure you add the needed field to the forms you want to include as part of the last visit date calculation to avoid having a long list of “Last visit unknown”. Once CHWs start submitting these forms, the dates on the list will slowly update.\nComparison\n[#4525]","updated-google-libphonenumber#Updated google-libphonenumber":"Now you can change your number to avoid your ex without missing a single Medic reminder.\nWe’ve updated to the latest google-libphonenumber to make sure our app will accept new phone numbers across all of the countries where we work. The current version is 3.1.8. [#4665]","updated-header-for-reports#Updated header for reports":"UI fairy dust alert! We made viewing reports on mobile prettier.\nWe’ve updated the header when you’re viewing reports in the Reports page. The new design works much better on smaller screens:\nWe’ve removed the detailed date We’ve moved the relative date to the left side, below the sender name. If you hover over the relative date, the full date and exact time the report was received will appear. If you’re on a touchscreen, do a long tap on the relative date to see the detailed date. If a manager has reviewed this report and marked it correct or marked it as having errors, the green or red dot would appear at the top right. Comparison","use-family-equity-score-in-tasks-and-actions-about-family-members#Use family equity score in tasks and actions about family members":"Jokes aside, this features is an important step in being able to deliver a preferential option for the poor. Read more about this here: https://www.pih.org/article/in-the-company-of-the-poor\nLast year, we began implementing an equity survey in Kenya that determines a household’s wealth quintile based on a number of questions about their home, possessions, and access to safe drinking water, among other things. Although the wealth quintile could be used to generate tasks for the household, we wanted to make the equity quintile useful in targeting interventions at the patient level. With this feature, we’re now able to use the equity score to generate specific tasks about patients, such as increasing the number of pregnancy follow-ups for women in poorer households. We’re also able to display specific notes or questions within forms for patients in lower wealth quintiles, such as asking additional questions about children in poorer households when they are being screened for malnutrition. This feature makes the equity score more usable in patient workflows and is the first step toward greater targeting of services.\nWe’re still learning how to deliver this feature well. We’ve heard from CHWs that they resist the approach that some families in their community would be “labeled” as poor in the app, even if they acknowledge that they prioritize these families differently in their daily workflows. Though this feature allows that “labeling” to happen on the backend, it may be helpful and important for a CHW to know why a family or patient has been asked these additional questions or given more frequent home visits. The Impact and Design teams are currently getting feedback on appropriate options. Consult your designer and share back what you’re thinking and trying so we can all learn together!\nThe feature works by pulling specific fields from a form filled at the family level and copying them to the profile of each family member in the household. For now, we are limited to the national quintile and the urban quintile. We don’t pull the raw scores, just the quintiles, which are easier to use in tasks and forms. To make sure your quintiles get copied, simply make sure that you have fields called NationalQuintile and UrbanQuintile defined as top-level fields in the form you’re using at the household level. These must end up at doc.fields.NationalQuintile and doc.fields.UrbanQuintile for this feature to work correctly.","view-date-last-visited-for-places-on-the-people-tab#View date last visited for places on the people tab":"Because knowing where you’ve been helps you know where you’re going next! - Medic proverb\nIn order to help CHWs achieve full coverage of every family or household they care for, we’ve added an optional feature to update the list of families or areas to display the date that family or area was last visited. You can use any patient- or family-level form or forms to update the date last visited. You may run into performance issues if you configure this to look at forms submitted very frequently. For example, we expect five forms submitted only once a month to work better than two forms submitted every day. Make sure you test!\nScreenshot\nIn order to see the date last visited instead of the primary contact, make sure you give your CHWs (or whichever users need to see date last visited) the can_view_last_visited_date permission. Once that permission is enabled, you’ll be able to display the date the family was last visited in the list. Make sure you have this permission enabled in app_settings to avoid overwriting the permission when you upload your config:\n{ \"name\": \"can_view_last_visited_date\", \"roles\": [ \"chw\", \"district_admin\" ] } When you first implement this, you’ll see a long list of “Last visit unknown”. You’ll need to indicate which forms should be included in the calculation for the date last visited. You can use forms at the person or family level, though it is preferable to limit the number of forms included to the minimal number to avoid performance issues.\nIndicating that a form should be included in the calculation for the date last visited is as simple as adding a field called visited_contact_uuid to your form. This should be a calculate field that contains the family/household (clinic level place) UUID. Make sure this is a top-level field (not in any group and will be in doc.fields.visited_contact_uuid when you submit). To test, upload your form with this field, fill it out and submit, and your people list will update with the correct relative date. Note that you may need to refresh the people tab by either clicking refresh or navigating to another tab and then back.\nExample XLSForm (this is a patient-level form):\nScreenshot\n[#4526]","whats-new#What\u0026rsquo;s New":""},"title":"2.16.0"},"/releases/2_16_1/":{"data":{"":"","show-an-icon-next-to-families-or-areas-that-are-overdue-for-a-visit#Show an icon next to families or areas that are overdue for a visit":"As the ICONic Britney Spears once sang, “Show me a siiiiiign… [visit] me, baby, one more time!”\nIn order to help CHWs achieve full coverage of every family or household they care for, we added a feature in 2.16 to update the list of families or areas to display the date that family or area was last visited. Now, we’ve added an icon next to families that were visited more than a month ago to help CHWs quickly spot whom they might visit. Currently, the time frame of “more than a month ago” is not configurable. [#4747]\nScreenshot","whats-new#What\u0026rsquo;s New":""},"title":"2.16.1"},"/releases/2_17_0/":{"data":{"":"","improve-styling-of-mrdt-enketo-widget#Improve styling of mRDT Enketo widget":"“OK, but make it pretty.” Fine, here you go: ✨ UI fairy dust ✨\nWe’ve improved styling by:\nMoving the “Take Photo” button **above ** where the photo is; Adding a space between the photo and the “Take Photo” button; Screenshot\n[#4745]","include-mrdt-in-a-webapp-release#Include mRDT in a webapp release":"We included mRDT-related features in a webapp release. [#4743]","include-mrdt-in-an-android-release#Include mRDT in an android release":"We made changes in the Android container to make mRDT-related features available. [#4744]","show-pictures-in-the-report-view-history-tab#Show pictures in the report view (History tab)":"Your selfies are safe with us (and now visible in the Reports tab).\nPhotos uploaded by CHWs are now visible in the Reports view, or History tab. This is currently being used in the mRDT workflow by supervisors to confirm that CHWs read the mRDT test results correctly. [#4742]\nScreenshot","whats-new#What\u0026rsquo;s New":""},"title":"2.17.0"},"/releases/2_18_0/":{"data":{"":"","add-display-of-visit-counts-and-conditionally-style-them-uhc-mode#Add display of visit counts and conditionally style them (UHC mode)":"We added visit count numbers to the right side of each family row. The visit count will display a count of the number of times that family has been visited so far within the current month. The exact definition of the calendar month is configurable. This is because some partners may follow the Western calendar literally, while other partners have different definitions of a month (ex: Muso counts from the 26th of one month until the 25th of the next month). Whatever forms have been configured to calculate “Date last visited” will be the same forms used to calculate “Visits this month.” Please note this will be a straightforward count of forms submitted and cannot be configured to only include a max number of forms in a particular time frame, such as “per day.”\nThese visit counts are also available to be conditionally styled. If the partner has no specific goals, just like with Targets, the text is normal black. If the partner does have specific goals, we use red to indicate “bad”, yellow to indicate “ok” and green to indicate “good” or “goal met.” It is also possible to display an icon next to the count number. This icon is only available as an option if the partner has a goal. If the partner does not have a goal, there will never be an icon. The icon is positioned to the left of the count number on the same baseline.\nNote: We removed the red warning icon by the date last visited text that we implemented in 2.16.1. The new functionality and location of the icon as described here replaces what we did in 2.16.1. It used to be tied to date last visited. It is now tied to visits this month.\nScreenshots\nTo enable the specific goal (which color codes the number of visits), you need to configure it in app_settings. Please visit the following documentation in cht-docs to learn how. [#4758]","improvements#Improvements":"","lhs-list-doesnt-update-out-of-page-items#LHS list doesn\u0026rsquo;t update \u0026ldquo;out of page\u0026rdquo; items":"LiveList and Search webapp services previously did not support sorting items by fields/values that are likely to change (e.g. by last visited date). Now, when the list is multiple pages long and it’s not entirely loaded, if an existent item receives a change that would push it lower than the current number of loaded items, it will refresh and move to appropriate position in the list. [#4782).]","make-people-page-default-sort-configurable-uhc-mode#Make People page default sort configurable (UHC mode)":"Previously, the default sort for the People page list was alphabetical. We’ve now made the default sort configurable. For UHC mode, this would likely mean sorting by last visited date. In the future, it could include sorting by number of visits this month or another value.\nTo enable default contact sorting to be based on last visited date, you need to configure it in app_settings. Please visit the following documentation in cht-docs to learn how. [#4752]","there-are-view-generation-errors#There are view generation errors":"[#4612]","whats-new#What\u0026rsquo;s New":""},"title":"2.18.0"},"/releases/2_18_1/":{"data":{"":"","count-two-visits-on-the-same-day-as-one-visit#Count two visits on the same day as one visit":"If a family is visited twice on the same day it now only counts as one visit in UHC mode. [#4897]","inputs-group-not-saved-when-its-relevance-is-set-to-false#Inputs group not saved when its relevance is set to false":"Form inputs are now always saved on the reports even when they are marked as not relevant to help with analytics and editing forms. [#4875]","whats-new#What\u0026rsquo;s New":""},"title":"2.18.1"},"/releases/2_6_0/":{"data":{"":"This release contains breaking changes from 0.x versions. Updating from 0.x versions may result in the application no longer operating as expected.\nThe app can now be used offline and synced back to the server later. Added an android app for accessing the webapp from mobile. Added Tasks feature for rich event scheduling. Forms can now be provided in XForm format for rich form UIs. Added a configurable Target analytics module."},"title":"2.6.0"},"/releases/2_6_1/":{"data":{"":"User’s fullname is not showing up in /configuration/users. Issue: #2200 Deleted documents cause sentinel log spam. Issue: #1999 Disable nools for unrestricted users. Issue: medic-projects#149 Update libphonenumber and use strict validation. Issue: #2159 #2196 Contacts export response garbled. Issue: #2187"},"title":"2.6.1"},"/releases/2_6_2/":{"data":{"":"Update PouchDB to improve replication reliability and performance. Issue: #2134 #2167 When editing a CHP Area, previously set values for CHP, Branch, and Supervisor do not show up. Issue: #2223 Dropdowns in CHP Area create and edit forms have no blank option. Issue: #2227 allow-new appearance in Enketo doesn’t make the “New” option appear. Issue: #2251 Improve performance of Enketo db-object-widget. Issue: #2161 Ensure roles are always available on user-settings. Issue: #2199 Form type filter doesn’t include all forms. Issue: #1409 Added APIs for creating Users, People, and Places. Issue: #2046"},"title":"2.6.2"},"/releases/2_6_3/":{"data":{"":"“console not defined” error when loading page. Issue: #2277 Pouch doesn’t update seq unless something has changed. Issue: #2288 Snackbar showing all the time. Issue: #2306 Support external_id property on user-settings docs. Issue: #2310"},"title":"2.6.3"},"/releases/2_7_0/":{"data":{"":"","bug-fixes#Bug fixes":"Report list item summaries aren’t translated. Issue: #2100 Fix form type filter. Issue: #1409","features#Features":"Bulk delete reports. Issue: #1000","performance-improvements#Performance improvements":"Replication performance. Issue: #2286 Improve search performance. Issue: #2302 Don’t fetch form titles for each Contact report. Issue: #2300 Only fetch relevant data for the Users service. Issue: #2262 Remove clinics from the Facility filter dropdown. Issue: #2218 Optimize admin bandwidth concerns. Issue: #2211 We request facilities from the server over and over again. Issue: #2210 Don’t audit _local docs. Issue: #2366 All requests to CouchDB time out after 10 seconds. Issue: #2325 Long delay loading contact dropdowns. Issue: #2326"},"title":"2.7.0"},"/releases/2_7_1/":{"data":{"":"","bug-fixes#Bug fixes":"Creating user via fails due to invalid reported_date. Issue: #2449","performance-improvements#Performance improvements":"App takes minutes to load a person dropdown. Issue: #2445 Cannot load Configuration Users page. Issue: #2444"},"title":"2.7.1"},"/releases/2_7_2/":{"data":{"":"","bug-fixes#Bug fixes":"Connection refused when trying to load app. Issue: #2476"},"title":"2.7.2"},"/releases/2_7_3/":{"data":{"":"","bug-fixes#Bug fixes":"Remove maxSockets limit to allow more concurrent connections. Issue: #2492"},"title":"2.7.3"},"/releases/2_8_0/":{"data":{"":"","bug-fixes#Bug fixes":"Android back button doesn’t work as expected. Issue: #2600 In date filter for Reports tab, the selected dates are being offset by 1 day. Issue: #2185 ‘New Contact’ option does not appear without a search. Issue: #2516 Place contact should be a child of the place. Issue: #1710 Geolocation information is not included in submitted form. Issue: #2450 Cannot update a contact’s phone number without an error. Issue: #2420","features#Features":"Pass user’s info to rule to customize Tasks per user type or location. Issue: #2408 Add context to target types and goals. Issue: #2409 Update default translations Add ageInDays and ageInMonths functions to the XML forms context utilities. Issue: #2650 Users can now only access an optionally configured number of hierarchy levels below their facility. Issue: #2648"},"title":"2.8.0"},"/releases/2_8_1/":{"data":{"":"","bug-fixes#Bug fixes":"If initial sync fails without syncing anything subsequent syncs get no results. Issue: #2770 Initial sync fails if server doesn’t respond within 30 seconds. Issue: #2771 Targets tab is blank on first access. Issue: #2739","performance-improvements#Performance improvements":"Adding a space to a contact search term performs poorly. Issue: #2769 Local DB grows without limit. Issue: #2434"},"title":"2.8.1"},"/releases/2_8_2/":{"data":{"":"","bug-fixes#Bug fixes":"Ensure PouchDB doesn’t mis-label TECNO phones as devices running Safari. Issue: #2797"},"title":"2.8.2"},"/releases/2_8_3/":{"data":{"":"","performance-improvements#Performance improvements":"Remove traffic statistics collection. Issue: #2886"},"title":"2.8.3"},"/releases/2_8_4/":{"data":{"":"","bug-fixes#Bug fixes":"Debounce form submissions to stop duplicate submissions. Issue: #2909"},"title":"2.8.4"},"/releases/2_8_5/":{"data":{"":"No changes, only a bump in version number to trigger a new release."},"title":"2.8.5"},"/releases/2_9_0/":{"data":{"":"","bug-fixes#Bug fixes":"Rerun transitions on change if the previous run failed. Issue: #2978 Allow replication of JSON reports. Issue: #2979 On upgrade existing reports are not associated to person/place. Issue: #2970 Queries from ANC Analytics do not work. Issue: #2975 Set new permissions to the application default when updating. Issue: #2951 db-object fields show as editable when readonly=\"true()\". Issue: #2910 Calling the doc_summaries_by_id view results in an audit record being created. Issue: #2895 Can’t create new person as primary contact to existing place. Issue: #2884 Mute button does not work. Issue: #2878 Cannot fully replicate dbs behind medic-api due to badly named document. Issue: #2876 Deregister Changes callbacks. Issue: #2870 Non admins can edit translations. Issue: #2868 Error when completing a task. Issue: #2851 Editing a report from a person doesn’t pre-populate the person. Issue: #2845 Forms appear on the History page when they shouldn’t, based on configuration. Issue: #2837 When I click on a report from a contact profile, I see a flash of the History tab before getting to the report view. Issue: #2834 When resources change all icons disappear. Issue: #2830 Use default revs_limit. Issue: #2787 ContactsContent controller modifies doc on render. Issue: #2782 Alerts to reporting_unit not working. Issue: #2779 Correct form not displayed when going to Submit Report. Issue: #2758 Validations and Auto-Replies not triggered for Notifications. Issue: #2755 Sending message from Reports tab doesn’t prefill the modal. Issue: #2748 Selecting a person’s Report or Task doesn’t load the actual item. Issue: #2718 select2 form fields are not being prepopulated. Issue: #2703 Exporting Feedback crashes API. Issue: #2692 Cannot associate a user with a place. Issue: #2683 Missing patient ids and CHW names. Sentinel not fully running on Strong Minds instance. Issue: #2675 Cannot update a contact’s phone number without an error. Issue: #2661 Add recipients doesn’t work. Issue: #2659 Sometimes changes feed is told the wrong ID for user doc. Issue: #2640 Submitting a report with an invalid ref id crashes sentinel. Issue: #2636 Always use the same pouchdb configuration. Issue: #2625 Branch Manager is not getting forms downloaded. Issue: #2620 Can crash API with call to /api/v1/users. Issue: #2602 TypeError on Messages tab. Issue: #2588 context_by_type_freetext view seems to run with no search term. Issue: #2584 Once viewing a stock report, clicking the area name makes area stats disappear. Issue: #2580 Missing option to change time unit in reporting rate analytics. Issue: #2576 Missing “district” selector in Reporting rates Analytics in v2.x. Issue: #2575 Rename “stock” widget to “reporting rates”. Issue: #2574 No title shown for analytics stock table. Issue: #2573 No loader showing when loading data on analytics stock report. Issue: #2572 No loader shown when loading locations on Analytics Stock widget. Issue: #2566 Back button is broken on analytics stock widget. Issue: #2565 Stock widget shows time-period selector before a place has been selected. Issue: #2564 Icons wrong on analytics stock widget. Issue: #2563 No text labels displayed in analytics stock widget. Issue: #2562 Analytics stock widget breaks on error. Issue: #2561 No loading animation is displayed when waiting for list of locations on analytics stock widget. Issue: #2559 Analytics page should not show menu if there is only one module. Issue: #2557 Cannot choose one of the analytics modules. Issue: #2556 Reporting Rates has changed name to Stock Monitoring. Issue: #2555 Analytics screen has no information on it. Issue: #2554 By default gateway users don’t have the can_access_gateway_api permission. Issue: #2549 Cannot view Targets configuration. Issue: #2548 Send message uses a badly performing API. Issue: #2547 Document conflict on starting sentinel. Issue: #2542 Bad error when not authed for SMS api. Issue: #2540 Editing your own user settings wipes out security settings. Issue: #2539 Cannot send messages to unknown numbers. Issue: #2536 medic-api doesn’t seem to correctly expose all pending messages. Issue: #2535 Outgoing messages are not well formatted in the report view. Issue: #2532 SMS from medic-gateway do not appear in Messages tab. Issue: #2530 Phantom SMS message response to invalid textform message. Issue: #2525 sentinel keeps processing the same backlog. Issue: #2521 Errors starting sentinel with DB name other than ‘medic’. Issue: #2513 You need to restart medic-api for new translations to make it through. Issue: #2511 API connection refused. Issue: #2476 Login page not translated. Issue: #2466 Language dropdown is empty when adding or editing a user. Issue: #2462 Language select modal is blank. Issue: #2459 Broken migrations should prevent API from starting. Issue: #2456 Geolocation information is not exposed in JSON. Issue: #2450 Creating user fails due to invalid reported_date. Issue: #2449 App takes minutes to load a person dropdown. Issue: #2445 User can’t change their own password. Issue: #2440 When switching between reports in History, the “No report selected” page appears momentarily. Issue: #2433 \\u0000 cannot be converted to text. Issue: #2426 The tour keeps popping up on mobile. Issue: #2423 In select mode, clicking on a report on the LHS to check the box also marks the report as read. Issue: #2422 DeleteDocs modifies the given array. Issue: #2417 DeleteDocs fails if the parent’s contact is null. Issue: #2416 After clicking “delete” on the RHS of bulk delete, reports do not disappear from the LHS. Issue: #2414 Using “select all” when attempting to bulk delete, the number of records on the RHS doesn’t match the LHS. Issue: #2411 Logout option no longer works on the MM Android app. Issue: #2407 national-admins should be able to edit contacts. Issue: #2395 Initial replication gets stuck on Tecno. Issue: #2394 Cannot have more than one repeat group that creates people within the same form. Issue: #2393 Targets tab doesn’t show correct progress. Issue: #2388 Contacts tab takes forever to load on mobile. Issue: #2378 RangeError: Maximum call stack size exceeded. Issue: #2377 Don’t audit docs that match _local/*. Issue: #2366 Fix changes proxy to support heartbeat. Issue: #2363 .4 analytics page crashes develop API. Issue: #2352 Admin can’t submit report (permissions). Issue: #2351 DeleteDoc service breaks replication. Issue: #2331 Phones with poor internet connections get an error page when trying to update. Issue: #2328 Navigating straight to medic/_design/medic/_rewrite/#/configuration/user breaks editing. Issue: #2294 Cannot select contact after bad search. Issue: #2252 Incoming message not attributed to contact. Issue: #2230 Form recognized, but label in list not updated. Issue: #2215 Forms not showing in filter. Issue: #2214 Schedule not assigned to registration form. Issue: #2213 In date filter for Reports tab, the selected dates are being offset by 1 day. Issue: #2185 Exceptions when indexing (presumably) views. Issue: #2173 Form title disappears on page reload. Issue: #2156 User configuration UI doesn’t correctly load the attached contact / locale. Issue: #2116 Display: block in or-appearance-h2 is overriding the disabled class. Issue: #2101 Verify/Unverify button falls out of sync with left pane after being clicked. Issue: #1939 Place contact should be a child of the place. Issue: #1710 Default “New Person” form doesn’t allow editing the parent place. Issue: #2704","features#Features":"Redesign of People tab to introduce patient centric workflows. Create Task and Target based on reports using short patient_id format. Issue: #2986 Calculate Z-Score within app workflow form. Issue: #2915 Transitions do not run for XForms. Issue: #2864 CHWs should not be able to edit their own area. Issue: #2844 Allow for people-centric SMS workflows. Issue: #2700 Unique “add person” forms to a place. Issue: #2693 Store GPS failure. Issue: #2670 Progressive Web App. Issue: #2626 Remove XML parsing and replace it with JSON views. Issue: #2432 Lowercase all user ids. Issue: #2369 New person and new place buttons should add person/place to the part of the hierarchy in which they are clicked. Issue: #2335 Create default Edit Place forms that allow users to edit a family’s primary contact. Issue: #2333 Initial replication feedback. Issue: #2279 Make it easy to add translation keys. Issue: #1333","performance-improvements#Performance improvements":"Make medic-audit’s view generation 8-∞ times faster. Issue: #2879 Deregister Changes callbacks. Issue: #2870 Improve free text search views. Issue: #2853 Admin performance on lg.app has regressed. Issue: #2744 Improve application performance for high-utilization CHPs. Issue: #2665 Create migration to remove obsolete ddocs. Issue: #2597 Send message uses a badly performing API. Issue: #2547 Consider refactoring how sentinel views are compiled. Issue: #2537 sentinel duplicate views. Issue: #2534 Remove XML parsing and replace it with JSON views. Issue: #2432 Increase stability by looping over changes . Issue: #2430 Replication since gets reset when new documents added. Issue: #2404 Use db view pagination where possible. Issue: #2371 Don’t audit docs that match _local/*. Issue: #2366 Create a client side ddoc. Issue: #2206 Store translations in a separate doc. Issue: #1706 Remove empty parents migration scalability. Issue: #2629","uiux-improvements#UI/UX improvements":"Show parent place after deleting a place/person. Issue: #2936 Clean up labels and translations. Issue: #2888 First load: briefly displays “No people found” on the people and places tab even if you have contacts. Issue: #2835 Add icons to forms. Issue: #2794 Forms in Submit Report menu aren’t sorted. Issue: #2760 Reported Date is show in ms since epoch. Issue: #2699 Add basic sync status to about page. Issue: #2415 Display ‘your place’ card upon login. Issue: #2342 Only show places you directly manage in LHS unless searching. Issue: #2339 Lock ‘Your Place’ at top of left pane. Issue: #2337 Remove all filters in Contacts. Issue: #2336 Display “disabled for admins” message in tasks and targets page. Issue: #2292"},"title":"2.9.0"},"/releases/2_9_1/":{"data":{"":"","bug-fixes#Bug fixes":"Added a migration to fix scheduled messages so they can be sent by medic-gateway. Issue: #3015"},"title":"2.9.1"},"/releases/3_0_0/":{"data":{"":"","and-lots-more#And lots more…":"Over 100 individual issues have been fixed in this release - read more.","changes-requests-are-unsustainably-large#Changes requests are unsustainably large":"Previously, requests to changes feed got very big because we submitted all known doc IDs. Now, whenever a delete comes through in the changes feed, we manually run the view code over it to determine who should see the delete which means docs ids are not included as parameters on the request. [#4172]","database-upgraded-to-the-latest-couchdb#Database upgraded to the latest CouchDB":"Our stack now runs on the latest and greatest version of CouchDB (v2.2) which is a major upgrade and supports clustering for better performance on large projects and more efficient replication.","enketo-summary-label-icons-are-misaligned#Enketo summary label icons are misaligned":"Previously, icons on the summary screen were misaligned into a corner. We’ve added padding to center them vertically and horizontally on the summary bar. [#4530]","implement-access-logging-in-api#Implement access logging in API":"We implemented logging of requests in API for the response status, size, time, etc. [#4622]","import-and-export-of-settings-in-admin-console#Import and export of Settings in Admin Console":"This feature provides UI support to import and export settings. There is now third tab to the Settings page called “Backup/Restore” and includes instructions for downloading as well as uploading. [#3868]","improve-the-filtered-replication-algorithm#Improve the filtered replication algorithm":"We made significant performance improvements to our filtered replication algorithm. [#4185]","improvements#Improvements":"","make-sure-we-cant-infinitely-recurse-in-the-lineage-shared-library#Make sure we can\u0026rsquo;t infinitely recurse in the lineage shared library":"We put guards in place to cleanly throw errors if we detect that we’re hitting an infinite loop. We did this by putting depth guards on potentially problematic loops and throw the error if the number gets outrageously high. This will prevent app hangs and crashes. [#4604]","performance-fixes#Performance Fixes":"","person-with-self-as-parent#Person with self as parent":"It used to be possible to edit URLs to create a person with themselves as a parent. This has now been fixed. [#4487]","pull-sentinel-data-out-into-its-own-database#Pull sentinel data out into its own database":"We have taken data that is specific to the running of sentinel and doesn’t need to be replicated down to users out into its own database. This makes our changes feed half the size (or so). [#3423]","replace-medic-reporter#Replace medic-reporter":"Medic-reporter was a standalone couchapp that we used for sending test messages without needing an SMS or gateway device. Because it was standalone, it frequently broke and was difficult to install. We have now reproduced the main functionality of medic-reporter in the admin app, so it’s shipped with the webapp, can be tested and maintained easily, and works. [#4516]","split-the-admin-tab-out-as-a-new-app#Split the admin tab out as a new app":"Previously, non-admin users have to download and run the admin only code, which was a waste of bandwidth, memory, and disk space. We split it out as a separate webapp. The new app is a desktop-only, online-only single page. The new admin app preserves all the same functionality as before, and will be revisited with a UX/UI update in the near future. [#4145]","subject-summaries-are-loaded-one-at-a-time#Subject summaries are loaded one at a time":"Reduce the time it takes to load the Reports and Contacts lists by up to 50% by requesting subject summaries in a batch rather than individually. [#4669]","support-running-our-stack-on-docker#Support running our stack on Docker":"We have implemented a containerization solution (Docker) which means our stack can run safely on a range of operating systems, and multiple deployments can run on the same instance. The end result is to better support a project self-hosting the deployment and to save money on deployment by combining some or all of our AWS instances. [#3983]","targets-tab-has-no-loading-spinner-on-initial-load#Targets tab has no Loading spinner on initial load":"There is now a loading spinner on the Targets tab on initial load. [#4241]","upgrade-notes#Upgrade notes":"The supported versions for client and server software have been changed significantly. Make sure your software meets the requirements before upgrading to 3.0.0. The /api/v1/messages endpoint has been removed as it was no longer actively used, and contained bugs. [#3971] The ANC analytics page and the following APIs have been removed as they are no longer used. [#1002] /api/active-pregnancies /api/upcoming-appointments /api/missed-appointments /api/upcoming-due-dates /api/high-risk /api/total-births /api/missing-delivery-reports /api/delivery-location /api/visits-completed /api/visits-during /api/monthly-registrations /api/monthly-deliveries The /api/v1/export/messages, /api/v1/export/forms, and /api/v1/export/contacts endpoints have been removed in favor of /api/v2/export/messages, /api/v2/export/reports, and /api/v2/export/contacts respectively. [#1002] The /api/v1/fti endpoint has been removed due to security concerns and lack of use. [#1002]","uses-horticulturalist-for-installation-and-upgrades#Uses Horticulturalist for installation and upgrades":"Previous Situation: To install and update the Medic webapp on a server we used an application called Gardener. It is a web-based tool to manage CouchDB applications. It includes a tool, called Dashboard, which lets you install Medic. You could then upgrade the Medic application using that same web-based tool. Problem: Although Dashboard made it easy to install and upgrade an application, it was problematic when managing many deployments. For instance, upgrading all instances required manually clicking the Upgrade button in a webpage. This process is tedious, and only worked if you were on a good internet. We learned the hard way that doing an upgrade from a spotty connection could leave your instance in a broken state. Also, you only had the choice to upgrade to the very latest version of the app. That means that if you are on 2.14.0, you could not update just to 2.14.5, the same version but with fixes for bugs. You’d have to upgrade all the way to 2.18.0. Solution: Horticulturalist is a new and easy way to deploy and update Medic. Horti replaces the Market, Gardener and Dashboard as our standard way to deploy and manage our software. It can be used from the Medic Mobile admin webapp to select the specific version that you want to upgrade to. You can even select versions from a different branch to help with acceptance testing of new features. It can also be used via a computer terminal using the command line interface. This makes it easy for the Site Reliability Engineering team to manage instances, making sure that projects quickly get updates to use the most stable version of Medic tools.\n[#3993 ….]","value-for-db-doc-attribute-is-case-sensitive#Value for db-doc attribute is case sensitive":"Previously the db-doc attribute in XLSforms only accepted the lower-case “true.” It now accepts “TRUE” as well, which is what we got often got with Excel doing autocorrect. [#3973]","whats-new#What\u0026rsquo;s New":"","write-a-scalability-testing-framework#Write a scalability testing framework":"We wrote a scalability testing framework to determine how many users our app can support. This will help us to work out which aspects to focus on, prove improvements work as expected, and test for regressions. [#4244]"},"title":"3.0.0"},"/releases/3_10_0/":{"data":{"":"Known issues Check the repository for the latest known issues.\nUpgrade notes Breaking changes Updates to meta databases replication The replication of users meta databases to the conglomerate, medic-users-meta database, is no longer configurable. This task now runs every day, at 2am UTC, and replicates feedback and telemetry documents to medic-users-meta database.\nAndroid wrapper update required for new features Supporting remote first-time login is only fully functional while using medic-android version 0.5.0 or later.\nSentinel no longer advances its transition processing seq in _local/sentinel-meta-data Instead, it advances the transition processing seq in _local/transitions-seq. Additionally, a new document _local/background-seq advances the deletion processing seq. A new migration is run when upgrading to generate the new local files.\nSupported software There are no required changes to the supported software matrix from 3.0.0.\nNode CouchDB Browsers SMS bridge Android medic-android medic-couch2pg 8.11+ 2.1+ Chrome 53+, Firefox latest medic-gateway 4.4+ 0.4.5+ 3.0+ Supporting remote first-time login 3.10.0 adds a new authentication mechanism that doesn’t require users to know their username or password. Users can now access the app for the first time by clicking on a link that they receive by SMS. Admins can enable or disable this feature for any user. Users with the latest version of medic-android will have the option to open the weblink directly in the CHT app instead of a browser.\nToken login\nSee the documentation for more information.\nSupporting linked docs To support the ability of sending SMS messages to people that are not primary contacts, contact documents now expose a new property, linked_docs, that can contain a collection of ids representing documents that are relevant to the respective contact. Every document listed in linked_docs will be shallowly hydrated when the contact is hydrated, thus providing a means of accessing the contents of these related documents everywhere the contact is used within the app. This feature can have a multitude of applications, from providing a way to access an arbitrary contact’s phone number when resolving an SMS recipient to linking a delivery report to a child person document (linked_docs can also be used in contact-summary). See the documentation for more information.\nPrivacy Policies App builders can now configure privacy policies for every language. When a privacy policy is configured for a language, users who load the app in this language are prompted to accept the policy after logging in, and are blocked from using the app until they have accepted. Privacy policies can be configured using medic-conf or from a new App Management page.\nPrivacy policies\nSee the documentation for more information.\nMore granular replication depth configuration for offline users A new report_depth option was added to the replication_depth configuration. This option allows offline users to replicate and report on contacts deeper in the hierarchy without having to replicate reports about those contacts that were created by other users. See the documentation for more information.\nImproved geolocation data 3.10.0 improves the way geolocation data is obtained. Previously, if the app was not able to obtain a position lock immediately, the geolocation would not be recorded. Now, the app will allow up to 30 seconds to get a position lock. Additionally, the geolocation property is now updated every time a report is edited, and all previous geolocation entries are saved in a log within the same report. This change also supports the updates in medic-android version 0.5.0, where the Location permission is requested at runtime rather than when starting the app for the first time.\nImproved performance of processing deleted docs Because processing document deletes, specifically deleting read docs, is relatively time-consuming, increasing linearly with the number of users that exist on the instance, deletion processing is now split into:\ngenerating tombstones: no changes, tombstones are generated like before, within the Sentinel transition processing feed. deleting read docs and info docs: done within a new Sentinel scheduled task that doesn’t block the main transitions processing feed","and-more#And more\u0026hellip;":"","android-wrapper-update-required-for-new-features#Android wrapper update required for new features":"","breaking-changes#Breaking changes":"","bug-fixes#Bug fixes":"cht-core#6024: The outbound error response logging is needlessly verbose cht-core#6121: Translations in the App Settings app aren’t recognized until you refresh cht-core#6130: Reports deleted from webapp interface are saved fully hydrated cht-core#6182: Support custom contact types in medic-pyxform cht-core#6313: Use the browser language as the default language cht-core#6370: Replication “isSensitive” logic prevents “boss” from creating any report for users directly under them in hierarchy cht-core#6386: Error on report not cleared cht-core#6404: User name autofilled with “medic” cht-core#6433: Infinite spinners when loading tabs as admin cht-core#6502: Guided tour erratic when user has no access to any tab cht-core#6519: Upgrading doesn’t apply replication configuration which means users-meta is empty cht-core#6562: Switching between tabs while tasks are being calculated can result in having multiple task documents with the same emission id cht-core#6575: Large grey banner shown above content on mobile cht-core#6578: Wrong error message shown when editing a user that replicates too many docs cht-core#6582: Scheduled messages with due date of null end up being processed over and over without being updated cht-core#6583: Users are forced to login one year after they last logged in cht-core#6624: Document update conflicts when clearing schedules horticulturalist#57: Horti doesn’t wam all views when deploying 3.9.x+ medic-conf#290: Tests fail locally when Bash completion is not setup medic-conf#315: Error running csv-to-docs with null properties medic-conf#322: Missing optional appliesIf attribute on contact summary cards causes crash medic-conf#332: Uploading of multimedia is extremely limited in medic-conf","features#Features":"cht-core#5817: Ability to configure SMS sending to other contacts that aren’t the primary contact cht-core#6339: Provide an API endpoint for fetching a contact by phone number cht-core#6352: As a data entry clerk I want to access, create, edit people in a place that I can access, and report about them, but not see any of the reports created by others for those contacts. cht-core#6380: Support remote first time log in medic-conf#307: Add a command line flag to accept all prompts to enable scripted execution","improved-geolocation-data#Improved geolocation data":"","improved-performance-of-processing-deleted-docs#Improved performance of processing deleted docs":"","improvements#Improvements":"cht-core#4889: Don’t delete user-settings when deleting users cht-core#5917: Make sure we are storing all debug / output from android when trying to obtain GPS cht-core#6001: Alert when outbound pushes are repeatedly failing cht-core#6094: Make configurable, marking of outgoing messages as duplicates cht-core#6396: Scoping: Investigate IVR options cht-core#6401: Add ability to hide the action/option to create a contact cht-core#6410: Ability to customize icons shown on main tabs (contact, tasks, etc) cht-core#6419: Allow you to configure outbound to send the same record multiple times cht-core#6481: Allow enough space to show list of forms in Reports Filter. cht-core#6492: Touch area of items in the hamburger menu should be larger cht-core#6516: Improve SMS reminders so they can be configured to be sent to places anywhere in the hierarchy cht-core#6538: Adhere to play store privacy policy requirements update cht-docs#259: CI: Add link checker to avoid 404s going live, merge CI docs into one to simplify medic-conf#273: Add configurable hierarchy support to doc references in csv-to-docs","known-issues#Known issues":"","more-granular-replication-depth-configuration-for-offline-users#More granular replication depth configuration for offline users":"","performance-fixes#Performance fixes":"cht-core#6116: Improve the performance of deleting read docs cht-core#6276: Use http2 to fetch all login resources at the same time","privacy-policies#Privacy Policies":"","security-issues#Security issues":"cht-core#6567: Security fix for leaking auth info cht-core#6568: Security fix for leaking auth info","sentinel-no-longer-advances-its-transition-processing-seq-in-_localsentinel-meta-data#Sentinel no longer advances its transition processing seq in \u003ccode\u003e_local/sentinel-meta-data\u003c/code\u003e":"","supported-software#Supported software":"","supporting-linked-docs#Supporting linked docs":"","supporting-remote-first-time-login#Supporting remote first-time login":"","technical-issues#Technical issues":"cht-core#6369: Detect unhandled rejections in unit tests cht-core#6379: Figure out how to deploy RapidPro in production cht-core#6439: Auth service unit test is flaky cht-core#6463: Bump dependencies for 3.10 medic-android#111: Compliance with Play Store developer policies for PII collection disclosure","time-necessary-to-process-500-deletes-for-1000-users#Time necessary to process 500 deletes for 1000 users":"Sentinel delete performance gains\nAdditionally, Sentinel scheduled tasks are no longer executed sequentially, they are now executed in parallel, keeping track of which tasks are running. Every 5 minutes, each scheduled task, that is not already running, is started.","updates-to-meta-databases-replication#Updates to meta databases replication":"","upgrade-notes#Upgrade notes":""},"title":"3.10.0"},"/releases/3_10_1/":{"data":{"":"","bug-fixes#Bug fixes":"cht-core#6700: For targets without idType, the winner emission is not deterministic","known-issues#Known issues":"Check the repository for the latest known issues.","supported-software#Supported software":"There are no required changes to the supported software matrix from 3.0.0.\nNode CouchDB Browsers SMS bridge Android medic-android medic-couch2pg 8.11+ 2.1+ Chrome 53+, Firefox latest medic-gateway 4.4+ 0.4.5+ 3.0+"},"title":"3.10.1"},"/releases/3_10_2/":{"data":{"":"","bug-fixes#Bug fixes":"cht-core#6848: Language translations not working when not supported by make-plural","features#Features":"cht-core#6849: Add bootstrap-datepicker translations for Tagalog (tl) Illonggo (hil) and Bisaya (ceb) languages cht-core#6861: Add moment locales for Tagalog (tl) Illonggo (hil) and Bisaya (ceb) languages We recognize that it is atypical to have new features in a “bugfix” version. Due to the nature of the features and their relation to the bug being fixed we are handling the 3 changes together as a logical bugfix release.","known-issues#Known issues":"Check the repository for the latest known issues.","supported-software#Supported software":"There are no required changes to the supported software matrix from 3.0.0.\nNode CouchDB Browsers SMS bridge Android medic-android medic-couch2pg 8.11+ 2.1+ Chrome 53+, Firefox latest medic-gateway 4.4+ 0.4.5+ 3.0+"},"title":"3.10.2"},"/releases/3_10_3/":{"data":{"":"","breaking-changes#Breaking changes":"No breaking changes","bug-fixes#Bug fixes":"cht-core#6993: Patients with type: 'person', contact_type: 'other' don’t have tasks appear when viewed on the contacts tab cht-core#6996: Muting transition and update clinics don’t handle contacts that use a hardcoded type and also have a contact_type property correctly cht-core#7003: Recompile default and standard config after medic-conf patch release medic-conf#382: Contacts with hardcoded types that also have a contact_type property don’t get the correct contact_summary fields and don’t count towards target goals","known-issues#Known issues":"Check the repository for the latest known issues.","supported-software#Supported software":"There are no required changes to the supported software matrix from 3.0.0.\nNode CouchDB Browsers SMS bridge Android medic-android medic-couch2pg 8.11+ 2.1+ Chrome 53+, Firefox latest medic-gateway 4.4+ 0.4.5+ 3.0+","uiux-changes#UI/UX changes":"No UI/UX changes","upgrade-notes#Upgrade notes":"This release fixes issues around using the default hierarchy and having contact documents that have a default type (person, clinic, health_center or district_hospital) and also have a contact_type property.\nWith configurable hierarchies, introduced in 3.7.0, the contact_type property became reserved to determine the type of contact. However, projects could have used this property for internal logic in their configuration code before upgrading to 3.7, and could have contacts that have this property along with a default hierarchy type.\nThe complete solution for these issues requires an upgrade to this release and recompiling and redeploying app_settings with medic-conf 3.4.1 or greater."},"title":"3.10.3"},"/releases/3_10_4/":{"data":{"":"","breaking-changes#Breaking changes":"None.","bug-fixes#Bug fixes":"#7169: API can return 401 status codes for valid sessions under load, forcing users to be logged out","known-issues#Known issues":"Check the repository for the latest known issues.","uiux-changes#UI/UX changes":"None."},"title":"3.10.4"},"/releases/3_10_5/":{"data":{"":"This release adds a fix that overrides the default 2 minute timeout of Node HTTP requests. Client requests will no longer timeout at API level. Timeouts are still possible, but can only come from the load balancer or CouchDB.","breaking-changes#Breaking changes":"None.","bug-fixes#Bug fixes":"#7183: Client requests receive a 502 statuscode after 2 minutes of idle time","known-issues#Known issues":"Check the repository for the latest known issues.","uiux-changes#UI/UX changes":"None."},"title":"3.10.5"},"/releases/3_11_0/":{"data":{"":"","add-ui-for-prominent-disclosure-when-requesting-permissions#Add UI for prominent disclosure when requesting permissions":"The app will now require a one time authorization from the user to enable access to location information. This was required to comply with the latest Google Play Store requirements.\nmedic-android#136 prominent disclosure","added-a-github-action-for-deploying-configuration#Added a GitHub Action for deploying configuration":"If you wish to automate configuration deployment you can now use our GitHub Action as a building block.\ncht-core#6758: Re-usable GitHub action for deploying configurations via medic-conf","and-more#And more\u0026hellip;":"","android-app#Android app":"A few UI/UX changes were made to the medic-android app. It is safe to ignore this section if you are not updating android app right now.","angular-upgrade#Angular upgrade":"The UI framework has been upgraded from the deprecated AngularJS v1.6 to Angular v10.0 which drastically reduces the memory used on the phone. It will make development of the Core Framework easier and more reliable and also makes it easier to keep on the latest version of Angular which means we can keep up to date and on a supported version from now on.\ncht-core#4750: Move to Angular latest Angular performance","breaking-changes#Breaking changes":"","bug-fixes#Bug fixes":"cht-core#6139: Hyperlinks to tasks don’t load the task in the url cht-core#6385: Error when editing scheduled message from webapp cht-core#6387: Error when selecting incoming message from deleted contact cht-core#6447: Upgrade UI only considers URLS ending in “app.medicmobile.org” as production cht-core#6533: Sentinel might process changes when it shouldn’t cht-core#6557: API service doesn’t boot successfully if there is a label named “submission” in the xform cht-core#6591: Replication of meta data does not occur when the regex doesn’t match cht-core#6611: Exporting should be available to all online roles cht-core#6627: Bug causing feedback “Duplicates in a repeater are not allowed” cht-core#6629: Feedback documents are not created when contact-summary crashes cht-core#6648: Blank screen when launching external apps from CHT Android app cht-core#6663: Type error when running remove_non_admin_users script cht-core#6700: For targets without idType, the winning emission is not deterministic cht-core#6711: Form submissions hang in desktop browsers when location permission requests are ignored by users cht-core#6811: Targets with property “passesIfGroupCount.gte” count instances with “pass: false” when aggregating cht-core#6814: Document update conflicts deleting reviewed report cht-core#6835: Android app version and Server URL not showing in About page cht-core#6839: Race condition in rules engine / task list interaction can result in a stale tasks list cht-core#6920: Users might start upwards replication from 0 after upgrade cht-core#6993: Patients with type: 'person', contact_type: 'other' don’t have tasks appear when viewed on the contacts tab cht-core#6996: Muting transition and update clinics don’t handle contacts that use a hardcoded type and also have a contact_type property correctly cht-core#7022: In the form’s context.expression the summary parameter is always undefined cht-core#7035: Handle compiled messageformat translations throwing errors with missing translation params cht-core#7037: SMS recipients might not be mapped correctly when using places as subjects cht-core#7041: Loading places fails when using an offline user and the place has a primary contact that is not a child medic-android#136: Add UI for prominent disclosure when requesting for permissions medic-android#91: Failure to upload APKs to Play Store prevents APKs being published to GitHub medic-conf#164: Declarative config appliesToType is indicated as optional for fields and cards but we do require them medic-conf#331: Validate xforms before uploading medic-conf#345: Warn config overwrite falsely alerts about changes when uploading certain types of attachments medic-conf#358: Can’t create task action with type “contact” medic-conf#377: Incorrect warning when specifying hidden_fields medic-conf#387: Can’t upload-app-settings on Node lower than 12 medic-couch2pg#42: Node 10 build fails a lot in a flakey way medic-couch2pg#54: Add ability to replicate medic-users-meta database to PostgreSQL medic-couch2pg#61: Update contactview_metadata to be compatible with configurable contact hierarchies medic-gateway#139: Don’t mark messages as permanently failed unless they are irredeemable medic-gateway#154: SMSs are stuck in PENDING state after being successfully sent","cht-android#CHT Android":"medic-android#127: Image upload forms crash the app. This has been broken for some time and is not easy to fix while supporting Android 4.4 so the resolution has been deferred until we can make this breaking change. Reach out if you require this feature in the near future.","cht-core#CHT Core":"Check the repository for the latest known issues.","features#Features":"cht-core#6532: Add RapidPro as an SMS Gateway cht-core#6758: Re-usable GitHub action for deploying configurations via medic-conf","highlights#Highlights":"","improve-connection-errors-ux#Improve connection errors UX":"If the user does not have a connection the first time the app is opened they will now see a user friendly error message with a retry button.\nmedic-android#163 connection errors","improve-ux-of-crosswalk-to-webview-migration#Improve UX of crosswalk to webview migration":"When migrating data from a Crosswalk apk to a Webview apk the user is now guided through the migration process so it can be upgraded without support. The migration was introduced in 0.6.0 for Android 10 and 11 devices to maintain compliance with Google Play Store policies. Read more about the transition to webview in this previously released issue.\nmedic-android#134 migration UX","improved-replication-performance#Improved replication performance":"API CPU usage has been significantly improved when requesting the changes feed, which is a frequently requested endpoint for smartphone applications.\ncht-core#6577: Improve performance of subject lookups in authorization service Performance improvement","improvements#Improvements":"cht-core#6251: Add a way to discover users who are replicating too many docs cht-core#6292: Make changing your password less jarring cht-core#6376: Validate env variables, better handling of CouchDB down when starting API / Sentinel cht-core#6444: Support submission of forms for places in SMS cht-core#6489: Migrate all medic-docs references cht-core#6693: Improve 3.10 release notes with compatibility matrix between android 0.5 and cht-core 3.10 couch2pg#20: Switch to GitHub Actions medic-android#134: Improve UX of crosswalk to webview migration medic-android#163: Improve connection errors UX, especially for the XWalk-Webview migration process medic-conf#167: Allow configuring of whitelabelling options medic-conf#214: Make app_settings more modular medic-conf#254: Add validation to the upload custom translations function medic-conf#269: Warn about deprecated transitions when uploading app-settings medic-conf#64: Before pushing config check if the git repo needs a pull or a push medic-couch2pg#67: Upgrade CI to use Github Actions medic-gateway#135: Remove wifi resetting feature as it doesn’t work as expected medic-gateway#142: Mark messages as received-by-gateway so they are not included in the next response","known-issues#Known issues":"","performance-fixes#Performance fixes":"cht-core#3869: Remove D3 library from JS bundle as it’s no longer used cht-core#4750: Move to Angular latest cht-core#6577: Improve performance of subject lookups in authorization service","rapidpro-sms-gateway#RapidPro SMS gateway":"SMS messages can now be sent and received using a RapidPro instance. This allows for integration with a wide range of SMS aggregators for a high scale SMS deployment. Learn more in the feature documentation.\ncht-core#6532: Add RapidPro as an SMS Gateway RapidPro logo","removal-of-reporting-rates-feature#Removal of Reporting Rates feature":"This feature wasn’t documented or tested and hasn’t been used in production for some time so it has been removed. To read more about this feature or if this breaking change affects you, read this forum post.\ncht-core#6248: Remove the Reporting Rates feature","security-issues#Security issues":"cht-core#6120: Add permission control for sentinel access cht-core#7023: Outbound push may log user and password","supported-software#Supported software":"There are no required changes to the supported software matrix from 3.0.0.\nNode CouchDB Browsers SMS bridge Android medic-android medic-couch2pg 8.11+ 2.1+ Chrome 53+, Firefox latest medic-gateway 4.4+ 0.4.5+ 3.0+","technical-issues#Technical issues":"cht-core#5993: Analyse partners telemetry closely cht-core#6100: Modal service throws unhandled rejection cht-core#6196: Publish openrosa-xpath-evaluator release cht-core#6248: Remove the Reporting Rates feature cht-core#6327: Refactor the way we deal with asynchronous loading tasks in webapp cht-core#6490: Guard against xpath string concatenation regression cht-core#6510: Add entries to .gitignore so it ignores medic-conf files cht-core#6605: Token login e2e test should redirect the user to the app if already logged in cht-core#6614: Find a better way to patch the webdriver version to build against cht-core#6616: Update admin to be a standalone app cht-core#6632: Be able to run unit tests from different apps in the CHT cht-core#6728: Add documentation for demo-forms about how to load forms into CHT cht-core#6829: CI failing due to TooManyPullRequests from docker cht-core#6901: CI build failing due to couchdb:2 is not available on dockerhub cht-core#7000: Update CI build cleanup script cht-core#7025: PR Builds are failing for external contributors medic-android#106: Update target SDK version to 29 medic-android#129: Convert CI from travis to GitHub Actions medic-android#137: Improve release notes with details of v0.6 upgrade recommendations medic-android#138: Branded signed APKs are no longer available medic-conf#367: Convert CI from travis to GitHub Actions medic-gateway#156: Document and solve upgrade path issues","uiux-changes#UI/UX changes":"","upgrade-notes#Upgrade notes":"This upgrade can be rolled out remotely. Users will download the new version in the background and be prompted to reload the app when it’s ready. A small amount of data will be needed to download the new version. Upgrading to this version does not require other applications to be upgraded. This release does not drop support for any hardware or software that works with the previous version. This release modifies some CouchDB view definitions so we recommend you Stage the upgrade and wait for the views to be rebuilt before rolling it out to minimize downtime. It is recommended to test the upgrade on a clone of your server first to ensure it works well for your application."},"title":"3.11.0"},"/releases/3_11_1/":{"data":{"":"","breaking-changes#Breaking changes":"None.","bug-fixes#Bug fixes":"#7169: API can return 401 status codes for valid sessions under load, forcing users to be logged out","known-issues#Known issues":"Check the repository for the latest known issues.","uiux-changes#UI/UX changes":"None."},"title":"3.11.1"},"/releases/3_11_2/":{"data":{"":"This release adds a fix that overrides the default 2 minute timeout of Node HTTP requests. Client requests will no longer timeout at API level. Timeouts are still possible, but can only come from the load balancer or CouchDB.","breaking-changes#Breaking changes":"None.","bug-fixes#Bug fixes":"#7183: Client requests receive a 502 statuscode after 2 minutes of idle time","known-issues#Known issues":"Check the repository for the latest known issues.","uiux-changes#UI/UX changes":"None."},"title":"3.11.2"},"/releases/3_11_3/":{"data":{"":"This release adds a fix for the phone widget’s validation when editing forms.","breaking-changes#Breaking changes":"None.","bug-fixes#Bug fixes":"#7261: Phone field invalid when editing a contact with a valid phone number.","known-issues#Known issues":"Check the repository for the latest known issues.","uiux-changes#UI/UX changes":"None."},"title":"3.11.3"},"/releases/3_12_0/":{"data":{"":"","and-more#And more\u0026hellip;":"","breaking-changes#Breaking changes":"None.","bug-fixes#Bug fixes":"#6479: Remove redirect from log out. #6485: Getting contact summary cards displayed that should not on a profile. #6602: Triggering a stage for a package that doesn’t exist causes the upgrade page to freeze. #6626: 80% of BRAC feedback documents have cause “Possibly unhandled rejection: {“status”:404,“name”:“not_found”,“message”:“missing”,“error”:true}”. #6634: Schedules depending on later library might not run when expected. #6718: Default config delivery form saves incorrect baby uuid. #6972: Remove ability to set user language in database. #7066: Sort form filter and translation timing. #7068: Remove the ability to set the user’s language via the API. #7091: Can’t submit forms against muted contacts. #7100: Loading the About page throws an error. #7113: Monitoring sentinel backlog values are wrong. #7137: Tasks fail to load when priority labels are empty. #7169: API or CouchDB can return 401 status code for valid sessions under load, forcing users to be logged out. #7183: Disable Node HTTP request timeout.","contact-summary-targets-and-tasks#Contact summary, targets and tasks":"The contact summary, targets and tasks now have more data available and a new CHT API with useful functions.\nCheck the contact summary, targets and tasks documentation for more details.\n#6914: Ability to verify user’s permissions from contact summary, targets and tasks by using the CHT API. #6919: Access to UHC “home visits” information from contact summary.","features#Features":"#6300: Add offline clock error detection to telemetry data. #6607: Detect and report when users are unable to connect to the server. #6650: Send an error message to users when sys.facility_not_found is generated. #6690: Expose task ID to Enketo. #6914: Ability to verify user’s permissions from contact summary, targets and tasks by using the CHT API. #6915: Access to granular telemetry data for post-hoc analysis, monitoring \u0026 research initiatives. #6919: Access to UHC “home visits” information from contact summary.","highlights#Highlights":"","improvements#Improvements":"#6354: Add user telemetry for replication requests. #6572: Allow for monitoring and alerting of SMS failure rate. #6737: Improve how Muting is handled on device before syncs. #6741: Add version of android app in the about page and in telemetry.","known-issues#Known issues":"Check the repository for the latest known issues.","monitoring#Monitoring":"The Monitoring API version 1 (/api/v1/monitoring) is now deprecated, but will continue to work. The version 2 (/api/v2/monitoring) is introduced with improvements in the returned data structure and new metrics available.\nCheck the Monitoring API documentation for more details.\n#6607: The number of users that have connected to the api in a given number of days, it helps to detect when users are unable to connect to the server. #6572: Outgoing messages information, it helps to determine the SMS failures rate.","muting#Muting":"Muting and unmuting are now performed on-device for offline users. Previously, muting and unmuting were performed only on the server which meant that offline users would not see the results of submitting mute/unmute reports until they were synced and processed by the server.\nCheck the Muting documentation for more details.\n#6737: Improve how Muting is handled on device before syncs.","performance-improvements#Performance improvements":"None.","security-fixes#Security fixes":"None.","sms#SMS":"The CHT-Core will send a SMS when the origin phone number is not registered in the app:\n#6650: Send an error message to users when sys.facility_not_found is generated.","supported-software#Supported software":"There are no required changes to the supported software matrix from 3.0.0.\nNode CouchDB Browsers SMS bridge Android medic-android medic-couch2pg 8.11+ 2.1+ Chrome 53+, Firefox latest medic-gateway 4.4+ 0.4.5+ 3.0+","technical-improvements#Technical improvements":"#6969: Update dependencies for 3.12.0. #7084: Upgrade MomentJS in CHT-Core and resolve conflicts. #7103: Flaky e2e test “Creating contacts with standard config”. #7118: Flaky e2e test “Export Data V2.0”. #7124: Some e2e tests are breaking consistently.","telemetry#Telemetry":"The CHT-Core increased the frequency of telemetry data collection from monthly to daily, this new level of granularity is going to boost the metrics accuracy. Additionally, CHT-Core is gathering new information to support research initiatives, to help monitor and detect errors earlier and to contribute to the analysis of document replication.\nCheck the telemetry documentation for more details.\n#6300: The difference between the client datetime and the server datetime, it helps to detect user’s clock errors. #6915: Access to granular telemetry data in daily frequency for post-hoc analysis, monitoring \u0026 research initiatives. #6354: Access to replication information.","uiux-changes#UI/UX changes":"None.","upgrade-notes#Upgrade notes":"This upgrade can be rolled out remotely. Users will download the new version in the background and be prompted to reload the app when it’s ready. A small amount of data will be needed to download the new version. Upgrading to this version does not require other applications to be upgraded. This release does not drop support for any hardware or software that works with the previous version. This release modifies some CouchDB view definitions, so we recommend you Stage the upgrade and wait for the views to be rebuilt before rolling it out to minimize downtime. It is recommended to test the upgrade on a clone of your server first to ensure it works well for your application."},"title":"3.12.0"},"/releases/3_12_1/":{"data":{"":"This release adds a fix for the phone widget’s validation when editing forms.","breaking-changes#Breaking changes":"None.","bug-fixes#Bug fixes":"#7261: Phone field invalid when editing a contact with a valid phone number.","known-issues#Known issues":"Check the repository for the latest known issues.","uiux-changes#UI/UX changes":"None."},"title":"3.12.1"},"/releases/3_13_0/":{"data":{"":"","and-more#And more\u0026hellip;":"","breaking-changes#Breaking changes":"None.","bug-fixes#Bug fixes":"#6392: New contact header not translated in desktop view #6660: isSensitive doesn’t stop replication of reports when the patient_id is the subject of a report #6698: Clicking on the Android back button while creating a new report minifies the app and generates feedback doc #6767: Clicking the targets tab twice puts infinite spinner up #6984: api and webapp can disagree on whether a user has an online or offline role #6988: Firefox is generating a Content Security Policy error when submitting a form #6989: Trying to open another report after selecting a verification state will not load the next report #7003: Recompile default and standard config after medic-conf patch release #7034: Meta db sync throws an empty message error when offline, which generates a feedback doc #7046: Error thrown when trying to send message to unknown sender #7203: Can’t re-select message thread after deselecting it #7209: Muting transition can conflict with itself #7223: After search RHS is not getting cleared off #7261: Phone field invalid when editing a contact with a valid phone number","collect-form-data-from-external-android-apps#Collect form data from external Android apps":"The CHT now supports forms that collect data from generic 3rd-party Android apps. Users can launch the apps from the form and then the output from the app is captured by the CHT and stored with the report. See the CHT documentation for more information on how to use this feature.\nAn example use case for this functionality is the CHT reference application for COVID-19 point-of-care testing with Rapid Diagnostic Tests (RDT). This app provisions and captures the RDT data by integrating with Dimagi’s RD-Toolkit app that guides health workers through the use of the RDT.\nThis feature requires the CHT External App Launcher functionality included in v0.10.0 of cht-android.\n#6981: Support collecting form data from external Android apps","configuration-for-task-due-date-display#Configuration for Task Due Date Display":"By default, an overdue task is simply displayed as “Due today”. This enhancement adds configuration to allow for displaying the number of days passed since the task’s due date. This configuration is modified by setting the task_days_overdue value as described in the documentation.\nIf the configuration is not set, there will be no UX changes to the way that overdue tasks are displayed.\nDefault display Configurable display #7235: Add configuration to display the number of days since the due date for an overdue task","features#Features":"#5886: Make it easier to complete all tasks at a household in the same visit #6981: Support collecting form data from external Android apps","highlights#Highlights":"","household-tasks-landing-page#Household Tasks Landing Page":"When a user with the can_view_tasks_group permission has completed a task for a particular household and there are additional uncompleted tasks for that household, a landing page is shown with a list of the remaining tasks. This allows the user to easily access all uncompleted tasks for the current household.\nThe behavior for existing users without the permission will remain unchanged.\n#5886: Make it easier to complete all tasks at a household in the same visit","improvements#Improvements":"#6545: Change /users/info api to deal with task documents #7121: “Sync Now” should synchronize “meta” database when pressed #7235: Add configuration to display the number of days since the due date for an overdue task #7310: Add settings version to telemetry","known-issues#Known issues":"Check the repository for the latest known issues.","performance-improvements#Performance improvements":"None.","security-fixes#Security fixes":"None.","technical-improvements#Technical improvements":"#7128: Update logo in reference app “Medic Mobile” -\u003e “Medic” #7309: Update dependencies for 3.13","uiux-changes#UI/UX changes":"","upgrade-notes#Upgrade notes":""},"title":"3.13.0"},"/releases/3_14_0/":{"data":{"":"","and-more#And more\u0026hellip;":"","breaking-changes#Breaking changes":"None.","bug-fixes#Bug fixes":"#6213: Deleting primary contact from a place will retain that person as a contact when editing #6338: Generate service worker at runtime #6670: End time stamp records same value as start time stamp #6802: Report verification does not do proper minification before saving #6964: Select question with appearance “minimal” not picking all the languages set on the form #6986: Changing admin password via webapp doesn’t work #7009: Pushing standard config with latest medic-conf fails with translation errors #7021: Form with truthy expression will be displayed despite permissions #7184: Partial load of contact add/edit forms on slow networks/devices #7186: Changing an offline user’s password during replication will block them in loading error loop #7187: Login page redirect loop when password is changed #7242: Race condition occurs when logging in as offline user with slow connection #7262: Can’t navigate to “new district” form when contact “person” edit is open. #7280: Server Side Purge does not complete to the end #7305: Blank modal when navigating to app instance with missing cookie #7307: Login page is not cached correctly #7320: Admin Upgrade Releases section empty when there are no betas #7343: PWA on mobile logs out when browser is quit #7346: Show error in targets when user is not associated with the configured place #7353: Partner logos don’t show on the about page #7383: Webapp relative dates are not localized after Angular 12 upgrade #7419: Stopping and resuming initial replication could start local purging #7438: Users can view reports in contacts detail page despite lacking permissions #7463: Incorrect place filter label when selecting only one place #7485: Error while submitting form with certain db-doc repeat","display-all-dates-in-bikram-sambat-format-when-nepali-locale-selected#Display all dates in Bikram Sambat format when Nepali locale selected":"For years, the CHT has supported recording the answers to date questions in forms using the Bikram Sambat calendar format when the user has selected the Nepali locale. However, the date values displayed throughout the app would still be shown in the Gregorian calendar format.\nNow the application has been updated to also use the Bikram Sambat format when displaying dates in places such as the reports list.\nOld Dates New Dates Additionally, a new to-bikram-sambat xPath function has been added that converts a date to a string containing the value of the date in the Bikram Sambat format.\n#7294: Use Bikram Sambat dates throughout the webapp when Nepali locale selected","features#Features":"#7294: Use Bikram Sambat dates throughout the webapp when Nepali locale selected","highlights#Highlights":"","improved-login-experience#Improved login experience":"Users who have experienced issues with login should note that this release fixes some bugs. Specifically:\n#7343 Deployments using a browser on mobile shouldn’t get erroneously logged out. #6338 Changes to pseudo-static assets, like images and translations, won’t cause unnecessary reloads for app users. #7187 Infinite loops and empty modal boxes at login should not longer be present.","improved-server-side-purging#Improved server-side purging":"We have made several improvements to our server-side purging functionality allowing it to perform better at scale.\nEnhanced logging during purging via a new purgelog document saved in the medic-sentinel database after every purge. If a contact has more than 20,000 records, it will be skipped and none of its records will be purged. A log will appear for the skipped contact and the id of this contact will be saved in a new skipped_contacts property in the purgelog. The batch size for contacts to purge will dynamically adjust based on the number of records associated with the contacts. #7280: Server Side Purge does not complete to the end","improvements#Improvements":"#5207: Show dialog when user clicks “Sync Now” in hamburger #6403: Change the Create Report button icon to better indicate what it does #6674: Provide clear error message on missing xsltproc dependency #7089: Store users’ selected language in telemetry and feedback docs #7260: Add more granularity to startup telemetry #7409: Display tab’s label in small screens","known-issues#Known issues":"Check the repository for the latest known issues.","new-dialog-showing-sync-status#New dialog showing sync status":"When an offline user manually triggers a sync via the hamburger menu, a notification dialog is opened indicating the status of the sync process.\nSync in progress: Sync complete: Sync failed (with retry option): #5207: Show dialog when user clicks “Sync Now” in hamburger menu","performance-improvements#Performance improvements":"None.","properly-display-tab-labels-on-small-screens#Properly display tab labels on small screens":"Previously, the labels for the main tabs in the CHT app (Messages, Tasks, People, etc) were not displayed on devices with very small screens leading to some confusion around the different tabs and their purposes.\nWe have updated the tab labels to always display even on small screens. Additionally the size of the label text can scale so that the text will display properly even when the tabs are small.\n#7409: Display tab’s label in small screens","security-fixes#Security fixes":"None.","technical-improvements#Technical improvements":"#6420: Move to ESLint 7 #7061: CHT hosting improvements for App Developers #7083: Upgrade webapp to latest Angular #7165: Release Notes for v3.8 have link to private repository (broken link for external users) #7349: Update dependencies for 3.14 #7361: Upgrade google-libphonenumber #7379: Update COVID-19 RDT reference app #7413: Remove non-code files from repo #7445: Fix reference to install.md that does not exist any more","uiux-changes#UI/UX changes":"","updated-icon-for-the-create-report-button#Updated icon for the Create Report button":"The icon for the Create Report button has been updated so that its purpose is more clear.\nOld Dates New Dates #6403: Change the Create Report button icon to better indicate what it does","upgrade-notes#Upgrade notes":""},"title":"3.14.0"},"/releases/3_14_1/":{"data":{"":"This release adds a fix for repeat groups in Enketo forms to pick the correct translation for fields.","breaking-changes#Breaking changes":"None.","bug-fixes#Bug fixes":"#7515: Translations not working when using repeat groups with dynamic repeat count","known-issues#Known issues":"Check the repository for the latest known issues.","uiux-changes#UI/UX changes":"None."},"title":"3.14.1"},"/releases/3_14_2/":{"data":{"":"This release adds a fix for repeat groups in Enketo forms using choice_filter.","breaking-changes#Breaking changes":"None.","bug-fixes#Bug fixes":"#7550: Fix blank labels in forms with repeat group using choice_filter","known-issues#Known issues":"Check the repository for the latest known issues.","uiux-changes#UI/UX changes":"None."},"title":"3.14.2"},"/releases/3_15_0/":{"data":{"":"","a-new-api-for-adding-users-in-bulk#A new API for adding users in bulk":"Previously there was an API for creating a single user but this feature adds an API for creating multiple users in one go. This is particularly useful when setting up a new project or expanding into a new area. Find out more about the API in the documentation.\n#7490: Add API to create many users","and-more#And more\u0026hellip;":"","breaking-changes#Breaking changes":"None.","bug-fixes#Bug fixes":"#6960: New users might be prompted to accept the privacy policy twice or shown the tour modal twice #7072: Admin upgrade page shows all upgrades as potentially incompatible #7362: Webapp isn’t a valid PWA #7464: Webapp report filters are not applied to export #7465: Report export doesn’t filter by “verified” correctly #7492: User stuck on spinner on app load on a poor connection #7505: Feedback doc created in race condition when trying to update privacy policy for new user #7538: Not redirecting to login page when clicking on the browser’s back button #7559: Re-enable the ability to get user’s language in Enketo forms","faster-app-loading-for-users-on-weak-internet-connections#Faster app loading for users on weak internet connections":"The CHT webapp is now fully Offline-First which means the app starts just as quickly whether you have fast internet, slow internet, or no internet at all. In the worst case the application startup used to take over 2 minutes, but with this fix it now takes around 1 second.\n#7492: User stuck on spinner on app load on a poor connection","features#Features":"None.","highlights#Highlights":"","improvements#Improvements":"#4613: Support reporting of dates as exact date using text forms #7139: Require additional permission for accessing the upgrade page and/or upgrade api endpoint #7490: Add API to create many users #7529: Increase Enketo’s size limit for uploading files #7561: Record the form’s version when saving a report","known-issues#Known issues":"Check the repository for the latest known issues.","performance-improvements#Performance improvements":"None.","security-fixes#Security fixes":"None.","support-reporting-of-bikram-sambat-dates-using-json-forms#Support reporting of Bikram Sambat dates using JSON forms":"SMS forms can now include a date form for submitting an exact date in Bikram Sambat format. Learn how to use this feature in the documentation.\n#4613: Support reporting of dates as exact date using text forms","technical-improvements#Technical improvements":"#6282: Remove the Theme page #7495: Update dependencies for 3.15 #7507: Retry resetting user contact doc in e2e tests #7533: Token login e2e test flake #7557: Quick code fixes: import alias, service interface data type, remove unused parameters. #7580: Flakey snackbar tests","uiux-changes#UI/UX changes":"None.","upgrade-notes#Upgrade notes":""},"title":"3.15.0"},"/releases/3_16_0/":{"data":{"":"","and-more#And more\u0026hellip;":"","breaking-changes#Breaking changes":"None.","bug-fixes#Bug fixes":"#6028: Gracefully handle overflowing form title text #7617: Add support for localizing Admin app #7654: Ignore invisible characters in Unicode for certain SMS fields","features#Features":"None.","highlights#Highlights":"","improvements#Improvements":"#7706: Add support for bulk user upload from CSV","known-issues#Known issues":"Check the repository for the latest known issues.","performance-improvements#Performance improvements":"None.","security-fixes#Security fixes":"None.","support-adding-many-users-at-once-using-data-from-a-csv-file#Support adding many users at once using data from a CSV file":"New CHT users (and associated places) can now be added in bulk by importing the data from a CSV file. Learn how to use this feature in the documentation.\n#7706: Add support for bulk user upload from CSV","technical-improvements#Technical improvements":"#7621: Update google-libphonenumber to support new Nepali numbers #7629: Allow Feature Releases to be versioned in CHT Admin UI","uiux-changes#UI/UX changes":"#6028: Gracefully handle overflowing form title text","upgrade-notes#Upgrade notes":""},"title":"3.16.0"},"/releases/3_16_1/":{"data":{"":"","breaking-changes#Breaking changes":"None.","bug-fixes#Bug fixes":"#7912: Calling /api/v1/settings/deprecated-transitions prevents any future transitions to run over new records in API #7933: Error 500 when processing SMS message missing year from Bikram Sambat aggregate","known-issues#Known issues":"Check the repository for the latest known issues.","uiux-changes#UI/UX changes":"None.","upgrade-notes#Upgrade notes":""},"title":"3.16.1"},"/releases/3_17_0/":{"data":{"":"","action-button-labels-now-show-for-all-devices#Action button labels now show for all devices":"Action button labels now show on lower resolution phones, making it easier to understand what each action button does.\n#7721: Icon labels on action buttons are not showing at the default dp for commonly used mobile devices.","breadcrumbs-improvement#Breadcrumbs improvement":"To improve clarity, breadcrumbs on the left-hand side list of the Messages and Reports tabs will no longer display the level the user themselves belongs to. Also, breadcrumbs have been added to the Tasks tab to make it easier to know which household the task subject belongs to.\n#5710: Add “belongs to” breadcrumbs to tasks on the left-hand side list. #5697: Update the levels displayed in breadcrumbs across the app.","breaking-changes#Breaking changes":"None.","bug-fixes#Bug fixes":"#6215: The can_edit permission doesn’t stop you from editing documents.","features#Features":"#7653: Report’s filter redesign. #7746: Search bar redesign.","full-list#Full list":"","highlights#Highlights":"","improvements#Improvements":"#7662: Expose privacy policy at a public URL. #7724: Places created with bulk upload don’t have a primary contact. #7721: Icon labels on action buttons are not showing at the default dp for commonly used mobile devices. #5710: Add “belongs to” breadcrumbs to tasks on the left hand side list. #5697: Update the levels displayed in breadcrumbs across the app.","known-issues#Known issues":"Check the repository for the latest known issues.","performance-improvements#Performance improvements":"None.","places-created-with-bulk-upload-now-have-a-primary-contact#Places created with bulk upload now have a primary contact":"We have improved the bulk upload feature to automatically assign a primary contact to a newly created place.\n#7724: Places created with bulk upload don’t have a primary contact.","privacy-policy-is-now-public#Privacy policy is now public":"Android app submission now requires a URL to the apps’ privacy policy. To facilitate this process we have made the privacy policy public in the login page.\n#7662: Expose privacy policy at a public URL.","security-fixes#Security fixes":"None.","technical-improvements#Technical improvements":"None.","uiux-changes#UI/UX changes":"","update-to-search-and-filters-on-the-contacts-and-reports-tabs#Update to search and filters on the Contacts and Reports tabs":"Search and filters on the Contacts and Reports tabs have been updated to more closely align with Android UX and material design patterns. This is the first of several incremental UI/UX changes that will improve app learnability by providing a familiar user interface that is consistent with other Android apps. To learn more about the other planned material design UI/UX changes, check out this forum post.\nNOTE: The old version of the UI can be temporarily re-enabled by following the instructions in the documentation, but will be completely removed in a future release.\n#7653: Report’s filter redesign. #7746: Search bar redesign.","upgrade-notes#Upgrade notes":""},"title":"3.17.0"},"/releases/3_17_1/":{"data":{"":"","breaking-changes#Breaking changes":"None.","bug-fixes#Bug fixes":"#7912: Calling /api/v1/settings/deprecated-transitions prevents any future transitions to run over new records in API #7933: Error 500 when processing SMS message missing year from Bikram Sambat aggregate","known-issues#Known issues":"Check the repository for the latest known issues.","uiux-changes#UI/UX changes":"None.","upgrade-notes#Upgrade notes":""},"title":"3.17.1"},"/releases/3_17_2/":{"data":{"":"","breaking-changes#Breaking changes":"None.","bug-fixes#Bug fixes":"#7670: Same patient id assigned to multiple patients in a same instance #8576: Low performance in Reports tab for users with thousands of places","known-issues#Known issues":"Check the repository for the latest known issues.","uiux-changes#UI/UX changes":"None.","upgrade-notes#Upgrade notes":""},"title":"3.17.2"},"/releases/3_1_0/":{"data":{"":"","additional-age-formats#Additional age formats":"JSON forms can now include age in months or years in addition to days or weeks which makes it easier to register older children and adults. [#4597]","and-more#And more\u0026hellip;":"19 individual issues have been fixed in this release - read more.","flexible-phone-number-validation#Flexible phone number validation":"Phone number validation can be configured to be strict (default), tolerant, or disabled altogether. This is useful if phone numbers are being incorrectly rejected as invalid which can happen if carriers update their number ranges. [#4127]","improved-document-level-permissions-checking#Improved document level permissions checking":"Private data is now better protected against unauthorized access. [#2733, #2734]","security#Security":"","sms-spam-protection#SMS spam protection":"SMS message generation will be skipped if an identical message has been generated recently meaning our software won’t get into an infinite loop with autoresponding robots. [#4715].","upgrade-notes#Upgrade notes":"There are no breaking changes when upgrading from 3.0.x.","whats-new#What\u0026rsquo;s New":""},"title":"3.1.0"},"/releases/3_2_0/":{"data":{"":"","and-more#And more\u0026hellip;":"","benchmarks#Benchmarks":"The following benchmarks were taken on a Tecno Y4 as a CHW with a representative amount of data.\nSort Task 3.1.0 3.2.0 Improvement Last visit date Load 50 contacts 75s 30s 60% Last visit date Load 50 contacts after home_visit form submission 110s 60s 45% Last visit date Load 150 contacts after home_visit form submission 195s 75s 62% Last visit date Load 150 contacts after contact edit 178s 50s 72% Alphabetically Load 50 contacts 43s 30s 31% Alphabetically Load 50 contacts after home_visit form submission 56s 60s -7% Alphabetically Load 150 contacts after home_visit form submission 130s 60s 54% Alphabetically Load 150 contacts after contact edit 144s 60s 57%","bug-fixes#Bug fixes":"Automated reply not generated when OFF/ON texfrom is sent without a patient id [#4649] The update_notifications transition is not muting schedules [#3362] CouchDB 2.3.0 has reduced the allowed length of GET requests [#5083]","improvements#Improvements":"Update the on/off handling to mark an individual as muted [#4768]","muting#Muting":"You can now mute people and places which stops any scheduled messages from being sent and updates the UI for that contact. [#4767]\nScreenshots\nFor more information read the feature overview and the configuration documentation.","uhc-performance#UHC performance":"If you have UHC configured loading contacts is now much faster. [#4768]","upgrade-notes#Upgrade notes":"There are no breaking changes when upgrading from 3.1.x."},"title":"3.2.0"},"/releases/3_2_1/":{"data":{"":"","bug-fixes#Bug fixes":"","more-reliable-replication#More reliable replication":"In earlier versions if a device’s replication connection got interrupted some documents may never be replicated to that device leaving it in an unknown state. To avoid this it is recommended that everyone upgrade to 3.2.1 or above as soon as possible. [#5235]","performance-improvements#Performance improvements":"","refresh-dialog-not-shown#Refresh dialog not shown":"When upgrading from 2.x to 3.2.0 the dialog to update isn’t presented to the user. The user is unaware the app updated and would need to do a manual refresh to get the latest app changes. [#5247]","unable-to-replicate-a-large-number-of-documents#Unable to replicate a large number of documents":"Users with a large number of documents are unable to replicate due to the software attempting to fetch all documents in one request. This fix reverts to the replication strategy used in previous versions. [#5257]"},"title":"3.2.1"},"/releases/3_3_0/":{"data":{"":"","and-more#And more\u0026hellip;":"","better-memory-management#Better memory management":"A bug in Node was causing the API service to consume more and more memory eventually causing Node to crash. [#5255]","bug-fixes#Bug fixes":"#3327: Date picker widget is not translated #3391: Not all writes to CouchDB go through the audit layer #3427: medic-api forms controller should use appropriate protocol #3707: GET /api/v1/forms is broken if trailing slash #3899: Can create people born in the future with standard configuration #4331: Reports incorrectly filtered if filter changes before search returns #4511: Timestamps incorrectly cleared when adding a message to an ANC reminder group #4625: Reports page can mistakenly hide fields #4710: Users without admin permissions can view the configuration area #4711: Users without permission to view contacts, tasks, messages can view those pages #4755: The image upload enketo widget relies on the form name matching the xml instance element #4772: If during user creation associated contact is chosen, ‘Place’ field has to become required #4787: Editing a report’s scheduled message is not working #4788: The report details field titles should line wrap #4800: Horti crashes on subsequent upgrade #4802: Cannot get audit log #4816: Exporting messages doesn’t work with reports with scheduled tasks #4825: After searching the RHS should clear of anything you were previously looking at #4829: Unable to access Configuration screen on my local instance of webapp (wrong redirect URL) #4832: Date picker widget is not translated for language Bamanankan (bm) #4837: Font awesome icons not loading in the administration console #4899: Error loading Outgoing Messages tab when there are no results #4905: Contacts controllers search is clearing $stateParams when it shouldn’t #4942: Fix failing test: “Family Survey form Submit Family Survey form” #4962: The accept_patient_reports transition is broken #5045: DOMException crash leaves users stuck at loading spinner #5221: Outgoing messages columns should not wrap on smaller screens #5326: Bootstrap translation doesn’t work on first load #5327: The login page is not translated #5348: Handle Database has a global failure error during replication #5395: Optimize the fix-user-db-security migration for databases with many users #5414: Unknown replication status/last sync #5417: All reports are highlighted #5420: Optimize deletion of read docs for databases with many users","improvements#Improvements":"#670: Outgoing message size is not limited #3705: Disable ‘Select’ and ‘Export’ buttons when there are no reports #4013: Add warning dialogue when users navigate away from a form #4097: Log each valid POST /api/v1/users/{username} with field names #4294: On single column pages, remove scroll within a scroll #4680: Translate our startup messages for non-English speakers #4895: Update place icons #5224: Translations for new bootstrapper states added by purging #5246: Pass user context to the purge function","iso-week-validation#ISO week validation":"SMS forms can now validate ISO week fields for a given year using the built in isISOWeek rule function. For more information read the configuration documentation. [#3155]","link-reports-to-patients#Link reports to patients":"When viewing a report about a patient the ID now links to the patient record so you can easily access more information. [#3414]\nScreenshots","outgoing-messages-screen#Outgoing messages screen":"Administrators can now see all outgoing messages that are either scheduled, due, or unable to be sent. This is useful for monitoring the status of your SMS gateway and checking up on messages that have errored. [#649]\nScreenshots","performance-fixes#Performance fixes":"#4644: Use asynchronous logging in node apps #4834: Move medic-client/feedback view into admin ddoc #5076: PouchDB replication _bulk_get requests are no longer batched","purging#Purging":"Documents on phones can now be deleted once no longer useful. This allows for space on the device to be recovered and improves performance. Read the configuration documentation for how to add script to indicate that a document is no longer useful and is ready for purging. [#5048]","smarter-outgoing-phone-number-validation#Smarter outgoing phone number validation":"For a long time it has been possible block outgoing messages being sent to a configured list of phone numbers. This is really useful for stopping messages to carriers and other automated systems that can cause messaging loops using up all your credit.\nIn 3.3.0 we have expanded on this feature to allow blocking of sending to phone numbers shorter than a certain length or recipients that only contain letters. These have been enabled by default so by upgrading your system will no longer SMS short or non-numeric recipients. For more information read the configuration documentation. [#3675]","technical-issues#Technical issues":"#4865: grunt watch doesn’t deploy inbox.html changes #4955: Bump autoprefixer browser support #4979: Weak passwords should not be used on CouchDB developer boxes","upgrade-notes#Upgrade notes":"There are no breaking changes when upgrading from 3.2.x."},"title":"3.3.0"},"/releases/3_4_0/":{"data":{"":"","and-more#And more\u0026hellip;":"","breaking-changes#Breaking changes":"There are no breaking changes when upgrading from 3.3.x.","bug-fixes#Bug fixes":"couch2pg#6: Update couch2pg to escape characters that postgres doesn’t support medic#4279: Countdown timer does not show if there is a relevant medic#4621: Invalid report not being replicated to facility user medic#4697: Renaming an Area after generating a report will not update the report names medic#4885: Schedules are not cleared for offline contacts/reports medic#5018: Noto font not loading on the admin webapp medic#5019: Reports with scheduled tasks and deleted patients fail to load medic#5025: Fix favicon caching medic#5027: Branding doesn’t work for offline users medic#5029: Branding doesn’t update on login page medic#5034: Horticulturalist postCleanup not actually cleaning up medic#5057: Task titles on overdue tasks only are appearing red medic#5062: Cannot start API after changes to the translation messages format medic#5068: The released API bundle is missing shared-libs medic#5071: Loading Targets tab as admin logs an Error medic#5078: Forms still available after deleting them using medic-conf medic#5108: All reports synced doesn’t notice new reports medic#5109: Restarting API always triggers a new version prompt medic#5186: Only send tombstone deletes when document is still deleted medic#5234: Guard against bad HTTP codes in error reporting medic#5250: Adding or deleting languages should update the UI without needing to refresh medic#5270: Bootstrap failed retry button doesn’t work medic#5271: Translations not updated after upgrade medic#5272: Message queue not loading when translations are missing medic#5277: Upgrades via admin upgrade page are broken medic#5319: db-batch gets stuck in a loop medic#5380: Check is missing in checkboxes medic#5390: The accept_patient_reports transition clears sent tasks medic#5409: Errors when navigating away from edited forms medic#5432: Selecting no language and submitting is showing translation keys instead of default app language medic#5482: Countdown timer sound is not playing medic#5486: Logging in with an incorrect password shows an unhelpful error message medic#5488: Reports are being created for the wrong contact medic#5514: Images on the Reports tab are not displaying","customizable-branding#Customizable branding":"You can now configure the webapp logo, title, and favicon to use your project’s branding medic#4849. You can also add logos of your partners to show on the About page medic#4850. More information is available in the feature overview and the configuration documentation.","features#Features":"medic#2031: Log user statistics on key user interactions to the database","improved-performance-loading-contacts-tab#Improved performance loading Contacts tab":"We made several changes to reduce the time it takes to load information on the Contacts tab.\nmedic#4445: Loading a CHW area is slow medic#5084: Remove the primary contact line medic#5086: Lazy loading contact RHS sections medic#5092: Remove the places card on the RHS from your home place","improvements#Improvements":"medic-android#66: Only allow webview to access expected URLs medic-conf#112: XForm without instanceID will not load medic#3128: Ability to delete a translation key medic#3762: Re-write permissions data structure to be object properties instead of an array to avoid duplicates medic#4209: Show meaningful error when ‘username’ is already taken medic#4598: Message’s translation key sent when translation is missing medic#4599: Allow translation to nest another translation key medic#4682: Remove blank UI elements in Enketo forms medic#4694: Link the report to the scheduled task that caused the report to be created medic#4733: Update the medic-android target API medic#4796: Update the medic-gateway target API medic#4922: Add a logout button in the admin app medic#4960: Improve design and usability of admin app medic#4973: Add a favicon to the admin app medic#5035: Link to webapp from admin app medic#5082: Make content-security-policy more strict medic#5249: Country code and Gateway phone number fields shouldn’t be required medic#5307: Swahili “starting app” translation missing","known-issues#Known issues":"medic#5617: Broken functionality after upgrade to 3.4 with custom locales","performance-fixes#Performance fixes":"medic#3466: Marking a report as verified is slow medic#4936: Add performance checking to release testing workflow medic#5050: Memory leak when switching between tabs medic#5229: Resources doc re-downloaded on every change in list pages","scale-to-support-more-users#Scale to support more users":"In previous versions users who had an internet connection would maintain a continuous request to the server waiting for any relevant database changes. For projects with thousands of users this caused the server to use a lot of memory to keep track of all of those requests.\nThis change removes the continuous replication in favor of making a short lived request when;\nfive minutes has passed since the last replication attempt, the user creates or updates a document, we detect the user has come back online, or the user clicks the new “Sync now” button. medic#4805 and medic#3976\nScreenshots","supported-software#Supported software":"There are no required changes to the supported software matrix from 3.0.0.\nNode CouchDB Browsers SMS bridge Android medic-android medic-couch2pg 8.11+ 2.1+ Chrome 53+, Firefox latest medic-gateway 4.4+ 0.4.5+ 3.0+","technical-issues#Technical issues":"medic#3476: Investigate and use travis build stages medic#3925: Fix “db.type() is deprecated and will be removed in a future version of PouchDB” medic#4814: Replace yarn with npm medic#4932: Re-enable flakey e2e test: register by SMS medic#5026: Deprecation warning running add-branding-doc migration medic#5030: Switch to eslint medic#5031: Write a script to import and export translations to POE medic#5038: Fix flakey test: Reports Summary Displays correct LHS and RHS summary Concerning reports using patient_id medic#5099: Fix and re-instate flakey e2e test medic#5227: Clarify process for running e2e tests locally","upgrade-notes#Upgrade notes":""},"title":"3.4.0"},"/releases/3_4_1/":{"data":{"":"","bug-fixes#Bug fixes":"","unicode-form-codes-not-clearing-schedules#Unicode form codes not clearing schedules":"When using non-Latin characters in a form code our software failed to find the right schedules to clear so unwanted messages were being sent. This affects versions from 3.0.0 to 3.4.0. medic#5698"},"title":"3.4.1"},"/releases/3_5_0/":{"data":{"":"","and-more#And more\u0026hellip;":"","breaking-changes#Breaking changes":"There are no breaking changes when upgrading from 3.4.x.","bug-fixes#Bug fixes":"horticulturalist#36: Horti crashes on invalid json during view warming medic-android#57: Opening the admin console through webapp requires user to close and reopen the app medic-android#72: gradle sync fails because minSDKversion is in the manifest file not the build.gradle file. medic-conf#130: medic-conf uploads puring function “purging” but webapp looks for function named “purge” medic-conf#132: Shell completion for supported actions not working medic-conf#138: subtitle_translation_key should not be a required field for all targets medic-conf#140: Multiple tasks emitted for the same report do not have a unique id medic-conf#141: Task event id should not be required medic-conf#142: Function “modifyContent” parameters are undefined for task applies to “contacts” medic-conf#143: Function “emitCustom” is not invoked for targets when applies to “contacts” medic-conf#144: Function “emitCustom” should be passed in the instance which would have been emitted medic-conf#146: Target “appliesToType” is documented as not required but crashes if not defined medic-conf#148: Multiple tasks emitted for different events do not have a unique id medic-conf#149: Emitted targets have undefined date for date of “reported” when appliesTo “contacts” medic-conf#150: JsToString function is buggy and unnecessary medic-conf#171: Error occurred during backup-all-forms command medic-conf#177: medic-conf –local fails in medic/config/standard medic-conf#185: medic-conf does not backup, upload, or convert forms by default medic-conf#199: Support creating custom locales based on app version medic#3093: Registering for a SMS schedule can start mid-group medic#3986: If server is down app cannot start medic#4404: Fix training data script references non-existent view medic#4483: It’s possible to generate feedback docs with no error attached medic#4498: Cannot send multiple scheduled messages at same time medic#5120: Translation key should be mandatory medic#5121: We should be able to add Keys with no translations medic#5183: User cannot logout while offline medic#5298: Investigate and fix common feedback errors medic#5330: Error loading target details medic#5345: Registration transition invalidates unique ids when creating people medic#5347: The update_scheduled_reports transition runs indefinitely medic#5351: Reminders are not working medic#5357: The conditional_alerts transition should sort docs by reported_date medic#5359: The death_reporting transition does not process reports when submitter has no phone number medic#5365: Unregistered phone number or person getting an autoreply with correct textform format medic#5369: Message recipient defaults to sender when recipient is explicit medic#5376: Report Bug not working for admin users medic#5405: Can’t edit translation terms for new keys medic#5410: Registration transition should calculate dates relative to reported_date medic#5415: ANC visit count includes visits specified as not attended in Standard configuration medic#5447: Remove unused permissions medic#5459: Place select2 dropdown results are badly styled in the admin app medic#5481: Angular $exceptionHandler too sensitive medic#5498: The DDoc Version on the About page isn’t working medic#5501: Reloading the app while offline shows sync status “required” medic#5504: poe export script empties translation files medic#5519: Permission denied when API is trying to create extracted-resources path in docker env medic#5522: Feedback modal doesn’t close after successful submission medic#5531: Tooltip showing as logo medic#5536: Countdown timer does not respect custom timer value medic#5577: Nutrition Screening is linking report to contact that you’re logged in as and not the one it is reported under. medic#5595: Fix UHC styling when using both UHC and muting at the same time medic#5599: Logging in as admin on mobile app you’re unable to leave the admin console medic#5602: People card shows on a person’s profile medic#5617: Broken functionality after upgrade to 3.4 with custom locales medic#5621: Offline users are seeing form errors same user online has no errors medic#5622: JavaScript errors and crash stacks not logged to the console medic#5639: Tasks to be completed for people do not appear in a place’s profile medic#5646: Service worker is broken on older versions of Chrome medic#5653: Upgrading from 3.4 to 3.5 is broken medic#5668: The conditional_alerts transition doesn’t include the current report in the list of relevant reports medic#5671: The accept_patient_reports throws an error medic#5675: Import people blocked by CSP medic#5692: API does not block offline users from editing docs when dbname is not medic medic#5705: Webapp doesn’t support languages that are not pluralized by make-plural medic#5718: New households registered do not show on the contact list until after page reload medic#5741: Mobile “back” button not working as expected when creating reports medic#5742: The translation “contact.no.children” is missing in the default configuration medic#5743: User cannot login when database name is not medic","facility-emr-integration#Facility EMR integration":"Version 3.5.0 includes an integration with SIH, a facility based application in Mali. This enables patient referral information to be sent to a clinic and treatment data to be returned, closing the loop between the Community Health Worker and the clinic. This integration is possible thanks in part to a new outbound push feature, which is configurable and will facilitate integrations with other systems in the future. medic#5499, and medic#4813.","features#Features":"medic#1850: Report version of application and forms being used medic#4811: Expose SMS sending capabilities in android wrapper medic#4812: Support XForms that “compile” into SMS messages","improvements#Improvements":"horticulturalist#32: Horti should by default install release version and not master medic-conf#117: Bulk user import medic-conf#135: Create-user function always creates a new place medic-conf#139: Allow data sharing and definition self-reference through the this keyword medic-conf#147: Events dueDate function cannot access the reports of the contact medic#5352: Date formatting in exports is not human readable medic#5361: Serve app from root medic#5439: Validate target ID uniqueness medic#5511: Clean up translation exports medic#5537: Add a permission to show the Report edit button medic#5544: UHC metrics are incongruous between contacts and analytics tab due to month_start_date medic#5579: Allow users to specify date for UHC last visited medic#5580: Record the date when verifying a report medic#5589: Allow external report contributions without a phone number medic#5674: Add docs about the new replications feature to app-settings doc in cht-docs","known-issues#Known issues":"A small performance regression when loading the list of Contacts. medic#5755.","optimizing-sentinel-processing#Optimizing sentinel processing":"By reducing the throttling of change processing and reducing the number of database writes we have greatly improved the rate at which Sentinel processes changes. Clearing a backlog of 200 documents used to take 67 seconds, but with 3.5.0 this has been reduced to 33 seconds, a 50% reduction. medic#4128.\nTo make Sentinel even more responsive to changes, transitions are now executed synchronously when messages are received. This means that replies are generated immediately and the user is notified of the success or error of their message as soon as possible. medic#4857.","optimizing-the-history-tab#Optimizing the history tab":"We found that loading the History tab was taking a long time in projects with many places. This was due to loading the Places filter on the tab. By delaying the initialisation of the filter until needed we found performance improvements in three key areas. medic#4423 and medic#5455.\nMetric 3.4.0 3.5.0 Improvement Rendering the history tab 7247ms 1843ms 75% Rendering the history content pane 1002ms 732ms 27% Starting the application 1020ms 875ms 14% Idle memory usage 453MB 202MB 55%","performance#Performance":"","performance-fixes#Performance fixes":"medic#3543: Sentinel marks reports with the sys.facility_not_found error before it searches and looks for the contact medic#4327: Removes changes watching for online users to improve performance medic#4713: Replace appcache with a service worker cache medic#4898: Move feedback docs to users’ meta dbs","reducing-the-app-size#Reducing the app size":"After some analysis it was found that the webapp included font files that weren’t required. Certain files weren’t minified, and some others weren’t compressed. These fixes combined reduced the size by 2.6MB making the application easier to download and update. medic#5260, medic#5489, and medic#5490.","sort-muted-contacts#Sort muted contacts":"Muted contacts are now sorted to the bottom of the contact list so you can more easily see all your active contacts. medic#5596.\nSort muted contacts","supported-software#Supported software":"There are no required changes to the supported software matrix from 3.0.0.\nNode CouchDB Browsers SMS bridge Android medic-android medic-couch2pg 8.11+ 2.1+ Chrome 53+, Firefox latest medic-gateway 4.4+ 0.4.5+ 3.0+","technical-issues#Technical issues":"medic#3768: Check for npm audit vulnerabilities in automated builds and fix existing vulnerabilities medic#4908: Fix flakey test - Submit Add Family form medic#4968: Write a script that collects all aggregate docs from users’ meta dbs medic#5196: Travis builds timing out after ~50 minutes when API fails to start medic#5198: Work out how to run CI tests for outside collaborators medic#5228: Clarify and streamline process for investigating e2e flakey test failures medic#5297: Individual builds can no longer be restarted medic#5300: Remove node domain from export data controller medic#5311: Convert feedback export to streaming csv medic#5340: Testing dev builds on mobile device after service worker change is awkward medic#5546: Move “selected” into redux store","upgrade-notes#Upgrade notes":""},"title":"3.5.0"},"/releases/3_6_0/":{"data":{"":"","africas-talking-integration#Africa\u0026rsquo;s Talking integration":"Version 3.6.0 includes an integration with the Africa’s Talking SMS aggregator. This allows us to offer a cloud based alternative to managing your own medic-gateway devices. We have created a new routine and a new set of API endpoints to send SMS via Africa’s Talking, process callbacks from Africa’s Talking, and update the status of outgoing messages. Note that this integration is disabled by default. For more information read the configuration documentation.","and-more#And more\u0026hellip;":"","breaking-changes#Breaking changes":"There are no breaking changes when upgrading from 3.5.x.","bug-fixes#Bug fixes":"medic-android#74: Remove reference to stale android-check dependency medic#3254: Trying to send a message when logged out is weird medic#3299: Not showing login screen if logged out until refresh medic#3919: 401s should always redirect to the login page medic#5654: Timer widget beeps even after cancelling the form medic#5750: Admin upgrade page doesn’t update medic#5753: CSP error in Console rendering forms with attached images medic#5760: The initial_replication_date in info docs is always unknown medic#5767: Node environment error after upgrading to 3.5.0 release medic#5789: Muso’s mRDT supervisor tasks cannot resolve","features#Features":"medic#5604: Integration with Africa’s Talking SMS aggregator medic#5695: Reports with mRDT photo should also include timestamp metadata from the mRDT app","improvements#Improvements":"horticulturalist#41: Support and build against Node versions 8, 10, and 12 medic-android#78: After merge to master: build, version, sign, and upload through Travis medic-collect#27: Publish signed builds to GH Releases medic-conf#172: Add a command to update the parents of contacts medic-gateway#145: Publish signed builds to GH Releases medic#1978: Implement heartbeat to detect 401s for admin users medic#4815: Add support for malnutrition reporting to standard medic#5464: Add new permissions to allow users to view outgoing messages and export tabs of the admin app medic#5485: Muso supervisors can’t review mRDT reports while having a replication depth of 1","known-issues#Known issues":"None.","mrdt-timestamp-metadata#mRDT timestamp metadata":"Version 3.6.0 includes a backward compatible enhancement to the processing of mRDT metadata. Since v0.1.5, the rdt-capture app includes a timestamp representing how long it takes the CHV to capture the RDT. This piece of information is passed to the android wrapper medic-android which, since v0.4.30, passes it to the webapp. Once the mRDT form is submitted, this new field timeTaken will be stored in the resulting document.","performance#Performance":"When we released 3.5.0, we noted the existence of a performance regression when loading the list of Contacts. This issue has been resolved in 3.6.0.","performance-fixes#Performance fixes":"medic-android#79: Build separate apks for 32 and 64 bit medic#5559: Move various scope properties into redux store medic#5755: Loading the Contact list is slower in 3.5.0","supported-software#Supported software":"There are no required changes to the supported software matrix from 3.0.0.\nNode CouchDB Browsers SMS bridge Android medic-android medic-couch2pg 8.11+ 2.1+ Chrome 53+, Firefox latest medic-gateway 4.4+ 0.4.5+ 3.0+","technical-issues#Technical issues":"medic#5642: Ensure that all Android apps support 64bit medic#5694: Update apps to use local shared-libs medic#5736: Build deletion script fails to execute medic#5739: Make bundles smaller by deduping dependencies","upgrade-notes#Upgrade notes":""},"title":"3.6.0"},"/releases/3_6_1/":{"data":{"":"","bug-fixes#Bug fixes":"medic#5844: Source validation failing for Africa’s Talking aggregator integration"},"title":"3.6.1"},"/releases/3_6_2/":{"data":{"":"","performance-fixes#Performance fixes":"medic#5942: Replace underscore with lodash in replication"},"title":"3.6.2"},"/releases/3_7_0/":{"data":{"":"","and-more#And more\u0026hellip;":"","breaking-changes#Breaking changes":"A new OS level dependency (xsltproc) is required for generating XFORM html on the server. Not fully supported by medic-conf@2.x. For full functionality, users must upgrade to medic-conf@3.x. With the introduction of configurable hierarchies, additional configuration must be added. More information about how to set up configurable hierarchies.","bug-fixes#Bug fixes":"medic-collect#29: Cannot manually send reports via Internet medic-conf#176: Node 12 support in medic-conf tests medic-conf#208: Declarative Configuration - appliesToType is not optional when appliesTo: contacts medic-conf#209: Declarative Configuration - Global value user is not accessible from declarative configuration code medic-conf#221: Actions that write files seems to be broken create-users, fetch files. medic#3050: Update prompt should appear only when there is ‘real change’ medic#5484: Setting relevant=“false()” is a hard error to troubleshoot in console medic#5507: Creating / syncing meta db-s fails when db name is not “medic” medic#5616: Changing user profile language prevents user from changing back to original language medic#5628: Uncaught Error in production v3.4 - Cannot read property ‘body’ of undefined medic#5672: Webapp messages conversations don’t scroll correctly when loading new unread records medic#5699: Cannot make multiple changes to branding without refresh medic#5715: Primary contact created through “new place form” doesn’t have hierarchy medic#5729: Cannot add more than one household member medic#5747: Ability to hide a field within a section on the Reports tab detail medic#5762: Immunization Condition Card not getting updated as per Collect Immunization Form submission medic#5763: The POE export script incorrectly detects invalid placeholders medic#5768: Incorrect XLSForm meta data values in Enketo medic#5780: View Report on outgoing messages tab brings up blank page medic#5783: e2e test, executed after the service worker e2e test, fails during login medic#5785: Offline users that can_configure are redirected to admin app medic#5801: Warning message about ambiguous data binding doesn’t report which value caused the error medic#5805: The style loading is delayed when launching a new form from the reports tab medic#5809: Creating a user with a simple password using the API hangs medic#5812: Deleting a contact with messages causes the messages tab to error. medic#5813: Error in creating New Area - LG Config medic#5824: Moving contacts doesn’t update the contact who will receive scheduled messages when no patient_id is set. medic#5825: Outbound tasks fail if one of the task documents is deleted medic#5826: If an outbound task fails in mapping it causes all other tasks to fail medic#5840: Reintroduce styling for weeksPregnant filter medic#5845: Access logging outputs the load balancer IP in production medic#5847: Settings shared-lib throws an error if the credential is an empty string medic#5851: Requesting feedback docs fails with Error about long string medic#5852: get_users_meta_docs outputs [] as next value forever when there are no docs available to view medic#5855: Refreshing the tasks page after selecting a task does not load a task correctly medic#5877: Add person icon is not monochrome medic#5884: The PLACE_TYPE-create and PLACE_TYPE-edit xlsx files need attention with configurable hierarchy medic#5888: Search for places in add user does not return custom_type persons. medic#5892: The “New action” popup dialog is partially invisible and in wrong location on narrow screens medic#5894: Report place filter doesn’t load medic#5897: Reports without a patient_id don’t get synced if the patient is moved to a new place medic#5899: Task list in places view doesn’t include the tasks of children medic#5901: Potential race condition in get_users_meta_docs script medic#5920: Theme page content does not scroll medic#5930: Online users have a sync status in the hamburger menu medic#5931: Android App cannot load app on initial replication medic#5933: Report review dropup styling is broken medic#5959: Error when loading reports as an offline user medic#5961: API sometimes generates an empty model.xml and form.html medic#5971: CHT Reference App’s delivery form causes “Invalid XML” in latest master medic#5973: Guided Tour does not show control buttons medic#5978: Language select modal Submit button never enabled medic#5987: Form context is filtering on the admin console medic#6012: Deleting a purge database without restarting API could block users from replicating medic#6017: Transitions missing from default config. medic#6019: Add Target does not work on gamma.dev","configurable-hierarchies#Configurable hierarchies":"It is now possible to configure contact hierarchies. This allows for better tailored solutions for new projects and opens up new configuration possibilities: for example having any number of place levels, multiple person types, or unbalanced place trees. The previously hardcoded contact hierarchy has now become the default hierarchy and existing projects will continue using it. For more information, read the configuration information.","features#Features":"medic#3639: Configurable place hierarchies","improved-purging-now-done-server-side#Improved purging now done server-side":"Marking documents as no longer useful so that they don’t take up mobile device resources is now handled server-side. This enables devices to not download unnecessary documents during an initial replication and makes the actual “purging” process faster. For more information about changes in purging, refer to the purging documentation.","improvements#Improvements":"medic-conf#109: Support for ES6 in declarative config medic-conf#128: Improve medic-conf testing by using actual form definitions medic-conf#145: Declarative Config - Support for target.idType to return the id of the parent medic-conf#151: Declarative Config - Improved system for file-based componentization medic-conf#200: When uploading custom translations we should indicate better that the admin needs to give the language a name. medic-conf#205: Declarative Configuration - Ability to control which contact is associated with emitted task medic-docs#140: Document how to configure multimedia elements in forms medic-os#48: Update default couchdb configuration medic#1926: Cannot view XForm videos on mobile device when offline medic#4926: Allow a different header label for the list of people on the place profile between different places in the hierarchy medic#5123: Improvements to the report summary page UI medic#5313: Validate email address when creating or editing users medic#5652: Allow xform attachments to have useful names medic#5725: UI/UX updates on admin app Branding page medic#5914: Use CHT reference app as default medic#5919: Improve infodoc replication timestamp accuracy medic#6005: Review and clean XLSForms for CHT reference app medic#6016: Target Revisions: CHT reference app","includes-a-new-default-configuration#Includes a new default configuration":"Version 3.7.0 includes a complete default configuration that is enabled automatically on fresh application installations. The configuration is designed as a reference application for antenatal care. It provides a foundation for forms, data fields, and analytics to model an ideal way of structuring and organizing a workflow, its configuration code, and testing framework.","known-issues#Known issues":"None.","optimised-form-html-generation#Optimised form HTML generation":"Generating the HTML for XForms is moved from being executed on every device to being executed once on the server. This reduces the time to initially load forms, along with reducing the memory footprint of the app by not caching every form’s html and by not storing the additional files required for generating it.","performance#Performance":"Users can expect faster replication, faster application load time and faster form load time:\nAction Tecno-J5 on 3.7 Tecno-J5 on 3.6 Tecno-WX3 on 3.7 Tecno-WX3 on 3.6 Initial load (*) 0:02:29 0:04:18 0:02:45 0:05:01 Loading reports tab 0:00:20 0:00:32 0:00:25 0:00:44 Process a specific form 0:00:19 0:00:23 0:00:21 0:00:34 Performance chart\n(*) Includes initial replication and and application bootstrapping for the first time.\nWe also fixed a bug where a user with a large number of documents trying to replicate could lock up medic-api.","performance-fixes#Performance fixes":"medic#4450: Optimise form HTML generation medic#5362: Warn when replicating too many docs medic#5443: Server side purge medic#5475: Reminders update clinic docs medic#5540: Profile application memory usage medic#5724: Loading portions of the reports tab causes the page to lock up. medic#5727: Updating branding images doesn’t delete the obsolete attachments medic#5759: Makes replication _all_docs requests quicker medic#5797: Make replication _bulk_docs requests quicker medic#5859: Lazy load unread count to reduce visible load time medic#5942: Replace underscore with lodash in replication","supported-software#Supported software":"There are no required changes to the supported software matrix from 3.0.0.\nNode CouchDB Browsers SMS bridge Android medic-android medic-couch2pg 8.11+ 2.1+ Chrome 53+, Firefox latest medic-gateway 4.4+ 0.4.5+ 3.0+","technical-issues#Technical issues":"medic-android#86: Target API level requirements from August 2019 medic-android#88: Enable largeHeap setting in the android manifest since our footprint is large medic-android#92: Set target audience in all android apps on the play store medic#2701: Framework for testing XForms used for app workflows medic#3570: Remove enketo form generation feature medic#5344: Flakey e2e test: registration transition submits new sms messages shows content medic#5479: Investigate Play Store replacements medic#5548: Documentation tooling medic#5590: Update the CheckDate service to store the delta in telemetry medic#5607: Support Node 12 medic#5635: Move more scope properties to store and controller medic#5711: Remove unused less variables medic#5829: Flakey unit tests: auth directive medic#5915: Allow for manipulating services in e2e tests on travis","upgrade-notes#Upgrade notes":"","warn-when-replicating-too-many-docs#Warn when replicating too many docs":"A warning is now displayed when a user would download more than the recommended maximum of 10.000 documents. This warning is shown before starting initial replication in an attempt to reduce the incidence of misconfigured users.\nWarn when replicating too many docs"},"title":"3.7.0"},"/releases/3_7_1/":{"data":{"":"","bug-fixes#Bug fixes":"cht-core#6025: Outbound can halt scheduler execution permanently cht-core#6029: Inconsistent field label in CHT Reference App - Blue skin color cht-core#6052: Missing labels for report form fields cht-core#6065: Confirmation notification displayed while navigating away from tasks list cht-core#6071: Configurable contacts not correctly mapped as SMS recipients medic-conf#260: Fields are not showing when custom type is defined for appliesToType"},"title":"3.7.1"},"/releases/3_8_0/":{"data":{"":"","and-more#And more\u0026hellip;":"","breaking-changes#Breaking changes":"The changes to tasks and targets require a “3.8 compatible” partner configurations to be deployed for the tasks and target tabs to continue to function. You’ll see errors on these tabs and the console error Rules Engine: Updates to the nools schema are required if the configuration is not compatible with 3.8. All “3.8 compatible” configurations are backward compatible and can be deployed safely to any Core Framework version. It is therefore recommended to deploy the “3.8 compatible” configuration before upgrading so your application will work seamlessly once the upgrade completes.\nFor partners using declarative configuration, ensure your configuration is deployed using medic-conf 3.1.0 or greater. For partners maintaining their configuration in the legacy rules.nools.js file, ensure the latest schema changes are deployed. These changes also result in new constraints for partner application task and target code:\nTasks with multiple actions cannot use different contacts for their actions[n].content.contact values. For example, one action cannot open a form for contact x and a second action for the same task open a form for contact y. Reports “with errors” are now available in all task and target calculations (instead of just some calculations) and partner code is responsible for filtering them as necessary. For partners maintaining their configuration in a rules.nools.js file, multiple contacts emitting tasks with conflicting id values is no longer supported. This will result in errant behavior in 3.8.0. Target emissions with conflicting ids were previously merged based on the order in which the requesting contact was created inside CouchDB. It is now merged based on the order of the requesting contact’s reported_date attribute. The specific meaning of task “resolution” has been augmented to accommodate the additional complexities of reporting a task’s “state” in Postgres. Read the documentation for more information. A task’s content is cached inside the task document. Any timestamps or calculation can be up to seven days old. This is a breaking change for configurations using the current time as part of their calculations.","bug-fixes#Bug fixes":"cht-core#2272: Make webapp date widget easier to use cht-core#5564: Expired tasks don’t disappear from the Tasks tab when they expire cht-core#5856: appliesToType on the contact summary cards and fields should accept arrays cht-core#5863: Translation throwing errors in production cht-core#5864: Gateway number validation is too strict cht-core#5866: Reports with errors trigger tasks when created/modified but not on reload cht-core#5949: Telemetry data are not saved under the right month cht-core#5951: Reports page’s filter reset button gets cut off on Tecno Y4 cht-core#5963: The icon in condition cards is displaying too large cht-core#5967: Wrap text in contact summary and condition cards cht-core#5982: Uploading a custom translation with special characters breaks the admin page. cht-core#6020: Current password validation error on Update password form cht-core#6040: Age is missing when using unknown for birth date and entering years. cht-core#6053: Use relative date of death in list of deceased persons cht-core#6056: Death reporting transition requires patient_id cht-core#6062: Missing translation warning is displayed in console but doesn’t seem to do anything when provided. cht-core#6063: Number of days ago does not match date in death report cht-core#6084: Timeouts for /api/v1/users leave user at “loading app…” forever cht-core#6087: Reduce inbox.js bundle size to meet targets for 3.7 release (800kb) cht-core#6115: medic-conf errors when trying to build the default config cht-core#6117: Submit not working on Basic Settings tab on SMS admin page cht-core#6118: Deleting a report in mobile view doesn’t redirect to list cht-core#6122: Lineage hydrateDocs yields inconsistent results and possibly crashes when hydrating the same lineage cht-core#6143: Users with a lot of large docs to replicate continuously fail cht-core#6145: Image attachments are stored on the report twice cht-core#6163: Add implicit configs that were lost when config.default.json was removed cht-core#6164: Db-doc access fails when accessing a report about a deleted contact cht-core#6169: Sentinel doesn’t restart its follow feed on error cht-core#6170: Having a doc with a non-numeric reported_date breaks everything cht-core#6185: Unread reports \u0026 messages menu bubbles no longer appearing cht-core#6191: Supervisors download all task documents from CHWs they supervise cht-core#6205: Medic ID never generated if a report is created before sentinel ID is generated cht-core#6208: Missing translations horticulturalist#44: The .horticulturalist.lock file prevents horti from restarting when the medic-os docker container restarts medic-conf#168: Declarative Config - Document changes which result in appliesTo=false don’t cause the task to disappear medic-conf#218: Url command-line options are required even for actions which don’t use it (regression) medic-conf#240: convert-*-forms actions silently convert nothing when extraArgs are provided medic-conf#259: Exclamation marks are double escaped in upload-custom-translations medic-conf#278: upload-app-forms crashes when deploying projects/muso","create-places-by-sms#Create Places by SMS":"You are now able to create a place via SMS. This is useful if you wish to create a location before creating a person in that location (e.g. creating a new household before registering a member of that household).\nFor more information, read the configuration information.","features#Features":"cht-core#5614: Add feature to create a place via SMS cht-core#5657: Ability to calculate how many tasks are shown and completed by users cht-core#5940: Create new API endpoint to replace settings","high-sync-times-immediately-after-upgrade#High sync times immediately after upgrade":"The changes to tasks and targets may have significant performance implications for some users. Heavy users may see hundreds of new task documents created on their device the first time they load the task or target tabs after upgrading to 3.8.0. Users can expect longer than usual sync times for their first sync after viewing the task or target tab in 3.8.0.","improvements#Improvements":"cht-core#3977: Improve sync status UI cht-core#5381: Add an SMS page to the admin app to group SMS messaging configuration tasks together cht-core#5382: Add a Display page to the admin app to group UI configuration tasks together cht-core#5383: Move “Settings \u003e Backup \u0026 restore” to “Backup app code” in the admin app cht-core#5384: Rename and reorder admin app navigation cht-core#5385: Update text on admin app Display page cht-core#5386: Update text on admin app User page cht-core#5387: Update text on admin app SMS page cht-core#5388: Update text on admin app App forms page cht-core#5389: Update text on admin app Targets page cht-core#5391: Update text on admin app Images page cht-core#5392: Update text on admin app Upgrades page cht-core#5393: Update text on admin app Import \u0026 Export page cht-core#5394: Update text on admin app Backup page cht-core#5440: Add explanatory text about permissions to the admin app cht-core#5493: Support a Muso Target - % of families which have received 2 home visits this month cht-core#5608: Add python 2.7 to list of required software for developer environment cht-core#5716: Update colors in the app and in variables.less file cht-core#6032: ADD NO_LABEL TO Contact Objects in the CHT Reference APP cht-core#6103: Retry upwards replication cht-core#6104: Tab name inconsistencies in Guided Tour vs. Default config cht-core#6166: Installation instructions lead to errors medic-android#64: Expose device information in medic-android so we can store it against monthly telemetry readings medic-conf#113: Warn if uploading configuration will overwrite someone elses changes medic-conf#230: Allow relative days for date and timestamp columns in csv-to-docs command medic-conf#236: Unit tests fail when run locally medic-conf#276: Declarative Configuration - Make task/target identification attributes required data integrity of task documents medic-conf#283: Declarative Config - Rename passGroupWithCount to passesIfGroupCount medic-docs#142: Accessing and interpreting client-side telemetry medic-docs#150: Add information about the known field in documentation medic-gateway#137: Make sure that Gateway consumes / forwards all SMS before resuming polling medic-nootils#9: Upgrading to medic-nootils@3.x includes test-only dependencies rdt-capture#32: Must target Android 9.0 (API level 28) or above by November 1 2019","known-issues#Known issues":"No known issues.","performance#Performance":"The changes to Tasks and Targets will have significant performance implications for projects. Many of these changes are hard to succinctly summarize and will vary greatly across project configurations and user types. Here are some performance changes you can expect in 3.8.0:\nLess Memory Usage - The retained JS heap size for idle users has been reduced. This reduction is significant for users with many reports or users with large reports. The retained JS heap size for our heaviest known users has been reduced by ~75%! Large First Sync After Upgrade - Expect longer than normal sync times for the first sync after the upgrade to 3.8.0. Some users may see hundreds of new task documents created on their device when they use the app after upgrading. These new documents need to sync to the server. Increased Disk Usage - Writing task and target documents into PouchDB means the Core Framework will require more disk usage. Reduced Time to Bootstrap - The bootstrapping step Loading rules… has been removed. This results in drastically reduced bootstrapping times that remain constant regardless of document count. After the user’s first replication and load, all users should be able to restart the app and bootstrap within one minute. Long First-Load Time for the Tasks and Targets Tabs - The loading previously done during the Loading rules… bootstrap step now loads the first time a user navigates to the “Tasks” tab or the “Targets” tab. Expect long load times the first time one of these tabs is viewed. But it is only once, even if the user closes the app. Net Performance Gains - After the first-load of the “Tasks” tab or the “Targets” tab, the tabs will load from a persistent cache. The cache is much faster than the first-load experience, but the tabs will load slower than in previous Core Framework versions. This is a performance trade-off which aims to reduce the time to complete operations in CHT app. The net result is a drastically reduced bootstrap time, and a slightly increased load time for specific tabs which provides a net reduction in load times for users to complete tasks. These trade-offs are complex and we’d love to hear how these changes affect your users and your configuration. Send us your measurements or other feedback on the CHT Forum.","performance-fixes#Performance fixes":"cht-core#5550: Measure and if possible improve CouchDB GET performance via API cht-core#6023: Timeout option is not set during replication cht-core#6106: Call ‘db.close’ for ephemeral PouchDB objects to avoid memory leaks","replication-improvements#Replication improvements":"Sync status has been reworked to be clearer and more helpful. Specifically, it now specifies whether a lack of syncing is due to a missing internet connection:\nunable to sync example\nSee the github issue for more information.","supported-software#Supported software":"There are no required changes to the supported software matrix from 3.0.0.\nNode CouchDB Browsers SMS bridge Android medic-android medic-couch2pg 8.11+ 2.1+ Chrome 53+, Firefox latest medic-gateway 4.4+ 0.4.5+ 3.0+","task-and-target-data-available-for-analysis#Task and target data available for analysis":"The task and target system has undergone a significant rework. It is now powered by task documents and target documents which are written to PouchDB and synced to CouchDB/Postgres. This exposes task and target data in CouchDB and Postgres so queries can easily capture how tasks and targets are behaving for users in the field. These changes also set the foundation for powerful collaborative supervisor features to come in the future.\nThese changes have resulted in important performance changes for the app.","technical-issues#Technical issues":"cht-core#5129: Clean up the horti staging database cht-core#5624: Remove use of AngularJS $scope.$broadcast cht-core#5647: Update eslint to use ecmaVersion: 2017 to allow async/await pattern cht-core#5791: Move scope functions to redux actions cht-core#5890: Flakey test: “Navigation tests : should open Report bug” cht-core#5935: Provide a UI to perform testing tasks on the phone cht-core#5944: Rename medic repo to cht-core cht-core#5983: Bump dependencies for 3.8.0 cht-core#6054: Make sure app versions are always in sync cht-core#6061: Refactor the registration transition cht-core#6134: Request persistent storage","upgrade-notes#Upgrade notes":""},"title":"3.8.0"},"/releases/3_8_1/":{"data":{"":"","bug-fixes#Bug fixes":"cht-core#6259: medic-conf create-users command fails when generate_patient_id_on_people transition is on cht-core#6267: Targets with date: ’now’ show stale counts for first days of a reporting window cht-core#6274: Specifying contactLabel in tasks configuration breaks task list rendering cht-core#6279: Rendering of cascading selects broken after 3.7.x cht-core#6288: Current language not being picked up by elements in repeat groups cht-core#6321: XForms which use “media::image” have a spinner below the image cht-core#6323: Tasks not opening action form directly from on a contact’s profile and on the tasks list","changes#Changes":"","supported-software#Supported software":"There are no required changes to the supported software matrix from 3.0.0.\nNode CouchDB Browsers SMS bridge Android medic-android medic-couch2pg 8.11+ 2.1+ Chrome 53+, Firefox latest medic-gateway 4.4+ 0.4.5+ 3.0+","upgrade-notes#Upgrade notes":"CouchDB view code has been modified which will require rebuilding which may take some time depending on how many docs you have. We recommend you use the Stage feature to rebuild the views before upgrading to reduce server downtime. Webapp code has been modified and therefore users will download the application again."},"title":"3.8.1"},"/releases/3_8_2/":{"data":{"":"","bug-fixes#Bug fixes":"cht-core#6583: Users are forced to login one year after they last logged in","known-issues#Known issues":"When logging out (or after being logged out), users could end up in a redirect loop (cht-core#6337).","supported-software#Supported software":"There are no required changes to the supported software matrix from 3.0.0.\nNode CouchDB Browsers SMS bridge Android medic-android medic-couch2pg 8.11+ 2.1+ Chrome 53+, Firefox latest medic-gateway 4.4+ 0.4.5+ 3.0+"},"title":"3.8.2"},"/releases/3_9_0/":{"data":{"":"","and-more#And more\u0026hellip;":"","breaking-changes#Breaking changes":"","bug-fixes#Bug fixes":"cht-core#5955: Login page redirection doesn’t work cht-core#6111: Unable to dismiss Guided Tour if you navigate to a different tab at the end of the tour cht-core#6147: Data from user’s meta database is not being replicated to medic-user-meta cht-core#6149: Report content patient hyperlinks point to ‘/contacts’ list cht-core#6161: Fix race condition when deleting reports cht-core#6162: Submitting almost any form from the mobile app throws and catches a Java error cht-core#6183: Map tile fetching blocked by CSP for geopoint questions cht-core#6184: Reverse geocoding blocked by CSP for geopoint questions cht-core#6192: Broken link in Sentinel error message cht-core#6212: Console errors on upgrade page cht-core#6220: Number of tasks for person not shown on profile cht-core#6223: Outbound Push calls code to delete broken tasks unnecessarily cht-core#6231: Misaligned “Title” column in SMS Forms page of the App Management console cht-core#6239: The number of Feedback docs is incorrect cht-core#6249: CouchDB admins can’t login in the app cht-core#6256: API error for weak password is not prescriptive cht-core#6272: Modal dialogs are replaced by the same dialog cht-core#6315: The update settings API reports success but has no effect cht-core#6328: Upgrade page doesn’t show branches available to upgrade to if there are no betas to upgrade to cht-core#6335: Received messages appear as sent messages cht-core#6337: Infinite redirect loop on login cht-core#6356: Search reset button does not clear freetext field cht-core#6374: Labels for select fields are grey instead of black like other fields cht-core#6389: If multiple task documents are created with the same emission id only one of them is ever updated cht-core#6394: LHS Contact Action labels don’t render at 400px or below cht-core#6415: Missing translation “state.duplicated” cht-core#6417: As an offline user, submitting a report without a subject throws an error cht-core#6421: Db-doc doesn’t allow unallocated data_records cht-core#6425: Support resolving tasks concerning unknown contacts cht-core#6440: Sentinel will skip changes entirely in certain conditions cht-core#6450: Images used in a repeat are only showing spinners medic-conf#286: Hierarchy error prevents “move-contacts” action from working with parents using contact_type medic-conf#288: Keep our apps and configurations in sync with medic-conf version medic-conf#300: Error when uploading forms using Windows CMD/Powershell using medic-conf 3.1.0 medic-conf#301: Unable to upload an app form after changing its .properties.json medic-conf#303: upload-app-forms skips the upload of forms based only on local changes, ignoring the state of the form on the instance medic-conf#325: Task generation fails when given contactless reports","case-management-workflows#Case management workflows":"For reports that aren’t patient or place centric you can now register a case with a generated case_id short code. This allows subsequent reports to identify which case they refer to.\nRead more about configuring the accept_case_reports transition in the CHT documentation.\nIssues: cht-core#6291.","cleanup-operations-may-impact-app-load-times#Cleanup operations may impact app load times":"We have implemented a purging function to clean up obsolete feedback and telemetry docs as part of cht-core#5902. This will free up disk space and improve performance over time, however initially may cause slower app load times while the backlog is cleared. The cleanup is capped to 1000 docs per app load to limit the impact on users.","dhis2-integration#DHIS2 integration":"The CHT now supports calculating and exporting data for DHIS2 integration. The Core Framework can now be configured to calculate DHIS2 dataValues, aggregate patient level data, view aggregate data offline, and export the aggregate data formatted for DHIS2. The data is also available via an API so you can access it from an interoperability layer such as OpenHIM.\nFor more information read the documentation.\nIssues: cht-core#5661 and cht-core#6002","docker-image-update-required#Docker image update required":"Prior to initiating an upgrade to 3.9, you will need to update the CHT Docker Image and a few packages inside the medic-os container. Closely follow our 3.9 CHT Docker Image Upgrade Process\nThis image updates the horticulturalist package to stage ddocs properly.","features#Features":"cht-core#6286: Link SMS reports to patient associated with the sender phone number medic-conf#297: Add command to bulk-edit contacts on medic-conf","improvements#Improvements":"cht-core#5738: Trigger a sync immediately when a doc changes locally cht-core#5772: Show a prompt when we detect the user is logged out cht-core#5776: Make it clear that tasks can be completed anywhere in the window, not just on the due date cht-core#5804: Display page tab text labels even on mobile view, whenever there are 3 or fewer tabs cht-core#6188: Record telemetry events for tasks and targets cht-core#6209: Update aggregate target doc after the reporting interval to ensure accuracy cht-core#6211: Ability to make target widgets invisible cht-core#6234: Adjust UHC colors to be consistent with our color palette cht-core#6270: Minor CSS updates to admin app cht-core#6280: Show locale selector on login page cht-core#6306: Send outbound push without delay cht-core#6331: Add an API for hydrating contacts on a doc cht-core#6457: Rename configuration fields to be consistent with DHIS2 and make names localizable medic-conf#104: AppliesToType is not respected for report-based targets medic-conf#271: Only update configurations docs when something has changed medic-conf#292: Refactor to replace renamed dependency “opn” medic-conf#306: Allow for configuring xml2sms in forms medic-conf#323: Improve usage documentation regarding the options parameter medic-gateway#138: Tweak gateway SMS forwarding so you can define how long we wait to send SMS","instance-monitoring#Instance monitoring":"A new API has been added to allow tracking of a range of metrics in the CHT platform to make monitoring, alerting, and debugging of your instance easier.\nIssues: cht-core#6133","known-issues#Known issues":"None.","outbound-push-only-sends-each-report-once#Outbound Push only sends each report once":"The implementation of Outbound Push has changed as part of cht-core#6306. Now each configured outbound push will be sent only once per doc. Specifically, the first time your relevant_to function resolves to true is the first and only time a particular record will be send to a configured external service. This is to ensure that pushes are stable and predictable, and additional pushes are not sent unintentionally or unexpectedly. We are working on allowing for multiple pushes, please see cht-core#6419 and contribute your situation to help us determine the best way forward.","performance-fixes#Performance fixes":"cht-core#5902: Offline users download all their previous feedback docs cht-core#5946: Replace underscore with lodash throughout our codebase cht-core#6108: Batch processing of sentinel changes cht-core#6125: Batch all sentinel operations cht-core#6181: Purging for task and target documents","rapidpro-integration#RapidPro integration":"Interactive, structured messaging for health triage and clinical referrals is now possible with the integration of RapidPro. This opens new opportunities for a semi-automated, direct to patient approach to health assessments and care coordination at the community level. The Outbound Push feature has been extended to support submitting data to RapidPro so you can trigger workflows based on changes in the CouchDB database.\nRead the feature overview to learn more about this new integration.\nIssues: cht-core#6207","supervise-target-progress#Supervise target progress":"Targets can now be configured to be aggregated and synced to allow supervisors to view the progress of their health workers towards their goals. These new “aggregate” targets show an overview of all workers progress within their branch and can be selected to show each workers progress individually.\naggregate targets\nRead the feature overview and the technical documentation to see how to configure this new aggregated target.\nIssues: cht-core#4839 and cht-core#4840","supported-software#Supported software":"There are no required changes to the supported software matrix from 3.0.0.\nNode CouchDB Browsers SMS bridge Android medic-android medic-couch2pg 8.11+ 2.1+ Chrome 53+, Firefox latest medic-gateway 4.4+ 0.4.5+ 3.0+","technical-issues#Technical issues":"cht-core#4482: Report number of feedback docs in instance monitoring API response cht-core#4748: Make it easier to debug forms cht-core#5722: Reuse the same eslint config between repos cht-core#5956: deploy-info e2e test doesn’t work locally cht-core#5960: MessageQueueCtrl unit test is flaky cht-core#6009: Run CHT-Reference-App tests through travis cht-core#6092: Refactor Auth service to return boolean not throw cht-core#6126: Extend ESLint rules cht-core#6317: “grunt test” doesn’t work cht-core#6381: Improve Developer Install Docs to ensure CouchDB 2.3.x is installed cht-core#6470: Rename DHIS2 configuration names to use snake case","upgrade-notes#Upgrade notes":""},"title":"3.9.0"},"/releases/3_9_1/":{"data":{"":"","bug-fixes#Bug fixes":"cht-core#6562: Switching between tabs while tasks are being calculated can result in having multiple task documents with the same emission id cht-core#6583: Users are forced to login one year after they last logged in","supported-software#Supported software":"There are no required changes to the supported software matrix from 3.0.0.\nNode CouchDB Browsers SMS bridge Android medic-android medic-couch2pg 8.11+ 2.1+ Chrome 53+, Firefox latest medic-gateway 4.4+ 0.4.5+ 3.0+"},"title":"3.9.1"},"/releases/3_9_2/":{"data":{"":"","bug-fixes#Bug fixes":"cht-core#6700: For targets without idType, the winner emission is not deterministic cht-core#6756: Backwards compatibility for location gathering","supported-software#Supported software":"There are no required changes to the supported software matrix from 3.0.0.\nNode CouchDB Browsers SMS bridge Android medic-android medic-couch2pg 8.11+ 2.1+ Chrome 53+, Firefox latest medic-gateway 4.4+ 0.4.5+ 3.0+"},"title":"3.9.2"},"/releases/4_0_0/":{"data":{"":"","and-more#And more\u0026hellip;":"","api-startup-progress-screen#API startup progress screen":"Previously users who tried to log in before server start up had completed would be shown an error page which wasn’t very user friendly. Now users will be shown loading page with details about the current stage of the start up process.\n#2967: Report API startup progress instead of 502","breaking-changes#Breaking changes":"To prepare for this release, read through our Preparing to Upgrade documentation.\nBe aware that as this is a major upgrade some manual steps are required - following the usual upgrade process will not work. Data migration documentation is coming soon, but in the meantime reach out on the forum for direct support in upgrading. New projects should start on 4.0.0 to make the following upgrades easier.","bug-fixes#Bug fixes":"#1495: jr:choice-name works for select_one, not select_multiple #4132: Values of non-relevant fields should be maintained until submission #5636: Xform rendering hides choices when relevance condition and choice filter are applied to a secondary question #5980: Forms show error message upon opening #6589: Video and Audio continues playing even after navigating to next screen #6803: Some Enketo radio buttons don’t get checked styling on first click #7222: Empty integer values in Enketo forms evaluate to 0 #7237: Broken functions for xForm repeat_groups #7298: “field required” not shown when field is read_only, required, and has calculation #7608: API wants to build form xmls when forms are deleted #7650: Conflicts diff script crashes because of change in view code #7657: The reports raw content has the label in the wrong place #7676: Zero-width unicode characters removed from SMS messages too often #7690: Uploading a form through the app management GUI does not set the xml version #7759: Timeouts for view requests when syncing can leave changes requests hanging forever #7786: Translation labels missing in default config #7792: Fix openrosa-xpath-evaluator issue with numbers using scientific notation #7832: CERTIFICATE_MODE=OWN_CERT fails with “cannot load certificate” #7840: API credentials endpoint fails CouchDb secret is too short #7850: CouchDb Secret does not get set in single node #7855: When using self signed certs, upgrade page will report “Error when fetching progress” after upgrade was successful","contributors#Contributors":"Thanks to all who committed changes for this release!\nLore Gareth Bowen mrjones Diana Barsan bedengaruko Mokhtar Jennifer Q Tatiana Lépiz elvisdorkenoo Njuguna Ndung’u Joshua Kuestersteffen Prajwol Shrestha Jonathan Marc Abbyad Henok Hareet","features#Features":"#2967: Report API startup progress instead of 502 #7448: Detect unsupported browser #7694: Add xPath function for easily adding years, months, days, etc to date value","highlights#Highlights":"","improvements#Improvements":"#6382: Use Noto font on the login page #6564: Have an upper time limit to generating task documents #7689: Set form version when creating contacts #7731: Update today XPath function to not return current time #7761: Don’t provide a default password #7802: Allow for dynamically setting container and network names #7859: Improve admin upgrade page UX when upgrade service fails to update containers #7879: Switch staging server to a different URL due to breaking change #7884: Ensure all services are set up to automatically restart","known-issues#Known issues":"Check the repository for the latest known issues.","new-architecture#New architecture":"This is a significant change how the CHT is deployed and updated which brings a wide range of benefits and enables more opportunities for improvements in future releases. Read more about the new architecture.\n#6189: Implement Architecture v3","new-architecture-1#New architecture":"The major feature of CHT v4.0.0 is a new micro service architecture. This has many benefits over the previous architecture outlined in more detail in this forum post, but in summary this allows deployments to scale to many more users than previously, deployments to be updated more easily in future, better monitoring of services, performance gains, removing quite a lot of legacy code, and easier installation.\n#6189: Implement Architecture v3","performance-improvements#Performance improvements":"#5549: Work out what we want to do with Enketo XML, and do that thing #7801: Use local log driver in all Docker containers #7813: Call ‘db.close’ for ephemeral PouchDB objects to avoid memory leaks","removed-deprecated-features#Removed deprecated features":"Simprints integration and the update_sent_forms transition weren’t being used so the code has been removed.\n#5939: Remove update_sent_forms transition #7421: Remove simprints code","secure-credentials-migration#Secure credentials migration":"Credentials used for external integration via SIH or Outbound Push features are now stored in a different way which requires a manual upgrade step. Read about how to store credentials in 4.0.0 in the API documentation.\n#5904: Cluster safe credentials","security-fixes#Security fixes":"#5904: Cluster safe credentials #7800: Don’t hard code COUCHDB_SECRET in docker compose files","technical-improvements#Technical improvements":"#4517: Import medic-specific functions from openrosa-xpath-extensions #4874: Remove continuous replication code from the API changes endpoint #5939: Remove update_sent_forms transition #6189: Implement Architecture v3 #6345: Update to latest enketo-core #6846: Remove custom translations from Bamanankan #7421: Remove simprints code #7771: enketo-transformer is not compatible with npm 8 #7775: Wdio E2E test suite broken on master #7812: Don’t default CouchDB password to empty string #7815: CouchDb /_utils faulty redirect #7817: Update release build schema to v2 #7826: Publish branch and alpha docker images in public ECR #7864: Expose CouchDb port 5986 to the docker network","uiux-changes#UI/UX changes":"None.","updated-browser-and-android-requirements#Updated browser and Android requirements":"The requirements of clients (browsers and Android devices) has been updated to allow the CHT to use modern features and benefit from improved performance and security. Before upgrading to CHT v4.0.0 ensure that:\nAll Android devices are running AndroidOS v5.0 or greater. In most cases this will require replacing older devices. All Android devices are running cht-android v1.0 or greater All Android devices are running Android System Webview v100 or greater Browser users have the most recent version of Chrome or Firefox All these updates are backwards compatible so these should be rolled out before upgrading the CHT server.","upgrade-notes#Upgrade notes":"","upgraded-enketo#Upgraded Enketo":"The software the CHT uses to render forms has been updated with more features, better performance, and many bug fixes. This also introduces a few changes to behavior that may require changes to form configuration. To test your forms\nUse the latest cht-conf CLI tool to validate your forms. Some additional validations were added to detect issues you may have. Upgrade a testing instance to 4.0.0 and manually test the forms to ensure they work as expected. #6345: Update to latest enketo-core #7731: Update today XPath function to not return current time"},"title":"4.0.0"},"/releases/4_0_1/":{"data":{"":"","breaking-changes#Breaking changes":"None.","bug-fixes#Bug fixes":"#7912: Calling /api/v1/settings/deprecated-transitions prevents any future transitions to run over new records in API #7918: Error loading forms containing countdown-widget #7933: Error 500 when processing SMS message missing year from Bikram Sambat aggregate","contributors#Contributors":"Thanks to all who committed changes for this release!\nGareth Bowen Diana Barsan","known-issues#Known issues":"Check the repository for the latest known issues.","uiux-changes#UI/UX changes":"None.","upgrade-notes#Upgrade notes":""},"title":"4.0.1"},"/releases/4_10_0/":{"data":{"":"Known issues Check the repository for the latest known issues.\nUpgrade notes Breaking changes None.\nUI/UX changes This release includes two improvements to Aggregate Targets.\nUsers can now view data for the previous reporting period Users assigned multiple places can now see Aggregate Targets Highlights Aggregate Targets can now be viewed for the previous month The CHT now supports viewing Aggregate Targets for the previous month. All users who have access to Aggregate Targets will see a Filter option that allows them to choose between the current month and previous month. This affects both “monthly” and “all time” widgets. Viewing the previous month’s data for an “all time” widget (which is cumulative) will show the data as it were at the end of the previous month. When “Previous Month” is selected, a visual cue (the month name) will be displayed both in the list view (as a breadcrumb) and the detail view (as the column header).\nDetails “Current month” will always be shown by default The “Reporting Period” label in the filter sidebar uses the analytics.target.aggregates.reporting_period translation key This filter is shown for all users who have access to aggregate targets, you don’t need to do anything to enable it (and there is no way to disable it) Aggregate Targets for users assigned to multiple places The CHT also now supports Aggregate Targets for users that are assigned to multiple places. If a user has multiple places (added in 4.9.0), they will see an additional filter option that allows them to choose which place they want to view. There is also a visual cue on each Target to clearly indicate which place is being viewed.\nNOTE: Users who are assigned only one place will not see the additional place filter option, but they will continue to see the new Reporting Period filter option.","aggregate-targets-can-now-be-viewed-for-the-previous-month#Aggregate Targets can now be viewed for the previous month":"","aggregate-targets-for-users-assigned-to-multiple-places#Aggregate Targets for users assigned to multiple places":"","and-more#And more\u0026hellip;":"","breaking-changes#Breaking changes":"","bug-fixes#Bug fixes":"#9156: Submitter name is duplicated on the Reports Page | Detail View #9212: The “View all” filter of the History section on the Contact Page | Detail View is not working correctly #9226: Telemetry record for task:refresh isn’t resetting the start time #9229: Old action bar should prevent users with multiple facilities assigned from editing the homeplace #9243: CHT Docker Helper for 4.x fails to install the TLS certificate #9264: Contact detail’s telemetry is not recording the contact’s type in default config. #9265: Contact Details load facilities when user has one home place assigned #9275: The text on the Analytics Filter dropdown does not update #9284: CouchDb restart causes all services to go down #9298: CouchDb error on indexing telemetry documents","contributors#Contributors":"Thanks to all who committed changes for this release!\nGareth Bowen Mokhtar Jennifer Q Ben Kiarie Tatiana Lépiz Soto Joshua Kuestersteffen Jonathan Diana Barsan ChinHairSaintClair Lore mrjones Sugat Bajracharya","details#Details":"","details-1#Details":"The list of places will be shown alphabetically The first place in the list will be selected by default Only one place can be selected at a time (it’s not a multi-select) The label / heading for the list of places in the filter sidebar is the name_key of the place contact type as set in app_settings This filter is shown for all users who have access to aggregate targets and are configured with multiple places, you don’t need to do anything to enable it (and there is no way to disable it)","features#Features":"#9194: API Endpoint for getting place by UUID #9227: Include xpath function for validation of Luhn identifiers","form-validation-for-luhn-identifiers#Form validation for Luhn identifiers":"Luhn numbers are used in a range of identification schemes and include a check digit to allow validation so they can be checked for common mistakes like typos. Including this in xpath means this can be checked while the form is being filled out to detect mistakes before the form is completed. More information is available in the xpath documentation.\n#9227: Include xpath function for validation of Luhn identifiers","highlights#Highlights":"","improvements#Improvements":"#8461: Client side error log under contacts #9231: Allow users to view aggregate targets and filter by facility_id and reporting period","known-issues#Known issues":"","performance-improvements#Performance improvements":"None.","security-fixes#Security fixes":"None.","technical-improvements#Technical improvements":"#8699: Clean and organize e2e tests: folder /contacts #9081: Add environment shared library #9106: Investigate moving common dependencies to root to make updates easier #9172: Add linting to ensure translations are complete and correct for supported languages #9191: Upgrade from latest release test fails for patch releases #9218: Upgrade e2e tests fails on minor releases #9257: Organize the upgrade test suite #9302: Consolidate angular dependencies #9315: Validation test is failing silently #9320: Update dependabot configuration for dependencies at root level","uiux-changes#UI/UX changes":"","upgrade-notes#Upgrade notes":""},"title":"4.10.0"},"/releases/4_11_0/":{"data":{"":"Known issues Check the repository for the latest known issues.\nUpgrade notes Breaking changes None.\nUI/UX changes None.\nHighlights The CHT-Datasource API now supports querying persons The CHT datasource API has been expanded to allow querying places and persons by contact type.\nDetails See more details in the API docs.\nPhone numbers are not required to be checked for duplicates Phone number fields can now be used without automatically checking for duplicates. This can be useful for workflows where users may share a phone or for any workflow where having duplicate phones is possible, and it’s undesirable to check for duplicates.\nDuplicate checking is still available if desired.","and-more#And more\u0026hellip;":"","breaking-changes#Breaking changes":"","bug-fixes#Bug fixes":"#8225: Cannot use db-object-widget to load contact data in non-relevant inputs group #8947: Outbound push cron config error #9294: No feedback document recorded on PouchDb crash #9341: Strip invisible characters from the fields bsYear, bsMonth, bsDay #9429: Only 50 reports are passed to the contact summary which is passed to enketo #9433: REST Endpoint /api/v1/users/{{username}} throwing Server error when updating contact","contributors#Contributors":"Thanks to all who committed changes for this release!\nGareth Bowen Tatiana Lépiz Soto Diana Barsan Sugat Bajracharya Henok Joshua Kuestersteffen Alassane Ndoye Lore witash njuguna-n","details#Details":"","details-1#Details":"Previously, the phone widget was configured in an xlsxform field by setting type: tel. By default, the phone widget both validates the phone number value and checks for existing contacts that have the same number. With these new changes, the existing (now deprecated) functionality stays the same, but going forward, phone number fields should be configured in an xlsxform by setting type: string with appearance: number tel. Fields with this new configuration will always validate the phone number value, but by default they will not check for existing contacts with the same number. To enforce a unique phone number with the new style of field, you should add a new column with instance::cht:unique_tel: true.","features#Features":"#9241: Create API endpoint for getting people #9269: Expose the user’s target documents into the contact summary","highlights#Highlights":"","improvements#Improvements":"#6390: Allow for phone number validation but also allow for duplicate phone numbers #8551: Convert Python Invoke code in the cht-deploy to its JS/TS equivalent #9389: Update api/v1/person endpoint to not use camel-case personType query parameter #9413: Deprecated mutation event","known-issues#Known issues":"","performance-improvements#Performance improvements":"None.","phone-numbers-are-not-required-to-be-checked-for-duplicates#Phone numbers are not required to be checked for duplicates":"","security-fixes#Security fixes":"None.","technical-improvements#Technical improvements":"#8604: Catch missing values file in k3d script #8605: Show URL when done running k3d script #8608: add a “get all logs” script for k3d deployments #9097: K3D suites are failing for external contributors #9328: Generated docs are published when building dev branches","the-cht-datasource-api-now-supports-querying-persons#The CHT-Datasource API now supports querying persons":"","the-logged-in-users-contact-summary-contains-more-target-documents#The logged in users contact summary contains more target documents":"The contact-summary function now receives the last three target documents of the contact, available through the CHT API. Additionally, the logged in user’s target documents are passed to the contact-summary function when generating the contact summary of one of the logged in user’s facilities. More details in the contact page docs","uiux-changes#UI/UX changes":"","upgrade-notes#Upgrade notes":""},"title":"4.11.0"},"/releases/4_12_0/":{"data":{"":"","added-storage-metrics-to-monitoring-api#Added storage metrics to monitoring api":"To help better track and understand data usage in the CHT, additional metrics were added to the monitoring api. The api now reports the following size values for each of the tracked databases and their view indexes:\nactive - The size in bytes of live data inside the database/view. file - The size in bytes of the database/view as stored on disk. In addition, the fragmentation metric value reported for each database will now factor in the disk usage of all the view indexes for that database. This means that the fragmentation value will more accurately represent the total fragmentation of the data in that database.\nSupport for tracking these new metrics has been added to CHT Watchdog as of the 1.16.0 release.","and-more#And more\u0026hellip;":"","breaking-changes#Breaking changes":"None.","bug-fixes#Bug fixes":"#8664: Expression changed after it was checked Error in Reports component","contributors#Contributors":"Thanks to all who committed changes for this release!\nAndra Blaj Joshua Kuestersteffen Gareth Bowen Diana Barsan Rafa Yuvraj Rimal Ben Kiarie Sugat Bajracharya Tatiana Lépiz Soto ChinHairSaintClair njuguna-n mrjones Lore Jennifer Q","features#Features":"#9193: API Endpoints for getting contacts by type #9242: Create API endpoint for getting places with types","highlights#Highlights":"","improvements#Improvements":"#9028: Complete Nepali translation #9291: Float button menu form icons vertical alignment #9327: Update Navigation to follow Material Design standards #9384: French translations translated incorrectly #9426: Prevent creating contacts under facilities that are not the direct parent #9428: Add additional storage data to monitoring API #9484: Improve apdex readme and sample settings file","known-issues#Known issues":"Check the repository for the latest known issues.","navigation-updates#Navigation Updates":"Navigation has been updated to more closely align with Material Design standards. This is the final planned step in the evolution of the CHT user interface that has been happening since 3.17.0.\nIn Desktop, the Navigation bar and menu option have moved to the left side of the screen. In Mobile, the Navigation bar has moved to the bottom of the screen and the menu option has moved to the left.\nLike we’ve done for several previous stages of the UI evolution, it is possible to temporarily “opt out” of the new UI via a permission. The Navigation changes can be disabled by giving users the can_view_old_navigation permission. This capability/permission will be removed in a future release.\nUsers with the can_view_old_navigation permission will see the previous version of the UI as illustrated below.","performance-improvements#Performance improvements":"None.","removal-of-opt-out-for-filter-search-and-old-action-bar#Removal of opt out for Filter, Search, and Old Action Bar":"To make way for the updated Navigation, it was necessary to remove the previous opt out capabilities. These two permissions are no longer recognized by the CHT.\ncan_view_old_filter_and_search (introduced in 3.17.0) can_view_old_action_bar (introduced in 4.2.0) While it’s not necessary to remove these permissions from your Roles, they will no longer be recognized by the CHT and users will automatically see the updates they relate to.","security-fixes#Security fixes":"None.","technical-improvements#Technical improvements":"#8181: Remove old design that was replaced by Material design #8704: Clean up and organize e2e tests: folder /reports #8909: Run e2e tests over k8s architecture instead of Docker Compose #9169: Running couch-start script fails with rate limiting error #9234: Add Nepali translation to the lint #9383: Clean up dependencies in /scripts #9391: Workflows repeatedly fail in e2e tests for muting and unmuting #9395: build-dev fails locally with a missing webpack error #9397: Prototype for Documenting UI State - Contacts Page | List View (Access) #9398: Streamline /config dependencies #9401: Create a Apdex settings file to test form flows #9406: Update default configurations to disable unsupported languages #9443: Add e2e test coverage to tasks for offline user #9446: GitHub Actions error: tests-haproxy-1 address already in use #9476: Remove “version” from compose files #9483: Add apdex score calculation to CHT-Core #9485: Move curl TLS certs outside nginx container","uiux-changes#UI/UX changes":"This release includes changes to the user interface which will improve the learnability of the CHT by aligning with the look and feel of other android apps. Below is a summary of the changes, all of which were covered in the July Round-up Call:\nUpdate to the overall CHT app Navigation experience Added the ability to temporarily opt out of the new Navigation experience Removal of opt out capabilities for Old Filter and Search Removal of opt out capabilities for Old Action Bar","upgrade-notes#Upgrade notes":""},"title":"4.12.0"},"/releases/4_13_0/":{"data":{"":"","and-more#And more\u0026hellip;":"","breaking-changes#Breaking changes":"None.","bug-fixes#Bug fixes":"#9292: Long content in Training cards hides scroll and next #9490: Can’t edit report on desktop with new UI","contributors#Contributors":"Thanks to all who committed changes for this release!\nJennifer Q Henok Dave H Aniekan Eshiet Mokhtar Diana Barsan Tatiana Lépiz Soto Ben Kiarie Gareth Bowen","features#Features":"#9431: Improve accuracy of target document after interval turnover","highlights#Highlights":"","improvements#Improvements":"#8119: Show confirmation message in training cards when navigating to another page #9354: Add password reveal to change password form #9488: Show training cards once per day","known-issues#Known issues":"Check the repository for the latest known issues.","performance-improvements#Performance improvements":"#9432: Merge ensureTaskFreshness and ensureTargetFreshness into single event","security-fixes#Security fixes":"None.","targets-accuracy-improvements#Targets accuracy improvements":"The calculation and aggregation of targets and recalculation of tasks have been refactored from only being triggered when visiting certain pages to being calculated automatically when the state changes or documents are updated. Previously, target calculations could be incomplete or inaccurate when users switched devices or didn’t regularly open certain pages to trigger the calculation. This change ensures that all user activities are properly counted in their respective monthly periods.","technical-improvements#Technical improvements":"#8196: Add automation test coverage to training cards #9526: Upgrade Angular to latest","training-card-confirmation-modal#Training card confirmation modal":"A confirmation message is now shown when a user quits the training cards before the training is finished.","uiux-changes#UI/UX changes":"#8119: Show confirmation message in training cards when navigating to another page","upgrade-notes#Upgrade notes":""},"title":"4.13.0"},"/releases/4_14_0/":{"data":{"":"","and-more#And more\u0026hellip;":"","breaking-changes#Breaking changes":"None.","bug-fixes#Bug fixes":"#9467: RapidPro API changes result in mishandling of errors #9514: Sidebar menu does not close if clicking on the current page link #9604: SMS “integer” validation always returns false","contributors#Contributors":"Thanks to all who committed changes for this release!\nJennifer Q Tatiana Lépiz Soto Diana Barsan Ben Kiarie Gareth Bowen Mokhtar Rafa Joshua Kuestersteffen GallyTi","enhanced-sidebar-functionality#Enhanced Sidebar Functionality":"The sidebar menu now keeps the current page link selected without closing automatically, improving navigation flow and user experience #9514.","highlights#Highlights":"","improved-contact-management#Improved Contact Management":"Contact creation is now restricted to direct parent facilities only, reducing errors in contact hierarchy #9426.","improvements#Improvements":"#9426: Prevent creating contacts under facilities that are not the direct parent","known-issues#Known issues":"Check the repository for the latest known issues.","refined-menu-layout#Refined Menu Layout":"Button and label placements in the sidebar have been optimized, making navigation more accessible and visually aligned #9481.","technical-improvements#Technical improvements":"#9416: Replace pupil for rule evaluation #9443: Add e2e test coverage to tasks for offline user #9481: Improve Sidebar Menu’s button and label placement #9516: E2E - Show confirmation message in training cards when navigating to another page #9582: Update cht-datasource bind in webapp so it returns a wrapper function instead of a Promise","uiux-changes#UI/UX changes":"#9514: Sidebar menu does not close if clicking on the current page link #9481: Improve Sidebar Menu’s button and label placement","upgrade-notes#Upgrade notes":""},"title":"4.14.0"},"/releases/4_15_0/":{"data":{"":"","and-more#And more\u0026hellip;":"","breaking-changes#Breaking changes":"None.","bug-fixes#Bug fixes":"#7375: Race condition in service worker update #8573: Install button doesn’t appear after staging an upgrade sometimes #9286: Starting an upgrade that involves view indexing can cause CouchDB to crash #9612: Tasks can be completed after resolution #9617: Starting an upgrade that involves view indexing can become stuck after indexing is finished #9618: Broken form.xml attachment can prevent api server from starting","contributors#Contributors":"Thanks to all who committed changes for this release!\nDiana Barsan Gareth Bowen Mokhtar mrjones Rafa Joshua Kuestersteffen Tatiana Lépiz Soto Jennifer Q","features#Features":"#8806: Multiple validation functions in rule doesn’t work #9489: Add telemetry for offline freetext searching #9598: Add training material page","highlights#Highlights":"","improvements#Improvements":"#8216: Propagate request uuid from API to audit logging layer #8402: Add support to check if either of multiple forms is submitted for a patient. #9551: Revisit rules-engine telemetry entries after recalculation triggers rework","known-issues#Known issues":"Check the repository for the latest known issues.","performance-improvements#Performance improvements":"None.","security-fixes#Security fixes":"None.","technical-improvements#Technical improvements":"#8781: Upgrade to docker compose v2 #9543: Flaky e2e test: incorrect-locale has been failing constantly in “after each” hook #9594: Add remaining e2e test to tasks for offline user #9614: Bump helm charts default version in cht-deploy #9622: Flaky e2e test search matches telemetry #9624: default-docs build cache not cleared when running build-dev #9636: Update to Node 22","training-page#Training Page":"After deploying the training cards feature to introduce a new workflow to over 10,000 CHPs, we received feedback that users need a way to easily revisit their training content. Care Teams is working on a new Training Materials page which will be found in the auxiliary menu of the CHT.\nIt will display a list of training content that have been assigned to each user, with an indication to show which have been completed, that users can access repeatedly if necessary.","uiux-changes#UI/UX changes":"None.","upgrade-notes#Upgrade notes":""},"title":"4.15.0"},"/releases/4_16_0/":{"data":{"":"","and-more#And more\u0026hellip;":"","arabic-as-cht-language#Arabic as CHT language":"The CHT is soon expanding its reach through adding support for Right-To-Left written languages. As part of the initial effort on this path, version 4.16.0 adds Arabic translations for Webapp, while the required UI changes for complete RTL support are to be added in a future version.","breaking-changes#Breaking changes":"None.","bug-fixes#Bug fixes":"#8626: Contact summary page doesn’t support svg icons #9213: Admin app allows navigating back after logout #9527: API logs error when privacy policies doc contains no privacy policies #9704: Crash when loading tasks/targets: Cannot read properties of undefined (reading ‘_rev’) #9714: Targets report 0/0 for some users after interval turnover #9715: Error when loading arabic language","contributors#Contributors":"Thanks to all who committed changes for this release!\nFred Joshua Kuestersteffen Diana Barsan Jennifer Q Tatiana Lépiz Soto Andra Blaj Lore mrjones Kenn Sippell","highlights#Highlights":"","improvements#Improvements":"#9303: Upgrade to CouchDb 3.4.x","known-issues#Known issues":"Check the repository for the latest known issues.","performance-improvements#Performance improvements":"#9642: Bump changes_doc_ids_optimization_threshold for Couch 3.4","security-fixes#Security fixes":"#8338: Research increasing pbkdf2 iterations","technical-improvements#Technical improvements":"#9471: UI Nav Work Image Replacement - Contact and User Management #9585: k3d tests frequently timeout #9660: Update e2e sync to better handle reload modal #9683: Add Arabic translations #9686: Validate CHT Version on Docker Helper #9695: Users API e2e test tries to run wdio commands","uiux-changes#UI/UX changes":"None.","upgrade-notes#Upgrade notes":"","upgrading-to-couchdb-342#Upgrading to CouchDb 3.4.2":"CouchDb 3.4.2 comes bundled by default with CHT Core 4.16.0 and includes a multitude of improvements, such as:\nAdds Nouveau, an implementation of Lucene, which will be used in the near future for improved freetext searching Improved security by adding a new, more secure and more performant password hashing algorithm An alternative JavaScript view engine, which has improved performance when indexing views. The CHT is not yet ready for switching to this engine, as the two engines are not fully compatible, but will be in a future release. The upgrade to the new version of CouchDb should be seamless and covered by the generic CHT Core upgrade, without additional intervention."},"title":"4.16.0"},"/releases/4_17_0/":{"data":{"":"","and-more#And more\u0026hellip;":"","breaking-changes#Breaking changes":"None.","bug-fixes#Bug fixes":"#9732: Navigation Issue on Privacy Policy Page When Bottom Back Button is Clicked First #9747: Misconfigurations in outbound push config result in unexpected behavior.","change-password-on-first-login#Change password on first login":"System admin users create accounts for CHWs and then share the password with them. To enhance the security of these accounts, the CHT now supports a feature that prompts users to change their password upon their first login.","contributors#Contributors":"Thanks to all who committed changes for this release!\nDiana Barsan paulpascal Ben Kiarie witash Andra Blaj","details#Details":"By default, new users and users whose passwords have been manually reset by an admin must change their password on their next login. This requirement can be bypassed for specific user roles using the can_skip_password_change permission. If the permission is enabled for a user, they will not be required to change their password. If the permission is not enabled, the user must change their password before accessing the app. Subsequent logins won’t require a password change unless the admin manually updates the user’s password. In this case, the user will be prompted to change their password on their next login. If the user cannot change the password for any reason, they will be unable to access the app. If a user logs in for the first time, but closes the app before changing their password, they will be prompted again to change their password the next time they open the app.","features#Features":"#9547: Change password on first login","highlights#Highlights":"","improvements#Improvements":"None.","known-issues#Known issues":"Check the repository for the latest known issues.","performance-improvements#Performance improvements":"None.","security-fixes#Security fixes":"None","technical-improvements#Technical improvements":"#6250: Replace deprecated “request-promise-native” dependency","uiux-changes#UI/UX changes":"The login experience now includes a password reset page for users who are required to change their password upon first login. This page ensures that new users and users whose passwords have been manually updated by an admin are prompted to update their credentials before accessing the app.\nSee the workflow documentation for more details.","upgrade-notes#Upgrade notes":""},"title":"4.17.0"},"/releases/4_18_0/":{"data":{"":"","and-more#And more\u0026hellip;":"","breaking-changes#Breaking changes":"None.","bug-fixes#Bug fixes":"#9842: Use latest bikram-sambat release","contributors#Contributors":"Thanks to all who committed changes for this release!\nJoshua Kuestersteffen Diana Barsan Sugat Bajracharya Binod Adhikary witash","features#Features":"#8034: Add config to allow replicating primary contacts for places at max depth #9799: Allow configuring headers in outbound push","highlights#Highlights":"","improvements#Improvements":"#9586: Implement freetext search in cht-datasource","known-issues#Known issues":"Check the repository for the latest known issues.","performance-improvements#Performance improvements":"None.","replicate-primary-contacts-regardless-of-depth#Replicate Primary Contacts Regardless of Depth":"flowchart TB linkStyle default stroke-width:1px,stroke:lightgrey classDef none fill:none,stroke:none super_area[CHW Supervisor Area]:::none super[Supervisor]:::none chw_area[CHW Area]:::none chw[CHW]:::none family_a[Family A]:::none family_b[Family B]:::none super_area --- chw_area \u0026 super chw_area --- chw \u0026 family_a \u0026 family_b Controlling the data accessible to “offline” CHT users is essential. Often, the replication_depth configuration is used to limit how much of the contact hierarchy is visible to a user (and downloaded to their device) by preventing the replication of contacts/reports beyond a specified depth.\nHowever, in some cases this configuration is not sufficient. For example, perhaps a CHW Supervisor needs to have access to the contact data for the CHWs they supervise (including the reports for those contacts), but should not have access to all the households/patients served by those CHWs. A typical hierarchy (as seen here) might have the CHW contact and the family household contacts both at the same depth level as children of the CHW Area. If the supervisor user is configured to have a replication depth of 1, they will not have access to the CHW contact. If the replication depth is set to 2, the supervisor will have access to all the household contacts.\nIn this case, the new replicate_primary_contacts configuration can be used to ensure the primary contacts of the places at the user’s deepest replication depth are also replicated (even if those contacts are technically located deeper in the hierarchy than the configured depth limit). So, with a replication depth of 1 and replicate_primary_contacts set to true, the supervisor user will have access to the CHW contact, but not the household contacts.\n#8034: Add config to allow replicating primary contacts for places at max depth","rest-endpoints-for-getting-contacts-and-reports#REST Endpoints for Getting Contacts and Reports":"New REST endpoints have been added to the CHT API server for retrieving data about contacts and reports. The endpoints support getting the all the data for an identified contact/report. Additionally, an endpoint has been added for getting an array of contact identifiers filtered by contact type and/or a freetext search time. There is also a new endpoint for getting report identifiers filtered by a freetext search term. See the API documentation for more details:\n/api/v1/contact/{{uuid}} /api/v1/contact/uuid /api/v1/report/{{uuid}} /api/v1/report/uuid #9586: Implement freetext search in cht-datasource","right-to-left-language-support#Right to Left Language Support":"Support for Arabic as a CHT language was added in 4.16.0. Now, the CHT can properly display content in a full RTL layout! This greatly improves the usability of the application for native RTL language speakers.\nSee the documentation for more details.\n#9682: Add support for Right to Left languages","security-fixes#Security fixes":"None.","technical-improvements#Technical improvements":"#9653: Refactor shared-libs/validations to call cht-datasource instead of directly querying freetext index #9759: Uplift to Angular 19 #9787: K3d e2e tests fail due to potential changes in k3d APIs #9796: Ignore dependencies in dependabot that cannot auto-update","uiux-changes#UI/UX changes":"#9682: Add support for Right to Left languages","upgrade-notes#Upgrade notes":""},"title":"4.18.0"},"/releases/4_19_0/":{"data":{"":"","add-user-agent-header-to-outgoing-requests#Add user-agent header to outgoing requests":"The CHT now includes the user-agent header in all outgoing requests. This header includes the Operating System and architecture of the server running the CHT, as well as the version of the CHT.","and-more#And more\u0026hellip;":"","breaking-changes#Breaking changes":"None.","bug-fixes#Bug fixes":"#9854: Duplication in outbound push #9905: Not all webapp unit tests are running #9951: Upgrade e2e tests are failing","contributors#Contributors":"Thanks to all who committed changes for this release!\nSugat Bajracharya Joshua Kuestersteffen Andra Blaj Diana Barsan Wang Yuheng ChinHairSaintClair Apoorva Pendse Jonathan SATYAM YADAV Shashank Awasthi Shashi sah Akshat Jangid Karan Kumar Das Lore mrjones","features#Features":"#9601: Prevent duplicate sibling contact capture #9936: Add user-agent header to outgoing requests","highlights#Highlights":"","improvements#Improvements":"#9844: Add support for cht-form for using extension-libs in forms #9915: Replace usage of db-object appearance with select-contact","known-issues#Known issues":"Check the repository for the latest known issues.","prevent-duplicate-sibling-contact-capture#Prevent duplicate sibling contact capture":"Contacts are created/modified via highly configurable contact forms. One major challenge when collecting contact data is ensuring users do not inadvertently enter duplicate records for the same contact. The CHT now supports automatically detecting when a contact being created or edited by a user matches an existing contact record. If a duplicate contact is detected, the user will be given the option of proceeding to the profile of the existing contact. Alternatively, the user can choose to override the duplicate detection logic and continue creating/editing the contact as originally intended.\nSee the documentation for more details.","security-fixes#Security fixes":"#7990: Credentials exposed in logs","technical-improvements#Technical improvements":"#9523: Upgrade WebdriverIO to v9 and get the new features! #9768: Uplift sinon to 19+ #9839: Update moment patch in webapp #9859: Adding new language should add new translations fails repeatedly when run for minimum browser #9871: Remove references of horticulturalist from Admin app #9888: Fix local ddoc versioning so changes to local ddocs are deployed during development #9903: Add release date to scripts so docs have dates #9917: Bulk delete reports - mobile \u0026 desktop view #9918: Report + action bottom bar (more action menu + fab) - mobile \u0026 desktop view","uiux-changes#UI/UX changes":"None.","upgrade-notes#Upgrade notes":""},"title":"4.19.0"},"/releases/4_1_0/":{"data":{"":"","and-more#And more\u0026hellip;":"","breaking-changes#Breaking changes":"None.","bug-fixes#Bug fixes":"#6994: Reports with empty patient_id fields don’t link to contact in the UI","bulk-delete-of-reports-redesign#Bulk delete of reports redesign":"The bulk delete of Reports tab has been redesigned to allow the user to select multiple reports and delete them. You can read more about it in the Reports tab docs.\n#7778: Bulk delete of reports redesign","contributors#Contributors":"Thanks to all who committed changes for this release!\nmrjones elvisdorkenoo Gareth Bowen Diana Barsan Jennifer Q Mokhtar Andra Blaj","features#Features":"None.","highlights#Highlights":"","improvements#Improvements":"#5903: Users in projects have multiple configured roles #7127: Record device id in feedback docs #7472: Correct typo in rapidpro endpoint path #7525: Register feedback doc when forms fail to load #7592: /api/v1/users returned “type” is only the first role, but many users have multiple roles #7595: Fix breatfeeding typo in default config #7703: Ability to replace a CHW user without any connectivity #7900: Reorder hamburger menu so that logout isn’t next to sync","known-issues#Known issues":"Check the repository for the latest known issues.","performance-improvements#Performance improvements":"None.","security-fixes#Security fixes":"None.","support-replacing-a-chw-user-without-any-connectivity#Support replacing a CHW user without any connectivity":"Offline users can now be replaced on a device so that a new user can use that device without needing to immediately sync with the server. You can read more about it in the transitions configuration docs.","technical-improvements#Technical improvements":"#7001: Remove references to “Travis” from code and readmes #7806: Add e2e to verify breadcrumbs in Message tab and Tasks tab #7841: Refactor privacy policy controller to use template service #7862: Use the right palette variables across webapp #7878: Create base for wdio mobile e2e automation and automate bulk delete #7944: Staging URL placeholder replacement uses old builds database","uiux-changes#UI/UX changes":"","upgrade-notes#Upgrade notes":""},"title":"4.1.0"},"/releases/4_1_1/":{"data":{"":"","breaking-changes#Breaking changes":"None.","contributors#Contributors":"Thanks to all who committed changes for this release!\nGareth Bowen Andra Blaj Diana Barsan","features#Features":"#7712: Add moment and datepicker translations for Luganda","known-issues#Known issues":"Check the repository for the latest known issues.","technical-improvements#Technical improvements":"#8110: E2E test failing when next year is leap year #8112: Integration E2E test failing when next year is leap year","uiux-changes#UI/UX changes":"None.","upgrade-notes#Upgrade notes":""},"title":"4.1.1"},"/releases/4_1_2/":{"data":{"":"","breaking-changes#Breaking changes":"None.","bug-fixes#Bug fixes":"#8173: API Changes watcher skips changes - or becomes blocked #8205: Nginx can’t connect to API after container restarts because of dynamic IP allocation","contributors#Contributors":"Thanks to all who committed changes for this release!\nDiana Barsan Gareth Bowen","known-issues#Known issues":"Check the repository for the latest known issues.","uiux-changes#UI/UX changes":"None.","upgrade-notes#Upgrade notes":""},"title":"4.1.2"},"/releases/4_20_0/":{"data":{"":"","and-more#And more\u0026hellip;":"","breaking-changes#Breaking changes":"None.","bug-fixes#Bug fixes":"#9923: CouchDb fails to start when system does not allow setting ulimit #9968: CHT running in Docker Helper doesn’t upgrade CouchDB","contributors#Contributors":"Thanks to all who committed changes for this release!\nBernard K ChinHairSaintClair Dhruv Pathak Diana Barsan Emmanuel Ferdman Jackie Moraa Joshua Kuestersteffen Kanishk Singh Shashi sah mrjones rmayore","features#Features":"#9735: Single sign on (SSO) using identity provider #9885: Implement metadata audit log","highlights#Highlights":"","improved-audit-log#Improved Audit Log":"The old HAProxy audit log system has been removed in this release and it has been replaced by a much improved database powered audit system. CHT now maintains a complete change history by tracking all document modifications in a dedicated medic-audit database.\nThe CHT docs now have a document auditing page covering all the technical details.","improvements#Improvements":"None.","known-issues#Known issues":"Check the repository for the latest known issues.","performance-improvements#Performance improvements":"None.","security-fixes#Security fixes":"None.","single-sign-on-oidc#Single Sign-On (OIDC)":"Single Sign-On (SSO) enables users connecting to a CHT instance to authenticate with credentials from an external SSO provider instead of needing a CHT-specific username and password. For example, if an organization has issued Microsoft accounts to its users, then the Microsoft Entra ID service could be integrated with the CHT to allow users to log in using their Microsoft credentials.\nSSO authentication is implemented with the industry standard OpenID Connect (OIDC) protocol. Any OIDC-compliant authentication server can be integrated with the CHT.\nSee the documentation for more details on configuration and functionality.\n#9735: Single sign on (SSO) using identity provider","storage-pressure-indicator#Storage Pressure Indicator":"The performance and functionality of the CHT app on an offline user’s device can be significantly affected when there is not sufficient free disk space. The storage pressure indicator in the menu drawer shows users, at a glance, how much free disk space they have left.\n#9872: Provide offline user device storage info at a glance","technical-improvements#Technical improvements":"#9534: Upgrade to latest version of PouchDB (current adapter) #9873: Remove body logging from Haproxy #9920: Report filter - mobile \u0026 desktop view #9926: Target overview #9948: Convert couchdb and haproxy unit tests to javascript #9964: Update release notes script to align header with new docs theme #9971: ci-webdriver-default-core-minimum-browser fails downloading chrome 90","uiux-changes#UI/UX changes":"#9872: Provide offline user device storage info at a glance","upgrade-notes#Upgrade notes":""},"title":"4.20.0"},"/releases/4_20_1/":{"data":{"":"","breaking-changes#Breaking changes":"None.","bug-fixes#Bug fixes":"#10062: Rendering issue in edit user modal for SSO user","contributors#Contributors":"Thanks to all who committed changes for this release!\nJoshua Kuestersteffen Bernard K","known-issues#Known issues":"Check the repository for the latest known issues.","technical-improvements#Technical improvements":"None.","uiux-changes#UI/UX changes":"None.","upgrade-notes#Upgrade notes":""},"title":"4.20.1"},"/releases/4_21_0/":{"data":{"":"","accessing-the-logged-in-users-contact-summary-in-app-forms-and-app-forms-permissions#Accessing the logged-in user\u0026rsquo;s contact summary in app forms and app forms permissions":"Workflows becoming more complex require additional context data to be correct and accurate. To bridge a gap in context data, the logged-in user’s contact summary is now available in app forms and app forms properties. This allows hiding/displaying forms depending on the current user’s context and allows data about the logged-in user to be used in form calculations.\nSee the form inputs documentation and the form properties documentation for more details on configuration and functionality.","and-more#And more\u0026hellip;":"","breaking-changes#Breaking changes":"None.","bug-fixes#Bug fixes":"#10068: CHT SMS message sent via Africa’s Talking stuck in “pending” state #9825: Receiving new report for child contact does not refresh contact detail page","contributors#Contributors":"Thanks to all who committed changes for this release!\nLore Diana Barsan Sugat Bajracharya ChinHairSaintClair Joshua Kuestersteffen Samuel Okwalinga Edwin Rugoogamu iesmail-znz Mukewa Wekalao kalamakitsao","features#Features":"#9301: Expose user’s contact summary when filling out forms #9957: Implement task sorting by priority #9974: Support opening contact edit form from task","highlights#Highlights":"","known-issues#Known issues":"Check the repository for the latest known issues.","sorting-tasks-by-priority-and-then-due-date#Sorting tasks by priority and then due date":"When many tasks are due or overdue, it’s overwhelming or almost impossible for CHWs to effectively evaluate which tasks are most urgent. 4.21.0 introduces a new default way of sorting tasks in the frontend, based on the task priority score, with the tasks with the highest priority appearing at the top of the list. The priority score is a number calculated based on task configuration. If the project configuration does not implement the new priority scoring, the task sorting will remain unchanged, with tasks being sorted by their due date.\nSee the documentation for more details on configuration and functionality.","support-opening-contact-edit-form-from-task#Support opening contact edit form from task":"Task actions with type: 'contact' can now be configured to redirect the user to the contact form to edit a contact, while this feature previously only allowed redirecting to a contact form to create a contact.\nSee the documentation for more details on configuration and functionality.","technical-improvements#Technical improvements":"#10013: CI fails due to Docker Compose error followed by undici fetch errors #10027: Upgrade CouchDB to version 3.5.0 #10033: Flaky integration test: auditing should add entry on PUT #10050: Flaky e2e test: should add a task when CHW completes a task successfully, and that task creates another task #9998: Flaky e2e test: Should add a task when CHW completes a task successfully, and that task creates another task","uiux-changes#UI/UX changes":"#9957: Implement task sorting by priority","upgrade-notes#Upgrade notes":""},"title":"4.21.0"},"/releases/4_21_1/":{"data":{"":"","breaking-changes#Breaking changes":"None.","bug-fixes#Bug fixes":"#10062: Rendering issue in edit user modal for SSO user","contributors#Contributors":"Thanks to all who committed changes for this release!\nJoshua Kuestersteffen Bernard K","known-issues#Known issues":"Check the repository for the latest known issues.","technical-improvements#Technical improvements":"None.","uiux-changes#UI/UX changes":"None.","upgrade-notes#Upgrade notes":""},"title":"4.21.1"},"/releases/4_2_0/":{"data":{"":"","and-more#And more\u0026hellip;":"","breaking-changes#Breaking changes":"None.","bug-fixes#Bug fixes":"#7425: Schedules don’t have a default value for start_from #7602: Race condition in db-object-widget #7603: Race condition in unloading contact content #7642: Successful users-info request reported as errored #7892: Enketo selected option highlight color changes incorrectly on drag #7910: Confirmation prompt for “Cancel” button in forms #7925: Bikram Sambat date should be validated when users are editing a report and enter an invalid date #7949: Nginx Environment Variables not passed along #7953: 4.x: Version deployed still visible in App Management release list #7957: Sentinel erroneously reporting target for outbound push has expired TLS cert #7976: Unhandled rejection when favicon not found #7986: Container names issue for clustered couchdb setup when running across different nodes #8040: API Crashes on malformed translation docs #8154: Race condition during sentinel startup #8144: Secondary risk factors are not returned if primary risk factors are present in getRiskFactorsFromPregnancy #8130: Haproxy stops routing during stress test #225: Ability to run Tasks.js and Targets.js code without Nools #8205: Nginx can’t connect to API after container restarts because of dynamic IP allocation #8213: Contact and Messages Tab: footer button scrolls with content, not staying pinned #8166: Haproxy crashes instance during scalability test due to high memory usage #8173: API Changes watcher skips changes - or becomes blocked","contributors#Contributors":"Thanks to all who committed changes for this release!\nSamuel I. Gareth Bowen mrjones Diana Barsan Tatiana Lépiz Marc Abbyad Jennifer Q Joshua Kuestersteffen Yuvraj Rimal Bede Ngaruko Mokhtar Andra Blaj Lore Kenn Sippell","extension-libraries#Extension libraries":"The extension libraries are blocks of code that are cached with the CHT web application giving app developers a powerful tool to extend the CHT. An example of a use for this feature is to provide a function to calculate a risk score based on a machine learning model. The function can then be called passing in values from app forms and return the result to be stored with the report.\nRead more about this feature in the extension libraries docs\n#7824: Provide a general integration point of arbitrary JS in forms via config","features#Features":"#6598: In app “What’s new” training cards #7824: Provide a general integration point of arbitrary JS in forms via config","floating-action-button#Floating Action Button":"The additive actions (creating reports, places, people, etc…) have moved from the bottom action bar to a Floating Action Button that opens a menu with all actions. This change aligns the CHT more closely with Android UX and material design patterns, and applies to the Messages, Reports, and Contacts tab.\nNOTE: The bottom action bar can be temporarily re-enabled for specific users by granting them the can_view_old_action_bar permission; however, it will be completely removed in a future release. See the Feature Flags documentation for more information.\n#7998: Move additive actions from Action Bar to Floating Action Button","highlights#Highlights":"","improvements#Improvements":"#7753: Allow supervisors to create health workers #7998: Move additive actions from Action Bar to Floating Action Button #7872: Move non-additive actions from Action Bar to “More Options” menu “⋮” #7902: Incorrect image tag on release #7926: Show a more useful error message when decrypting using a different secret #7947: Improve wording of the warning when upgrading #7964: Use _all_docs to get forms documents in API #8009: Display version and build number separately in the admin upgrade page #8093: Prevent data loss through re-sync when restoring data from backup #8136: Add timestamp information in feedback document log events #8210: Change extension libs API so libs are modules not functions #6281: Allow app builders to specify disabled languages in config #8134: Refactor initial replication to not use PouchDb replicate","initial-replication-improvements#Initial replication improvements":"After refactoring the initial replication mechanism, which is the process of synchronizing data for the first time between the user’s device and the app’s server, it is now at least 8 times faster than before. Look at this performance comparison table:\nNo. concurrent users Before (median) After (median) 1 251s 18s 10 86s 11s 100 25m 2.5m #8134: Refactor initial replication to not use PouchDb replicate","known-issues#Known issues":"Check the repository for the latest known issues.","more-options-menu#More Options menu":"The Export, Edit, and Delete actions have moved from the bottom action bar to a new More Option (⋮) menu located on the top right side of the screen. This change aligns the CHT more closely with Android UX and material design patterns, and applies to the Messages, Reports, and Contacts tab.\nNOTE: The bottom action bar can be temporarily re-enabled for specific users by granting them the can_view_old_action_bar permission; however, it will be completely removed in a future release. See the Feature Flags documentation for more information.\n#7872: Move non-additive actions from Action Bar to “More Options” menu","performance-improvements#Performance improvements":"None.","security-fixes#Security fixes":"None.","support-automatically-creating-users-when-contact-is-added#Support automatically creating users when contact is added":"When configured, users will automatically be created when certain types of person contacts are added. No intervention from a system administrator is required in this process.\nFor example, a supervisor could onboard a new CHW just by creating a new person contact for them with a “create contact” form. The new user for the CHW will automatically be created and the CHW will receive an SMS message containing the token login link. This link will allow them to login as the newly created user.\nYou can read more about it in the transitions configuration docs!\n#7753: Allow supervisors to create health workers","technical-improvements#Technical improvements":"#7372: Update mocha to latest #7901: Upgrade test fails release #7905: GH Actions deprecation warning #7952: Change ECR repo alias to medic #7962: Change CouchDb service names to match all hostname specs #7966: Flaky e2e test Submit Default Delivery Report #7980: create_user_for_contacts unit test flakes #7992: Upgrade webapp’s angular to v15.x.x #8060: Update WDIO to latest #8062: Fix e2e test: Should verify that all tasks related with the high risk pregnancy were created #8067: CouchDB entry point always saves couch_httpd_auth and couchdb to cluster-credentials.ini #8076: Update haproxy #8077: Add wdio retries #8103: Protractor test failures are not retried and failed retries clear results from previous failure #8151: E2E builds fail for external contributors because of allure history jobs #8099: Enable easy integration with certbot and nginx container #8024: Update scalability suite to work with 4.x","training-cards#Training Cards":"A new feature was added to help health workers learn about changes to their CHT app remotely, directly in their app. Training Card content might include information about a newly deployed feature, changes to a care guide, or simply a reminder about an underused feature or workflow. You can read more about it in the Training Cards documentation and find some template content in the resources section on the documentation site to help you get started with Training Cards.\n#6598: In app “What’s new” training cards","uiux-changes#UI/UX changes":"","upgrade-notes#Upgrade notes":""},"title":"4.2.0"},"/releases/4_2_1/":{"data":{"":"","breaking-changes#Breaking changes":"None.","contributors#Contributors":"Thanks to all who committed changes for this release!\nDiana Barsan Jennifer Q Gareth Bowen","improvements#Improvements":"#8214: Align nginx and ALB timeout values","known-issues#Known issues":"Check the repository for the latest known issues.","uiux-changes#UI/UX changes":"None.","upgrade-notes#Upgrade notes":""},"title":"4.2.1"},"/releases/4_2_2/":{"data":{"":"","breaking-changes#Breaking changes":"None.","bug-fixes#Bug fixes":"#8161: Telemetry doc metadata.versions.app is unknown for all telemetry docs #8359: Infinite scrolling not working on Contacts tab","contributors#Contributors":"Thanks to all who committed changes for this release!\nDiana Barsan Jennifer Q Gareth Bowen","known-issues#Known issues":"Check the repository for the latest known issues.","uiux-changes#UI/UX changes":"None.","upgrade-notes#Upgrade notes":""},"title":"4.2.2"},"/releases/4_2_3/":{"data":{"":"","breaking-changes#Breaking changes":"None.","bug-fixes#Bug fixes":"#8539: Sentinel stuck in infinite loop when 100 sequential deletions fail to generate tombstones","contributors#Contributors":"Thanks to all who committed changes for this release!\nDiana Barsan Jennifer Q Gareth Bowen","known-issues#Known issues":"Check the repository for the latest known issues.","technical-improvements#Technical improvements":"#8558: Skip Protractor e2e tests suites on old supported branches","uiux-changes#UI/UX changes":"None.","upgrade-notes#Upgrade notes":""},"title":"4.2.3"},"/releases/4_2_4/":{"data":{"":"","breaking-changes#Breaking changes":"None.","bug-fixes#Bug fixes":"#7670: Same patient id assigned to multiple patients in a same instance #8576: Low performance in Reports tab for users with thousands of places","known-issues#Known issues":"Check the repository for the latest known issues.","uiux-changes#UI/UX changes":"None.","upgrade-notes#Upgrade notes":""},"title":"4.2.4"},"/releases/4_3_0/":{"data":{"":"","adding-phone-numbers-to-patients-when-registering-via-sms#Adding phone numbers to patients when registering via SMS":"The registration transition now supports storing a phone number field for new patients. This is achieved through an additional field in the SMS form, which can be configured to be parsed and validated as a correct and, optionally unique, phone number. You can read more about it in the registration configuration","and-more#And more\u0026hellip;":"","breaking-changes#Breaking changes":"None.","bug-fixes#Bug fixes":"#6963: Mark for outbound might create tasks for already sent jobs #7250: Race condition in loading contacts can cause previously selected contact to load #7356: Online user stuck in loading screen when offline #7363: Crash in Tasks/Targets system not creating feedback documents #7651: Tasks content page sometimes throws ExpressionChangedAfterItHasBeenCheckedError #8022: Angular’s ExpressionChangedAfterItHasBeenCheckedError exception in Reports and Contacts tabs #8160: Duplicate outbound requests are sent when a document matches multiple config options #8242: Hovering over dates throws error, and default tooltip is displayed #8355: Fix reports review title in modal #8371: Upgrade cannot be initiated when there are no past upgrade_log entries #8385: Show password icon not cached by service-worker #8396: Next page not loading properly after clicking on the back button #8401: Clicking on report case_id does not apply search filter #8457: API fails to start because of large form attachments exceed POST allowed payload #8463: Offline users stuck on spinner on load until certain views are indexed","contributors#Contributors":"Thanks to all who committed changes for this release!\nKenn Sippell Jennifer Q Diana Barsan Tatiana Lépiz Bede Ngaruko Gareth Bowen Lore mrjones Njuguna Ndung’u Michael Kohn Joshua Kuestersteffen Binod Adhikary Jonathan Yuvraj Rimal Prajwol Shrestha Henok","features#Features":"#8204: Support adding phone number when registering patients via SMS #8311: Show password when clicking on the eye icon #8328: Show reports of online user’s associated place and below #8426: Expose an API with endpoint performance metrics","highlights#Highlights":"","improvements#Improvements":"#7163: Make the CHT Script API available for Purge.js #8039: Allow users to report client-side crashes via screenshots #8162: Monitoring sentinel when “Transitions are disabled” is difficult #8185: Remove Guided Tour and Welcome message #8280: Set default CouchDb log level to info or debug #8389: Improve Nepali translation #8416: Include formatted date in API morgan logging #8447: Support Nepali digits in Medic ID and LMP Date","known-issues#Known issues":"Check the repository for the latest known issues.","new-prometheus-api-endpoint#New Prometheus API endpoint":"A new API endpoint now allows exporting API request performance. The output is formatted for the Prometheus Data Model. The endpoint is available without requiring authentication and is used by CHT-Watchdog. More details are available in API reference docs.","performance-improvement-for-downwards-replication#Performance improvement for downwards replication":"Downwards replication has been completely rewritten to improve performance, reduce complexity, remove the necessity of deleted documents tombstones and progress towards supporting eventual consistency, in order to allow for the CHT to work seamlessly with CouchDb high availability setups (multiple replicas). There are no UI/UX changes associated with this update, however users will need to reload the app after the upgrade was successful and they receive the notification popup, in order to resume replication using the new algorithm. The endpoints that the previous replication algorithm was using have been updated or disabled.\nLook at this performance comparison table:\n# docs # purged docs # docs on device # downloaded docs Before(avg) After(avg) Difference 11000 0 11000 0 1.4s 2.1s 0.6 37000 0 37000 0 5s 8s 0.6 58000 0 58000 0 12s 10s 1.2 58000 25000 33000 0 10s 11s 0.8 58000 25000 33000 500 39s 14s 2.7 58000 43000 15000 0 10s 11s 0.8 58000 43000 15000 500 34.5s 15.5s 2.2 58000 43000 15000 1000 60s 15.5s 3.7","performance-improvements#Performance improvements":"#8296: Refactor downwards continuous replication following the Nairobi protocol","security-fixes#Security fixes":"#6505: Prevent users from opening and filling forms they’re not authorized to see/fill #8335: Use modern TLS versions","technical-improvements#Technical improvements":"#7017: Use the Node eslint plugin to lint api and sentinel #7796: Clean up gruntfile obsolete tasks #8150: Investigate npm workspaces for monorepo #8184: Update initial replication scalability suite post initial replication rewrite #8190: Remove configuration wizard #8244: Upgrade e2e test fails on betas #8252: Flaky: ci-e2e-integration - token login #8273: Add git pre-commit hooks to stop accidental pushes to master as GitHub admins #8281: Change upgrade e2e test to start upgrade from latest release instead of master #8317: Split up the ci-webdriver-default action #8367: Webapp watch not publishing changes #8404: Flaky test: API changes feed should respond to changes even after services are restarted #8412: Flaky test: Submit a death report Should verify that the counter for the Deaths was updated. #8420: Flaky test: ongoing replication “before all” hook for ongoing replication","uiux-changes#UI/UX changes":"None.","upgrade-notes#Upgrade notes":"Continuous downwards replication (the algorithm through which offline users download docs from the server) has been completely rewritten. This change required a high number of view updates, which implies that staging this upgrade and indexing views before upgrading will be a lengthy process - depending on the size of the database. Additionally, the server might need additional storage while this process is ongoing. Users will receive the usual upgrade popup, and they will need to reload the app in order to resume replication."},"title":"4.3.0"},"/releases/4_3_1/":{"data":{"":"","breaking-changes#Breaking changes":"None.","bug-fixes#Bug fixes":"#8478: Invalid phone for patient still running triggers","contributors#Contributors":"Thanks to all who committed changes for this release!\nPrajwol Shrestha Gareth Bowen Jennifer Q Diana Barsan","known-issues#Known issues":"Check the repository for the latest known issues.","uiux-changes#UI/UX changes":"None.","upgrade-notes#Upgrade notes":""},"title":"4.3.1"},"/releases/4_3_2/":{"data":{"":"","breaking-changes#Breaking changes":"None.","bug-fixes#Bug fixes":"#7670: Same patient id assigned to multiple patients in a same instance #8576: Low performance in Reports tab for users with thousands of places #8589: Users unable to edit the report they created","known-issues#Known issues":"Check the repository for the latest known issues.","uiux-changes#UI/UX changes":"None.","upgrade-notes#Upgrade notes":""},"title":"4.3.2"},"/releases/4_4_0/":{"data":{"":"","430-vs-440-average-synchronization-times#4.3.0 vs 4.4.0 Average Synchronization Times":"","breaking-changes#Breaking changes":"None.","bug-fixes#Bug fixes":"#6180: Any text containing back ticks looks weird in the webapp #8081: Add contact_type and place_id to contacts exported by /api/v2/export/contacts #8243: Can’t turn off permissions for national_admin role in admin app #8490: API crashes when CouchDB is overloaded #8527: Unable to build nginx with symlinks in some environments","cht-dialogs#CHT dialogs.":"CHT dialogs were updated to align with Material guidelines. This includes updating the visual design and text of dialogs to align with best practices.\nAs part of this work, some translation keys changed. We have provided translations for all of the languages officially supported by CHT (English, Spanish, French, Indonesian, Hindi, Nepali, Bambara, Swahili). If you have a custom language and have any of these features, you will need to translate these in your configuration files.\nBulk delete reports dialog\nbulkdelete.confirm.title: used for the modal title when deleting one report [NEW] bulkdelete.confirm.title.plural: used for the modal title when deleting multiple reports. Edit SMS message group dialog\n[NEW] edit_message_group.modal.title: used for the modal title Report a bug dialog\n[NEW] feedback.modal.submit: used for the modal submit button label. Navigation when form not saved dialog\n[NEW] confirm.destructive.navigation.title: used for the modal title [NEW] confirm.destructive.navigation.submit: used for the modal submit button label. Training cards dialog\n[NEW] training_cards.confirm.title: used for the modal title Confirmation when verifying a report dialog\n[NEW] confirm.verification.title: used for the modal title [NEW] confirm.verification.submit: used for the modal submit button label. #8390: Align “dialog” components with Material design guidelines","contributors#Contributors":"Thanks to all who committed changes for this release!\nmrjones Diana Barsan Gareth Bowen Prajwol Shrestha Joshua Kuestersteffen Jennifer Q Daniel Bede Ngaruko Kenn Sippell Tatiana Lépiz","features#Features":"None.","highlights#Highlights":"","improvements#Improvements":"#6514: Migrate from SW-Precache to Workbox #8179: nginx and haproxy should respect Accept headers when responding with error templates #8390: Align “dialog” components with Material design guidelines #8442: Telemetry geolocation:failure events for geolocation should be unique #8498: Remove targets disable admin option #8506: Update browser support notice to match official versions #8511: Update configuration deployment action to use latest cht-conf","known-issues#Known issues":"Check the repository for the latest known issues.","performance-improvements#Performance improvements":"#6289: Upgrade to CouchDB v3 #8238: Figure out a different way to use purged docs cache #8451: Add support for HTTP/2 in nginx","replication-performance-improvement-by-persistent-caching-of-purged-doc-ids#Replication performance improvement by persistent caching of purged doc ids":"CouchDb request performance analysis has revealed that approximately 25% of CPU time was used querying to determine which documents have been purged for users that are replicating. Because purging is an action that runs on a schedule, relatively infrequently due to how performance expensive it is, caching results from these very expensive queries significantly improves server-side performance.\nAs of 4.4.0, the CHT caches the purged doc ids for each user that replicates. The cache is reset when purging runs next time and when user replication settings change. This means that, for every connected user, purged docs are only queried once per purging timeframe, when the user first syncs or replicates.\nThis leads to significant improvements in subsequent replication requests.","security-fixes#Security fixes":"#8443: Masking credentials","technical-improvements#Technical improvements":"#6132: Files containing tests should use the .spec.js extension #8306: Replace grunt with npm scripts #8414: Flaky test: sms-gateway api returns list and updates state #8459: Update nginx to latest #8469: Scalability suite fails because Jmeter version no longer exists #8494: Update lodash #8516: Remove unused /api/auth/ endpoint #8518: Encode parameters being used in credentials url #8522: Flaky test: More Options Menu - Offline User all permissions disabled #8524: Remove sub-scripts from package.json #8533: Ignore unimportant step failures in CI build","uiux-changes#UI/UX changes":"","upgrade-notes#Upgrade notes":"The deprecated hardcoded national_admin role no longer behaves as a CouchDb admin. The role now behaves as an ordinary online user role, with no additional implicit permissions. Configurations using national_admin role can either switch to using a CouchDb admin for admin-only tasks and/or granting more permissions to national_admin.","upgrading-couchdb-to-v332#Upgrading CouchDb to v3.3.2":"CouchDb 3 was released in 2020. It packs security fixes, performance and scalability improvements and a plethora of bug fixes.\nMost notable features are:\nImproved clustering and node management APIs Adding the _reshard endpoint, which allows splitting a shard into two shards. In CouchDb v2, adding additional shards was not possible without creating a new database with the desired number of shards, and replicating existent data to the new database. For the CHT, this meant that all users would need to re-sync if additional shards were added. Adding a new _prometheus endpoint, which exposes CouchDb metrics and can be used out of the box in monitoring visualisation tools, like the CHT Watchdog. Improved security, where database creation and writes/reads are no longer allowed for all users by default. Improved security, where only CouchDb admins are allowed to add/edit/delete users. Dramatically improved multi-core CPU usage, resulting in better performance when running on powerful machines. This results in a 1.5x improvement of request time across the board, with some endpoints being up to 10x faster."},"title":"4.4.0"},"/releases/4_4_1/":{"data":{"":"","breaking-changes#Breaking changes":"None.","bug-fixes#Bug fixes":"#7670: Same patient id assigned to multiple patients in a same instance #8576: Low performance in Reports tab for users with thousands of places #8589: Users unable to edit the report they created","contributors#Contributors":"Thanks to all who committed changes for this release!\nJennifer Q Gareth Bowen Diana Barsan","known-issues#Known issues":"Check the repository for the latest known issues.","uiux-changes#UI/UX changes":"None.","upgrade-notes#Upgrade notes":""},"title":"4.4.1"},"/releases/4_4_2/":{"data":{"":"","breaking-changes#Breaking changes":"None.","bug-fixes#Bug fixes":"#8745: error.loading.form.no_authorized when opening a form from tasks tab because context evaluates to false","contributors#Contributors":"Thanks to all who committed changes for this release!\nDiana Barsan","known-issues#Known issues":"Check the repository for the latest known issues.","uiux-changes#UI/UX changes":"None.","upgrade-notes#Upgrade notes":""},"title":"4.4.2"},"/releases/4_5_0/":{"data":{"":"","breaking-changes#Breaking changes":"None.","bug-fixes#Bug fixes":"#7148: Document update conflict reported in feedback docs #7616: Telemetry records not logged for every day FCHVs are active #7670: Same patient id assigned to multiple patients in a same instance #8089: Caught errors do not generate feedback documents. #8471: Filter section on Reports tab not closing on first tap #8502: Upgrading instance through webapp fails for the first time. #8520: Action button uses wrong font #8541: Options with long names look wrong in enketo selects #8566: Sentinel stuck in infinite loop when 100 sequential docs fail to execute transitions #8589: Users unable to edit the report they created #8669: Enketo labels are not interactable #8686: Fix target UI to match Figma","contributors#Contributors":"Thanks to all who committed changes for this release!\nTatiana Lépiz Jennifer Q sauln Gareth Bowen Joshua Kuestersteffen mrjones njuguna-n Diana Barsan Bede Ngaruko Darío Hereñú Samuel I. Yuvraj Rimal Ben Kiarie Lore","features#Features":"None.","highlights#Highlights":"","improvements#Improvements":"#8229: Send outbound tasks on a schedule #8433: Add Enketo telemetry events for contact forms #8513: Align “Target” components with Material design guidelines #8633: Allow schedule to start with multiple fields","known-issues#Known issues":"Check the repository for the latest known issues.","outbound-tasks-can-be-configured-on-a-schedule#Outbound tasks can be configured on a schedule":"The CHT now supports scheduling when outbound push tasks are run based on a cron expression. Read about how to set this up in the outbound push documentation.","performance-improvements#Performance improvements":"#8576: Low performance in Reports tab for users with thousands of places","schedules-can-be-created-by-passing-array-on-start_from#Schedules can be created by passing array on start_from":"It is now possible to configure the start_from property to accept array of fields while configuring SMS schedules. This allows users to pass multiple fields and the first existing field will be used to create schedules. Read more about schedules in the documentation.","security-fixes#Security fixes":"#8564: Improve masking of passwords in log files","target-components-are-updated-to-match-material-design#Target components are updated to match material design":"The targets UI has been updated to match material design. This is the next step in transitioning to using a modern and intuitive design throughout the UI. Many other components were updated in 4.4.0.","technical-improvements#Technical improvements":"#7370: Uplift messageformat to @messageformat/core #7600: Add additional tests for Enketo Form functionality #8237: Upgrade webapp to Angular 16 #8375: Flaky test: Muting for an offline user #8501: Remove upgrade e2e’s temporary modal logic #8535: Flaky e2e test: Testing Incorrect locale should work with incorrect locale #8538: Flaky test: Service worker cache adding new languages triggers login page refresh #8549: Update dependencies in scripts folder #8554: Angular testing passes but logs thousands of lines of errors #8556: xpath extensions tests fail locally in my timzone #8578: Scalability workflow failed waiting for CHT to be up. #8582: improve nginx config to avoid “listen … http2 directive is deprecated” warning #8583: Ongoing replication e2e test is flaky #8592: Flaky e2e integration test: Sentinel transition error log error for unknown transition: #8621: Update WDIO #8622: Update sinon and rewire #8671: Flaky test: feedback docs should stop creating feedback docs once the db has over 1000 feedback docs #8685: Chrome 118 broke e2e testing #8692: Flaky e2e test: Default navigation hamburger menu spec failing: Hamburger Menu tests “before all” hook","uiux-changes#UI/UX changes":"#8513: Align “Target” components with Material design guidelines #8541: Options with long names look wrong in enketo selects","upgrade-notes#Upgrade notes":""},"title":"4.5.0"},"/releases/4_5_1/":{"data":{"":"","breaking-changes#Breaking changes":"None.","bug-fixes#Bug fixes":"#8745: error.loading.form.no_authorized when opening a form from tasks tab because context evaluates to false","contributors#Contributors":"Thanks to all who committed changes for this release!\nDiana Barsan Jennifer Q","known-issues#Known issues":"Check the repository for the latest known issues.","uiux-changes#UI/UX changes":"None.","upgrade-notes#Upgrade notes":""},"title":"4.5.1"},"/releases/4_5_2/":{"data":{"":"","breaking-changes#Breaking changes":"None.","bug-fixes#Bug fixes":"#8837: Telemetry date not logged on telemetry documents","contributors#Contributors":"Thanks to all who committed changes for this release!\nJennifer Q","known-issues#Known issues":"Check the repository for the latest known issues.","uiux-changes#UI/UX changes":"None.","upgrade-notes#Upgrade notes":""},"title":"4.5.2"},"/releases/4_6_0/":{"data":{"":"","allow-contact-searches-in-forms-to-be-filtered-by-descendants-of-the-current-contact#Allow contact searches in forms to be filtered by descendants of the current contact":"A contact selector can be used in forms to allow users to select a contact by searching. In addition to limiting the searchable contacts by their type, now you can configure the search field to only show contacts which are descendants of the current contact. This is useful when you only want to allow a user to select specific contacts (such as members of the current household). Learn how to configure this functionality in the documentation.\n#8074: Support filtering contact search in forms by descendants of the current contact","and-more#And more\u0026hellip;":"","breaking-changes#Breaking changes":"None.","bug-fixes#Bug fixes":"#6299: Sync status sometimes says all reports synced when there are changes yet to sync #6395: Pregnancy registration allows first pregnancy and previous miscarriage risk factors #7110: Homeplace in LHS contacts list is not updated on changes #7288: Searching for a contact name that has a short value will return no results. #7674: Answers to non-relevant questions in forms are not immediately cleared with new Enekto #8002: Bullets not displaying properly in form labels #8038: Admin app fails to get releases when a different staging server is passed through ENV to API #8096: Admin password change breaks CHT, shows wrong error message #8102: Crash in enketo-core - TypeError: Cannot read property ’length’ of undefined #8118: “Send Message” action shouldn’t send message to user that is logged in #8131: Training cards are appearing on top of privacy policies #8585: Asterisk for required field in form located on new line when in summary group #8644: cht-healthcheck stays down after ConnectionRestError #8674: Cannot create user for contacts created via Place Api #8689: Users API not responsive #8730: Actionbar does not include links to create people when users have only the can_create_people permission #8777: Error recording telemetry on Firefox #8778: Error in map/reduce function when aggregating telemetry #8790: /api/deploy-info.version is not semver valid for final releases #8796: api/v1/users-doc-count doesn’t work as expected #8868: Session requests failing after upgrade","contributors#Contributors":"Thanks to all who committed changes for this release!\nLore Gareth Bowen mrjones Ben Kiarie Tatiana Lépiz Joshua Kuestersteffen Henok Diana Barsan Mokhtar Jennifer Q Fred Daniel Sugat Bajracharya","features#Features":"#8074: Support filtering contact search in forms by descendants of the current contact #8695: Provide kubernetes configuration and helm charts for production deployments #8846: Add the aggregate date to telemetry’s meta","form-performance-improvements#Form performance improvements":"Performance of CHT forms has been significantly improved! Particularly, large forms with complex calculations will load considerably faster and be more responsive. In our tests, we observed ~60% improvement in load times for a large form when compared with 3.15.0 (and a ~33% improvement over 4.5.0). Other partners have also observed similar results!\n#7599: Update to latest enketo-core","highlights#Highlights":"","improvements#Improvements":"#6177: Improve look and utility of the “About” page #7462: Make code for Enketo forms reusable outside cht-core #7770: Browser compatibility modal notice for Chrome version 75-90 #8075: Update default branding to CHT logo #8293: Add more debug information to CHT4 Docker Helper #8660: Link to Contact’s Profile from Messages tab","known-issues#Known issues":"Check the repository for the latest known issues.","official-configuration-for-deploying-the-cht-to-kubernetes#Official configuration for deploying the CHT to Kubernetes":"Configuration files and scripts are now available for deploying the CHT to a Kubernetes cluster. This includes Helm charts, Kubernetes templates, and shell scripts for managing a deployment. See the README documentation for more information.\n#8695: Provide kubernetes configuration and helm charts for production deployments","performance-improvements#Performance improvements":"#7599: Update to latest enketo-core #8771: Update task expiration recalculation queries","security-fixes#Security fixes":"#6530: Add rate limiting to authentication endpoints #8843: Add script to bulk change list of users passwords","technical-improvements#Technical improvements":"#7167: Upgrade CHT-Conf version in CHT-Core #7993: Upgrade to Node 20 #8357: Flaky test: Enabling/disabling languages should disable a language and enable another #8431: Create an e2e test for receiving phone number in SMS #8697: Default config: Consolidate all the enketo commons selectors #8706: Speed up build execution by breaking up longest running jobs #8707: Make update compose URLs action more reliable #8708: Remove separate action for “Test nginx and haproxy” #8727: Upgrade e2e test fails on MacOS #8739: Infinite scrolling e2e test failing with 429 Too Many Requests #8743: Upgrade to couchdb 3.3.3 #8757: Remove standard config #8780: Deprecated use of fs.rmdir with recursive #8783: Sometimes manifest.json is empty #8789: Target aggregates test is passing but shouldn’t be #8791: Update deprecated functions used in generate real-world data script #8819: The ci-webdriver-default-workflows job is really slow sometimes #8855: Integration test should display deploy-info to authenticated users is failing on TAG pushes #8263: Kubernetes configuration, Helm Chart templates and a One-Shot Script that Deploys the CHT Locally on a k3d Cluster #8683: Add implicit-arrow-linebreak to eslint #8710: Fix flaky test - permission-enabled and incorrect-locale #8711: Remove script/deploy dir so it can be re-added under correct author #8723: Add new local integration jobs #8729: Retry publish on conflict when testing #8786: Enable alwaysStrict in webapp tsconfig #8795: Remove unused imports and variables #8800: Add nyc test coverage for API and Sentinel #8808: Add an explanation message to 2 assertions in routing.spec.js #8811: Add coverage to all shared libs tests","uiux-changes#UI/UX changes":"#6177: Improve look and utility of the “About” page #7770: Browser compatibility modal notice for Chrome version 75-90 #8075: Update default branding to CHT logo #8660: Link to Contact’s Profile from Messages tab","upgrade-notes#Upgrade notes":""},"title":"4.6.0"},"/releases/4_7_0/":{"data":{"":"","and-more#And more\u0026hellip;":"","breaking-changes#Breaking changes":"None.","bug-fixes#Bug fixes":"#6383: Patient id not populated in reference app #8085: Race condition: Tasks list briefly shows “No more tasks” before displaying available tasks. #8815: Only last 50 reports for contact are provided to contact-summary calculation #8841: Docker Helper error on macOS Apple Silicon: “qemu: uncaught target signal 11 (Segmentation fault)” #8939: Select question grid display in forms broken #8940: Admin app shows error after successful upgrade #8985: Cannot use /api/v1/people to create a person if any place in the lineage has an invalid primary contact","contributors#Contributors":"Thanks to all who committed changes for this release!\nYuvraj Rimal Diana Barsan Jennifer Q Tatiana Lépiz Gareth Bowen Ashley Daniel Mokhtar yuv Ben Kiarie Andra Blaj Sheila Abby ChinHairSaintClair Lore sauln Joshua Kuestersteffen","countdown-widgets-can-now-be-made-required-in-forms#Countdown widgets can now be made required in forms":"Countdown widgets can now be made required in forms. This means that the form will not be able to be submitted until the countdown widget has been completed.\n#8681: Support making countdown-widgets required in forms","features#Features":"#8462: Expose user device details to admins #8681: Support making countdown-widgets required in forms #8821: Record Apdex score in webapp #8877: /api/v2/users look up users by facility_id and/or contact_id #8971: Support getting the difference between two dates in various time formats #8986: /api/v2/users look up data for single user","highlights#Highlights":"","improvements#Improvements":"#5807: Fix widget wrapping when displaying multiple columns #8591: Add SNI details for use in e2e HTTPS environment with TLS termination external to server (eg, kubernetes pod) #8844: Error page doesn’t have a way out or retry option #8858: Align cards to Material #8883: Translate to Spanish #8917: Support Android validation URL endpoints for registering an intent #8925: Enable http-keep-alive in haproxy #8950: Add Swahili Translations L400 to L600 #8951: Add Swahili Translations L600 to L800 #8952: Add Swahili Translations L800 to L1000 #8953: Add Swahili Translations L1000 to L1200 #8954: Add Swahili Translations L1200 to last line #8955: Translate to Spanish 300 to 600 #8956: Translate to Spanish 600 to 900 #8957: Translate to Spanish 900 to 1200 #8958: Translate to Spanish 1200 to last line #9012: Save date when transition ran in document infodoc #9023: Remove server check for node version","known-issues#Known issues":"Caution\nDue to a critical bug that prevented further upgrades from 4.7.0, we have have removed 4.7.0 from our releases list, so that it will not be possible to upgrade to 4.7.0. The bug has been fixed in 4.7.1. If you have already installed or upgraded to 4.7.0, connect with us on the forum to get unblocked. We apologise for the inconvenience.","performance-improvements#Performance improvements":"#8994: Improve Apdex score in contact details page","security-fixes#Security fixes":"None.","support-getting-the-difference-between-two-dates-in-various-time-formats#Support getting the difference between two dates in various time formats":"There are four new functions that allow you to get the difference between two dates in various time formats. The functions are:\ncht:difference-in-days cht:difference-in-weeks cht:difference-in-months cht:difference-in-years #8971: Support getting the difference between two dates in various time formats","technical-improvements#Technical improvements":"#8802: Flaky e2e test ongoing replication should download settings updates #8803: Reduce cognitive complexity of formatContacts function #8881: Builds are failing because Webdriver cannot download Chromedriver #8901: CI build for a branch with an underscore fails #8902: External contributor builds fail as unable to find docker images #8944: Use performance service to record performance telemetry metrics. #8962: Scalability tests broken #8982: Update to Angular 17 #9035: GitHub artifact being overwritten due to naming collision for minimum browser e2e tests #9042: Upgrade CI workflow fails with image rate limit","uiux-changes#UI/UX changes":"#5807: Fix widget wrapping when displaying multiple columns. This is a minor stylistic change that does not require retraining. #8858: Align cards to Material. This is a minor stylistic change that does not require retraining.","upgrade-notes#Upgrade notes":""},"title":"4.7.0"},"/releases/4_7_1/":{"data":{"":"","breaking-changes#Breaking changes":"None.","bug-fixes#Bug fixes":"#9117: Impossible to upgrade from 4.7.0","contributors#Contributors":"Thanks to all who committed changes for this release!\nDiana Barsan","known-issues#Known issues":"Check the repository for the latest known issues.","technical-improvements#Technical improvements":"None.","uiux-changes#UI/UX changes":"None.","upgrade-notes#Upgrade notes":""},"title":"4.7.1"},"/releases/4_7_2/":{"data":{"":"","breaking-changes#Breaking changes":"None.","bug-fixes#Bug fixes":"#9166: “users-meta failed with compilation_error” when upgrading from 4.2.4 #9187: Haproxy unit tests are failing due to haproxy patch release","known-issues#Known issues":"Check the repository for the latest known issues.","technical-improvements#Technical improvements":"None.","uiux-changes#UI/UX changes":"None.","upgrade-notes#Upgrade notes":""},"title":"4.7.2"},"/releases/4_8_0/":{"data":{"":"","and-more#And more\u0026hellip;":"","apdex-improvements#Apdex Improvements":"#9006: Improves performance of the list view by reducing the number of rows fetched each time #9019: Improves performance of the detail view by reducing loops for tasks and reports","breaking-changes#Breaking changes":"None.","bug-fixes#Bug fixes":"#8599: CouchDB single-node set-up script fails at creating system db’s if admin pw contains special characters","contributors#Contributors":"Thanks to all who committed changes for this release!\nJennifer Q Diana Barsan Gareth Bowen Daniel Joshua Kuestersteffen mrjones Fred Ben Kiarie Lore","features#Features":"None.","highlights#Highlights":"","improvements#Improvements":"#8884: Add Swahili Translations #9118: Use helm repository for cht-core helm-chart","known-issues#Known issues":"Check the repository for the latest known issues.","performance#Performance":"The Contacts page loads much faster now. Using apdex scores and testing on low spec devices, we were able to identify slow areas and make improvements to both the list view and the detail view.","performance-improvements#Performance improvements":"#9006: Improve Apdex score of contact_list #9019: Reduce loops when processing tasks and reports","security#Security":"Two security issues with severity level of “high” and one of “low” were fixed in this release. The long standing security issues were detected during routine penetration tests. We recommend upgrading as soon as possible to get the best possible cybersecurity protection.\n#8886: Protect against a malicious 3rd party using the redirect after login feature to steal credentials #9108: Ensure users with basic access are not allowed to self-promote themselves to a user with more permissions #9122: Ensure users with basic access are not allowed to sensitive configuration files, like translations","technical-improvements#Technical improvements":"#8788: Flaky test: Testing Incorrect locale #8929: Bump update-service-kubernetes in helmchart #9069: Server checks test is emitting 10k lines to the console #9079: Integration tests fail with 420 Too Many Requests when running on a fast machine #9080: Add @medic/logger shared library #9085: add tests/helm/values.yaml to .gitignore #9100: Move cht-form tests from e2e to integration #9113: Add a build step to validate PR titles conform to commitlint standard","uiux-changes#UI/UX changes":"None.","upgrade-notes#Upgrade notes":""},"title":"4.8.0"},"/releases/4_8_1/":{"data":{"":"","breaking-changes#Breaking changes":"None.","bug-fixes#Bug fixes":"#9166: “users-meta failed with compilation_error” when upgrading from 4.2.4 #9187: Haproxy unit tests are failing due to haproxy patch release","known-issues#Known issues":"Check the repository for the latest known issues.","technical-improvements#Technical improvements":"None.","uiux-changes#UI/UX changes":"None.","upgrade-notes#Upgrade notes":""},"title":"4.8.1"},"/releases/4_9_0/":{"data":{"":"","allow-multiple-places-to-be-assigned-to-users#Allow multiple places to be assigned to users":"To better support Supervisors who manage CHWs across multiple areas, it is now possible to assign more than one “Place” (ie Community Health Unit, Health Center, etc…) to a user. To enable this feature, simply assign the can_have_multiple_places permission to the relevant user role(s) and add the desired “Place(s)” to the user.","and-more#And more\u0026hellip;":"","breaking-changes#Breaking changes":"None.","bug-fixes#Bug fixes":"#7530: Can’t edit forms that have empty “binary” fields #8072: Error when saving form with repeated upload inputs #9203: Ensure backward compatibility of facility_id in Admin app","contributors#Contributors":"Thanks to all who committed changes for this release!\nChinHairSaintClair Ben Kiarie Daniel Diana Barsan Gareth Bowen Michael Kohn mrjones Jennifer Q. Joshua Kuestersteffen sauln","features#Features":"#6543: Allow for multiple places to be assigned to users #9116: Update the user form to allow assigning multiple places to users. #8308: Add support for Signature Widget in forms","highlights#Highlights":"","improvements#Improvements":"None.","known-issues#Known issues":"Check the repository for the latest known issues.","performance-improvements#Performance improvements":"None.","security-fixes#Security fixes":"None.","setup#Setup":"If the User’s Role has the appropriate permission, it will be possible to assign multiple Places. Note: Selected Places must be at the same level in the hierarchy.\nIMPORTANT: When removing a Place that was previously assigned to a user, app storage needs to be cleared on the physical device. When adding a Place to an existing user, that user will sync the new Place and associated data automatically the next time they sync.","signature-widget#Signature widget":"For some time now there has been interest in having the CHT support the ability for a CHT to collect a hand drawn signature from a patient. With this release, app developers may now implement the draw widget in “signature” mode. Here is an example of both the draw widget and signature widget on a demo app in the CHT:","technical-improvements#Technical improvements":"#9065: Add cht-datasource to support get person by uuid #8557: Investigate using shellcheck for script linting #9134: Upgrade e2e test fails on betas #9153: Update the release notes generation script to add a list of contributors #9155: Permissions to show reports and tasks test is failing often #9173: Add Gaze cwd with path.resolve to watch.js #9179: Integration tests broken on master #9187: Haproxy unit tests are failing due to haproxy patch release","uiux-changes#UI/UX changes":"This release adds support for assigning multiple places to users. Users who are configured to have multiple places will see some subtle UI changes as described in the Highlights section. For a video walkthrough of the changes, check out the June 2024 CHT Round-up call and this forum post.","upgrade-notes#Upgrade notes":"","user-experience#User Experience":"Users who are assigned multiple Places will see a few changes in the CHT’s User Interface. These changes are summarized below, and are discussed in detail in this forum post.\nContacts Page: The List View will show all assigned Places (ie CHUs) but will not show the list of child places (ie CHW Areas).\nContact Detail: The list of child places (ie CHW Areas) can be viewed on this page.\nMessages, Tasks, and Reports Pages: Data for all assigned Places will show up together in the List View. An additional level of lineage has been added to the Breadcrumbs to clarify which Place each item (Message, Task, or Report) is associated to.\nTargets: Personal Targets will look the same. Aggregate Targets will not be shown for users with multiple assigned places, even if the user has the permission. Support for Aggregate Targets for users associated to multiple places will potentially be supported in a later release."},"title":"4.9.0"},"/releases/earlier/":{"data":{"":"","010-pre1#0.1.0-pre.1":"added facility columns to export formats #54 added fr translations for facility names. #54 The server will not send a response unless a form is recognized. Filtering on Districts support Added Records section Fixed reported date on re-imports, so the dates are preserved based on sent timestamp in sms message. Added infinite scroll for viewing records on one page instead of paging. Marking empty fields with question marks. Marking errors on records that have referral tasks with no recipient defined. Real-time updates via changes feed","010-pre2#0.1.0-pre.2":"Better textforms support including validation #46 Added optional required field to form defs, all field definitions are required by default. Close dropdown menus when clicking anywhere on the site #53 Stream export data instead of collecting it in memory #57 Added validation step to all new form submissions #73 Added records filtering by form #56 Moved data records code to module #69","010-pre3#0.1.0-pre.3":"Added Quick Install Doc Renamed kujua-export to kujua-base #88 Added dropdown health centers and districts to spreadsheet #99, #66 Various facilities spreadsheet bug fixes #92, #91, #94 Added CouchDB security steps to install doc #88, #66 Fixed authorization passthrough for tasks pending #87 Various data records screen fixes #84, #83, #56 Updated gateway/SMSSync binary and added S3 link to install docs Removed Export branding Started on functional tests using zombie.js and vows Added health centers and districts spreadsheet Added facilities section and spreadsheet editor #63 Assert forms that pass validation gets saved #78, #75, #46 Fixed bug where form submission fails if it has extra fields #75 Fixed 24-hour time display bug Added close button to login window #70 Fixed bug with scroll listener binding to other pages #69","010-pre4#0.1.0-pre.4":"Parsing refactor to allow for better unstructured and textforms support, #106, #79 Add validation to spreadsheet with first cut of phone validation. fixes #104 Direct support for json-form definitions #76 Added textforms support for tiny labels in form definition Generating example messages automatically in Gateway Testing doc Fixed textforms parser for Couchbase on OSX #46 Using complete field keys instead of tiny labels in textforms data record creation #79 Better generic localized message handling #79 Added delete feature to spreadsheet rows #97 Updated install docs to include require_valid_user steps Various spreadsheet fixes #103, #98 Better localized string support in form definitions Include national office data to districts on save","0115#0.1.15":"Saving responses to record and displaying in records screen. Added timezone offset to reported date in exports and data records screen. Added datepicker to filter exports by date. Added support for custom form validation functions Show better error message for other codes like missing_fields Fixed buttons in data records screen Added Kujua Reporting package for easy switching of analytics features Improved test coverage for missing fields, cleaned/fixed up tests. Fixed form parsing for fields defined as sub-objects and boolean parsing. Added cases for sms responses when form is undefined Display tooltip on input element focus in spreadsheet Added delete on facilities spreadsheet Make en/xls default export format Custom labels via config.js configuration doc Support for records to key on any facility Nepalese responses VPD field updates added additional form definitions","0116#0.1.16":"Tell user to login on 403 template. Added record detail to analytics screen expand div. Added configuration entries for reporting rates/analytics. Made labels more configurable. Added Kujua Sentinel support for reminders and alerts. Updated spreadsheet columns to use config for labels. Added support for form_invalid_custom error codes. Introduced reference_field on forms. Fixed kujua reporting views to better handle undefined clinic object in facility data. Make it clear in HC reporting screen that contact name/phone is undefined. Use __dirname in sentinel so it can be launched from any directory. Added page for reminder logs. Fixed district filtering support. Added lockRows option to spreadsheet. Fixed bug in XML spreadsheet output where true boolean value shows as 0. Added support in sentinel to update children when a facility is edited. Fixed bug on delete and editRow modal window. Hide all nav items except docs when logged out. Removed console references and added JSON.stringify to logger call.","0117#0.1.17":"Renamed reference_field property on forms to facility_reference. Allow phone number to match on any facility type not just clinics.","0118#0.1.18":"Fixed bug in records screen where 1 row was not getting rendered until a scroll. Refactored messaging, supporting messages_task in json forms. Fixed bug where non-districts showing up in districts filter. Keep Kujua Reporting files in-tact so it can be activated with config. Added validations, messages and ref id labels to forms on gateway testing doc. Added autocomplete=off to error missing phone form in records screen. Added css for pointer hover to icon-exclamation-sign. Renamed use-sentinel to use_sentinel to be consistent in JSON forms. Added basic unstructured message support. Fixed bug in records during edit row function where reported date get munged. Added spreadsheet feature so children get updated when a parent facility is changed. Fixed bug where using wrong label on main analytics screen. Always create records, even on empty or unstructured messages. SMS response messaging refactor, added response messages to gateway testing doc. Fixed hard coded URL paths in reporting tests.","0119#0.1.19":"Fixed wifi lock bug in SMSSync #54. Updated docs with new SMSSync build instructions Fixed labels names and stat placement on Health Center and District reporting screens. Added help panel to spreadsheet to explain key bindings. Form revisions for OHW and CDC Nepal","0120#0.1.20":"HTTP callbacks refactor, now records are created on first HTTP POST. Tests refactor, replaced some redundant/large tests with more specific ones. Error handling refactor, now clients should not get system messages. Updated JSON forms to include Carlos Slim test forms. SMSSync 2.0 support: parsing of new timestamp format. Bundled SMSSync 2.0.1-hcb (http-callbacks) build. ’null’ form key in filters to find records without a form definition. Upgrade Notes\nIf you upgrade the gateway without upgrading Kujua the timestamps from the messages will not get parsed. So messages will get a timestamp assigned to them by Kujua, which reflect the time the record was created in Kujua rather than the actual time the report/message was sent.","0121#0.1.21":"Fixed bug: regression from error handling refactor where assigning a record a new facility did not clear facility_not_found errors. Fixed bug: months based reporting valid value was not being passed through view. Fixed regression: returning form_invalid response when form_invalid_custom error is found. Fixed NYAA form custom validation. Added ability to do bulk deletes and facility updates. Fixed bug where record is created as valid if callback request is not completed due to disconnection or phone running out of battery. Records are initialized as invalid.","0122#0.1.22":"Major improvements in scheduled reminder support in Sentinel. Support for Twilio in Sentinel. Minor refactor of records screen: added counters to show sent/scheduled messages in records rows. displaying scheduled tasks in records expanded view added RC Code column combined facility data into one column improved contact info column, made more prominent by moving clinic contact info and phone together and into second column. Removed auto-reply messages from form submission that use sentinel/scheduler so only one response is sent on a new form submission. Fixed bug: Only update records of type ‘data_record’ on records screen Preserve css (expando visibility) when row is replaced in records. Use serial_number instead of patient_id for ohw_registration. Fixed bug in textforms parser where 01234 was parsed as 1234 and added test. Fixed unit tests for ONOT and ORPT form updates. Fixed/Added tests for ohw emergency report (OEMR) responses. Added PNC test for ohw emergency report (OEMR). Fixed ohw notifications transition to set correct muted value. Fixed OHW birth report (OBIR) logic and added tests.","030-beta37#0.3.0-beta.37":"January 21, 2014\nFixes to user roles (@marc)\nMatches Transitional V2 in https://docs.google.com/a/medicmobile.org/spreadsheet/ccc?key=0Ao9l2yegOFn7dEJRTEw1Z3RmZm0wTEo4Nk92NjVocnc\nAdded support for Kemri Muvuku Form (KEMR)\nAdded exclude_cols query param to csv/xml form exports. #421\nFor example include exclude_cols=1,5 in your query parameters to remove the first and fifth column of an export.\nbugfix on export query params and UX adjustments\nMade English CSV export default. SpreadsheetML can be a little buggy because we’re using HTML entities (not valid XML).\nDisabled default month value in exports screen since record count does not reflect the export row totals displayed. It’s probably better UX to have the user set the date knowing they are doing something than having a default that doesn’t make sense with the totals on the screen and having to guess why that is.\nAdded timezone support to exports #394\nRender page contents first and then load the fields data since that was holding up the page load.\nIndexing _id as uuid in field index so you can search for uuid:10366976d62ab9a31257b2fad16113ee now and it shows up in available fields index. For some reason I think underscore prefixed fields do show up in fields listing on Lucene for some reason.\nFixed poor loading on search help #422\nadded timezone support to exports #394\nNow dates in the exported spreadsheet should include your locale timezone. Controlled by the tz query param.\nAdded new Messages Export and removed message data from Forms Export\nNew http endpoint /export/messages to get messages export. Records are always latest first (reverse chronological). Message export will include all records (valid and invalid), the point of the messages export is to give you access to all your message data, including outgoing error messages.\nWarning: the following URLs are no longer supported:\n/{form}/data_records.csv /{form}/data_records.xml /form_data_records.xml /form_data_records.csv Use /export/forms/{form} path instead.\nWarning: Existing form data export format has changed. Included UUID of the related record so data among the two spreadsheets (messages and form data) can be correlated if need be. Also removed the message data/columns from form data export. A record can be found via UUID by using uuid: in the search box.\nChanged default column name of “From” to “Reported From”. Note if this shouldn’t change if you have an existing install since it is generated based on your translation settings.\nThe NEW columns (added UUID column and removed message data): Record UUID Reported Date Reported From Clinic Contact Name Clinic Name Health Center Contact Name Health Center Name District Hospital Name [columns for form fields data depending on form] The OLD columns: Reported Date From Clinic Contact Name Clinic Name Health Center Contact Name Health Center Name District Hospital Name [columns for form fields data depending on form] Incoming Message Responses Outgoing Messages Scheduled Tasks","030-beta38-debug#0.3.0-beta.38 (debug)":"February 13, 2014\nadded logging calls to help debug and identify whitespace parsing bug #431","030-beta39-bugfix#0.3.0-beta.39 (bugfix)":"February 25, 2014\nFixed textforms whitespace parser bug when using form list field types. #431\nTextforms parser wasn’t trimming space correctly on a field value, so if you had a list defined using those values they would never get matched.\nTextforms was only matching numeric values of length 2 or more, so if you submitted a one digit number you would not get a numeric match.\nAlso if the value didn’t match numeric or a date format then the whitespace was not being trimmed correctly.","031#0.3.1":"_March 3, 2014 _\nFixed a bug where the facilities spreadsheet was holding focus so sending a message doesn’t work. #440\nAdded Bulk Messaging support, so you can send messages to multiple recipients. #333\nFixed bug to include incoming messages in messages export. #436\nFixed bug where it is possible to send a message twice by double clicking the submit button\nFixed bug where we failed to retrieve settings on port 80 #438\nThis was experienced when proxying to couchdb because http proxying will decode the URL including docid of the show parameter, so the show returns 404. Solution is to always double URL encode if the show docid contains special characters.\nConfirm with user before deleting facility so they can’t be deleted by accident. #371\nAdded unique Patient ID validation support. #411 medic-sentinel/pull/50\nUse unique(‘patient_id’) in your registration validation rules to validate new form submissions that are setting the patient ID values via forms.\nValidation rules may consist of Pupil.js rules and custom rules. These cannot be combined as part of the same rule.\nNot OK:\nrule: \"regex('[0-9]{5}') \u0026\u0026 unique('patient_id')\" OK:\nrule: \"regex('[0-9]{5}') \u0026\u0026 max(11111)\" If for example you want to validate that patient_id is 5 numbers and it is unique (or some other custom validation) you need to define two validation configs/separate rules in your settings. Example validation settings:\n[ { property: \"patient_id\", rule: \"regex('[0-9]{5}')\", message: \"Invalid: Patient ID {{patient_id}} must be 5 numbers.\" }, { property: \"patient_id\", rule: \"unique('patient_id')\", message: \"Invalid: Patient ID {{patient_id}} must be unique.\" } ] Added Conditional Alerts feature. #437 medic-sentinel/issue/52\nConfigure the Alerts section of the App Settings to send a message when an incoming message meets the configured condition.","0310#0.3.10":"June 12, 2014\nupdated intrahealth-senegal forms","0311#0.3.11":"June 19, 2014\nFixed bug where scheduled messages were out of order on Chrome #527\nFixed bug where app settings was ignored, and the app reverted to defaults. #524\nAdded delivery form to generic ANC forms.\nModified behavior of patient reports when silence_for option is empty we clear the entire schedule instead of a group.\nFixed notifications to add the configured response #508\nFixed bug and added support for multiple schedules in schedule silencing\nWhen silence_for is specified we should only silence/clear one group, I introduced a bug a few commits ago that would ignore the group and silence/clear based on date. Use the silence_for window to match and clear the first group.\nAlso added support for comma separate string on silence_type option. In the MCH case we have two schedules that can be generated depending on the form submission/registration: ANC Reminders and ANC Reminders LMP. Now both schedules can be cleared with a single ANCV settings entry.","032#0.3.2":"_March 11, 2014 _\nfixed facilities spreadsheet bug #451 in Chrome\nminor user interface tweaks on deletion of facilities modal","033#0.3.3":"April 10, 2014\nFixed spreadsheet keyboard navigation. #448\nValidate ‘Everyone at x’ for at least one valid phone number. #333\nAudit support for data records and facility data #415\nAlso includes support for export of audit data as XML or CSV file.\nNote: Only new records and record edits will have an audit log entry. So this means your audit log will only contain changes to records after the upgrade.\nSimilarly browsing old revision will stop working for old records because they lack audit log entries. If this is a major problem for you let us know and we can add backwards compatible revision browsing in the next release.\nThis has been released as a standalone re-useable module for Node and browser environments: https://github.com/medic/couchdb-audit\nAdded support for compact version of TextForms format #428\nIn compact Textforms fields are delimited by spaces and determined by order. So no hashes or field keys are required like in classic TextForms format. If your field value has spaces in it then it must be surrounded by quotes unless it is the last field.\nExamples:\nREG 4165550000 John Smith REG \"John Smith\" 4165550000 Include state change timestamps and patient_id in messages export #453\nOld Columns:\nRecord UUID, Reported Date, From, Clinic Contact Name, Clinic Name, Health Center Contact Name, Health Center Name, District Hospital Name, Message Type, Message State, Message Timestamp/Due, Message UUID, Sent By, To Phone, Message Body\nNew Columns:\nRecord UUID, Patient ID, Reported Date, Reported From, Clinic Contact Name, Clinic Name, Health Center Contact Name, Health Center Name, District Hospital Name, Message Type, Message State, Received Timestamp, Sent Timestamp, Pending Timestamp, Scheduled Timestamp, Cleared Timestamp, Muted Timestamp, Message UUID, Sent By, To Phone, Message Body\nNote: These are the default column labels and they are configurable.\nDisable facility select and show loading message until data is loaded. #452\nUpdated font-awesome to 3.2.1 to get extra icons\nFixed Help button on the spreadsheet. #455\nFixed spreadsheet duplicate rendering when quickly switching tabs. #362 #450\nAdded permissions checks to export lists functions. #456\nFixed bug where facility spreadsheet update records when field value is unchanged. #457\nFixed bug where registrations was not using db-wide unique IDs. medic-sentinel#54\nFixed duplicate records on ID search #430\nUser Management UX refactor #385, #380, #462, #380, #379, #378, #377, #429\nFixed bug on facilities screen where delete functions would stack up and inadvertently delete a facility. #469","034#0.3.4":"April 14, 2014\ntranslate strings on user mgmt facilities select list #474\nChange ordering of messages export format for better readability based on when the state is triggered. #475\nFrom: Received, Sent, Pending, Scheduled Cleared, Muted To: Received, Scheduled, Pending, Sent, Cleared, Muted","035#0.3.5":"April 16, 2014\nMajor bug fix that was introduced in 0.3.3 where visit reports do not get processed.\nFixed accept_patient_reports transition so it calls db for readonly actions instead of audit.\nAllow analytics role to download messages and forms. Issue: #477\nUpdated user management to show role for analytics user. Issue: #478\nInitial version of forms for Miraclefeet India","036#0.3.6":"April 28, 2014\nFixed bug in updating duplicate scheduled reports #483","037#0.3.7":"May 13, 2014\nModified KEMRI form fields to be ordered the same as KEMR form.","038#0.3.8":"May 22, 2014\nfixed bug in messages export filters to include all data records, unstructured messages were being ignored. #502\nadded support for app-settings kanso package.\nSaving settings in dashboard was too slow for use because entire ddoc was being updated. Using app-settings API fixes that.","039#0.3.9":"May 22, 2014\nfixed a bug in settings parser, to conform to the latest app-settings changes, otherwise configs never get triggered.","040#0.4.0":"July 10, 2014","041#0.4.1":"July 31, 2014\nMinor UI clean up.\nAllow hash symbol to separate form code and data in structured textform message.\nModified build to bundle npm dependencies with attached node modules.","0410#0.4.10":"Nov 16, 2015\nAdded support for Outgoing Deny List, a comma separated list of phone numbers or strings to deny outgoing service to. #750\nFixed bug in records export. #1273\nFixed bugs in uniqueWithin validation. medic-sentinel#74\nAdded link to Help page in main menu.","0411#0.4.11":"February 4, 2016\nSecurity fix for leaking auth info.","0412#0.4.12":"July 21, 2016\nFixed bug in reporting rates for weekly time unit. #2429 Log warnings in sentinel when ID collisions happen. #1898 Support integration with medic-gateway for sending and receiving SMS medic-api#69","0413#0.4.13":"October 21, 2016\nOption to set birthdate using days old instead of weeks. Issue: #2756 The week/month is off by 2 in the Reporting Rates analytics dashboard. Issue: #2781 Remove socket limit in medic-api. Issue: #2632","0414#0.4.14":"December 16, 2016\nBug fix for medic-gateway sending scheduled messages. Issue: #2535","0415#0.4.15":"March 2, 2017\nFixed potential race condition with medic-gateway. Issue: medic-projects/issues/1243 Bumped libphonenumber to make phone number validation more up to date. Issue: medic-projects/issues/1005","042#0.4.2":"September 4, 2014\nFixed bug: When searching for a patient identifier using the free-text search feature, results were not returned properly. Index the field appropriately.","043#0.4.3":"February 26, 2015","044#0.4.4":"May 21, 2015\nAdded support for a new messages parser we’re calling Javarosa prefixed with the J1 format code.","045#0.4.5":"May 28, 2015\nFixed bug in schedules editor for LMP (last menstrual period) based schedules. #973\nInitial support for messages, records and forms API. See https://github.com/medic/medic-api/blob/963e262f7f29623b3c264c9d85ec537bbcb91cdb/API_v1.md","046#0.4.6":"June 4, 2015\nImproved boolean expression evaluation in registration configuration.","047#0.4.7":"June 16, 2015\nFixed ODK forms list bug when the list is empty. Issue #886\nFixed compact textforms parser bug with exclamation points. Issue #989\nFixed bug in compact textforms parser we ignored fields with uppercase letters in the key of the form definition. Issue #991\nFixed bug when creating record with empty message. Issue #990\nMoved raw message to bottom of report body. Issue: #927","048#0.4.8":"July 14, 2015\nAdded SMS parser fixes from dev branch:\nFixed export bug when using lowercase form codes. Please re-upload your forms so they are formatted correctly. #998\nFixed bug where exporting yields same result with or without date filter. #1059, #1031","049#0.4.9":"Aug 26, 2015\nFixed bug on node 0.12 in felix-couchdb. #1145\nImproved error handling when notifications (start/stop) configs are misconfigured. #1144\nFixed bug in exists validation where it fails on some unicode characters. #1147\nFixed Reporting Rates interface that was neglected and broken. #1030\nFixed bug in exporting data by date, it’s now inclusive. #1104","bug-fixes#Bug fixes":"Fixed bug stopping district admins from being able to delete documents. #509\nCorrected language Nepalese to Nepali\nFixed too many requests for app_settings #511\nFixed saving user password, was getting reset/wiped #509\nRender facilities controls on all facilities tabs. #338","deprecated-and-backwards-incompatible-changes#Deprecated and Backwards Incompatible changes":"deprecated exclude_cols parameter for export integrations. Migrate applications to use the columns parameter instead.\nNo forms are included by default, you must upload your forms. As usual configuration (settings and forms) persists through upgrades.","features#Features":"Major UI enhancements #370\nConfigurable date format #577\nBuilt-in ANC Analytics #586\nEasy user feedback mechanism #19\nAdded help and tour\nRefactored build process, added grunt, bower and jshint.\nNo forms are included by default. You must upload your forms. As usual configuration (settings and forms) persists through upgrades.\nAdded new translations\nDefault auto-replies\nThere are now two ways to export stuff: 1) from the reports screen click on export, or 2) on the Configuration \u003e Export screen. The former is simplified and has no way of changing facility, form, or file format. The latter is functionally equivalent to 0.4.2.","new-features#New Features":"User interface for common settings and translations #484\nUser interface to configure basic ANC messaging workflows #487\nNodejs module for API calls and to handle audit transactions\nBetter language support on messages throughout configuration. e.g. you can define a reminder schedule using multiple languages and the right language will be used based on the locale of the message. #486\nAdded support to configure locales through settings screen #491\nAdded support for custom forms and uploading JSON form definitions #283\nSupporting old/obsolete settings via migrations during restore #501\nSupport minute setting for scheduled hours configuration\nReduced files size of design doc by minifying javascript and combining files\nAdded support for unique validations across multiple fields. #412\nExternal IDs can be added to facilities on the facility page. #503\nAdded columns query parameter to allow callers to messages and data_records exports to retrieve specific columns in a specific order. #503\nAdded Patient ID field to default data record export\nAllow specifying of task columns in message export.\nTo include the group column, include the parameter columns=[\"task.group\"] (and any other columns you need, eg: patient_id). #432\nAllow range searches on number fields in lucene. #481","upgrade-notes#Upgrade Notes":"CouchDB Lucene \u003e= 1.0.2\nGardener \u003e= 1.1.0\nNew Nginx configuration, close or redirect port 5984, proxy all requests through medic-api."},"title":"0.x"},"/technical-overview/":{"data":{"":"ArchitectureExplore the different components of the CHT Concepts and paradigmsDiscover the rules and guidelines of the CHT DatabaseManage databases used by CHT applications"},"title":"Technical Overview"},"/technical-overview/architecture/":{"data":{"":"OverviewOverview of CHT components and their interactions CHT CoreCentral component for building responsive, offline-first digital health apps CHT ConfCommand-line interface tool to manage and configure apps built using the CHT CHT WatchdogMonitoring and alerting software CHT SyncData synchronization for the purpose of analytics CHT AndroidAndroid wrapper for the CHT Core Webapp CHT InteroperabilityStandardized data exchange between the CHT and other health systems"},"title":"Architecture"},"/technical-overview/architecture/cht-android/":{"data":{"":"The cht-android application is a thin Android wrapper to load the CHT Core Framework web application in a Webview native container.\nIt consists of “flavored” configurations, where each “flavor” or “brand” is an app, which allows the application to be hardcoded to a specific CHT deployment and have a partner-specific logo and display name. The app also provides some deeper integration with other Android apps and native phone functions that are otherwise unavailable to webapps."},"title":"CHT Android"},"/technical-overview/architecture/cht-conf/":{"data":{"":"CHT Conf is a command-line interface tool to manage and configure apps built using the CHT Core Framework.","currently-supported#Currently Supported":"The different items that are supported by CHT Conf include:","derived-configs#Derived configs":"Configuration can be inherited from another project, and then modified. This allows the app_settings.json and contained files (task-schedules.json, targets.json etc.) to be imported, and then modified.\nTo achieve this, create a file called settings.inherit.json in your project’s root directory with the following format:\n{ \"inherit\": \"../path/to/other/project\", \"replace\": { \"keys.to.replace\": \"value-to-replace-it-with\" }, \"merge\": { \"complex.objects\": { \"will_be_merged\": true } }, \"delete\": [ \"all.keys.listed.here\", \"will.be.deleted\" ], \"filter\": { \"object.at.this.key\": [ \"will\", \"keep\", \"only\", \"these\", \"properties\" ] } }","editing-contacts-across-the-hierarchy#Editing contacts across the hierarchy.":"To edit existing couchdb documents, create a CSV file that contains the ids of the document you wish to update, and the columns of the document attribute(s) you wish to add/edit. By default, values are parsed as strings. To parse a CSV column as a JSON type.\nParameter Description Required column(s) Comma delimited list of columns you wish to add/edit. If this is not specified all columns will be added. No docDirectoryPath This action outputs files to local disk at this destination No. Default json-docs file(s) Comma delimited list of files you wish to process using edit-contacts. By default, contact.csv is searched for in the current directory and processed. No. updateOfflineDocs If passed, this updates the docs already in the docDirectoryPath instead of downloading from the server. No.","example#Example":"Create a contact.csv file with your columns in the csv folder in your current path. The documentID column is a requirement. The documentID column contains the document IDs to be fetched from couchdb.\ndocumentID is_in_emnch:bool documentID1 false documentID2 false documentID3 true Use the following command to download and edit the documents:\ncht --instance=*instance* edit-contacts -- --column=*is_in_emnch* --docDirectoryPath=*my_folder* or this one to update already downloaded docs:\ncht --instance=*instance* edit-contacts -- --column=*is_in_emnch* --docDirectoryPath=*my_folder* --updateOfflineDocs Then upload the edited documents using the upload-docs command.\ncht --instance=*instance* --upload-docs","forms#Forms":"Fetch from Google Drive and save locally as .xlsx Backup from server Delete all forms from server Delete specific form from server Upload all app or contact forms to server Upload specified app or contact forms to server","installation#Installation":"Read more about setting up CHT Conf.","managing-data-and-images#Managing data and images":"Convert CSV files with contacts and reports to JSON docs Move contacts by downloading and making the changes locally first Upload JSON files as docs on instance Compress PNGs and SVGs in the current directory and its subdirectories","project-layout#Project layout":"This tool expects a project to be structured as follows:\nexample-project/ .eslintrc app_settings.json contact-summary.js privacy-policies.json privacy-policies/ language1.html … purge.js resources.json resources/ icon-one.png … targets.js tasks.js task-schedules.json forms/ app/ my_project_form.xlsx my_project_form.xml my_project_form.properties.json my_project_form-media/ [extra files] … contact/ person-create.xlsx person-create.xml person-create-media/ [extra files] … … … translations/ messages-xx.properties … If you are starting from scratch you can initialise the file layout using the initialise-project-layout action:\ncht initialise-project-layout","settings#Settings":"Compile app settings from: tasks rules schedules contact-summary purge App settings can also be defined in a more modular way by having the following files in app_settings folder: base_settings.json forms.json schedules.json Backup app settings from server Upload app settings to server Upload resources to server Upload custom translations to the server Upload privacy policies to server Upload branding to server Upload partners to server"},"title":"CHT Conf"},"/technical-overview/architecture/cht-core/":{"data":{"":"The CHT Core Framework is the primary component of the CHT. The server comes with authentication, role based authorization, data security, and a range of protected data access endpoints. Read more detail in cht-core GitHub repository.\ngraph TB classDef container stroke:#63a2c6, fill:#eef5f9, color:#000 subgraph CHT_Core_Framework[\"Server\"] direction TB NGINX(NGINX):::container API(API):::container Sentinel(Sentinel):::container HAProxy(Haproxy):::container HealthCheck(HealthCheck):::container CouchDB[(CouchDB)]:::container Nouveau[(Nouveau)]:::container end Upgrade[\"Upgrade Service\"]:::container subgraph Client[\"Client (Android \u0026 Browser)\"] subgraph Webapp[\"Webapp\"] PouchDB[(PouchDB)]:::container end Admin[\"App Management\"]:::container end Webapp --\u003e NGINX Admin --\u003e NGINX NGINX --\u003e API API \u003c--\u003e Upgrade Sentinel --\u003e HAProxy API --\u003e HAProxy HAProxy --\u003e CouchDB HealthCheck --\u003e CouchDB HAProxy --\u003e HealthCheck CouchDB --\u003e Nouveau style CHT_Core_Framework fill: transparent style Client fill: transparent style Webapp fill: transparent Server API A NodeJS service that runs on the server and provides security and APIs for browsers and integrations. It also includes a custom implementation of filtered replication to allow it to support more concurrent users. See more at the CHT Core API repo on GitHub.\nSentinel Another NodeJS service running on the server, sentinel performs actions called transitions every time a document in CouchDB is added or modified. Some examples are validations, generating scheduled messages, automatic responses, creating patients, and sending alerts. See more at the CHT Core Sentinel repo on GitHub.\nCouchDB A free and open source NoSQL database used as the primary store for all app data and configuration. This can be multiple instances clustered together for additional scalability. CouchDB is really good at replication which is the process of sending the data to another database and back again, which makes it ideal for replicating data to the phone for offline access. See more at the CouchDB site.\nNouveau Nouveau is a CouchDB service, added to the CHT in version 5.0.0, leverages the Lucene search engine to modernize how freetext searches are done. Nouveau is faster at running these queries and more efficient at storing and creating the indexes. Offline users do not use this.\nNGINX NGINX provides SSL termination and routes requests to API.\nHAProxy HAProxy provides logging and reverse proxying for any request that makes it to CouchDB.\nHealthCheck A service that periodically verifies the health status of the CouchDb cluster. HAProxy uses this service for checking server status.\nCHT Upgrade Service The CHT Upgrade Service is used within the CHT to update individual Docker containers when an upgrade is requested. Read more detail in the cht-upgrade-service GitHub repository.\nClient The CHT Core Framework provides two web applications: the CHT Web App for care teams and program staff, and App Management for program administrators.","api#API":"","app-management#App Management":"App Management is an interface for non-technical administrative users to manage users and settings.\nView the application source code in our GitHub repository.","cht-upgrade-service#CHT Upgrade Service":"","cht-web-application#CHT Web Application":"The CHT Web Application is used by Community Health Workers and provides a large variety of features. View the source code in our GitHub repository.","client#Client":"","couchdb#CouchDB":"","haproxy#HAProxy":"","healthcheck#HealthCheck":"","nginx#NGINX":"","nouveau#Nouveau":"","sentinel#Sentinel":"","server#Server":"","structure#Structure":"The CHT Web Application has the following high level structure:\n/js: Contains the vanilla JavaScript scripts, for example: Enketo widgets, MomentJS locales, etc. /ts: Contains the Angular application source code which uses TypeScript. /actions, /effects, /reducers and /selectors: Contain the implementation for the application’s reactive state which uses NgRx framework. /components, /directives, /pipes, /providers and /services: Contain the reusable elements from Angular framework. /modals: Contains the all application’s modals components. /modules: Contains the application’s modules, each of them has components that are associated to the modules’ routing. /css: Contains the style files. It uses Less as a CSS preprocessor. /fonts: Contains the fonts. /img: Contains the static images.","structure-1#Structure":"/css: Contains style files. It uses Less as a CSS preprocessor. /js: Contains the JavaScript code. /actions, /reducers and /selectors: Contain the implementation of Redux. /controllers, /directives, /filters and /services: Contain the reusable elements from AngularJS framework. /modules: Contains the vanilla JavaScript scripts. /template: Contains the HTML templates that are used in the AngularJS components and directives.","technology#Technology":"The CHT Web Application is reactive, responsive, and a single page application built with Angular and NgRx frameworks. Additionally, it uses the following technology:\nTechnology Usage PouchDB To implement an Offline-First strategy, which means the data is stored on the client and all pages can load immediately regardless of whether the user has a fast connection, slow connection, or no connection at all. The data is stored in PouchDB, which replicates changes back and forth in the background with the server CouchDB. Enketo To render configured xforms and help with styling and dynamic elements such as show/hide and validation rules. ngx-bootstrap To integrate Bootstrap components in the Angular application. ngx-translate To automatically translate the labels from a Angular application. Read more about how to configure translations. Karma A test runner for unit tests MochaJS A test framework to run the unit tests WebDriverIO To run the e2e tests Less A CSS preprocessor","technology-1#Technology":"App Management is a single page application built with AngularJS framework and implements Redux to manage a reactive state. Additionally, it uses the following technology:\nTechnology Usage Angular Translate To automatically translate the labels from a AngularJS application. Read more about how to manage translations. Karma A test runner for unit tests MochaJS A test framework to run the unit tests WebDriverIO To run the e2e tests Less A CSS preprocessor"},"title":"CHT Core"},"/technical-overview/architecture/cht-interoperability/":{"data":{"":"CHT Interoperability refers to the ability of different health information systems and applications to communicate with each other and exchange data seamlessly. With interoperability, patient information can be seen, exchanged, and used across different platforms. The information/data exchanged has to be understood across the different software for these systems to become interoperable. This is different from integration which requires custom development to connect two specific systems."},"title":"CHT Interoperability"},"/technical-overview/architecture/cht-sync/":{"data":{"":"CHT Sync is an integrated solution designed to enable data synchronization between CouchDB and PostgreSQL for the purpose of analytics. It combines several technologies to achieve this synchronization and provides an efficient workflow for data processing and visualization. The synchronization occurs in near real-time, ensuring that the data displayed on dashboards is up-to-date.\nRead more about setting up CHT Sync.\nCHT Sync replicates data from CouchDB to PostgreSQL in a near real-time manner. It listens to changes in the CHT database, and updates the analytics database accordingly. It is not designed to be accessed by users, and it does not have a user interface. It is designed to be run on the same server as the CHT, but it can be run on a separate server if necessary.\nAs CHT Sync puts all new data into a PostgreSQL database into a single table that has a jsonb column, this is not very useful for analytics. cht-pipeline contains a set of SQL queries that transform the data in the jsonb column into a more useful format. It uses dbt to define the models that are translated into PostgreSQL tables or views, which makes it easier to query the data in the analytics platform of choice.","cht-core-framework--couchdb#CHT Core Framework \u0026amp; CouchDB":"For more information on these technologies, see CHT Core overview.","couch2pg#couch2pg":"couch2pg streams data from CouchDB and forwards it to PostgreSQL, ensuring near real-time updates.","data-visualization#Data Visualization":"We recommend Apache Superset as the Data Visualization Tool. Superset is a free, open-source platform for data exploration and data visualization.","dbt#dbt":"Once the data is synchronized and stored in PostgreSQL, it undergoes transformation using predefined dbt models from the cht-pipeline. dbt is used to ingest raw JSON data from the PosgtreSQL database (jsonb column) and normalize it into a relational schema to make it easier to query. A daemon runs the dbt models, and it updates the database whenever the data in the jsonb column changes.","postgresql#PostgreSQL":"A free and open source SQL database used for analytics queries. See more at the PostgreSQL site."},"title":"CHT Sync"},"/technical-overview/architecture/cht-watchdog/":{"data":{"":"CHT Watchdog is deployed on a separate server so that you can watch for, and alert on, any critical issues with the CHT Core. Read more about setting up CHT Watchdog.\nData Flows","cht-core-framework--rdbms#CHT Core Framework \u0026amp; RDBMS":"For more information on these technologies, see CHT Core overview.","grafana#Grafana":"Grafana is a dashboard visualization and alerting software. It is open source and an industry standard for this task. There is an free repository of pre-existing dashboards which greatly reduce the time to create new dashboards and alerts. It can send alerts via email, Slack, SMS and many more.","json-exporter#JSON Exporter":"JSON Exporter is a wrapper utility to convert a JSON API to be compatible with Prometheus scrape config. This is used to convert the CHT Monitoring API’s JSON.","postgres-exporter#Postgres Exporter":"Postgres Exporter allows Prometheus to scrape a Postgres database and at a predefined interval. The queries can be configured to ingest any relevant data needed.","prometheus#Prometheus":"Prometheus is an open source Time Series Database (TSDB) that was developed explicitly to do detailed longitudinal monitoring. It also aggregates metrics and can automatically cull older data to save on CPU and disk space."},"title":"CHT Watchdog"},"/technical-overview/architecture/overview/":{"data":{"":"%%{init:{'flowchart':{'nodeSpacing': 15, 'rankSpacing': 40, 'diagramPadding': 10, 'subGraphTitleMargin': { 'bottom': 10 }}}}%% flowchart LR classDef container stroke:#63a2c6, fill:#eef5f9, color:#000 subgraph APPS[Smartphones, tablets and computers] Browser[Browser]:::container Android[Android App]:::container Integrations[Integrations\nwith other systems]:::container Watchdog[CHT Watchdog]:::container Sync[CHT Sync]:::container UMT[CHT User Management]:::container end subgraph CMDL[Command line interface] Conf[CHT Conf]:::container end CHT@{ shape: procs, label: \"CHT Core Server\"} subgraph SMS[Feature phones] SMSG[SMSgateway]:::container SMSA[SMSaggregator]:::container end Browser --\u003e CHT Android --\u003e CHT Integrations \u003c--\u003e CHT Watchdog --\u003e CHT Sync --\u003e CHT Conf --\u003e CHT UMT --\u003e CHT SMSG --\u003e CHT SMSA --\u003e CHT style APPS fill: transparent style CMDL fill: transparent style SMS fill: transparent","cht-android#CHT Android":"CHT Web Application works in the browser or wrapped in the CHT Android app which allows for project branding, sets the project URL, and hides browser elements like the URL bar. The app also provides some deeper integration with other android apps and native phone functions that are otherwise unavailable to webapps.","cht-conf#CHT Conf":"A command-line interface tool to manage and configure CHT application. The CHT Conf architecture page has more information.","cht-core-framework#CHT Core Framework":"The CHT Core Framework makes it faster to build full-featured, scalable digital health apps by providing a foundation developers can build on. These apps can support most languages, are Offline-First, and work on basic phones (via SMS), smartphones, tablets, and computers.\nApp developers are able to define health system roles, permissions and reporting hierarchies, and make use of five highly configurable areas of functionality: messaging, task and schedule management, decision support workflows, longitudinal person profiles, and analytics.\nSee Also: Build CHT Applications\nThe Core Framework can be used to support the unique needs of a given health system and the work of community health workers, frontline supervisors, facility-based nurses, health system managers, and even patients and caregivers. Visit the Commuity Health Toolkit website to request a self-guided demo of an app built with the Core Framework. You can also explore an overview of the Core Framework and its key features.\nRead more about the architecture of the CHT Core.","cht-gateway#CHT Gateway":"CHT Gateway is an android app for sending and receiving SMS messages. Each SMS enabled project has one gateway running. It polls an api endpoint to write incoming SMS into the CouchDB and retrieve outgoing SMS to send.","cht-interoperability#CHT Interoperability":"CHT Interoperability implements interoperability between the CHT and other health information systems based on OpenHIE architecture and HL7 FHIR messaging format.","cht-sync#CHT Sync":"A suite of tools for extracting and normalizing data from the Core Framework’s CouchDB, and rendering the data in analytics dashboards to visualize key data for a CHT deployment.\nRead more detail on the CHT Sync overview page, the GitHub repository, or the technical overview.","cht-user-management-tool#CHT User Management Tool":"CHT User Management Tool is a web application that works with the CHT to decentralize the user management.","cht-watchdog#CHT Watchdog":"Monitoring and alerting for the CHT Core Framework to ensure CHWs are able to deliver care without interruption caused by server downtime. Read more detail on the CHT Watchdog technical overview page or the GitHub repository."},"title":"Overview"},"/technical-overview/concepts/":{"data":{"":"Content in this section Offline-First in the CHT Installation as a Progressive Web App CHT Impact Metrics"},"title":"Concepts"},"/technical-overview/concepts/impact-metrics/":{"data":{"":"Impact monitoring is an essential part of both the Community Health Toolkit and Medic’s processes and ethos. We are committed to harnessing data to:\nSupport our partners in data-driven operational and strategic decision making Inform our product roadmap and organizational strategy, and Participate in overarching policy discussions around community health. As a member of the CHT community and potential CHT implementer, we encourage you to learn more about the recommended impact metrics for monitoring and evaluation across priority use cases by reviewing the metrics listed below.","impact-metrics#Impact Metrics":"The following list of Impact Metrics is comprehensive; it includes all of the Impact Metric that Medic and one or more additional CHT implementers have decided to share with the general public across workflows:\nCaring Activities\nTotal number of caring activities logged on the CHT (total, per month) Engagement\nTotal number of frontline health workers supported by the CHT (total, per month) Total number of frontline health workers trained to use the CHT for a specific use case (ie. antenatal care) (total, per month) Households\nTotal number of households registered in the CHT (total, per month) Total number of new households registered in the CHT per month Total number of registered households with one or more visits by a health worker logged in the CHT per month Antenatal Care\nTotal number of pregnancy registrations logged in the CHT (total, per month) Total number of pregnancy registrations logged in the first trimester in the CHT (total, per month) Total number of confirmed deliveries logged in the CHT (total, per month) Total number of confirmed deliveries occurring in a health facility logged in the CHT (total, per month) Postnatal Care\nTotal number of postnatal visits logged in the CHT (total, per month) Total number of women receiving the first postnatal care visit within 48h of delivery logged in the CHT (total, per month) iCCM\nTotal number of assessments conducted on children under five (U5) in the CHT (total, per month) Total number of resulting diagnoses from U5 child assessments in the CHT (total, per month) Total number of resulting referrals from U5 child assessments in the CHT (total, per month) Total number of assessments conducted where the U5 child was presenting symptoms in the CHT (total, per month) Total number of U5 child assessments conducted within 72h of symptom onset logged in the CHT (total, per month) Total number of U5 child assessments conducted within 24h of symptom onset logged in the CHT (total, per month) Total number of patients receiving correct treatment at home from a healthcare worker, when treatment is recommended, logged in the CHT (total, per month) Total number of patient referral follow-up visits with a health facility visit confirmed logged in the CHT (total, per month) Family Planning\nTotal number of women counseled by healthcare workers on family planning logged in the CHT (total, per month) Total number of women newly using family planning following a counseling session with a healthcare worker logged in the CHT (total, per month) Malnutrition\nTotal number of malnutrition screenings completed for U5 children logged in the CHT (total, per month) Total number of U5 child malnutrition cases identified via malnutrition screening logged in the CHT (total, per month) Total number of U5 children with malnutrition receiving treatment and assessed to have recovered via a follow-up malnutrition screening logged in the CHT (total, per month) Immunization\nTotal number of immunization screenings for U5 children logged in the CHT (total, per month) Total number of U5 children receiving vaccinations logged in the CHT (total, per month) COVID-19\nTotal number of community event-based surveillance signals for COVID-19 reported by health workers via the Software (daily, weekly, monthly, total) Total number of COVID-19 cases registered for contact tracing in the Software (daily, weekly, monthly, total) Total number of contacts of COVID-19 cases registered for contact tracing in the Software (daily, weekly, monthly, total)"},"title":"CHT Impact Metrics"},"/technical-overview/concepts/offline-first/":{"data":{"":"CHT applications are designed to be used equally well in areas with no internet connectivity, slow or unreliable internet connectivity, and good internet connectivity. Achieving reliable performance and powerful features requires diligence and strict adherence to the principles of Offline-First development.\nIn this page we’ll cover why and how we achieve this in the CHT.","code#Code":"The CHT uses a Service Worker to store the code needed to start up and run which is best practice for caching web applications. The CHT Core Framework code is downloaded when the user visits the login page for the first time and completes silently in the background while the user logs in.\nThe code includes JavaScript, CSS, HTML, fonts, and images. It doesn’t contain any private information so it’s safe to download and cache it without authentication. It also doesn’t contain deployment specific configuration (covered in detail below).\nThe CHT Core Framework checks for updates to the code by attempting to connect to the server in the background. The user isn’t notified if this check fails or times out, so they can continue to complete workflows without interruption. When an update is found the new code is downloaded and the service worker cache is updated. The user is prompted to reload to start using the new version of the application, but this can be dismissed if they are busy with a patient or don’t want to lose their progress if they are midway through an action like creating a contact or completing a form. Either way, the update will be automatically applied the next time the application starts up.","data#Data":"Once the application has started up it needs data to be useful. This data falls into two categories:\nConfiguration specific to a single deployment such as forms, task definitions, places, and hierarchies. Patient data such as personal details, information about visits, reports, tasks, and messages. Both of these types of data are cached on the device because they are required for the user to do their job. The CHT Core Framework uses PouchDB to store the data on the device’s disk. Once cached, when the application starts up the code is executed, which reads the data, allowing the user to do their job regardless of the quality of their internet connection.\nIf the user creates new patient data by registering a family or completing a task the application stores this in the phone’s cache and attempts to submit this to the server. Periodically the application checks to see if there is new data on the server that is relevant to the user and if so, it updates the cache. This process of sending and receiving data updates is called replication, and is performed without interrupting the user from their work.","faqs-from-cht-contributors#FAQs from CHT contributors":"Q: Should I rely on request failure handling? A: No. This only works well when the user has a strong connection, or if the user is completely offline and the request fails immediately. It’s impossible to know for sure how long the request will take, so users with poor connectivity may end up waiting forever. If this request is essential to doing their job they will be unable to move on. It is important to handle request failures gracefully, but it doesn’t make a request offline first. Q: Should I rely on a request timeout? A: No. This attempts to mitigate the problem by unblocking the user eventually. The problem is setting the timeout length correctly - if it’s too short then the request won’t succeed, but if it’s too long the user will be required to wait. Experience suggests the timeout for a simple request would have to be around a minute to allow the request to succeed for most users, but a minute is far too long to expect a user to wait. Almost all requests should have a timeout, but that is not sufficient to make a request offline first. Q: Should I rely on a spinner or loading bar? A: No. Much like the timeout solution, this is an attempt to mitigate the problem in this case by giving the user more information about the request. Regardless of the UX, blocking user interaction while waiting for a response is not offline first and therefore not appropriate for the CHT. Showing UX elements when loading is still recommended for local requests, user initiated server requests, and other potentially slow operations. Q: How can I check if the user is authenticated? A: It is not possible to know for certain if a user has an active session without getting a response from the server. The CHT caches some data to hint at whether the session is still active, for example the session expiry date. However, the only way to be certain is to connect to the server, which is not offline first. This has been implemented in the CHT by checking the status code on background requests such as replication, and instructing the user to login when necessary. Q: Should I rely on APIs which report device connection status? A: No. There are APIs available which report whether the device is online with reasonable reliability. Unfortunately these APIs don’t reliably report whether the connection is slow, whether the connection will be held until the request completes, or whether the CHT server is available. This means that even if the browser API reports that the device is online the code will still make a request that may fail or wait indefinitely for a response. These APIs can be useful but must be used in conjunction with Offline-First principles, for example, the CHT uses the “online” event listener as a prompt to attempt replication in the background. Q: Should I add a feature that requires a connection? A: Maybe. There are some things that cannot be done offline first because they either require server interaction (eg: authentication during login) or they need to access data that cannot be cached locally (eg: deployment-wide analytics). Every effort should be made to find a way to implement the feature using Offline-First principles, and trade-offs discussed with senior CHT contributors. If the feature truly needs to be online first then the UX needs to be designed so that the user understands the feature requires an internet connection.","further-reading#Further reading":"Designing Offline-First Web Apps by A List Apart A Design Guide for Building Offline First Apps by Hasura CouchDB takes CHT to the front lines of healthcare work by CouchDB","requirements#Requirements":"","why-this-is-important#Why this is important":"The CHT is designed to improve healthcare in the hardest to reach communities. While some users have a strong internet connection, to be as inclusive as possible we optimise for Care Teams with connections that are intermittent, unreliable, expensive, and low bandwidth. To achieve this the CHT is designed to be offline first, which, as the name suggests, means the application never relies on an internet connection for day to day tasks.\nCaveat: a small set of use cases require a decent internet connection, but these are limited to:\nLogging in Initial download of the application and data Changing your own password Most administrative tasks such as creating new users Data analytics over large data sets"},"title":"Offline-First"},"/technical-overview/concepts/pwa/":{"data":{"":"","benefits-of-android-applications#Benefits of Android applications":"Installation of the PWA may be more difficult for users, for example they will need to visit the website and then follow the instructions to install it. This process is less well known than a usual Play Store installation.\nCertain features are only available with an Android application, including integration with other android apps, and sending SMS from within the app.","benefits-of-pwa-installation#Benefits of PWA installation":"Using a PWA avoids the need to build an Android application and publish it to the Play Store which can be cumbersome and slow. This also means there’s no need for the user to install or update the Android application as any updates will be downloaded automatically from the CHT server.\nIn addition you can install PWAs on a wider range of devices, for example, desktop computers.\nDeployments can use a mixture of PWA and Android applications.","how-to-distribute-a-cht-app-as-a-pwa#How to distribute a CHT app as a PWA":"Ensure branding configuration is complete. Without this the browser won’t recognize the CHT as a PWA and installation will not be possible. Specifically the app will need a title and icon as these are used for the icon on the home screen. To set this up, follow the instructions on the branding page. In Chrome or Firefox go to the application URL, log in, and wait for the webapp to finish loading completely. Follow these instructions for PWA installation. Now the application can be used offline just like a regular Android application.","what-is-a-progressive-web-app-pwa#What is a Progressive Web App (PWA)?":"A PWA is a web application that can be used like a website in the browser, but the user can choose to “install” it. This means a shortcut is added to the home screen of the device, and when the application is run it doesn’t have the usual browser address bar and tabs so it looks like a regular application.\nThe CHT Core webapp has been developed to be a PWA to give users more choice about how applications are installed."},"title":"Progressive Web App"},"/technical-overview/data/":{"data":{"":"","_users#_users":"This is the standard CouchDB database used to configure user authentication and authorization.","couchdb#CouchDB":"The CHT has a range of CouchDB databases for storing different types of data. By default, databases all start with the prefix “medic”.","medic#medic":"The main database, used to store all contact and report data. Data access is protected by API to provide protection on a per document basis.\nSee Also: Database schema conventions","medic-logs#medic-logs":"Stores a record of when a user last attempted to replicate and how many docs they have access to. This can be useful when trying to diagnose issues with users getting too much access, or being unable to complete replication because their access is too broad.","medic-logs-1#medic-logs":"Stores meta data about the user including when they last connected to the server, and how many documents they are allowed to replicate. This can be useful for checking for connection issues and misconfigured users.","medic-sentinel#medic-sentinel":"Stores the _local/sentinel-meta-data document which stores the sequence of the last processed change in the medic db. This is used so Sentinel can resume from where it left off and process all changes in order.\nThis database also stores metadata about the documents in the “medic” database, such as when it was received and which Sentinel transitions have executed on this doc. The UUID of the metadata doc is the same as the UUID of the “medic” doc with “-info” appended at the end.\nFor example:\n{ \"_id\": \"f8cc78d0-31a7-44e8-8073-176adcc0dc7b-info\", \"_rev\": \"2-6e08756f62fa0595d87a3f50777758dc\", \"type\": \"info\", \"doc_id\": \"f8cc78d0-31a7-44e8-8073-176adcc0dc7b\", \"latest_replication_date\": \"2018-08-13T22:02:46.699Z\", \"initial_replication_date\": \"2018-08-14T10:02:13.625Z\" }","medic-user-username-meta#medic-user-{username}-meta":"Used for documents which are only relevant to a single user, including:\n“feedback”. Errors and exceptions caught in the browser, and user initiated feedback. Support staff must monitor these docs to detect any errors that are occurring on the client device. “read”. Records that a document has been opened in the browser so it can be marked as read in the UI. “telemetry”. Aggregate telemetry information for performance and usage metrics analysis. See Also: User telemetry","medic-users-meta#medic-users-meta":"To make it easier to perform analysis of all the docs in each user’s “medic-user-{username}-meta” database, Sentinel replicates all the “feedback” and “telemetry” docs into this single database . This is used for reporting, monitoring, and usage analytics. The “feedback” and “telemetry” docs are deleted from the user’s “medic-user-{username}-meta” database after they have successfully been replicated to “medic-users-meta”.\nReplication to this database can be enabled via configuration from 3.5.0 and works without configuration from 3.10.0.","medic-vault#medic-vault":"Stores CHT credentials for authenticating with third party services. These credentials are encrypted for safety, and can only be updated using the Credentials API.","postgresql#PostgreSQL":"Used to store data for performant analytical queries such as impact and monitoring dashboards.\nSee Also: PostgreSQL Analytics","pouchdb#PouchDB":"Used to store documents on the client device to allow for Offline-First access. Bidirectional replication is done on the “medic” and “medic-user-{username}-meta” databases. The “medic” database is only partially replicated so the user stores only a subset of the entire CouchDB database for performance and security reasons.\nSee Also: CouchDB replication"},"title":"Database"},"/technical-overview/data/analytics/":{"data":{"":"","postgresql#PostgreSQL":"Used to store data for performant analytical queries such as impact and monitoring dashboards. The CHT uses CHT Sync to handle replication of docs from “medic”, “medic-sentinel”, and “medic-users-meta” databases into Postgres.\nContent in this section Data Flows for Analytics Connecting to RDBMS from MacOS Connecting to RDBMS from Windows Contact Muting in SQL queries Querying Apdex Telemetry Data Querying Training Cards Telemetry Data"},"title":"PostgreSQL Analytics"},"/technical-overview/data/analytics/data-flows-for-analytics/":{"data":{"":"In this section, we focus on how data flows through the various components of the Community Health Toolkit. The CHT is built to support the delivery of quality community health care at the last mile. The CHT is designed to work in areas with low connectivity, which means it is an Offline-First toolkit for care provision. The architectural and technology choices in the stack are mostly guided by this principle, which will be evident in the discussion of the data management pipeline.","1-data-collection#1. Data Collection":"Data is collected in the community at the point of care, i.e. the community health worker interacting with the toolkit. These tools and their corresponding data stores are::-\nMobile app -\u003e PouchDB Webapp -\u003e PouchDB / CouchDB Text forms / sms -\u003e SMS gateway / SMS aggregator -\u003e CouchDB The mobile app and webapp, when deployed for offline first use, use a local database namely PouchDB. Similar to CouchDB, it is a document-oriented database. The data collected in PouchDB is synced to an online CouchDB upon the user connecting to the internet. Local storage is not applicable to SMS; instead, an SMS gateway or an SMS aggregator (for example Africa’s Talking) is used to help get the data to an online CouchDB instance.\nUltimately all the data ends up in a CouchDB instance deployed in the cloud whether through data synchronization with PouchDB local to the health workers devices, use of SMS aggregators or gateway. It should be mentioned that you can have a deployment supported by all of webapp, mobile app and SMS and have all the data end up in the same CouchDB instance.","2-data-transformation#2. Data Transformation":"CHT Sync is used to move data from CouchDB to a relational database, PostgreSQL in this case. The choice of PostgreSQL for analytics dashboard data sources is to allow use of the more familiar SQL querying. It is an open source tool that can be easily deployed. When deployed the service uses CouchDB’s changes feed which allows capturing of everything happening in CouchDB in incremental updates. It is run and monitored by the operating system where it is configured to fetch data at a configurable interval.\nData copied over to PostgreSQL is first stored as raw json (document) making use of PostgreSQL’s jsonb data type to create an exact replica of a CouchDB database. From this, default views are created at deployment of the service and refreshed during every subsequent run. Additional custom materialized views created later are also refreshed at this time.\nCustom materialized views and functions are added specific to a deployment’s needs. Generally the following naming convention is recommended:\nformview as a view of raw forms useview as a view of form data supporting a use case as defined by design contactview as a view of people and places Database functions are used as a way to join as much relevant data as possible for easier querying in analytics or dashboard visualizations. Data in the views and functions mentioned in this section is as accurate as the accuracy of the SQL queries. Best practice is to begin the process of defining these objects at design in order to align analytics and dashboards requirements with workflows being deployed.","3-data-use#3. Data Use":"The data in PostgreSQL is mostly either used by direct querying or via dashboard visualizations for impact monitoring and data driven-decision making. Database visualizations are built scoped to the requirements of supporting a successful deployment. The work of our Research \u0026 Learning team, specifically data science, is supported at the PostgreSQL level through updated contactviews, formviews, useviews and functions with access to these provided to relevant parties as and when needed. Our use of data follows our Privacy \u0026 Data Protection policy and is in accordance to agreements with our CHT partners.\nAs mentioned previously, formviews are built to present data in a structure similar to the data collection tool (form) used. Useviews are tailored to align with a use case, mostly using the formviews as the data sources. These are fundamentally guided by design of the workflows and should be interpreted in the context of the design materials including a document explaining the definitions of variables used.\nThe objects present here are not limited to views and functions. Additional tables can be added, for example providing mappings or supporting operations external to the functions available in the toolkit. In short, there is no limitation to the utility that can be added this level to support analytics and dashboards. That said, measures are taken to ensure controlled access, reliability and timely access of the data by the various parties. Some of these measures are:\nRoles and users allocation and deallocation done by specific roles within partner technical teams with support from Medic as needed; Access control management is left to the partner technical teams where possible; Dashboard data source refresh intervals set to align with project needs; Update of the data sources monitored to ensure updating works as expected; Review of the dashboards as part of the design process; Qualitative design activities to interrogate trends observed in the dashboards and iterate on them if need be;","backup#Backup":"The machines running each of CouchDB and PostgreSQL instances are backed up daily.","beyond-our-current-pipeline#Beyond Our Current Pipeline":"The cht-core is mostly data collection tools and is the first component of the data management pipeline. It is the core part of a deployment but the rest of the tools can be easily replaced with other preferred options. It also helps that CHT Sync is an open source tool which provides the opportunity for collaboration to extend its functionality to support other implementations. Klipfolio, the tool that we currently use for visualizations, is a proprietary tool but there are many open source options, such as Apache Superset that are worth exploring and building into future iterations of our impact monitoring and analytics support for the CHT.","current-infrastructure#Current infrastructure":"We look at this in three general phases.","details-of-the-data-flow#Details of the data flow":"The layout detailed here is specific to how Medic supports its CHT partners at the moment. It is replicable and can be deployed as is or tweaked independent of Medic either by modifying or replacing pieces of it with other options.","overview#Overview":"Data Flows\nAt a high level:\nData are collected from the device of a health worker; Data are pushed to an online instance from where data are available to other health workers, supervisors, and decision makers; Data are transferred to a relational database (PostgreSQL) using CHT Sync and made available for impact monitoring, data science projects, and visualizations; Access to PostreSQL is given to relevant parties at this level, for example members of the Research \u0026 Learning team for impact monitoring and data science; Visualization platforms, such as Klipfolio or Superset, are then connected to PostgreSQL from where program managers and other partner representatives can access visualizations of their data for decision-making."},"title":"Data Flows"},"/technical-overview/data/analytics/muting_in_dashboards/":{"data":{"":"When a contact gets muted, two of many things happen:\nThe target contact and all of its descendants have a muted property set equal to the date they were muted an entry is added to the contact’s muting_history in sentinel’s info docs When building dashboards on Superset, Klipfolio, or other data visualization platforms, you might need to exclude these muted contacts from the visualized data. An easy way to do this is to check the contact’s muted property which when present has the date value of when the contact was muted and when absent means that the contact is not muted. This works when you are only interested in seeing the latest data but it gets complicated when you want to look at a contact’s mute state from a certain period in the past.\nFor example, if a contact was muted in February and unmuted in May; If you check the contact’s mute state in March from June, you’d find that the contact would not have the muted property as it would have been removed during the unmute in May. This is where the muting_history comes in. A contact’s muting_history contains all mute and unmute events stored in a JSON array. An example of the mute/unmute entries is shown below:\n{ \"_id\": \"_id\", \"_rev\": \"3-01ecfdd2958baeaf16fc621c5622f4a9\", \"type\": \"info\", \"doc_id\": \"doc-id\", \"transitions\": { }, \"muting_history\": [ { \"date\": \"2021-04-07T13:41:09.769Z\", \"muted\": true, \"report_id\": \"_id\" }, { \"date\": \"2021-06-07T13:41:09.769Z\", \"muted\": false, \"report_id\": \"_id\" } ], \"latest_replication_date\": \"2020-10-30T15:46:45.482Z\", \"initial_replication_date\": \"2020-10-30T15:46:45.482Z\" } If you extract this data into a separate table you can get a timeline that you can use to check if the contact was muted at a certain point in the past. An example of this approach is shown below where the data is first extracted using the query:\nSELECT contact_muting_history.contact_uuid, date AS muted_on, muted, report_id FROM ( SELECT doc -\u003e\u003e 'doc_id' AS contact_uuid, couchdb.doc -\u003e\u003e 'muting_history' AS muting_history FROM couchdb WHERE doc -\u003e\u003e 'type' :: text = 'info' AND doc -\u003e\u003e 'muting_history' IS NOT NULL ) contact_muting_history CROSS JOIN LATERAL json_populate_recordset(null::record, contact_muting_history.muting_history::json) AS (date text, muted bool, report_id uuid); The query above will give you a result set like the one below:\ncontact_uuid muted_on muted report_id 1 2021-06-07T13:41:11.119Z True ***** 2 2020-12-24T18:02:53.190Z True ***** 3 2021-01-24T17:36:31.917Z True ***** 3 2021-04-15T16:56:05.984Z False ***** You can query the table above (mute_timeline) to check if the contact was muted in a certain period in time as shown below:\nSELECT contact_uuid IS NOT NULL AS muted FROM mute_timeline WHERE contact_uuid = ***** AND date_trunc('day',muted_on) \u003c= date_trunc('day', EXAMPLE_DATE) AND unmuted_on \u003e= (date_trunc('day', EXAMPLE_DATE) + '1 day'::interval) This query checks if a record exists for this contact where they were muted earlier or on EXAMPLE_DATE and unmuted on or after the EXAMPLE_DATE. For the earlier example where the contact was muted in February and unmuted in May if we pass February, March, or April as EXAMPLE_DATE, we find a record because our unmuted_on is always greater than EXAMPLE_DATE. If we pass May going forward, we find no records that match our condition."},"title":"Contact Muting in SQL queries"},"/technical-overview/data/analytics/querying_apdex_telemetry/":{"data":{"":"Added in 4.7.0, CHT now records the Apdex (Application Performance Index) that is an open standard for measuring performance of software applications.\nSince Apdex is part of the telemetry system, it is possible to view Apdex data directly from CouchDB. However, it is more useful when aggregated across many users, interactions, and/or days. With this in mind, it is typically easier to query the data using SQL from an analytics database.\nAn example of an SQL to view the Apdex score:\nWITH apdex_telemetry_data AS ( SELECT substring(metric from '^(.*):apdex:') AS event_category, CASE WHEN metric LIKE '%:satisfied' THEN 'satisfied' WHEN metric LIKE '%:tolerable' THEN 'tolerable' WHEN metric LIKE '%:frustrated' THEN 'frustrated' END AS event_type, SUM(count) AS event_count FROM useview_telemetry_metrics WHERE metric LIKE '%:apdex:%' GROUP BY event_category, event_type ), apdex_scores AS ( SELECT event_category, SUM(CASE WHEN event_type = 'satisfied' THEN event_count ELSE 0 END) AS satisfied_count, SUM(CASE WHEN event_type = 'tolerable' THEN event_count ELSE 0 END) AS tolerable_count, SUM(CASE WHEN event_type = 'frustrated' THEN event_count ELSE 0 END) AS frustrated_count, SUM(event_count) AS total_event_count FROM apdex_telemetry_data GROUP BY event_category ) SELECT event_category, satisfied_count + tolerable_count + frustrated_count AS total_count, satisfied_count, tolerable_count, frustrated_count, ROUND(((satisfied_count + (tolerable_count / 2.0)) / total_event_count)::numeric, 2) AS apdex_score FROM apdex_scores ORDER BY apdex_score asc; The SQL query above calculates the Apdex scores for various events recorded in the useview_telemetry_metrics table, providing insights into the performance of different aspects of the CHT. In some cases, it is helpful to visualize the number of occurrences of each metric in a date range:\nWITH constants (days, start_date, end_date) AS (VALUES (\u003ccount_days_in_range\u003e, \u003cYYYY-MM-DD\u003e, \u003cYYYY-MM-DD\u003e)), apdex_metrics AS( SELECT substring(metric FROM '^(.*):apdex:') AS metric, SUM(COUNT) AS COUNT FROM useview_telemetry_metrics, constants WHERE metric LIKE '%:apdex:%' AND period_start BETWEEN constants.start_date::DATE AND constants.end_date::DATE GROUP BY metric ), apdex_result as ( SELECT metric, CASE WHEN apdex_metrics.metric = 'contact_list:load' THEN \u003ccount_in_a_day\u003e * constants.days WHEN apdex_metrics.metric = 'contact_list:query' THEN \u003ccount_in_a_day\u003e * constants.days WHEN apdex_metrics.metric = 'contact_detail:\u003ccontact_type\u003e:load' THEN \u003ccount_in_a_day\u003e * constants.days WHEN apdex_metrics.metric = 'contact_detail:\u003ccontact_type\u003e:load' THEN \u003ccount_in_a_day\u003e * constants.days WHEN apdex_metrics.metric = 'contact_detail:\u003ccontact_type\u003e:load' THEN \u003ccount_in_a_day\u003e * constants.days WHEN apdex_metrics.metric = 'enketo:contacts:\u003ccontact_form\u003e:add:render' THEN \u003ccount_in_a_day\u003e * constants.days WHEN apdex_metrics.metric = 'enketo:contacts:\u003ccontact_form\u003e:add:save' THEN \u003ccount_in_a_day\u003e * constants.days WHEN apdex_metrics.metric = 'enketo:reports:\u003capp_form\u003e:add:render' THEN \u003ccount_in_a_day\u003e * constants.days WHEN apdex_metrics.metric = 'enketo:reports:\u003capp_form\u003e:add:save' THEN \u003ccount_in_a_day\u003e * constants.days WHEN apdex_metrics.metric = 'report_list:load' THEN \u003ccount_in_a_day\u003e * constants.days WHEN apdex_metrics.metric = 'report_list:query' THEN \u003ccount_in_a_day\u003e * constants.days WHEN apdex_metrics.metric = 'report_detail:\u003capp_form_id\u003e:load' THEN \u003ccount_in_a_day\u003e * constants.days WHEN apdex_metrics.metric = 'tasks:load' THEN \u003ccount_in_a_day\u003e * constants.days WHEN apdex_metrics.metric = 'tasks:refresh' THEN \u003ccount_in_a_day\u003e * constants.days WHEN apdex_metrics.metric = 'enketo:tasks:\u003capp_form_id\u003e:add:render' THEN \u003ccount_in_a_day\u003e * constants.days WHEN apdex_metrics.metric = 'enketo:tasks:\u003capp_form_id\u003e:add:save' THEN \u003ccount_in_a_day\u003e * constants.days WHEN apdex_metrics.metric = 'message_list:load' THEN \u003ccount_in_a_day\u003e * constants.days WHEN apdex_metrics.metric = 'messages_detail:load' THEN \u003ccount_in_a_day\u003e * constants.days WHEN apdex_metrics.metric = 'analytics:targets:load' THEN \u003ccount_in_a_day\u003e * constants.days WHEN apdex_metrics.metric = 'boot_time' THEN \u003ccount_in_a_day\u003e * constants.days END AS expected_count, SUM(apdex_metrics.count) AS actual_count FROM apdex_metrics, constants GROUP BY apdex_metrics.metric, constants.days ) SELECT apdex_result.metric, apdex_result.expected_count, apdex_result.actual_count, CASE WHEN apdex_result.actual_count \u003e= apdex_result.expected_count THEN 'TRUE' ELSE 'FALSE' END AS meet_expectation FROM apdex_result ORDER BY apdex_result.metric ASC Such queries are instrumental in identifying areas of the CHT that may require performance improvements by highlighting how different parts of the application meet user expectations in terms of load times and Apdex score."},"title":"Querying Apdex Telemetry Data"},"/technical-overview/data/analytics/querying_training_card_telemetry/":{"data":{"":"Introduced in 4.2.0, CHT has supported deployment of in-app training cards to facilitate remote training.\nSince interaction with training cards logs telemetry data, it is possible to view the data directly from CouchDB. However, it is more useful when you can run queries that provide useful metrics about the usage of training cards aggregated across many users, and interactions.\nWith this in mind, it is typically easier to query the data using SQL from an analytics database. The couchDB data can be replicated using CHT Sync to a postgresql instance where you can then run the SQL queries.\nThis guide includes several SQL queries that can act as a starting point for identifying useful metrics.\nTip\nCreating the following index can improve the performance of running these queries\nCREATE INDEX idx_couchdb_users_meta_type ON couchdb_users_meta((doc-\u003e\u003e'type'));\nIn these examples the training cards set has an ID of chp_self_assessment which you can replace to get the metrics for any training card set.\nTotal number of users who have viewed a particular training set: SELECT 'chp_self_assessment' AS form_name, COUNT(DISTINCT doc#\u003e\u003e'{metadata,user}') AS total_users_viewed FROM couchdb_users_meta WHERE doc-\u003e\u003e'type' = 'telemetry' AND COALESCE((doc#\u003e\u003e'{metrics,enketo:training:chp_self_assessment:add:render,count}')::int, 0) \u003e 0; How many times each user has viewed but not completed the training: SELECT doc#\u003e\u003e'{metadata,user}' AS cht_user, SUM((doc#\u003e\u003e'{metrics,enketo:training:chp_self_assessment:add:render,count}')::int) AS views_without_completion FROM couchdb_users_meta WHERE doc-\u003e\u003e'type' = 'telemetry' AND (doc#\u003e\u003e'{metrics,enketo:training:chp_self_assessment:add:render,count}')::int \u003e 0 AND NOT (doc#\u003e'{metrics}' ? 'enketo:training:chp_self_assessment:add:save') GROUP BY doc#\u003e\u003e'{metadata,user}' ORDER BY views_without_completion DESC; Number of times each user has viewed a particular training set (Includes those who have completed and those who have not completed): SELECT doc#\u003e\u003e'{metadata,user}' AS cht_user, SUM((doc#\u003e\u003e'{metrics,enketo:training:chp_self_assessment:add:render,count}')::int) AS times_viewed FROM couchdb_users_meta WHERE doc-\u003e\u003e'type' = 'telemetry' AND COALESCE((doc#\u003e\u003e'{metrics,enketo:training:chp_self_assessment:add:render,count}')::int, 0) \u003e 0 GROUP BY doc#\u003e\u003e'{metadata,user}' ORDER BY times_viewed desc; How many times each user quit a particular training set: SELECT doc#\u003e\u003e'{metadata,user}' AS cht_user, SUM((doc#\u003e\u003e'{metrics,enketo:training:chp_self_assessment:add:quit,count}')::int) AS times_quit FROM couchdb_users_meta WHERE doc-\u003e\u003e'type' = 'telemetry' AND COALESCE((doc#\u003e\u003e'{metrics,enketo:training:chp_self_assessment:add:quit,count}')::int, 0) \u003e 0 GROUP BY doc#\u003e\u003e'{metadata,user}' ORDER BY times_quit desc; List of users who have completed a particular training set: SELECT DISTINCT doc#\u003e\u003e'{metadata,user}' AS cht_user FROM couchdb_users_meta WHERE doc-\u003e\u003e'type' = 'telemetry' AND doc#\u003e'{metrics}' ? 'enketo:training:chp_self_assessment:add:save'; Total number of users who have completed (submitted) a particular training set: SELECT 'chp_self_assessment' AS form_name, COUNT(DISTINCT doc#\u003e\u003e'{metadata,user}') AS total_users_completed FROM couchdb_users_meta WHERE doc-\u003e\u003e'type' = 'telemetry' AND COALESCE((doc#\u003e\u003e'{metrics,enketo:training:chp_self_assessment:add:save,count}')::int, 0) \u003e 0 How long each user took on the training set for users who have completed the training: SELECT DISTINCT doc#\u003e\u003e'{metadata,user}' AS cht_user, COALESCE(doc#\u003e\u003e'{metrics,enketo:training:chp_self_assessment:add:user_edit_time,max}','0')::int/1000 AS max_seconds_on_form, COALESCE(doc#\u003e\u003e'{metrics,enketo:training:chp_self_assessment:add:user_edit_time,min}','0')::int/1000 AS min_seconds_on_form FROM couchdb_users_meta WHERE doc-\u003e\u003e'type'='telemetry' AND doc#\u003e'{metrics}' ? 'enketo:training:chp_self_assessment:add:save' Such queries are instrumental in understanding the effectiveness of deploying training cards. The insights gained from such queries that identify useful metrics can inform where users are struggling with training cards.\nFor instance, understanding why certain users quit the training repeatedly before completing the training."},"title":"Querying Training Cards Data"},"/technical-overview/data/analytics/rdbms-from-mac/":{"data":{"":"Follow these steps on a Mac to generate your public/private keys and access the PostgreSQL server.","access-terminal#Access Terminal":"Terminal (Terminal.app) is the terminal emulator included in the macOS operating system. You can use this application to generate your SSH key.\nOpen a new Finder window Navigate to the Applications folder Navigate to the Utilities folder Open the Terminal app Terminal","connect-to-postgresql#Connect to PostgreSQL":"Copy your public key and provide it to your Medic contact or RDBMS administrator. Your public key is not sensitive and can be shared over slack, github, etc…\nOnce the RDBMS administrator has added your public SSH key on RDBMS, the administrator will provide you with login credentials to the SSH server as well as for PostgreSQL.\nVerify you can successfully connect to to the SSH server with ssh -i ~/.ssh/id_rsa @ -p . If your setup is correct, you should login to the server and see the prompt of your terminal change to @rdbms:~$\nYou should be able to access PostgreSQL from a SQL client using the provided credentials. Some common SQL clients include: pgAdmin, DBeaver, Postico.\nFrom your SQL client, use the settings mentioned below to connect. Be sure to select the Private Key that you generated above.\nField Value Host localhost Host Port 5432 User Password Database SSH Host rdbms.dev.medicmobile.org SSH Port 33696 SSH User SSH Password N/A - Use Private Key Private Key Choose the location of the private key generated above PG Connection Settings","generate-key#Generate Key":"From Terminal, follow these instructions (see screenshot below):","step-1#Step 1":"Type: ssh-keygen -t rsa","step-2#Step 2":"Hit return to use the default file / location","step-3#Step 3":"Enter a passphrase","step-4#Step 4":"Enter your passphrase again","step-5#Step 5":"Type: cat ~/.ssh/id_rsa.pub\nIn the screenshot below:\n(a) is the location and filename of your private key (b) is the location and filename of your public key (c) are the contents of your public key Note\nYou will need to provide the contents of (c) to your Medic contact or RDBMS administrator. It should start with ssh-rsa and end with something that looks like an email address.\nSSH Commands"},"title":"RDBMS from MacOS"},"/technical-overview/data/analytics/rdbms-from-windows/":{"data":{"":"Connecting to RDBMS, the PostgreSQL server, is pretty stratightforward in nix systems. In Windows there are a couple of things you need to do to get it up and running.","ssh-key-generation-and-importing#SSH Key Generation and Importing":"Download Puttygen from here\nRun Puttygen Go to Windows Start menu → All Programs → PuTTY→ PuTTYgen.\nCreate a new key pair for your computer.\nPutty-gen-key-pair\nConvert the key generated from ssh2 format to openssh. Puttygen supports this.\n1. Open PuttyGen 2. Click Load 3. Load your private key 4. Go to Conversions-\u003eExport OpenSSH and export your private key 5. Copy your private key to ~/.ssh/id_dsa (or id_rsa). 6. Create the RFC 4716 version of the public key using ssh-keygen ssh-keygen -e -f ~/.ssh/id_dsa \u003e ~/.ssh/id_dsa_com.pub 6. Convert the RFC 4716 version of the public key to the OpenSSH format: ssh-keygen -i -f ~/.ssh/id_dsa_com.pub \u003e ~/.ssh/id_dsa.pub Import the file using PuTTYgen:\nputtty-import-key\nSave it as PuTTY Private Key File .ppk:\nputty-save-keys\nAdd the key (.ppk) to Pageant (PuTTY authentication agent):\nputty-add-key.png\nNow you can connect to RDBMS using PuTTY:\nputty-connect.png\nputty-connect.png\nIf you are connecting to rdbms in order to use a PostgreSQL client. You may not need to tunnel the connection. The client can do it for you.\nrdbms_1\nrdbms_2"},"title":"RDBMS from Windows"},"/technical-overview/data/audit/":{"data":{"":"Available from 4.20.0. The CHT maintains a complete change history by tracking all document modifications in a dedicated medic-audit database. For each document in the medic database, there exists a corresponding audit document in medic-audit sharing the same _id. This audit document maintains a chronological record of all changes made to the original document, including creations, modifications and deletions.\nAudit Document Structure Each audit document contains a history array that records all document changes. The audit entries are stored chronologically, with the most recent changes appearing last.\nField Definitions Field Optional Type Description rev no string Document revision (_rev property). date no string Server request timestamp in ISO format service no string Source of change (API or Sentinel) user no string User who initiated the change. If the change is a result of a client request, then the logged in user will be saved, even if the change was made through a separate mechanism (a change cascading or affecting multiple documents). In case the change was made though internal server mechanisms, the admin user for the service will be stored. request_id yes string Client request identifier for api / haproxy log tracing Example audit document:\n{ \"_id\": \"567fd08b-ce83-4b34-a06f-d3b338b474ba\", \"_rev\": \"2-4f412383ef1e3d643a3682081753f492\", \"history\": [ { \"rev\": \"1-c8344ea78152d7471bfcd356b04ca9ae\", \"request_id\": \"9ba2a86d9dbb\", \"user\": \"john\", \"date\": \"2025-06-04T08:45:32.937Z\", \"service\": \"api\" }, { \"rev\": \"2-4864a734c3a0287a2f6c6b9d6d3ed0f2\", \"request_id\": \"284317077052\", \"user\": \"admin\", \"date\": \"2025-06-04T08:47:22.182Z\", \"service\": \"api\" }, { \"rev\": \"3-4f412383ef1e3d643a3682081753f492\", \"user\": \"admin\", \"date\": \"2025-06-04T08:50:30.214Z\", \"service\": \"sentinel\" } ] } Rotation Policy Because some documents are expected to be edited frequently (for example forms, tasks or the settings document), saving all history entries in a single document can make it very large. Storing and retrieving large documents can incur unnecessary stress over the CouchDb database and CHT Service.\nTo avoid audit documents from getting too large, they are rotated at a maximum of 10 history entries . When an audit document has 10 entries and the medic document is changed again, the existent 10 history entries will be saved in a new (rotated) audit doc, and the main audit doc history will only contain the new entry. The rotated audit document will have the _id format of :.\nExample Document Rotation: Rotated Audit Document:\n{ \"_id\": \"567fd08b-ce83-4b34-a06f-d3b338b474ba:10-b5df1417dc0025f605312fb4ddf6702e\", \"_rev\": \"1-4f412383ef1e3d643a3682081753f492\", \"history\": [ ....\u003c9 entries\u003e { \"rev\": \"10-b5df1417dc0025f605312fb4ddf6702e\", \"user\": \"admin\", \"date\": \"2025-06-04T08:50:30.214Z\", \"service\": \"sentinel\" } ] } Main Audit Document After Rotation:\n{ \"_id\": \"567fd08b-ce83-4b34-a06f-d3b338b474ba\", \"_rev\": \"11-c5e90b06e06ee53fd2a762d7aaa43e2f\", \"history\": [ { \"rev\": \"11-3e5008a65d4d08b297ef937bf23fa6a1\", \"user\": \"ted\", \"date\": \"2025-06-04T09:50:30.214Z\", \"service\": \"api\" } ] } Limitations There is no automated cleanup mechanism for audit history. When offline edits sync to the server, they appear as a single audit entry. This is because only the last version of the document is replicated to the server. Because the audit system was added in 4.20.0, older document edits will not be audited. Due to space considerations, audit data is not indexed. A deployment with plenty of disk space can choose to index audit data for quick queries. Examples All the following examples involve querying the audit database using CouchDB Mango queries. Please consult the full documentation for Mango queries from the CouchDB documentation.\nYou can run Mango queries against the medic-audit databse in Fauxton. This is accessible at /_utils/#database/medic-audit/_find. So if your CHT instance was https://cht.exmple.com, you could access it at https://cht.exmple.com/_utils/#database/medic-audit/_find.","audit-document-structure#Audit Document Structure":"","example-document-rotation#Example Document Rotation:":"","examples#Examples":"","field-definitions#Field Definitions":"","limitations#Limitations":"","retrieving-all-changes-a-service-made-in-a-specific-period-of-time#Retrieving all changes a service made in a specific period of time":"{ \"selector\": { \"history\": { \"$elemMatch\": { \"service\": \"\", \"date\": { \"$and\": [ { \"$gt\": \"\" }, { \"$lt\": \"\" } ] } } } } } retrieve all changes made by Sentinel in a specific period: { \"selector\": { \"history\": { \"$elemMatch\": { \"service\": \"sentinel\", \"date\": { \"$and\": [ { \"$gt\": \"2025-05-30\" }, { \"$lt\": \"2025-06-20\" } ] } } } } }","retrieving-all-changes-a-user-made-in-a-specific-period-of-time#Retrieving all changes a user made in a specific period of time":"{ \"selector\": { \"history\": { \"$elemMatch\": { \"user\": \"\", \"date\": { \"$and\": [ { \"$gt\": \"\" }, { \"$lt\": \"\" } ] } } } } } retrieve all document changes made by user joan between May 25th and May27th 2025 (inclusive): { \"selector\": { \"history\": { \"$elemMatch\": { \"user\": \"joan\", \"date\": { \"$and\": [ { \"$gt\": \"2025-05-25T00:00:00\" }, { \"$lt\": \"2025-05-27T23:59:59\" } ] } } } } } retrieve all document changes made by user jesse after June 3rd at noon: { \"selector\": { \"history\": { \"$elemMatch\": { \"user\": \"jesse\", \"date\": { \"$gt\": \"2025-06-03T12:00:00\" } } } } } retrieve all document changes made by user mark_twain before Feb 26th: { \"selector\": { \"history\": { \"$elemMatch\": { \"user\": \"mark_twain\", \"date\": { \"$lt\": \"2025-02-26\" } } } } }","retrieving-all-document-edits-made-through-a-specific-request-id#Retrieving all document edits made through a specific request id":"Each request that API receives has an assigned unique id. This request id is propagated to HAProxy through the X-Request-Id header, so that the resulting CouchDB queries can be traced.\n{ \"selector\": { \"history\": { \"$elemMatch\": { \"request_id\": \"\" } } } } Example tracing the request with id d7b2b47958ae:\nCHT API logs: 2025-06-02T12:04:00.798 REQ: d7b2b47958ae 172.18.0.1 - POST /medic-test/_bulk_docs HTTP/1.0 2025-06-02T12:04:00.806 RES: d7b2b47958ae 172.18.0.1 - POST /medic-test/_bulk_docs HTTP/1.0 201 2 7.563 ms HAProxy logs: 172.18.0.8,couchdb-3.local,200,0,0,0,GET,/_session,-,0,d7b2b47958ae,322,0,147,'node-fetch/1.0 (+https://github.com/bitinn/node-fetch)' 172.18.0.8,couchdb-2.local,200,0,0,0,GET,/_session,-,admin,d7b2b47958ae,322,0,147,'node-fetch/1.0 (+https://github.com/bitinn/node-fetch)' 172.18.0.8,couchdb-3.local,201,0,0,0,POST,/medic-test/_bulk_docs,-,admin,d7b2b47958ae,229,0,3,'node-fetch/1.0 (+https://github.com/bitinn/node-fetch)' retrieve all docs that were edited by this request: { \"selector\": { \"history\": { \"$elemMatch\": { \"request_id\": \"d7b2b47958ae\" } } } }","rotation-policy#Rotation Policy":""},"title":"Document auditing"},"/technical-overview/data/couchdb-authentication/":{"data":{"":"","to-invalidate-a-session-in-couchdb-there-are-two-options#To invalidate a session in couchdb, there are two options:":"Change the session signing certificate on the server Change the password and/or salt for the user whose session should be invalidated There are drawbacks to note with each. Option 1 will invalidate all sessions; option 2 will invalidate all sessions for that user, and also their password.\nBecause of the nature of couch’s session management, there is no way to see a list of active/open sessions. Invalidating a specific session key could be achieved by denying a cookie value in e.g. nginx or API, but this is unlikely to be of practical value."},"title":"CouchDB Authentication"},"/technical-overview/data/database-conflicts/":{"data":{"":"Conflicts are a natural and unavoidable part of working in a distributed system.\nConflicts occur when one client (eg PouchDB) attempts to replicate to another (eg CouchDB), and the document that the first has does not have the same tree of changes that the second one has.","a-trivial-example#A trivial example":"Let’s say that you have two documents, and the diff between them looks something like this:\n=================================================================== --- 277533E3-A41B-3C46-909F-BCA038197C1E___2-2fff60be1557fdfef9915aa09e1b5119.json +++ 277533E3-A41B-3C46-909F-BCA038197C1E___2-d2a7186380b72306d75cd64b64402575.json @@ -1,7 +1,7 @@ { \"_id\": \"277533E3-A41B-3C46-909F-BCA038197C1E\", - \"_rev\": \"2-2fff60be1557fdfef9915aa09e1b5119\", + \"_rev\": \"2-d2a7186380b72306d75cd64b64402575\", \"data\": \"some shared data\", \"read\": [ - \"some_user\" + \"admin\" ] } The problem here is clear: some_user and admin read the document at the same time. To solve this, we could add some_user to the revision with admin already in it, and then delete the some_user revision:\n{ \"_id\": \"277533E3-A41B-3C46-909F-BCA038197C1E\", \"_rev\": \"2-d2a7186380b72306d75cd64b64402575\", \"data\": \"some shared data\", \"read\": [ \"admin\", \"some_user\" ] } { \"_id\": \"277533E3-A41B-3C46-909F-BCA038197C1E\", \"_rev\": \"2-2fff60be1557fdfef9915aa09e1b5119\", \"_deleted\": true, \"data\": \"some shared data\", \"read\": [ \"some_user\" ] }","an-example#An example":"To make it clear what’s happening, let’s walk through an example. If you already understand conflicts feel free to skip this section.\nLet’s say you register a pregnancy in the UI. And then you notice that you got the LMP wrong, so you hit edit and quickly make the change.\nMeanwhile, sentinel notices that you registers a pregnancy, and before you have a chance to change the LMP, sets up a bunch of recurring messages, editing the document.\nSentinel has now made a change to the first version of your document, and you’re trying to also make a change to the first version. These conflict.","how-to-manage-conflicts#How to manage conflicts":"If a server you manage has a conflict, you should do the following:","identify-why-conflicts-are-occurring#Identify why conflicts are occurring":"Take a look at the conflicts view, at https://yourserver/medic/_design/medic-conflicts/_view/conflicts. Each entry in that view looks like this:\n{ \"id\": \"1B7922A6-A6D6-C956-BBAE-DE5EB5A2E6C8\", \"key\": [ \"1-82d9a42305a79e403d9eca6a9a9daae9\" ], \"value\": null }, The id is the _id of the conflicting document, and the key is a list of conflicting _revs.\nFor each conflicting document, download that document, as well as all the _revs indicated in the key above. To download a document with a specific _rev, pass the rev parameter.\ncurl 'https://yourserver/medic/1B7922A6-A6D6-C956-BBAE-DE5EB5A2E6C8' \u003e doc.json curl 'https://yourserver/medic/1B7922A6-A6D6-C956-BBAE-DE5EB5A2E6C8?rev=1-82d9a42305a79e403d9eca6a9a9daae9' \u003e doc-conflict1.json Now you have all versions of the document, you can diff them and try to determine what went wrong.\nA common problem, for example, might be sentinel hitting a document really quickly between you creating it and editing it.\nA less common problem that requires some special attention, is UUID collisions (see below).\nIf you get stuck feel free to escalate to a developer, who can take a look.","if-appropriate-raise-a-bug#If appropriate, raise a bug":"If you determine (or just suspect) that the problem could be in our code or data structures, feel free to raise a bug to development. For example, historically read status has been stored against the document, which can easily cause conflicts if you create a document and then instantly view it with sentinel processing in the background.\nWhile some conflicts are inevitable, we want to architect away from them as much as possible.","regardless-resolve-the-conflicts#Regardless, resolve the conflicts":"Now that you’ve diagnosed the problem, and perhaps reported a bug, you should resolve the conflict.\nThis is extremely important. Conflicts cause saved changes to not appear against documents silently, and could cause important document changes (eg fixing someone’s EDD) to not occur.\nFor a document to no longer be conflicted, there must only be one active _rev. You would do this by picking one rev and updating it with the changes you want to make, and then updating the others with the _deleted: true property.\nYou can tell that a document is no longer conflicted if they don’t appear in the view, or if when you request the document with ?conflicts=true the _conflicts property either doesn’t appear or is empty:\nhttps://yourserver/medic/yourdocid?conflicts=true { \"_id\": \"yourdocid\", \"_rev\": \"2-the-current-rev\" \"_conflicts\": [ \"2-a-conflicting-rev\" ] } In the above example, yourdocid has two revisions that conflict with each other. Here you would need to update one of the revs (it doesn’t matter which) with the other’s changes, then delete the other rev. You would then see:\nhttps://yourserver/medic/yourdocid?conflicts=true { \"_id\": \"yourdocid\", \"_rev\": \"3-the-new-rev\" }","resolving-uuid-collisions#Resolving UUID collisions":"A UUID collision is a rare event where two clients (eg two android phones running our application) generate the same UUID ID for two completely different documents.\nYou can tell when your conflict is a UUID collision as there is no common root between the two conflicting versions. For example, one might be of type person and one might of type data_record.\nThese situations are more complicated, and require that you essentially recreate all conflicting versions as new documents, and fix any linkages that exist in the database.\nLet’s say you find the following situation:\n{ \"_id\": \"7FADDF76-55E4-4E50-9444-5E468E61EA83\" - \"_rev\": \"1-e4da228c29dc4ebc8b156967bbf48bd1\", + \"_rev\": \"1-ce40d1dc470643e2b9be9368ea9ff240\", - \"type\": \"person\" + \"type\": \"data_record\""},"title":"Database Conflicts"},"/technical-overview/data/db-schema/":{"data":{"":"CouchDB (and PouchDB in the browser) is a JSON-based NoSQL datastore that we use to store our data. While unlike SQL databases there is no enforced schema, code still follows conventions, and this document aims to describe the schema as defined by how our code operates.\nIn this document “record” means a JSON object that resides in CouchDB or PouchDB.","contacts-persons-and-places#Contacts (Persons and Places)":"Contacts are either places (e.g. clinic), groupings (e.g. family) or people (e.g. a patient or CHW).\nThe type property of contact records depends on the version of Medic you are running:\nIf you are running 3.7 or later you get to configure your contact hierarchy, and the type of contacts is contact, and the configured type is in the contact_type property. In earlier versions the type depended on hierarchical location of the contact. There are 3 hard coded place types: district_hospital, health_centre and clinic and one people type person. These place names are often meaningless (hence the configurable contact hierarchy in later versions) to the configured project, and are textually (ie in the UI not in data structures) renamed to mean other things. For example, as clinic is the lowest level it is often used to represent a family.","forms#Forms":"SMS forms are defined in application config.\nXML forms are stored in the database and have:\nAn _id of form: The type of form The actual XML Xforms definition attached XML forms are defined as XForm XML files","general-record-data-structure#General record data structure":"Property Description Required by _id CouchDB’s unique identifier of the record all records _rev CouchDB’s revision marker all records type The general type of the document, see below all user-created* documents reported_date Numerical timestamp of when the document is first created all user-created documents *User-created documents here generally means contacts and reports, but may extend further.","parent-hierarchy-representation#Parent hierarchy representation":"Contacts store their parent hierarchy as a minified hierarchical structure, which records the _id of each parent up until the top of the hierarchy:\n{ type: 'person', name: 'A patient', parent: { _id: 'clinic-id', parent: { _id: 'health_centre-id', parent: { _id: 'district_hospital-id' } } } } Generally when contacts are used in the app they are first “hydrated”, with the rest of the information filled in from their parent’s place documents:\n{ type: 'person', name: 'A patient', parent: { _id: 'clinic-id', name: 'A clinic', reported_date: 1234, ... // etc parent: { _id: 'health_centre-id', name: 'A Health Centre', reported_date: 1134, ... // etc parent: { _id: 'district_hospital-id', name: 'THE District Hospital', reported_date: 1034, ... // etc } } } } See Also: Document hydration\nAs of version 3.10, you can connect contacts with other documents via the linked_docs property. This allows the app to have access to these linked documents when the contact is used.\nLike the parent hierarchy, linked docs are stored as a minified object, where every linked doc is identified by a string tag and the UUID of the document it represents.\n{ type: 'person', name: 'A patient', parent: { _id: 'clinic-id', }, linked_docs: { custom_tag1: 'some-contact-id', custom_tag2: 'other-contact-id', custom_tag3: 'report-id', ... // etc }, } Linked docs are shallowly “hydrated” along with the parent hierarchy:\n{ type: 'person', name: 'A patient', parent: { _id: 'clinic-id', name: 'A clinic', reported_date: 1234, ... // etc parent: { _id: 'health_centre-id', name: 'A Health Centre', reported_date: 1134, ... // etc parent: { _id: 'district_hospital-id', name: 'THE District Hospital', reported_date: 1034, ... // etc } } }, linked_docs: { custom_tag1: { _id: 'some-contact-id', name: 'some contact', type: 'person', parent: { _id: 'other-clinic' }, reported_date: 4569, ... // etc }, custom_tag2: { _id: 'other-contact-id', name: 'other contact', type: 'clinic', parent: { _id: 'health_center' }, ... // etc }, custom_tag3: { _id: 'report-id', form: 'FORM', contact: { _id: 'submitter-id' }, ... // etc }, }, }","people#People":"People are both patients in the system and users of the system, such as CHWs or Nurses. Users have additional records marking them as users of the system (see User below).\nPeople always have a parent place.","places#Places":"Represent either an actual physical location such as a clinic, or a grouping such as a family or region.\nUnless a place is at the top of the hierarchy it has a parent place.\nEach location has a primary contact, which is a person contact stored in the contact property.","reports#Reports":"Reports are created by users filling out and submitting forms, as well as sending in SMS.\nAll reports:\nUse the data_record type Have their fields stored in the fields property Have the report author’s phone number (if it exists) stored in the from field Store the form’s identifier in the form field May have a contact property, which is a minified version of the report author’s contact and its hierarchy (see above) Reports can and should be linked to a contact when possible. The report’s associated contact (sometimes called the report’s subject) can be either a person or place. The link between report and contact is established by defining one of the following properties within the report:\nA person shortcode or uuid at doc.fields.patient_id, doc.fields.patient_uuid, or doc.patient_id A place shortcode or uuid at doc.fields.place_id or doc.place_id. Additionally, SMS reports:\nHave an sms_message property which contains, among other things, the raw SMS May not have a contact property if the SMS comes from a phone number that does not have an associated contact Additionally, XML reports:\nHave the XML file that Enketo (the XForm renderer used) generates as an attachment Have a content_type property of xml","targets#Targets":"Partner configuration code can configure targets to appear within the Targets/Analytics tab. Target documents are:\none per analytics reporting period updated when the user loads the application or when they view the targets tab updated a maximum of once per day { \"_id\": \"target~2000-01~user-contact-guid~org.couchdb.user:agatha\", \"type\": \"target\", \"user\": \"org.couchdb.user:agatha\", \"owner\": \"user-contact-guid\", \"updated_date\": 523435132468, \"targets\": [ { \"id\": \"deaths-this-month\", ... \"value\": { \"pass\": 0, \"total\": 15 } }, ... ] }","tasks#Tasks":"Partner configuration code running inside the Core Framework can cause tasks to appear within the Tasks tab. Each task in the tab is powered by a task document. Task documents are:\nupdated only after the data for their emitting contact changes or every 7 days created in the database for any task due within the last 60 days immutable once their state is “terminal” (Cancelled, Completed, Failed) State Description Draft Task has been calculated but it is scheduled in the future Ready Task is currently showing to the user Cancelled Task was not emitted when refreshing the requester’s data. Task has invalid partner emission. Completed Task was emitted with { resolved: true } Failed Task was never terminated and the endDate has past Attribute Description user The user settings id of the user who calculated and created the document. Used for controlling replication. (eg. org.couchdb.user:agatha) requester The guid of the contact whose data brought about the creation of the document. Used for controlling cancellation. owner The guid of the contact whose profile this task will appear on in the contact’s tab. forId If completing a task’s action opens a form. Completing the form creates a report. forId is the guid of the contact information that will be passed into the form. For most forms, the resulting report will be associated with this contact. emission Minified task data emitted from the partner code. stateHistory Each time the state attribute changes, the time of the change is recorded in the state history. To understand the difference between a task requester and a task owner, kindly see the example below:\nA CHW submits a delivery form. The patient is woman1, and she delivered one child child1. The delivery form generates a task, delivery_child_followup, but the task’s patient is child1 not woman1 In the case of this task, the requester is woman1, because it was their delivery report that triggered task generation, but the owner is child1. { \"_id\": \"task~org.couchdb.user:agatha~pregReport~pregnancy-facility-visit-reminder~2~523435132468\", \"type\": \"task\", \"authoredOn\": 523435132468, \"user\": \"org.couchdb.user:agatha\", \"requester\": \"requester-contact-guid\", \"owner\": \"owner-contact-guid\", \"state\": \"Ready\", \"emission\": { \"_id\": \"pregReport~pregnancy-facility-visit-reminder~2\", \"forId\": \"for-contact-guid\", \"dueDate\": \"2000-01-01\", \"startDate\": \"1999-12-29\", \"endDate\": \"2000-01-08\", \"priority\": \"high\", \"priorityLabel\": \"task.priority\", ... }, \"stateHistory\": [{ \"state\": \"Ready\", \"timestamp\": 523435132468, }], }","users#Users":"Users represent credentials and roles / permissions for accessing the application. This can either be:\npeople who can log into the application, such as CHWs or Nurses or credentials granting external software restricted permissions to perform certain tasks, such as allowing an external service permission to write reports via the api. User records have at least:\nAn _id of org.couchdb.user: A name which is the same as above A roles array There are two slightly different copies of this record stored.\nThe record in the _users database includes:\nThe type of user The password hash and associated data The _users database is what CouchDB uses for authentication and is only editable by administrative users, so is authoritative when it comes to roles and the like.\nThe medic database stores a copy of roles and permissions along with:\nThe type of user-settings They may have a contact_id field that is the _id of the person that the user is attached to They may also have a facility_id field that is the _id of the place that the user is attached to They may also have a known field. If this field is true, it means the user has logged in once. Otherwise, it will be undefined. Note that SMS users do not have a users record: their phone number will be attached to a person record, but they do not have a user because they do not access the application.\nUsers then, can be represented by up to 3 docs:\na person document that represents a physical human being in our hierarchy of places and people a users document that represents authorisation and authentication information for physical people or authenticated external services a user-settings document that ties the user and person documents together"},"title":"Database Schema"},"/technical-overview/data/hydration/":{"data":{"":"Documents are connected with each other via their document _id. For example:\na contact document is connected to its parent by storing their _id in the parent property\na report document is connected to its submitter by storing their _id in the contact property\nSee Also: DB Schema\nTo optimize database storage, documents are “minified” when stored and are “hydrated” when they are used by the app.\nMinification Minification means replacing a linked document’s content with an object that only contains its uuid. This is done to reduce duplication of data to save storage space on the client and server. Additionally, as we only have one copy of the data is easier to keep the information up to date.\nUnminified object:\n{ \"_id\": \"clinic_uuid\", \"name\": \"Clinic\", \"type\": \"clinic\", \"parent\": { \"_id\": \"health_center_id\", \"name\": \"Health Center\", \"type\": \"health_center\", \"parent\": { \"_id\": \"district_hospital_id\", \"name\" : \"District\", \"type\": \"district_hospital\" } }, \"contact\": { \"_id\": \"contact_id\", \"name\": \"Primary contact\", \"phone\": \"555 111 222\" }, \"linked_docs\": { \"tag1\": { \"_id\": \"sibling_id\", \"name\": \"Sibling clinic\", \"type\": \"clinic\" }, \"tag2\": { \"_id\": \"supervisor_id\", \"name\": \"The supervisor\", \"type\": \"person\" } } } when minified, becomes:\n{ \"_id\": \"clinic_uuid\", \"name\": \"Clinic\", \"type\": \"clinic\", \"parent\": { \"_id\": \"health_center_id\", \"parent\": { \"_id\": \"district_hospital_id\" } }, \"contact\": { \"_id\": \"contact_id\" }, \"linked_docs\": { \"tag1\": \"sibling_id\", \"tag2\": \"supervisor_id\" } } The following properties are minified:\nparent and recursively, every ancestor contact patient and place are removed from reports. The place_id, place_uuid, patient_id, or patient_uuid fields are available in the document. linked_docs when minifying a contact (as of 3.10.0) Hydration Hydration represents the inverse process to minification, where a stored id representing a connected document is replaced with the corresponding document’s content.\nMinified doc:\n{ \"_id\": \"clinic_uuid\", \"name\": \"Clinic\", \"type\": \"clinic\", \"parent\": { \"_id\": \"health_center_id\", \"parent\": { \"_id\": \"district_hospital_id\" } }, \"contact\": { \"_id\": \"contact_id\" }, \"linked_docs\": { \"tag1\": \"sibling_id\", \"tag2\": \"supervisor_id\" } } when hydrated becomes:\n{ \"_id\": \"clinic_uuid\", \"name\": \"Clinic\", \"type\": \"clinic\", \"parent\": { \"_id\": \"health_center_id\", \"name\": \"Health Center\", \"type\": \"health_center\", \"contact\": { \"_id\": \"supervisor_id\", \"name\": \"Supervisor\", \"type\": \"person\", \"parent\": { \"_id\": \"parent_id\" } }, \"parent\": { \"_id\": \"district_hospital_id\", \"name\" : \"District\", \"type\": \"district_hospital\", \"contact\": { \"_id\": \"manager_id\", \"name\": \"Manager\", \"type\": \"person\", \"parent\": { \"_id\": \"parent_id\" } } } }, \"contact\": { \"_id\": \"contact_id\", \"name\": \"Primary contact\", \"phone\": \"555 111 222\", \"parent\": { \"_id\": \"parent_id\" } }, \"linked_docs\": { \"tag1\": { \"_id\": \"sibling_id\", \"name\": \"Sibling clinic\", \"type\": \"clinic\" }, \"tag2\": { \"_id\": \"supervisor_id\", \"name\": \"The supervisor\", \"type\": \"person\" } } } There are two types of hydration:\nshallow hydration - when the id is replaced with the document’s content deep hydration - when the id is replaced with the document’s content and, recursively, each ancestor is deeply hydrated","a-hydrated-contact-has#A hydrated contact has":"deeply hydrated parent along with every ancestor shallowly hydrated primary contact shallowly hydrated linked_docs (as of 3.10)","a-hydrated-report-has#A hydrated report has":"a deeply hydrated submitter contact a deeply hydrated patient, if the report has a patient_id/patient_uuid a deeply hydrated place, if the report has a place_id","hydration#Hydration":"","minification#Minification":""},"title":"Document hydration"},"/technical-overview/data/performance/purging/":{"data":{"":"Only available in 3.7.0 and above\nPurging is a tool that allows you to increase performance and available disk space for offline users (eg CHWs) by removing unneeded documents from their device.\nAs users continually generate new reports their performance may naturally degrade as a result. You can use purging to remove older documents that are no longer relevant from their devices. Purging only removes documents from user’s devices: these reports are still available for online analytics and impact metrics.\nPurging is disabled by default, and is enabled if a purge function is specified in app_settings.json, along with a run schedule.\nThe following example would purge all reports that were created more than a year ago:\n{ \"//\": \"other app_settings settings\", \"purge\": { \"fn\": \"function(userCtx, contact, reports, messages, chtScriptApi, permissions) { const old = Date.now() - (1000 * 60 * 60 * 24 * 365); return reports.filter(r =\u003e r.reported_date \u003c old).map(r =\u003e r._id);}\", \"text_expression\": \"at 12 am on Sunday\" } } Purging is both very powerful and also very dangerous. Read the rest of this document carefully to make sure you completely understand how to purge and the ramifications of doing so, before using purging in your project.","client-side#Client-side":"Periodically a user’s device calls an API endpoint that returns batches of doc ids that have been purged since last time the same device checked. This is done in the background so the user is not disrupted from their work.\nThe system is similar to CouchDB replication, in the sense that a checkpointer document is saved in the corresponding server-side database, that stores the last_seq that the device has downloaded and is used to get the next batch of ids. Purging many documents while the application is running is an expensive and potentially disruptive activity, so instead the ids are stored until the next time the app is started.\nThen, when the user launches the app again during the bootstrap phase the app checks if there are any documents to purge, and if so deletes them all before starting up as usual. Doing the deletion prior to startup is relatively fast and designed to disrupt the user as little as possible.","configuration#Configuration":"To enable purging, write your purge configuration to purge.js in your project root:\nmodule.exports = { text_expression: 'at 9 am on Sunday', run_every_days: 7, cron: '0 1 * * SUN', fn: function(userCtx, contact, reports, messages, chtScriptApi, permissions) { const old = Date.now() - (1000 * 60 * 60 * 24 * 365); const oldMessages = Date.now() - (1000 * 60 * 60 * 24 * 90); const reportsToPurge = reports .filter(r =\u003e r.reported_date \u003c old) .map(r =\u003e r._id); const messagesToPurge = messages .filter(m =\u003e m.reported_date \u003c oldMessages) .map(m =\u003e m._id); return [...reportsToPurge, ...messagesToPurge]; } }; To disable purging, you need to explicitly configure the purge key with an empty object value in the app_settings.json file, as in this example:\n\"purge\": {}","considerations#Considerations":"","purge-configuration#Purge configuration":"As shown above, you should be exporting a property fn defining a self contained function: it should have no outside dependencies - like used variables, required modules or call outside functions.\nThis function takes six parameters:\nuserCtx, an object with the user’s roles as fields. For more information read the documentation for the User Context Object. contact, the contact document of a patient or other contact who has reports about them. reports, an array of all reports for that subject that are present on the server. messages, an array of sms messages that the contact has sent or received. chtScriptApi (Optional) the CHT API that provides CHT-Core Framework’s functions to other parts of the app. More info on the API can be found here. Added in 4.3.0. permissions (Optional) string or array of permissions that the user has. More info on permissions can be found here. Added in 4.3.0. And should return an array of _id values for docs you would like to be purged (or undefined / nothing if you don’t wish to purge anything). `Only ids of docs that were passed to the function are valid for purging: you are not allowed to purge other documents.\nIn the cases of reports that do not have subjects or their subjects are not found, the purge function will receive an empty object as contact. In the cases of reports about deleted contacts, the purge function will receive a { _deleted: true } object as the contact.\nAs of 3.9.0, task documents that are in a terminal state (Cancelled, Completed, Failed) are purged if their end_date is more than 60 days ago (relative to server date). As of 3.9.0, target documents are purged if their reporting period is more than 6 months ago (relative to server date). Purging task and target documents happens automatically on every purge run. The intervals and required states are not configurable.","purged-documents-client-side#Purged documents client-side":"The key thing to keep in mind while purging is that documents that you purge are deleted on user’s device. This sounds obvious, but it’s important to understand how this affects the running of the application:\nAny rules you have written that presume that the document exists may break. For example, if the document completes a task, purging it will reopen that task, unless you also purge the document that created the task in the first place (while making sure that purging that report doesn’t break more things!) Similarly targets won’t be able to use the report to generate values, so counts may go down or become inaccurate Additionally, the contact summary will also lose out on being able to use that report Changing the user’s roles list (adding/removing roles) will cause the user to download all purged docs ids from the purge database corresponding to their new roles list. More subtly, you may also confuse your users!\nIf you purge documents too quickly, they may get confused as to whether they created the report or not, and may create it again, causing data problems. Users are not told that purging is occurring in a very obvious way: the expectation is that purging will naturally occur as documents become irrelevant, and so users should never really notice.\nUsers may search for their own documents, and use data from them in novel ways you may not anticipate. It’s important to work with your users to ensure documents are only removed once there are no uses for them.\nIt is key then, that you test your purge rules thoroughly!","purged-documents-server-side#Purged documents server-side":"Purging is run as a scheduled task in Sentinel.\nPurging does not touch documents in the medic database, everything is done in separate purge databases(medic-purged-roles-).\nThe purge databases names contain an md5 of the JSON representation of a list of unique roles. They also contain a _local/info doc where the roles are listed in clear text.\nAs of 3.14.0, contacts that have more than 20,000 associated reports + messages will be skipped, and none of their associated reports and messages will be purged. A single contact that has more than 20,000 associated records most likely points to a configuration issue. Skipped contacts’ ids are reported both in logs and in purgelog files (see below).\nA purgelog document is saved in the medic-sentinel database after every purge. The purgelog has a meaningful id: purgelog:, where timestamp represents the moment when purging was completed. As of 3.14.0, every time purging fails to complete due to an error, a purgelog:error document is saved in the medic-sentinel database. The ids of these documents are similarly meaningful: purgelog:error:.\npurgelog docs have the following properties:\nproperty value type description date ISO formatted date The moment when purging was completed roles Map A map of roles lists and their hashes that purging has run for duration Number Time it took to run purging, in ms. skipped_contacts Array Available since 3.14.0 List of contacts ids that were skipped, due to having too many associated records. error String Available since 3.14.0 Describes the error that caused purging to fail. Only present in purgelog:error docs. You can retrieve a list of all your purge logs, descending from newest to oldest, with this request:\nhttps(s):///medic-sentinel/_all_docs?end_key=\"purgelog:\"\u0026start_key=\"purgelog:\\ufff0\"\u0026descending=true\nYou can retrieve a list of all your purge logs with errors, descending from newest to oldest, with this request:\nhttps(s):///medic-sentinel/_all_docs?end_key=\"purgelog:error:\"\u0026start_key=\"purgelog:error:\\ufff0\"\u0026descending=true\nPurging is reversible. If you update your purge function, when running purge the old invalid purges will be deleted. This does not mean that devices will automatically re-download documents that become unpurged. In order for the user to re-download a previously purged document, the document either needs to be updated in the medic database on the server or the user has to download all data again.\nRunning purge will not remove old purge databases, even if they don’t correspond to any existent users. Their removal is a manual process.\nPurge does not run when adding new roles or adding said new roles to users. It also does not run when an existent user is updated to have a new unique list of roles (one that purge has not run over yet). This means that roles need to be planned carefully in order to take advantage of serverside purge. If purge has not run for the user’s list of roles at the moment of initial replication, the user will download all documents - only to be purged later.","schedule-configuration#Schedule configuration":"You must set a schedule for purging to run server-side. Depending on the size of the database and server capacity, purging could be a lengthy and resource intensive operation, so it is recommended you run purge on a schedule that your server can sustain (for example at nighttime in the weekends).\nYou can also change the frequency of local purge downloads (default being every 7 days).\nproperty description required fn Self-contained purge function yes run_every_days The interval (in days) at which purges will be downloaded client-side. Default 7. no text_expression Any valid text expression to describe the interval of running purge server-side. For more information, see LaterJS no if cron provided cron Any valid Cron expression to describe the interval of running purge server-side. For more information, see LaterJS no if text_expression provided Example of purge configured in your app_settings:\n\"//\": \"other app_settings settings\", \"purge\": { \"fn\": \"function(userCtx, contact, reports, messages) { return []; }\", \"cron\": \"0 1 * * SUN\", \"text_expression\": \"at 1:00 am on Sun\", \"run_every_days\": 5 }","server-side#Server-side":"Purging runs on the server on a configurable schedule.\nIt will iterate over all users to generate a list of unique roles groups that represent every user. Each group will have their purged docs saved in an individual database.\nThen, it will iterate over all existent contacts, collecting all reports about that contact along with all sms messages that the contact has sent or received. This is similar to the scoping you may have encountered when configuring tasks and targets.\nThe configured purge function runs over all combinations of purge scope (contact + reports + messages) and user context (unique list of roles) to determine which docs should be purged.\nThe resulting list of docs to be purged is compared to the existent purged docs so that only the differences are saved (old purges are reverted and new purges are added).\nA document is considered purged for a user if a document with the same id, prefixed by purge, exists in the corresponding purge database.\nThe following user:\n{ \"name\": \"org.couchdb.user:\", \"roles\": [ \"district_admin\", \"supervisor\" ] } would get their purges from a medic-purged-role- where role_hash is an md5 hash of the user’s roles.\nWhen users sync (includes initial sync), they will only download documents that are not purged for their roles."},"title":"Purging"},"/technical-overview/data/performance/replication/":{"data":{"":"Replication is what we call it when users download a copy of the data on to their device.\nRestricting replication If the user has an online role they can access all the data, otherwise they will get restricted access to the data.\nRestriction by place The most common restriction is by place. This is where we check the user’s facility_id property, and allow access to all contacts that are descendants of that place, and all reports and messages that are about one of those descendants.\nFor example, if a CHP’s facility_id property is set to the ID of the Maori Hill clinic, then they will be able to see all patients and all reports about patients at that clinic.\nNote\nStarting in v4.9.0, users with the can_have_multiple_places permission can be assigned more than one facility_id. The primary use case for this is for Supervisors who manage multiple areas. A video demonstration of setting up a multi-facility user and what this looks like from a user’s perspective can be found on the forum and in the June 2024 CHT Round-up.\nDepth Sometimes though you want to only access contacts near the top of the hierarchy. This may be because returning all contacts would be too much data to be practical, or for patient privacy, or because it’s just not part of your workflow. In this case you can configure a replication depth for a specific role under replication_depth in the app settings.\nIn 3.10, we add the ability to limit replication depth for reports, in conjunction with replication depth for contacts. In 4.18, we add the ability to allow replication of primary contacts and their reports at max depth.","code-sample#Code sample:":"{ \"replication_depth\": [ { \"role\": \"district_manager\", \"depth\": 1, \"report_depth\": 1 }, { \"role\": \"supervisor\", \"depth\": 1, \"report_depth\": 1, \"replicate_primary_contacts\": true }, { \"role\": \"national_manager\", \"depth\": 2 } ] } See Also: Replication Depth","contact-depth#Contact Depth":"Contact depth is calculated relative to the user’s home place, having the user’s facility at depth = 0. Places and contacts that are direct children the facility are on depth = 1, and so on.\nFor example, considering the following contact hierarchy:\ndistrict \u003e health_center \u003e clinic \u003e area \u003e family \u003e patient a supervisor at health_center level, and the following configuration:\n{ \"replication_depth\": [{ \"role\": \"supervisor_role\", \"depth\": }]} The supervisor would download the following contacts and reports, depending on condigured depth:\nDocuments depth=0 depth=1 depth=2 depth=3 health_center ✔ ✔ ✔ ✔ all reports about health_center ✔ ✔ ✔ ✔ person children of health_center ❌ ✔ ✔ ✔ reports about person children of health_center ❌ ✔ ✔ ✔ clinic ❌ ✔ ✔ ✔ all reports about clinic ❌ ✔ ✔ ✔ person children of clinic ❌ ❌ ✔ ✔ reports about person children of clinic ❌ ❌ ✔ ✔ family ❌ ❌ ✔ ✔ all reports about family ❌ ❌ ✔ ✔ person children of family ❌ ❌ ❌ ✔ reports about person children of family ❌ ❌ ❌ ✔","depth#Depth":"","replicate-primary-contacts#Replicate primary contacts":"As of 4.18.0.\nWhen a replication_depth sets replicate_primary_contacts to true, users with the assigned role will replicate the primary contacts of the places they are allowed to see. Primary contacts are replicated even if they are deeper than these users are allowed to download, and even if these contacts belong to other branches of the hierarchy. The primary contact is treated as if it is at the same depth as the place, and will follow the report replication depth of the place.\nFor example, considering the following settings:\n{ \"replication_depth\": [ { \"role\": \"chw\", \"depth\": 2, \"report_depth\": 2, \"replicate_primary_contacts\": true }, { \"role\": \"supervisor\", \"depth\": 2, \"report_depth\": 1, \"replicate_primary_contacts\": true } ], \"contact_types\": [ { \"id\": \"level1\" }, { \"id\": \"level2\", \"parents\": [\"level1\"] }, { \"id\": \"level3\", \"parents\": [\"level2\"] }, { \"id\": \"level4\", \"parents\": [\"level3\"] }, { \"id\": \"level5\", \"parents\": [\"level4\"] }, { \"id\": \"person\", \"parents\": [\"level1\", \"level2\", \"level3\", \"level4\", \"level5\"], \"person\": true s} ] } For the configuration above, a user that has the role chw is allowed to replicate contacts 2 levels below their facility and replicate reports for contacts 2 levels below their facility and replicate primary contacts. For a chw at level2, it will replicate contacts at level2, level3 and level4, along with their reports. They will also replicate the primary contact of a place at level4, even if the primary contact is a child of a level5 contact, along with this contact’s reports.\nA user that has the supervisor role is allowed to replicate contacts 2 levels below their facility and replicate reports for contacts 1 level below their facility and replicate primary contacts. A supervisor at level2 will replicate the same contacts as the chp role above. Similar to the chp, they will replicate primary contacts for places at level4, but the supervisor users will not replicate the reports of primary contacts because a primary contact of a level4 place has a depth of 2. The supervisor will replicate reports for primary contacts of places at level2 or level3.","report-depth#Report Depth":"As of 3.10, report_depth works similarly to depth, but it’s applied to reports (documents with \"type\": \"data_record\") alone, excepting reports that are submitted by the authenticated user. It only works in conjunction with depth.\nFollowing the examples above:\n{ \"replication_depth\": [{ \"role\": \"supervisor_role\", \"depth\": , \"report_depth\": }]} The supervisor would download the following contacts and reports:\nDocuments depth=0 depth=1 report_depth=0 depth=2 report_depth=0 depth=2 report_depth=1 depth=2 report_depth=0 depth=3 report_depth=1 depth=3 report_depth=2 health_center ✔ ✔ ✔ ✔ ✔ ✔ ✔ all reports about health_center ✔ ✔ ✔ ✔ ✔ ✔ ✔ children of health_center ❌ ✔ ✔ ✔ ✔ ✔ ✔ reports about children of health_center submitted by supervisor ❌ ✔ ✔ ✔ ✔ ✔ ✔ reports about children of health_center submitted by other users ❌ ❌ ❌ ✔ ❌ ✔ ✔ clinic ❌ ✔ ✔ ✔ ✔ ✔ ✔ reports about clinic submitted by supervisor ❌ ✔ ✔ ✔ ✔ ✔ ✔ reports about clinic submitted by other users ❌ ❌ ❌ ✔ ❌ ✔ ✔ Documents depth=0 depth=1 report_depth=0 depth=2 report_depth=0 depth=2 report_depth=1 depth=2 report_depth=0 depth=3 report_depth=1 depth=3 report_depth=2 children of clinic ❌ ❌ ✔ ✔ ✔ ✔ ✔ reports about children of clinic submitted by supervisor ❌ ❌ ✔ ✔ ✔ ✔ ✔ reports about children of clinic submitted by other users ❌ ❌ ❌ ❌ ❌ ❌ ✔ family ❌ ❌ ✔ ✔ ✔ ✔ ✔ reports about family submitted by supervisor ❌ ❌ ✔ ✔ ✔ ✔ ✔ reports about family submitted by other users ❌ ❌ ❌ ❌ ❌ ❌ ✔ children of family ❌ ❌ ❌ ❌ ❌ ✔ ✔ reports about children of family submitted by supervisor ❌ ❌ ❌ ❌ ❌ ✔ ✔ reports about children of family submitted by other users ❌ ❌ ❌ ❌ ❌ ❌ ❌ If report_depth is omitted, the user will have access to all reports about contacts they see.\nIf report_depth is higher than depth, it has no effect.\nIf depth is omitted, the rule is invalid and will be ignored.\nIf a user’s roles match multiple replication_depth entries, the one with the highest depth is selected.\n{ \"replication_depth\": [ { \"role\": \"role1\", \"depth\": 1 }, { \"role\": \"role2\", \"depth\": 2 }, { \"role\": \"role3\", \"depth\": 3 } ] } A user with roles: [\"role1\", \"role2\", \"role3\"] will have a replication depth of 3.\n{ \"replication_depth\": [ { \"role\": \"role1\", \"depth\": 2, \"report_depth\": 1 }, { \"role\": \"role2\", \"depth\": 5, \"report_depth\": 2 }, { \"role\": \"role3\", \"depth\": 4, \"report_depth\": 3 } ] } A user with roles: [\"role1\", \"role2\", \"role3\"] will have a replication depth of 5 and report replication depth of 2.","restricting-replication#Restricting replication":"","restriction-by-place#Restriction by place":"","sensitive-documents#Sensitive documents":"We won’t replicate reports that are private and are about the user when the sender is someone the user can’t access. A report is private when it has a property doc.fields.private with a value of true. For example, if a supervisor submits a private report about one of their CHPs, that CHP won’t be able to see it.","supervisor-signoff#Supervisor signoff":"Some reports need to be signed off by a supervisor even though that supervisor doesn’t have the depth to see the patient the report is about. To achieve this the report needs a field named needs_signoff with a value of true."},"title":"Replication"},"/technical-overview/data/performance/telemetry/":{"data":{"":"Introduced in v3.4.0\nThe app collects performance data on certain user actions which is then aggregated each day and replicated to the server. This can be used to evaluate the performance of the code and configuration and to evaluate where improvements can be made.\nThe aggregate doc for the previous day is created when the first telemetry item is recorded each day. This is stored in the medic-user--meta database on the device and replicated to the server when an internet connection is available. This user specific server db is then replicated into the medic-users-meta database which holds all aggregate telemetry docs for all users.\nThe aggregate docs’ IDs follow the pattern telemetry-----.\nNote\nVersions prior to v3.12.0 do aggregate in a monthly basis instead of daily, and the aggregate docs’ IDs follow the pattern telemetry----.","export-data#Export data":"","metadata#Metadata":"When the aggregate doc is created the Telemetry service also includes a snapshot of some metadata.\nField Description year The year the data was collected. Added in 3.4.0. month The month the data was collected. Initially the month was 0 indexed (eg: 0=Jan, 1=Feb, …), but from 3.8.0 this bug was fixed so it changed to 1 indexed (eg: 1=Jan, 2=Feb, …). Added in 3.4.0. day The day of the month the data was collected. Added in 3.12.0. user The username of the logged in user. Added in 3.4.0. deviceId A unique key for this device. Added in 3.4.0. versions.app The version of the webapp. Added in 3.5.0. versions.forms. The version of each form. Added in 3.5.0. userAgent The userAgent string from the user’s browser. Added in 3.4.0. hardwareConcurrency The number of cores reported from the browser. Added in 3.4.0. screen.width The width of the screen in pixels. Added in 3.4.0. screen.height The height of the screen in pixels. Added in 3.4.0. deviceInfo.app.version The version name of the Android app. Only captured when running in the Android wrapper v0.4.0+. Added in 3.8.0. deviceInfo.app.packageName The package name of the Android app. Only captured when running in the Android wrapper v0.9.0+. Added in 3.12.0. deviceInfo.app.versionCode The Internal version code of the Android app. Only captured when running in the Android wrapper v0.9.0+. Added in 3.12.0. deviceInfo.software.androidVersion The version of Android OS. Only captured when running in the Android wrapper v0.4.0+. Added in 3.8.0. deviceInfo.software.osApiLevel The API of the Android OS. Only captured when running in the Android wrapper v0.4.0+. Added in 3.8.0. deviceInfo.software.osVersion The version of Android OS (detailed). Only captured when running in the Android wrapper v0.4.0+. Added in 3.8.0. deviceInfo.hardware.device The Android device name. Only captured when running in the Android wrapper v0.4.0+. Added in 3.8.0. deviceInfo.hardware.model The Android model name. Only captured when running in the Android wrapper v0.4.0+. Added in 3.8.0. deviceInfo.hardware.manufacturer The Android device manufacturer. Only captured when running in the Android wrapper v0.4.0+. Added in 3.8.0. deviceInfo.hardware.hardware The Android device hardware. Only captured when running in the Android wrapper v0.4.0+. Added in 3.8.0. deviceInfo.hardware.cpuInfo The Android device CPU information. Only captured when running in the Android wrapper v0.4.0+. Added in 3.8.0. deviceInfo.storage.free The available storage on the device. Only captured when running in the Android wrapper v0.4.0+. Added in 3.8.0. deviceInfo.storage.total The total storage on the device. Only captured when running in the Android wrapper v0.4.0+. Added in 3.8.0. deviceInfo.ram.free The available RAM on the device. Only captured when running in the Android wrapper v0.4.0+. Added in 3.8.0. deviceInfo.ram.total The total RAM on the device. Only captured when running in the Android wrapper v0.4.0+. Added in 3.8.0. deviceInfo.ram.threshold The level of RAM at which certain services will be killed by Android. Only captured when running in the Android wrapper v0.4.0+. Added in 3.8.0. deviceInfo.network.downSpeed The reported download speed of the network. Only captured when running in the Android wrapper v0.4.0+. Added in 3.8.0. deviceInfo.network.upSpeed The reported upload speed of the network. Only captured when running in the Android wrapper v0.4.0+. Added in 3.8.0. dbInfo.doc_count The number of docs in the local database. Added in 3.4.0. dbInfo.update_seq The update sequence of the local database. Added in 3.4.0. dbInfo.idb_attachment_format The format of database attachments. Added in 3.4.0. dbInfo.db_name The name of the local database. Added in 3.4.0. dbInfo.auto_compaction Whether or not auto compaction is set. Added in 3.4.0. dbInfo.adapter The database adapter being used. Added in 3.4.0.","offline-user-on-tecno-kc8-device#Offline user on Tecno KC8 Device":"{ \"_id\": \"telemetry-2024-12-18-mrjones-5d2e1833-ed7a-46d7-a50e-b6f3becb9e14\", \"_rev\": \"1-c3b23df8b2701839d726576e3d87fd26\", \"type\": \"telemetry\", \"metrics\": { \"boot_time\": { \"sum\": 3633.899999976158, \"min\": 3633.899999976158, \"max\": 3633.899999976158, \"count\": 1, \"sumsqr\": 13205229.209826723 }, \"boot_time:1:to_first_code_execution\": { \"sum\": 2280.2000000476837, \"min\": 2280.2000000476837, \"max\": 2280.2000000476837, \"count\": 1, \"sumsqr\": 5199312.040217456 }, \"boot_time:2:to_bootstrap\": { \"sum\": 1057.2999999523163, \"min\": 1057.2999999523163, \"max\": 1057.2999999523163, \"count\": 1, \"sumsqr\": 1117883.289899168 }, \"boot_time:2_3:to_purge_meta\": { \"sum\": 126.30000007152557, \"min\": 126.30000007152557, \"max\": 126.30000007152557, \"count\": 1, \"sumsqr\": 15951.69001806736 }, \"boot_time:3:to_angular_bootstrap\": { \"sum\": 296.39999997615814, \"min\": 296.39999997615814, \"max\": 296.39999997615814, \"count\": 1, \"sumsqr\": 87852.95998586655 }, \"boot_time:apdex:tolerable\": { \"sum\": 3633.899999976158, \"min\": 3633.899999976158, \"max\": 3633.899999976158, \"count\": 1, \"sumsqr\": 13205229.209826723 }, \"boot_time:purging_meta:true\": { \"sum\": 1, \"min\": 1, \"max\": 1, \"count\": 1, \"sumsqr\": 1 }, \"replication:meta:sync:docs\": { \"sum\": 0, \"min\": 0, \"max\": 0, \"count\": 1, \"sumsqr\": 0 }, \"replication:meta:sync:failure\": { \"sum\": 103, \"min\": 103, \"max\": 103, \"count\": 1, \"sumsqr\": 10609 }, \"replication:meta:sync:failure:reason:offline:client\": { \"sum\": 1, \"min\": 1, \"max\": 1, \"count\": 1, \"sumsqr\": 1 }, \"rules-engine:ensureTaskFreshness:cancel\": { \"sum\": 13, \"min\": 13, \"max\": 13, \"count\": 1, \"sumsqr\": 169 }, \"rules-engine:initialize\": { \"sum\": 957, \"min\": 957, \"max\": 957, \"count\": 1, \"sumsqr\": 915849 }, \"rules-engine:targets\": { \"sum\": 68, \"min\": 68, \"max\": 68, \"count\": 1, \"sumsqr\": 4624 }, \"rules-engine:targets:dirty-contacts\": { \"sum\": 0, \"min\": 0, \"max\": 0, \"count\": 1, \"sumsqr\": 0 }, \"rules-engine:targets:queued\": { \"sum\": 1, \"min\": 1, \"max\": 1, \"count\": 1, \"sumsqr\": 1 }, \"rules-engine:tasks:all-contacts\": { \"sum\": 9201, \"min\": 9201, \"max\": 9201, \"count\": 1, \"sumsqr\": 84658401 }, \"rules-engine:tasks:all-contacts:queued\": { \"sum\": 1, \"min\": 1, \"max\": 1, \"count\": 1, \"sumsqr\": 1 }, \"rules-engine:tasks:dirty-contacts\": { \"sum\": 212, \"min\": 212, \"max\": 212, \"count\": 1, \"sumsqr\": 44944 }, \"tasks:load\": { \"sum\": 11560, \"min\": 11560, \"max\": 11560, \"count\": 1, \"sumsqr\": 133633600 }, \"tasks:load:apdex:tolerable\": { \"sum\": 11560, \"min\": 11560, \"max\": 11560, \"count\": 1, \"sumsqr\": 133633600 }, \"user_settings:language:fr\": { \"sum\": 1, \"min\": 1, \"max\": 1, \"count\": 1, \"sumsqr\": 1 } }, \"device\": { \"userAgent\": \"Mozilla/5.0 (Linux; Android 10; TECNO KC8 Build/QP1A.190711.020; wv) AppleWebKit/537.36 (KHTML, like Gecko) Version/4.0 Chrome/131.0.6778.104 Mobile Safari/537.36 org.medicmobile.webapp.mobile.moh_echis/v1.4.0-moh-echis-publish.1\", \"hardwareConcurrency\": 4, \"screen\": { \"width\": 360, \"height\": 800 }, \"deviceInfo\": { \"app\": { \"version\": \"v1.4.0-moh-echis-publish.1\", \"packageName\": \"org.medicmobile.webapp.mobile.moh_echis\", \"versionCode\": 104000100 }, \"software\": { \"androidVersion\": \"10\", \"osApiLevel\": 29, \"osVersion\": \"4.9.190+(LMN-OP-210708V261)\" }, \"hardware\": { \"device\": \"TECNO-KC8\", \"model\": \"TECNO KC8\", \"manufacturer\": \"TECNO\", \"hardware\": \"mt6761\", \"cpuInfo\": { \"cores\": 4, \"arch\": \"armv7l\", \"model name\": \"ARMv7 Processor rev 4 (v7l)\" } }, \"storage\": { \"free\": 5767675904, \"total\": 26175582208 }, \"ram\": { \"free\": 463101952, \"total\": 1919627264, \"threshold\": 150994944 }, \"network\": {} } }, \"metadata\": { \"year\": 2024, \"month\": 12, \"day\": 18, \"aggregate_date\": \"2024-12-19T11:05:35.661Z\", \"user\": \"mrjones\", \"deviceId\": \"5d2e1833-ed7a-46d7-a50e-b6f3becb9e14\", \"versions\": { \"app\": \"4.9.0\", \"forms\": { \"contact:clinic:create\": \"2-7a176b9cd9169832634b63e03d391294\", \"contact:clinic:edit\": \"2-fe81a67e42ef0f43d7fcd7295d7ce2f8\", \"contact:district_hospital:create\": \"2-00139379e7991109b19d5bfe632f5dc2\", \"contact:district_hospital:edit\": \"2-84bc951a4a35618329d7186b1b3fa38d\", \"contact:health_center:create\": \"2-69448427b175e4ba03765d9a7c058d37\", \"contact:health_center:edit\": \"2-ea5fd64b71c5ec20e68ad63de611baf0\", \"contact:person:create\": \"2-9f42c026ecb7f8343d20bf3aedd13cb4\", \"contact:person:edit\": \"2-1d3c910ccaae9b29b1a8faf7ae89a590\", \"death_report\": \"2-7f714822d6fe7b93a883d6a81036cb9f\", \"delivery\": \"2-97c685e244f96cf0651e044859bbb5a6\", \"pnc_danger_sign_follow_up_baby\": \"2-89d24a536053cb8cea5df7e72a047145\", \"pnc_danger_sign_follow_up_mother\": \"2-640160361599e3f342b464a934280c9f\", \"pregnancy\": \"2-110d0b12ff93265f5920b42d6e7d24c9\", \"pregnancy_danger_sign\": \"2-759bad093e027981b5aaa3271c7e5748\", \"pregnancy_danger_sign_follow_up\": \"2-4be953f24626861103030310539d9577\", \"pregnancy_facility_visit_reminder\": \"2-46bceb0e07953b4f2313ad882bb50a11\", \"pregnancy_home_visit\": \"2-db0284587b0a8c629f7e33beb788f75a\", \"replace_user\": \"2-f7e079b0740f43a271916813a4608862\", \"undo_death_report\": \"2-002af440802f3ca3c3ad7ef8514b0cb3\" }, \"settings\": \"7-ae079730f416fd090c94df3716ff07ee\" } }, \"dbInfo\": { \"doc_count\": 578, \"update_seq\": 1297, \"idb_attachment_format\": \"binary\", \"db_name\": \"medic-user-mrjones\", \"auto_compaction\": true, \"adapter\": \"idb\" } }","online-user-in-the-browser#Online user in the browser":"{ \"_id\": \"telemetry-2020-5-medic-016304ab-7167-4c97-93bb-a6626ef6128d\", \"_rev\": \"1-90a94d76eb30ac47e2f498b80cf54cd1\", \"type\": \"telemetry\", \"metrics\": { \"boot_time\": { \"sum\": 3879.43500012625, \"min\": 308.0550000304356, \"max\": 1110.6599999475293, \"count\": 7, \"sumsqr\": 2616858.529000253 }, \"boot_time:1:to_first_code_execution\": { \"sum\": 2096.309999935329, \"min\": 141.66500000283122, \"max\": 558.6599999805912, \"count\": 8, \"sumsqr\": 672987.1618553334 }, \"boot_time:2:to_bootstrap\": { \"sum\": 628.5150001058355, \"min\": 70.50499995239079, \"max\": 129.88000002223998, \"count\": 7, \"sumsqr\": 58704.48214660012 }, \"boot_time:3:to_angular_bootstrap\": { \"sum\": 1415.5550000723451, \"min\": 45.25000008288771, \"max\": 787.9549999488518, \"count\": 7, \"sumsqr\": 732805.5498113176 }, \"search:contacts:types\": { \"sum\": 3728.9899999741465, \"min\": 96.60000004805624, \"max\": 1134.1099999845028, \"count\": 8, \"sumsqr\": 2939824.639961114 }, \"search:reports:subjectIds\": { \"sum\": 3825.224999745842, \"min\": 27.304999995976686, \"max\": 982.2900000144728, \"count\": 25, \"sumsqr\": 1461182.0137715642 } }, \"metadata\": { \"year\": 2020, \"month\": 5, \"day\": 20, \"user\": \"medic\", \"deviceId\": \"016304ab-7167-4c97-93bb-a6626ef6128d\", \"versions\": { \"app\": \"master\", \"forms\": { \"client_review\": \"2-51ad4bd1c86c18ea768196da8264147e\", \"contact:clinic:create\": \"16-8dbb4dde6f8f9067e9cbed5b44ce5fd0\", \"contact:clinic:edit\": \"2-c1c955042db963a95470bdf891bcef6f\", \"contact:district_hospital:create\": \"2-42b8b579b38ca6c2978c238e7d9c78fe\", \"contact:district_hospital:edit\": \"2-4360bb0eb6f6ff863849a07adac7e851\", \"contact:health_center:create\": \"2-c9b86820479f211c8e505eba150c5203\", \"contact:health_center:edit\": \"2-19b3da5f9f146be07ec1854a372e374b\", \"contact:person:create\": \"2-230d39c41682da720b83e4909b138c9b\", \"contact:person:edit\": \"6-75781492122157beb7c2451861970ece\", \"death_report\": \"2-97cfa3cc24ee743dfea03c019d644bec\", \"delivery\": \"2-adf37c0da7d5e58c8e4d27fc940f70e6\", \"enroll\": \"10-13322d437e301f3c436e3b989a3fd384\", \"no_contact\": \"4-0901afd126ec6c87fe952ca3c3a652ed\", \"pnc_danger_sign_follow_up_baby\": \"2-12e8989f6774828bb10aa4b675bc43ff\", \"pnc_danger_sign_follow_up_mother\": \"2-62f58b6e0ade10d70f15df73ddb6a025\", \"pregnancy\": \"2-4fa3db96cae638c4cb041125c9970496\", \"pregnancy_danger_sign\": \"2-49758bfd894fb5db6e719bff864f9da9\", \"pregnancy_danger_sign_follow_up\": \"2-a9a2b6800d6f93e151a3a63359620976\", \"pregnancy_facility_visit_reminder\": \"2-0e3deaf22966166d05bcf803615499c8\", \"pregnancy_home_visit\": \"2-283eb323e61a7fc756bda61f9d9be382\", \"referral_for_care\": \"2-627c6c21bd54e482133acc8188a71f8d\", \"undo_death_report\": \"2-3a4ca8d678f0338d7044cb1bc35d103d\" } } }, \"device\": { \"userAgent\": \"Mozilla/5.0 (X11; Linux x86_64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/80.0.3987.106 Safari/537.36\", \"hardwareConcurrency\": 4, \"screen\": { \"width\": 1920, \"height\": 1080 }, \"deviceInfo\": {} }, \"dbInfo\": { \"db_name\": \"medic\", \"purge_seq\": \"0-g1AAAAEzeJzLYWBg4MhgTmHgzcvPy09JdcjLz8gvLskBCjPlsQBJhgNA6v____ezEhnwqnsAUfefkLoFEHX7CalrgKibj1tdkgKQTLLHa2dSAkhNPX41DiA18XjVJDIkyUMUZAEAuYBi9g\", \"update_seq\": \"1456-g1AAAAE2eJzLYWBg4MhgTmHgzcvPy09JdcjLz8gvLskBCjMlMiTJ____PytxAg4FSQpAMskerGYhLjUOIDXxYDVTcKlJAKmpB6tZhENNHguQZGgAUkBl87MSl-JVtwCibn9WYjtedQcg6u7jdj9E3QOIuv9ZSQwMjDVZAFZfZ6g\", \"sizes\": { \"file\": 67196510, \"external\": 65800620, \"active\": 65357308 }, \"other\": { \"data_size\": 65800620 }, \"doc_del_count\": 41, \"doc_count\": 497, \"disk_size\": 67196510, \"disk_format_version\": 7, \"data_size\": 65357308, \"compact_running\": false, \"cluster\": { \"q\": 8, \"n\": 1, \"w\": 1, \"r\": 1 }, \"instance_start_time\": \"0\", \"host\": \"http://localhost:5988/medic/\", \"auto_compaction\": false, \"adapter\": \"http\" } }","performance-data#Performance data":"Each aggregate data point has the following fields:\nField Description sum A sum of all the recorded times in milliseconds. min The smallest time recorded in milliseconds. max The largest time recorded in milliseconds. count The number of times recorded. sumsqr The sum of squares of the times recorded in milliseconds. This is useful to see the variance, for example, a lower sumsqr can be indicative of having data closer together. The CHT records the Apdex (Application Performance Index) that is an open standard for measuring performance of software applications. Its purpose is to convert measurements into insights about user satisfaction, by specifying a uniform way to analyze and report on the degree to which measured performance meets user expectations.\nThe Apdex level is satisfied when the duration is less than or equal to 3s; tolerable when the duration is more than 3s but less than or equal to 12s; frustrated when duration is more than 12s. The Apdex is recorded as a telemetry entry using the format: :apdex:, for example, if the telemetry is about boot time and it had a tolerable performance, the Apdex is recorded as boot_time:apdex:tolerable.\nNote that this is not the same as synchronizing to the server apdex.\nFind below the list of telemetry data recorded by CHT:\nField Description Apdex boot_time The overall boot time including loading the code, purging, and accessing the database. Yes. Added in 4.7 boot_time:1:to_first_code_execution The time between the page loading and the JavaScript starting to run. boot_time:2:to_bootstrap The time between JavaScript starting and the bootstrapping (purging, initial replication, etc) to complete. boot_time:2_1:to_replication The time it takes to complete initial replication. If initial replication was interrupted and retried, this value will be incorrect. Added in 3.14. boot_time:2_2:to_purge The time it takes to complete the purge. Added in 3.14 and removed in 4.3. boot_time:2_3:to_purge_meta The time it takes to complete the purge of local meta database. Added in 3.14. boot_time:3:to_angular_bootstrap The time between bootstrapping completing and the webapp being ready to use. boot_time:4:to_db_warmed The time between the webapp being ready to use and the database being ready to use. Added in 3.6 and removed in 3.8. boot_time:purging: boot_time:purging:true when purging ran successfully on device startup, boot_time:purging:false when purging did not run. Added in 3.14 and removed in 4.3. boot_time:purging_failed The purging failed when running on device startup. Added in 3.14 and removed in 4.3. boot_time:purging_meta: boot_time:purging_meta:true when purging of the local meta database ran successfully, boot_time:purging_meta:false when it did not run. Added in 3.14. boot_time:purging_meta_failed The purging of the local meta database failed. Added in 3.14. contact_list:load The time taken to load the list of contacts on the left hand side of the Contacts tab. Added in 4.7. Yes. Added in 4.7 contact_list:query The time taken to query the People tab on initial load, when searching or sorting, this metric covers from fetching the data to preparing the data before display. Added in 4.7. Yes. Added in 4.7 enketo:reports::: The time taken to fill in app forms that are opened from Reports Tab. The action can either be “add” or “edit”. The component is one of: “render” covers getting the form and rendering it on screen; “user_edit_time” is the time the user took to fill in and submit the form; or “save” is about converting the form into a report and saving it. Yes, added for render and save actions. Added in 4.7 enketo:contacts::: The time taken to fill contact forms and app forms that are opened from People Tab. The action can either be “add” or “edit”. The component is one of: “render” covers getting the form and rendering it on screen; “user_edit_time” is the time the user took to fill in and submit the form; or “save” is about converting the form into a report and saving it. Yes, added for render and save actions. Added in 4.7 enketo:tasks::: As above but for forms on the Tasks tab. Yes, added for render and save actions. Added in 4.7 message_list:load The time taken to load the list of messages on the left hand side of the Messages tab. Added in 4.7. Yes. Added in 4.7 search:contacts The time taken to list all contacts. search:contacts: The time taken to search all contacts using the given filters. search:reports The time taken to list all reports. search:reports: The time taken to search all reports using the given filters. contact_detail::load On the People tab, the time taken to load a contact, from the time the contact was selected to the time all content for that contact (contact summary, condition cards, reports, tasks, etc…) has fully loaded on the screen. Added in 4.7. Yes. Added in 4.7 contact_detail:\u003c_form\u003e:load:contact_data The time taken to load a contact’s data. Added in 4.7. contact_detail:\u003c_form\u003e:load:load_descendants The time taken to load a contact’s descendants, that is places and contacts under the contact hierarchy level. Added in 4.7. contact_detail:\u003c_form\u003e:load:load_reports The time taken to load a contact’s associated reports. Added in 4.7. contact_detail:\u003c_form\u003e:load:load_targets The time taken to load a contact’s targets. Added in 4.7. contact_detail:\u003c_form\u003e:load:load_tasks The time taken to load a contact’s tasks. Added in 4.7. contact_detail:\u003c_form\u003e:load:load_contact_summary The time taken to load a contact’s contact-summary. Added in 4.7. report_detail::load On the Reports tab, the time taken to load a report from the point it was selected on the left hand side to the time it was fully rendered. Added in 4.7. Yes. Added in 4.7 messages_detail:load On the Messages tab, the time taken to load the messages detail on the right hand side once has been selected from the list on the left hand side. Added in 4.7. Yes. Added in 4.7 sidebar_filter:reports:open Number of times the user opens the sidebar filter in Reports tab. sidebar_filter:analytics:target_aggregates:open Number of times the user opens the sidebar filter in Aggregate Targets tab. client-date-offset The difference between the client datetime and the server datetime. Only recorded if the difference is large enough that it may cause issues. analytics:targets:load The time taken to load the targets page. Added in 3.9 Yes. Added in 4.7 analytics:target_aggregates:load The time taken to load the target aggregates. Added in 4.7. Yes. Added in 4.7 tasks:load The time taken to load the tasks page. Added in 3.9 Yes. Added in 4.7 tasks:refresh The time taken to refresh tasks on the tasks page. Added in 3.9 Yes. Added in 4.7 report_list:load On the Reports tab, the time taken to load the list of reports on the left hand side. Added in 4.7. Yes. Added in 4.7 report_list:query The time taken to query the Reports tab on initial load, when searching or filtering, this metric covers from fetching the data to preparing the data before display. Added in 4.7. Yes. Added in 4.7 rules-engine:initialize The time taken to initialize the rules-engine . Added in 3.9 rules-engine:update-emissions Removed in 4.13. The time taken to update emissions in the rules-engine, when receiving a change. Added in 3.9 rules-engine:refresh The time taken to refresh tasks and targets in the rules-engine, when receiving a change. Added in 4.14 rules-engine:refresh:dirty-contacts Number of “dirty” contacts[1] when refreshing targets and tasks in the rules-engine. Added in 4.14 rules-engine:tasks:all-contacts The time taken to fetch tasks for all contacts in rules-engine. Added in 3.9 rules-engine:tasks:some-contacts The time taken to fetch tasks for some specific contacts in rules-engine. Added in 3.9 rules-engine:tasks:dirty-contacts Number of “dirty” contacts[1] when fetching tasks in the rules-engine. Added in 3.9 rules-engine:targets Time taken for the rules-engine to fetch targets. Added in 3.9 rules-engine:targets:dirty-contacts Number of “dirty” contacts[1] when fetching targets in the rules-engine. Added in 3.9 rules-engine:tasks:dirty-contacts Number of “dirty” contacts[1] when fetching tasks in the rules-engine. Added in 3.9 rules-engine:ensureTaskFreshness:cancel Removed in 4.13. The time taken to cancel the automated task freshness thread in the rules-engine. This event is only recorded when the thread is cancelled before executing the refresh. Added in 3.9 rules-engine:ensureTargetFreshness:cancel Removed in 4.13. The time taken to cancel the automated target freshness thread in the rules-engine. This event is only recorded when the thread is cancelled before executing the refresh. Added in 3.9 rules-engine:background-refresh The time taken automatically recalculate tasks and targets in the rules-engine when starting the app. Added in 4.14. rules-engine:background-refresh:dirty-contacts Number of “dirty” contacts[1] when automatcally refreshing tasks and targets in the rules-engine.. Added in 4.14. rules-engine:background-refresh:cancel The time taken to cancel the automated task and target recalculation thread in the rules-engine. This event is only recorded when the thread is cancelled before executing the refresh. Added in 4.14. rules-engine:tasks-breakdown:some-contacts The time taken to fetch the tasks breakdown by status for some contacts. Added in 3.13. rules-engine:tasks-breakdown:all-contacts The time taken to fetch the tasks breakdown by status for all contacts. Added in 3.13. replication:user-initiated Number of times the user clicked “Sync now”. Added in 3.12. replication:::success Time taken to replicate, when replication was successful. Added in 3.12. replication:::failure Time taken to replicate, when replication failed. Added in 3.12. replication:::failure:reason:offline:client Number of times replication failed because of connection errors, and the app detects the client is offline. Added in 3.12. replication:::failure:reason:offline:server Number of times replication failed because of connection errors, and the app detects the client is online. Added in 3.12. replication:::failure:reason:error Number of times replication failed because of errors other than connection errors. Added in 3.12. replication:::docs Number of replicated docs. For medic replication, stores number of “read” docs, for meta replication, stores sum of read docs for every direction. Added in 3.12. replication:medic::ms-since-last-replicated-date Time between a replication attempt and the last successful replication. Only recorded for medic database, every time replication is attempted. Added in 3.12. replication:medic::denied Number of times replication was denied[2]. Added in 3.12. tasks:group:all-tasks Total number of tasks for the household (includes all statuses), when displaying household tasks page. Added in 3.13. tasks:group:cancelled Number of cancelled tasks for the household, when displaying household tasks page. Added in 3.13. tasks:group:ready Number of tasks in “Ready” state for the household, when displaying household tasks page. Added in 3.13. tasks:group:ready: Breakdown of “Ready” tasks by task_title for the household, when displaying household tasks page. Added in 3.13. tasks:group:modal:confirm Number times the user confirms navigation away from the household tasks page. Added in 3.13. tasks:group:modal:reject Number times the user rejects navigation away from the household tasks page. Added in 3.13. user_settings:language: The selected language by the user, example: user_settings:language:en. Added in 3.14. enketo::add:render The time it took to render the training card. Added in 4.2.0 Yes. Added in 4.15.0 enketo::add:user_edit_time The time the user took to complete the training card. Added in 4.2.0 enketo::add:save The time it took to save the training card. Added in 4.2.0 enketo::add:quit The time from when the training card was rendered to when the user quits the training. Added in 4.2.0 geolocation:success A successful GPS response with the value showing the accuracy. geolocation:failure: An unsuccessful GPS response. x is a constant matching the GeolocationPositionError or with one of the following values: -1 unknown failure, -2 timeout, or -3 geolocation services unavailable. training_materials_list:load On the Training Materials page, the time taken to load the list of trainings on the left hand side. Added in 4.15.0. Yes. Added in 4.15.0 [1] “Dirty” indicates that the contact’s task documents are not up to date. They will be refreshed before being used. [2] Replication can be denied when the user doesn’t have permissions to create a doc (hierarchy permissions) or when a doc fails a validate_doc_update check.\nUnless otherwise specified, database and direction placeholders stand for any combination of:\ndatabase direction medic from or to meta sync","summary-data-via-api#Summary data via API":"To get summary data with one item per user, see the /api/v2/export/user-devices API, which was added in CHT 4.7.0.","summary-data-via-node-script#Summary data via Node script":"Note\nTelemetry data can be viewed directly in your browser with Fauxton at https://{{CHT_INSTANCE_URL}}/_utils, and navigating the medic-users-meta database.\nTo bulk export all telemetry in JSON for further analysis or visualization, first meet these prerequisites:\nEnsure that both node and npm are installed and that the needed node libraries are installed: npm install inquirer pouchdb-core fs path minimist pouchdb-adapter-http Get a current copy of the export script: curl -s -o get_users_meta_docs.js https://raw.githubusercontent.com/medic/cht-core/master/scripts/get_users_meta_docs.js To export the data open a terminal in the folder where you want to save the export, and run this command:\nnode get_users_meta_docs.js --mode batch --type telemetry https://USERNAME:PASSWORD@COUCHDB_SERVER:COUCHDB_PORT/medic-users-meta \u003e telemetry.json For example, if your username is admin, your password is pass, your CouchDB server is localhost and your CouchDB port is 5984, you would run:\nnode get_users_meta_docs.js --mode batch --type telemetry https://admin:pass@localhost:5984/medic-users-meta \u003e telemetry.json This will save a file named telemetry.json containing all the telemetry data in the current directory.","telemetry-examples#Telemetry Examples":""},"title":"Telemetry"},"/why-the-cht/":{"data":{"":"The Community Health Toolkit is a collection of open-source technologies and open-access resources developed by a community focused on global health equity. We envision a world where primary health care is equitable, accessible, and delivered by people who are trusted in their communities. Start with the CHT overview, and join the community forum! Community health systems can dramatically improve the accessibility, quality, speed, and equity of primary health care, but only if health workers are effectively equipped and supported. Advances in open source technology are making it easier and more affordable than ever to deliver impactful, dignified care in even the hardest-to-reach communities.\nWith thousands of health workers using these tools to support a million home visits every month, the CHT is the most full-featured, mature, and widely-used open source software toolkit designed specifically for community health systems. Hundreds of individuals contribute to the CHT as designers, developers, researchers, health policy experts, health system implementers, and frontline health workers.","build-once-deploy-for-everyone#Build once, deploy for everyone":"By design, CHT applications do not rely on proprietary hardware or operating systems. They can run on any device that health workers have – whether it is basic phones (via SMS), smartphones, tablets, or computers. The same source code powers the experience, meaning that the app you see on your desktop is the same app you see on your mobile device. Having common code for all devices reduces the barriers for users, and makes the digital health toolks easier to maintain.\nApps built with the Core Framework are fully responsive Progressive Web Applications (PWA). The app content will use the available screen space, showing a single-panel mobile layout for small screens on phones, and show a two-panel layout for larger devices like tablets, laptops, and desktop computers. As a PWA, CHT apps get the best of open web standards while also getting native-like capabilities to reach anyone, anywhere, on any device – all with a single codebase. For more about how CHT Apps and other PWAs integrate the best of native apps and the open web, see the post What are Progressive Web Apps? on web.dev.","made-for-localization#Made for localization":"Apps can be customized for different deployments and types of workflows. The Core Framework has been used in dozens of countries around the world with localization settings.\nUsers can currently interact with the app in English, French, Hindi, Nepali, Spanish, Swahili, Arabic, or Indonesian and new languages can be added in the admin console. The app also supports Bikram Sambat or Gregorian calendars and localized date formatting.","offline-first-technology#Offline-first technology":"Digital health apps need to support health systems in a wide range of low infrastructure environments. Apps built with the Core Framework are designed to be Offline-First and work with only an occasional internet connection.\nThese apps store a user’s data locally on their device so that workflows can be completed without syncing to the server. When a connection becomes available, data will automatically sync to and from the server. Offline-first technology enables health workers to carry out important duties even when opportunities to sync may be weeks apart. As with any app, there is a limit to how much data can be stored locally, particularly on a mobile device. For users needing access to large amounts of data, online user roles are available.","ready-for-national-scale#Ready for national scale":"Around the world, countries are adopting a model of primary health care that starts in communities and homes where high-quality, integrated services are delivered by trusted health workers who are empowered with technology. The scalability and flexibility of the CHT facilitates the creation of holistic digital community health tools that are well integrated throughout the hierarchy of national health systems and across the patient continuum of care. As of 2024, six governments have selected the CHT as a tool of choice for their national community health systems.","reference-apps#Reference apps":"The Community Health Toolkit’s Reference Apps provide templates for structuring and organizing a community health workflow, its configuration code, and testing framework. They include a foundation for forms, data fields, and even analytics, and can be deployed as-is or easily customized by a developer for your unique context.","speeding-up-app-development#Speeding up app development":"The Core Framework makes it faster to build full-featured, scalable digital health apps by providing a foundation developers can build on. These apps can support most languages, are offline-first, and work on basic phones (via SMS), smartphones, tablets, and the web. Rich interactive applications that would take 6-18 months to build from scratch can be built using CHT Core in as little as 1-2 months. Some of the COVID-19 response CHT-based applications shipped in under 2 weeks.\nApp developers are able to define health system roles, permissions and reporting hierarchies, and make use of five highly configurable areas of functionality: messaging, task and schedule management, decision support workflows, longitudinal person profiles, and analytics.\nThe Core Framework can be used to support the unique needs of a given health system and the work of community health workers, frontline supervisors, facility-based nurses, health system managers, and even patients and caregivers. Building guides and tutorials are available to help you kick things off, and you’ll also find an active forum where the community of practice comes together to support each other.","the-cht-community#The CHT Community":"The CHT is 100% open source–it always has been and always will be freely available as a digital public good. This is possible thanks to a diverse and active community of practice that includes contributors from global health NGOs, technical organizations, governments, and research institutions, with the non-profit organization Medic serving as a technical steward.\nThe CHT community’s longterm focus on community-driven health systems, integrated care, and universal health coverage has surfaced innumerable insights that make the CHT unique. We’re also deeply committed to human-centered and participatory design, as an approach to building technology with and for hard-to-reach communities. These principles have helped us to foster a remarkably dynamic and innovative community; learning and building with this community is one of the key reasons people decide to work with the CHT.\nIf you’re contributing to the CHT and would like to see your organization’s logo featured here, send an email to hello@medic.org.\nSee Also: Get involved"},"title":"Why the CHT?"}}