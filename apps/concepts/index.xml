<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>Community Health Toolkit – Concepts</title><link>https://docs.communityhealthtoolkit.org/apps/concepts/</link><description>Recent content in Concepts on Community Health Toolkit</description><generator>Hugo -- gohugo.io</generator><atom:link href="https://docs.communityhealthtoolkit.org/apps/concepts/index.xml" rel="self" type="application/rss+xml"/><item><title>Apps: Accessing CHT Apps</title><link>https://docs.communityhealthtoolkit.org/apps/concepts/access/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://docs.communityhealthtoolkit.org/apps/concepts/access/</guid><description>
&lt;p>Apps built with the Core Framework run on most modern computers with the newest versions of Google Chrome or Mozilla Firefox.&lt;/p>
&lt;h2 id="hardware--software-requirements">Hardware &amp;amp; Software Requirements&lt;/h2>
&lt;p>Hardware procurement, ownership, and management is the responsibility of each implementing organization. We strongly urge all organizations to procure hardware locally to ensure ease of replacement, repair, sustainability, and hardware support when needed.&lt;/p>
&lt;h2 id="accessing-on-desktop">Accessing on Desktop&lt;/h2>
&lt;p>On desktop devices, there is no need to download anything. Simply go to a web browser and type in your unique URL, for example:&lt;/p>
&lt;p>&lt;code>{{projectname}}.app.medicmobile.org&lt;/code>&lt;/p>
&lt;h2 id="accessing-on-mobile">Accessing on Mobile&lt;/h2>
&lt;p>The app also runs with an app on Android phones and tablets. It works best on devices running version 5.1 or later with at least 8 GB of internal memory (16 GB for supervisors) and minimum 1 GB RAM.&lt;/p>
&lt;h3 id="downloading-and-launching">Downloading and Launching&lt;/h3>
&lt;p>To download your app on a mobile device, first navigate to the Google Play Store. From there, click on the search icon in the upper right, and type in the custom name of your health app or project. Make sure the app shown is the correct one and then select it. Then, click on the “Install” button to begin the download.&lt;/p>
&lt;p>Once the download is complete, you can access your app via an app icon in your applications menu. Note that the icon, as well as the app name displayed, is customizable by the organization or project.&lt;/p>
&lt;figure class="left col-3 col-lg-3">&lt;a href="playstore.png">
&lt;img src="playstore.png"/> &lt;/a>
&lt;/figure>
&lt;figure class="left col-3 col-lg-3">&lt;a href="search-results.png">
&lt;img src="search-results.png"/> &lt;/a>
&lt;/figure>
&lt;figure class="left col-3 col-lg-3">&lt;a href="install.png">
&lt;img src="install.png"/> &lt;/a>
&lt;/figure>
&lt;figure class="left col-3 col-lg-3">&lt;a href="siaya.png">
&lt;img src="siaya.png"/> &lt;/a>
&lt;/figure>
&lt;h2 id="login">Login&lt;/h2>
&lt;p>When accessing your app for the very first time, a login page is displayed. Users enter a username and password that grant access to their customized app experience.&lt;/p>
&lt;p>On mobile devices, the app generally stays logged in after initial setup so that CHW users don’t have to type in their credentials each day.&lt;/p>
&lt;p>On desktop devices, the user must login again if they close the app tab or browser window.&lt;/p>
&lt;p>Users may log out by going to the options menu available in the top right corner of the app.&lt;/p>
&lt;p>&lt;em>See Also&lt;/em>: &lt;a href="https://docs.communityhealthtoolkit.org/apps/concepts/navigation/">Navigating CHT Apps&lt;/a>&lt;/p>
&lt;figure class="left col-3 col-lg-3">&lt;a href="login-mobile.png">
&lt;img src="login-mobile.png"/> &lt;/a>
&lt;/figure>
&lt;figure class="left col-9 col-lg-9">&lt;a href="login-desktop.png">
&lt;img src="login-desktop.png"/> &lt;/a>
&lt;/figure>
&lt;h2 id="magic-links-for-logging-in-token-login">Magic Links for Logging In (Token Login)&lt;/h2>
&lt;figure class="right col-6 col-lg-9">
&lt;img src="enable.token.login.gif"
alt="Animated image showing the &amp;#39;Enable login via SMS link&amp;#39; check box being clicked and &amp;#39;password&amp;#39; and &amp;#39;confirm password&amp;#39; fields being hidden"/>
&lt;/figure>
&lt;p>When creating users, the admin has the option to enable a user to login in by simply clicking a link sent via SMS. When the token login link is clicked and the app is not installed on the user&amp;rsquo;s phone, it will open in their default browser. If no gateway is set up on the CHT server, the message may be sent via another messaging app. The link is only valid for 24 hours and can only be used once to log in. This ensures the link is used only by the intended recipient. By clicking the magic link, the user is logged into their project&amp;rsquo;s instance directly, bypassing the need to manually enter a username and password.&lt;/p>
&lt;p>With token login, the password is never known by the admin or the user because the password is changed to a random string after every successful token login. If the user needs to login again, they need to contact the admin so that the admin can either send a new magic link or switch their account back to using a manual login and password.&lt;/p>
&lt;p>
&lt;p>&lt;em>See Also&lt;/em>: &lt;a href="https://docs.communityhealthtoolkit.org/apps/examples/training/">Remote Onboarding and Training&lt;/a>&lt;/p>
&lt;p>&lt;em>See Also&lt;/em>: &lt;a href="https://docs.communityhealthtoolkit.org/apps/reference/app-settings/token_login/">.token_login&lt;/a>&lt;/p>
&lt;/p>
&lt;figure class="left col-3 col-lg-3">&lt;a href="link.png">
&lt;img src="link.png"/> &lt;/a>
&lt;/figure>
&lt;figure class="left col-3 col-lg-3">&lt;a href="open-with.png">
&lt;img src="open-with.png"/> &lt;/a>
&lt;/figure>
&lt;figure class="left col-3 col-lg-3">&lt;a href="log-in.png">
&lt;img src="log-in.png"/> &lt;/a>
&lt;/figure>
&lt;div class="alert alert-primary" role="alert">
&lt;h4 class="alert-heading">Note&lt;/h4>
The magic link workflow will not work for users who want to use multiple devices or for multiple users on one device.
&lt;/div></description></item><item><title>Apps: Navigating CHT Apps</title><link>https://docs.communityhealthtoolkit.org/apps/concepts/navigation/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://docs.communityhealthtoolkit.org/apps/concepts/navigation/</guid><description>
&lt;h2 id="summary-of-page-tabs">Summary of Page Tabs&lt;/h2>
&lt;p>Page tabs are the primary way to navigate apps built with the Core Framework. The number of tabs is variable depending on the user’s role and place in the hierarchy. For example, non-admin users don’t have Messages. The Reports tab is accessible to CHWs but often located inside the secondary menu drawer.&lt;/p>
&lt;figure class="left col-12 col-lg-7">&lt;a href="tabs.gif">
&lt;img src="tabs.gif"/> &lt;/a>
&lt;/figure>
&lt;p>&lt;br>&lt;br>&lt;br>&lt;br>&lt;/p>
&lt;ul>
&lt;li>&lt;strong>Messages​&lt;/strong>: A place for community-based staff to send and exchange messages&lt;/li>
&lt;li>&lt;strong>Tasks​&lt;/strong>: This is a list of upcoming visits, follow-ups, or other required tasks&lt;/li>
&lt;li>&lt;strong>Reports​&lt;/strong>: A detailed history of all forms submitted by CHWs and other staff&lt;/li>
&lt;li>&lt;strong>People​&lt;/strong>: This is where profiles of districts, staff, CHWs and patients live&lt;/li>
&lt;li>&lt;strong>Targets&lt;/strong>: Displays real-time visualizations of key activity and impact indicators&lt;/li>
&lt;/ul>
&lt;h2 id="the-menu-drawer">The Menu Drawer&lt;/h2>
&lt;figure class="right col-6 col-lg-4">&lt;a href="menu.png">
&lt;img src="menu.png"/> &lt;/a>
&lt;/figure>
&lt;p>Tap the menu icon in the upper right corner of the header to access other pages, edit personal settings, view sync status and more.&lt;/p>
&lt;ul>
&lt;li>&lt;strong>Admin Console&lt;/strong>: Change advanced app settings (only admin users will see this)&lt;/li>
&lt;li>&lt;strong>About&lt;/strong>: View your app version and other detailed database information&lt;/li>
&lt;li>&lt;strong>User Settings&lt;/strong>: Update basic user information like email, phone number, and password&lt;/li>
&lt;li>&lt;strong>Report Bug&lt;/strong>: Let us know if something isn’t working or you encounter errors&lt;/li>
&lt;li>&lt;strong>Log Out&lt;/strong>: Sign out of the app&lt;/li>
&lt;/ul>
&lt;h3 id="sync-status">Sync Status&lt;/h3>
&lt;figure class="right col-6 col-lg-4">&lt;a href="sync-status.png">
&lt;img src="sync-status.png"/> &lt;/a>
&lt;/figure>
&lt;p>Data synchronization is important for &lt;a href="https://docs.communityhealthtoolkit.org/apps/concepts/users/">offline users&lt;/a>. These users keep a copy of the data they have access to on their device. They can work from their device while disconnected from the internet (offline), by reading from and writing to their copy of the data. “Sync” (synchronization) is when data on the device is made to match the data on the server and requires an internet connection. The CHT app monitors the online status and attempts sync accordingly.&lt;/p>
&lt;h4 id="replication-types">Replication Types&lt;/h4>
&lt;p>Synchronization consists of upward replication and downward replication.&lt;/p>
&lt;ul>
&lt;li>&lt;strong>Upward Replication&lt;/strong>: Uploading all new or updated data from the device to the server. It includes a retry mechanism for handling larger data batches, ensuring a robust and reliable upload process.&lt;/li>
&lt;li>&lt;strong>Downward Replication&lt;/strong>: Downloading new or updated data from the server to the device. Downward replication may include the download of software updates to the CHT app when available.&lt;/li>
&lt;/ul>
&lt;p>The CHT application manages data synchronization across two types of databases:&lt;/p>
&lt;ul>
&lt;li>&lt;strong>Main Application Database (&lt;code>medic&lt;/code>)&lt;/strong>: The main database that stores the primary data used by the application. It includes contacts, reports, messages, and other critical documents necessary for the core functionality of the application. This database is synchronized continuously to reflect changes to the application, such as new contact creations. Each user stores a subset of the main database which includes only the documents they&amp;rsquo;re allowed to view.&lt;/li>
&lt;li>&lt;strong>User-Metadata Database(&lt;code>medic-user-{username}-meta&lt;/code>)&lt;/strong>: Each user has a dedicated database that stores operational metadata, including &lt;a href="https://docs.communityhealthtoolkit.org/apps/guides/performance/telemetry/">telemetry data&lt;/a> and error messages. Synchronization occurs at predefined intervals to ensure up-to-date monitoring and analysis.&lt;/li>
&lt;/ul>
&lt;h4 id="sync-status-notification">Sync Status Notification&lt;/h4>
&lt;p>At the bottom of the menu is a notification which provides important information about data synchronization.&lt;/p>
&lt;p>If the sync status is green and says “All reports synced,” this means you have successfully uploaded the most recent data on your device to the server. It also means that you downloaded the latest data from the server as of the time displayed. Note that there could be more recent data changes on the server, and it doesn&amp;rsquo;t guarantee you are up to date.&lt;/p>
&lt;p>If the indicator is red, it means you have data changes waiting to be uploaded to the server. You should check your internet and data connection to ensure a successful sync.&lt;/p>
&lt;aside class="right col-6 col-lg-4">
&lt;figure>&lt;a href="sync-inprogress.jpg">
&lt;img src="sync-inprogress.jpg"/> &lt;/a>
&lt;/figure>
&lt;figure>&lt;a href="sync-failure.jpg">
&lt;img src="sync-failure.jpg"/> &lt;/a>
&lt;/figure>
&lt;figure>&lt;a href="sync-successful.jpg">
&lt;img src="sync-successful.jpg"/> &lt;/a>
&lt;/figure>
&lt;/aside>
&lt;p>Triggering a manual sync by clicking the &amp;ldquo;Sync now&amp;rdquo; button will provide feedback at every step of the process through a snackbar appearing on the bottom side of the screen. This performs upward and downward synchronization of both databases. It will also retry the sync process in case of failure..&lt;/p>
&lt;h4 id="synchronization-triggers">Synchronization Triggers&lt;/h4>
&lt;ul>
&lt;li>&lt;strong>On Login&lt;/strong>: Synchronization is automatically initiated upon successful user login if the app is connected to the internet.&lt;/li>
&lt;li>&lt;strong>Manual&lt;/strong>: Clicking the &amp;ldquo;Sync now&amp;rdquo; button.&lt;/li>
&lt;li>&lt;strong>Periodic Sync&lt;/strong>: The application performs regular checks and attempts to synchronize. The main application database syncs every 5 minutes, while the user metadata database syncs every 30 minutes..&lt;/li>
&lt;li>&lt;strong>On Reload&lt;/strong>: Synchronization is automatically initiated when the user reloads the application, refreshes the page, or clicks the reload button in the &amp;ldquo;Update available&amp;rdquo; modal.&lt;/li>
&lt;li>&lt;strong>On Connect&lt;/strong>: The app also detects when an internet connection becomes available and attempts to sync immediately.&lt;/li>
&lt;/ul>
&lt;h4 id="sync-status-states">Sync Status States&lt;/h4>
&lt;p>The synchronization process can be in one of the following states:&lt;/p>
&lt;ul>
&lt;li>&lt;strong>Unknown&lt;/strong>: The sync status is not determined yet.&lt;/li>
&lt;li>&lt;strong>Disabled&lt;/strong>: Sync is disabled - only applies to online-only users.&lt;/li>
&lt;li>&lt;strong>InProgress&lt;/strong>: Synchronization is currently ongoing.&lt;/li>
&lt;li>&lt;strong>Success&lt;/strong>: The last sync operation was successful.&lt;/li>
&lt;li>&lt;strong>Required&lt;/strong>: There is data pending synchronization.&lt;/li>
&lt;/ul></description></item><item><title>Apps: Forms</title><link>https://docs.communityhealthtoolkit.org/apps/concepts/forms/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://docs.communityhealthtoolkit.org/apps/concepts/forms/</guid><description>
&lt;p>Forms are a building block of all CHT apps. They are used when creating or editing contacts, and when completing a care guide or survey within the app. Forms are also used to interpret SMS interactions with the CHT.&lt;/p>
&lt;p>When a completed form is submitted, it is treated as a Report in the app. All reports can be viewed in the &lt;a href="https://docs.communityhealthtoolkit.org/apps/features/reports/">Reports tab&lt;/a> by those with the proper access within the &lt;a href="https://docs.communityhealthtoolkit.org/apps/concepts/hierarchy/">hierarchy&lt;/a>.&lt;/p>
&lt;p>There are four different types of forms:&lt;/p>
&lt;ul>
&lt;li>&lt;a href="https://docs.communityhealthtoolkit.org/apps/reference/forms/contact/">&lt;strong>Contact Forms&lt;/strong>&lt;/a>: used to create and edit contacts. Defined as CHT-enhanced XForms.&lt;/li>
&lt;li>&lt;a href="https://docs.communityhealthtoolkit.org/apps/reference/forms/app/">&lt;strong>App Forms&lt;/strong>&lt;/a>: serve as actions within the app, such as a task or an action. Defined as CHT-enhanced XForms.&lt;/li>
&lt;li>&lt;a href="https://docs.communityhealthtoolkit.org/apps/reference/forms/collect/">&lt;strong>Collect Forms&lt;/strong>&lt;/a>: used to render forms in Medic Collect. Defined as ODK XForms and need a corresponding JSON form to receive data in CHT.&lt;/li>
&lt;li>&lt;a href="https://docs.communityhealthtoolkit.org/apps/reference/app-settings/forms/">&lt;strong>JSON Forms&lt;/strong>&lt;/a>: used for data coming from external channels such as SMS, or via interoperability with other tools. Defined according to a JavaScript Object Notation schema.&lt;/li>
&lt;/ul>
&lt;p>Forms that can be completed in the app are built using a CHT-enhanced version of &lt;a href="https://opendatakit.github.io/xforms-spec/">ODK XForms&lt;/a> notation &amp;ndash; a XML definition of the structure and format for a set of questions. Since writing raw XML can be tedious, the &lt;a href="http://xlsform.org/">XLSForm standard&lt;/a> is commonly used to define forms. The &lt;a href="https://github.com/medic/cht-conf">cht-conf&lt;/a> command line tool can be used to convert to the XForm format and include the form in a CHT application. The instructions on this site assume some knowledge of XLSForm.&lt;/p></description></item><item><title>Apps: Care Guides</title><link>https://docs.communityhealthtoolkit.org/apps/concepts/care-guides/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://docs.communityhealthtoolkit.org/apps/concepts/care-guides/</guid><description>
&lt;h2 id="care-guides">Care Guides&lt;/h2>
&lt;figure class="right col-12 col-lg-6">&lt;a href="care-guides.png">
&lt;img src="care-guides.png"/> &lt;/a>
&lt;/figure>
&lt;p>Forms are used to build “Care Guides” that take health workers through care protocols and provide decision support for their interactions with patients. App designers can use the basic form building functionality in a variety of ways.&lt;/p>
&lt;p>Care Guides also allow CHWs to register new families and people, assess a sick child, and enroll a new pregnancy into an antenatal care schedule. Care Guides can be located in many parts of your app, including the Tasks, People, and Reports tabs.&lt;/p>
&lt;p>Care Guides provided in the CHT&amp;rsquo;s Reference Applications can be configured for your app, or a new Care Guide can be written from scratch. Some configuration is probably necessary due to different local requirements, and government protocols.&lt;/p>
&lt;h3 id="functionality">Functionality&lt;/h3>
&lt;figure class="right col-12 col-lg-4">&lt;a href="functionality.png">
&lt;img src="functionality.png"/> &lt;/a>
&lt;/figure>
&lt;p>Care Guides consists of questions grouped into pages. They are capable of presenting many different types of questions, skip logic, images, and videos. Validation rules can require certain questions to be answered or restrict answers to a specified type or range.&lt;/p>
&lt;p>It’s possible to reference previous information that was submitted about the person or household from within the care guide. The interaction can also conclude with a summary that includes assessment results, treatment recommendations, and referral info.&lt;/p>
&lt;p>Care Guides can include images for instructional purposes and can access a user’s camera to take a photo if needed.&lt;/p>
&lt;h3 id="summary">Summary&lt;/h3>
&lt;figure class="right col-12 col-lg-4">&lt;a href="summary.png">
&lt;img src="summary.png"/> &lt;/a>
&lt;/figure>
&lt;p>After all of the required questions have been answered, a summary page can be displayed.&lt;/p>
&lt;p>Here, health workers can review the information they entered, receive instructions for treatment, care, and referrals, and relay detailed education to the patient.&lt;/p>
&lt;div class="alert alert-primary" role="alert">
&lt;h4 class="alert-heading">Note&lt;/h4>
The form is not submitted until the user scrolls to the very end of the summary and clicks the &lt;code>Submit&lt;/code> button.
&lt;/div>
&lt;h3 id="examples">Examples&lt;/h3>
&lt;figure class="right col-12 col-lg-4">&lt;a href="examples.png">
&lt;img src="examples.png"/> &lt;/a>
&lt;/figure>
&lt;ul>
&lt;li>While a health worker is going through the form during the care visit, you can include a family planning question only if the person who the form is about is a woman and not pregnant.&lt;/li>
&lt;li>You can include on-the-spot conversational prompts and advice for the CHW based on how they answer questions in the form. For instance, if a CHW answers “yes” to the question about a woman’s interest in family planning, text can automatically appear to provide information on her options.&lt;/li>
&lt;li>An image showing how to read a rapid test can be displayed within a form, to help health workers to correctly interpret their test results.&lt;/li>
&lt;/ul></description></item><item><title>Apps: Building Workflows</title><link>https://docs.communityhealthtoolkit.org/apps/concepts/workflows/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://docs.communityhealthtoolkit.org/apps/concepts/workflows/</guid><description>
&lt;p>Workflows can be defined within apps built with the Core Framework to connect actions and data with people. Forms are the main building block of tasks and messaging workflows, and are useful in creating reminders for follow-up visits or referrals.&lt;/p>
&lt;h2 id="tasks">Tasks&lt;/h2>
&lt;p>Tasks within the app can drive a workflow, ensuring that the right actions are taken for people at the right time. Tasks indicate a recommended action to the user. They indicate who the user should perform the action with, and the recommended timeframe of that action. When the user taps the task, they are directed to a form where the details of the action are captured.&lt;/p>
&lt;p>Tasks can be triggered by a set of conditions, such as contact details or submitted reports. Tasks are accessible in the Tasks tab and the profile in the Contact tab, and initiate a follow up action to complete a form. More information on building app workflows is available in the &lt;a href="https://docs.communityhealthtoolkit.org/apps/features/tasks/">Tasks section&lt;/a>.&lt;/p>
&lt;p>Data submitted in one form can generate several tasks at once, for example, multiple ANC visits following one pregnancy registration. Some workflows involve a series of sequential forms and tasks, such as a child health assessment form, a follow up task scheduled 48 hours later, a referral form (only if the child’s condition hasn’t improved), and then a referral follow up task. Tasks are accessible on the Tasks tab, as well as the Tasks section of profiles.
&lt;p>&lt;em>See Also&lt;/em>: &lt;a href="https://docs.communityhealthtoolkit.org/apps/reference/tasks/">Defining Tasks&lt;/a>&lt;/p>
&lt;/p>
&lt;p>
&lt;figure class="left col-3 col-lg-3">&lt;a href="tasks-mobile.png">
&lt;img src="tasks-mobile.png"/> &lt;/a>
&lt;/figure>
&lt;figure class="left col-9 col-lg-9">&lt;a href="tasks-desktop.png">
&lt;img src="tasks-desktop.png"/> &lt;/a>
&lt;/figure>
&lt;/p>
&lt;h2 id="sms-messaging">SMS Messaging&lt;/h2>
&lt;p>Workflows can include notifications and interactions with CHWs, nurses, supervisors, and patients via SMS. A report can trigger SMS messages to be sent immediately or upon a set schedule. Responses via SMS or the app can update the workflows.
&lt;p>&lt;em>See Also&lt;/em>: &lt;a href="https://docs.communityhealthtoolkit.org/apps/reference/app-settings/#sms-workflows">Defining SMS Workflows&lt;/a>&lt;/p>
&lt;/p>
&lt;p>
&lt;figure class="left col-3 col-lg-3">&lt;a href="messages-mobile.png">
&lt;img src="messages-mobile.png"/> &lt;/a>
&lt;/figure>
&lt;figure class="left col-9 col-lg-9">&lt;a href="messages-desktop.png">
&lt;img src="messages-desktop.png"/> &lt;/a>
&lt;/figure>
&lt;/p>
&lt;h2 id="interoperability">Interoperability&lt;/h2>
&lt;p>Workflows can incorporate other digital tools, such as a facility-based electronic medical record system for referral workflows. New contacts or reports can trigger an interoperabilty workflow using the &lt;a href="">outbound push&lt;/a> feature. Data can be received as reports using the &lt;a href="https://github.com/medic/cht-core/tree/master/api">CHT API&lt;/a>
&lt;p>&lt;em>See Also&lt;/em>: &lt;a href="https://docs.communityhealthtoolkit.org/apps/reference/app-settings/outbound/">Outbound Push&lt;/a>&lt;/p>
&lt;/p></description></item><item><title>Apps: Configurable Hierarchies</title><link>https://docs.communityhealthtoolkit.org/apps/concepts/hierarchy/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://docs.communityhealthtoolkit.org/apps/concepts/hierarchy/</guid><description>
&lt;p>The Core Framework requires a hierarchy to organize the information in the app. It is often based on the hierarchy of a health system within a particular geographic region.&lt;/p>
&lt;p>Large deployment sites often need three or more levels of place hierarchy, while some small sites need fewer than three levels. For this reason, the Core Framework’s information hierarchies are configurable to meet a users needs.&lt;/p>
&lt;p>A user logging into their app will see a custom set of people, tasks, reports, and analytics based on the hierarchy level that they belong to. This allows appropriate data sharing based on the role of the user in the health system.&lt;/p>
&lt;p>The information hierarchy is configured in the administration console. The hierarchy levels can be given different titles depending on a particular health system’s program or reporting structures.&lt;/p>
&lt;p>&lt;em>See Also&lt;/em>: &lt;a href="https://docs.communityhealthtoolkit.org/apps/reference/app-settings/hierarchy/">Defining Hierarchy&lt;/a>&lt;/p>
&lt;h3 id="places">Places&lt;/h3>
&lt;p>This is an example of a simple hierarchy that includes a CHW Supervisor area, CHW area, and families as levels which serve as “places” or units of organizing people.&lt;/p>
&lt;div class="mermaid">flowchart TB
linkStyle default stroke-width:1px,stroke:lightgrey
classDef none fill:none,stroke:none
super_area_a[&lt;img src&amp;#61;&amp;#39;health-center.svg&amp;#39; width&amp;#61;&amp;#39;30&amp;#39; />\nCHW Supervisor Area A]:::none
chw_area_a[&lt;img src&amp;#61;&amp;#39;chw-area.svg&amp;#39; width&amp;#61;&amp;#39;30&amp;#39; />\nCHW CHW Area A]:::none
chw_area_b[&lt;img src&amp;#61;&amp;#39;chw-area.svg&amp;#39; width&amp;#61;&amp;#39;30&amp;#39; />\nCHW CHW Area B]:::none
chw_area_c[&lt;img src&amp;#61;&amp;#39;chw-area.svg&amp;#39; width&amp;#61;&amp;#39;30&amp;#39; />\nCHW CHW Area C]:::none
family_a[&lt;img src&amp;#61;&amp;#39;family.svg&amp;#39; width&amp;#61;&amp;#39;30&amp;#39; />\nFamily A]:::none
family_b[&lt;img src&amp;#61;&amp;#39;family.svg&amp;#39; width&amp;#61;&amp;#39;30&amp;#39; />\nFamily B]:::none
family_c[&lt;img src&amp;#61;&amp;#39;family.svg&amp;#39; width&amp;#61;&amp;#39;30&amp;#39; />\nFamily C]:::none
family_d[&lt;img src&amp;#61;&amp;#39;family.svg&amp;#39; width&amp;#61;&amp;#39;30&amp;#39; />\nFamily D]:::none
family_e[&lt;img src&amp;#61;&amp;#39;family.svg&amp;#39; width&amp;#61;&amp;#39;30&amp;#39; />\nFamily E]:::none
family_f[&lt;img src&amp;#61;&amp;#39;family.svg&amp;#39; width&amp;#61;&amp;#39;30&amp;#39; />\nFamily F]:::none
super_area_a --- chw_area_a &amp; chw_area_b &amp; chw_area_c
chw_area_a --- family_a &amp; family_b
chw_area_b --- family_c &amp; family_d
chw_area_c --- family_e &amp; family_f
&lt;/div>
&lt;p>User roles can be assigned to log in at any of these levels. For example, it would be customary for a CHW to log in at the CHW Area level and view the families, and below that the people, i.e. patients or family members, who belong there.&lt;/p>
&lt;h3 id="people">People&lt;/h3>
&lt;p>The hierarchy can be modeled after the health system, health program and/or the community. All people are associated with a place and these places can be associated to each other.&lt;/p>
&lt;p>For example, a Family Member is part of a Family. A Family and CHWs are part of a CHW Area. A Family Member, a Family, and CHWs are part of a CHW Supervisor Area.&lt;/p>
&lt;div class="mermaid">%%{init: { "flowchart": { "rankSpacing": 20, "nodeSpacing": 10 } } }%%
flowchart TB
linkStyle default stroke-width:1px,stroke:lightgrey
classDef node fill:none,stroke:none
classDef cluster fill:none,stroke:#ccc
subgraph district[ ]
admin[&lt;img src&amp;#61;&amp;#39;district-hospital.svg&amp;#39; width&amp;#61;&amp;#39;30&amp;#39; />\nAdmin]:::none
officer[&lt;img src&amp;#61;&amp;#39;officer.svg&amp;#39; width&amp;#61;&amp;#39;30&amp;#39; />\nProgram Officer]:::none
admin --- officer
end
district:::none
subgraph supervision[ ]
super_area_a[&lt;img src&amp;#61;&amp;#39;health-center.svg&amp;#39; width&amp;#61;&amp;#39;30&amp;#39; />\nCHW Supervisor\nArea A]:::none
super_a[&lt;img src&amp;#61;&amp;#39;supervisor.svg&amp;#39; width&amp;#61;&amp;#39;30&amp;#39; />\nCHW Supervisor A]:::none
super_area_a --- super_a
end
supervision:::none
subgraph chw_group_a[ ]
chw_area_a[&lt;img src&amp;#61;&amp;#39;chw-area.svg&amp;#39; width&amp;#61;&amp;#39;30&amp;#39; />\nCHW\nArea A]:::none
chw_a[&lt;img src&amp;#61;&amp;#39;chw.svg&amp;#39; width&amp;#61;&amp;#39;30&amp;#39; />\nCHW]:::none
chw_area_a --- chw_a
end
chw_group_a:::none
subgraph chw_group_b[ ]
chw_area_b[&lt;img src&amp;#61;&amp;#39;chw-area.svg&amp;#39; width&amp;#61;&amp;#39;30&amp;#39; />\nCHW\nArea B]:::none
chw_b[&lt;img src&amp;#61;&amp;#39;chw.svg&amp;#39; width&amp;#61;&amp;#39;30&amp;#39; />\nCHW]:::none
chw_area_b --- chw_b
end
chw_group_b:::none
family_a[&lt;img src&amp;#61;&amp;#39;family.svg&amp;#39; width&amp;#61;&amp;#39;30&amp;#39; />\nFamily\nA]:::none
family_b[&lt;img src&amp;#61;&amp;#39;family.svg&amp;#39; width&amp;#61;&amp;#39;30&amp;#39; />\nFamily\nB]:::none
family_c[&lt;img src&amp;#61;&amp;#39;family.svg&amp;#39; width&amp;#61;&amp;#39;30&amp;#39; />\nFamily\nC]:::none
family_d[&lt;img src&amp;#61;&amp;#39;family.svg&amp;#39; width&amp;#61;&amp;#39;30&amp;#39; />\nFamily\nD]:::none
family_e[&lt;img src&amp;#61;&amp;#39;family.svg&amp;#39; width&amp;#61;&amp;#39;30&amp;#39; />\nFamily\nE]:::none
family_f[&lt;img src&amp;#61;&amp;#39;family.svg&amp;#39; width&amp;#61;&amp;#39;30&amp;#39; />\nFamily\nF]:::none
person_a_b[&lt;img src&amp;#61;&amp;#39;person.svg&amp;#39; width&amp;#61;&amp;#39;30&amp;#39; />&lt;img src&amp;#61;&amp;#39;person.svg&amp;#39; width&amp;#61;&amp;#39;30&amp;#39; />\nFamily\nMembers\nA and B]:::none
person_c[&lt;img src&amp;#61;&amp;#39;person.svg&amp;#39; width&amp;#61;&amp;#39;30&amp;#39; />\nFamily\nMember\nC]:::none
person_d[&lt;img src&amp;#61;&amp;#39;person.svg&amp;#39; width&amp;#61;&amp;#39;30&amp;#39; />\nFamily\nMember\nD]:::none
person_e_f[&lt;img src&amp;#61;&amp;#39;person.svg&amp;#39; width&amp;#61;&amp;#39;30&amp;#39; />&lt;img src&amp;#61;&amp;#39;person.svg&amp;#39; width&amp;#61;&amp;#39;30&amp;#39; />\nFamily\nMembers\nE and F]:::none
person_g[&lt;img src&amp;#61;&amp;#39;person.svg&amp;#39; width&amp;#61;&amp;#39;30&amp;#39; />\nFamily\nMember\nG]:::none
person_h_i_j[&lt;img src&amp;#61;&amp;#39;person.svg&amp;#39; width&amp;#61;&amp;#39;30&amp;#39; />&lt;img src&amp;#61;&amp;#39;person.svg&amp;#39; width&amp;#61;&amp;#39;30&amp;#39; />&lt;img src&amp;#61;&amp;#39;person.svg&amp;#39; width&amp;#61;&amp;#39;30&amp;#39; />\nFamily Members\nH, I, and J]:::none
district --- supervision
supervision --- chw_group_a &amp; chw_group_b
supervision ---- family_e &amp; family_f
chw_group_a --- family_a &amp; family_b
chw_group_b --- family_c &amp; family_d
family_a --- person_a_b
family_b --- person_c
family_c --- person_d
family_d --- person_e_f
family_e --- person_g
family_f --- person_h_i_j
&lt;/div>
&lt;p>Additional hierarchy levels may be added as needed and each section of the hierarchy is configurable. For instance, many large projects have unbalanced hierarchies, which is to say, some parts of the hierarchy have more or different layers than others.
The Admin level operates outside of the hierarchy structure and enables access to all levels and people within the hierarchy.&lt;/p></description></item><item><title>Apps: Users</title><link>https://docs.communityhealthtoolkit.org/apps/concepts/users/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://docs.communityhealthtoolkit.org/apps/concepts/users/</guid><description>
&lt;p>Apps built with the Core Framework use roles and permissions to determine who has access to what data. User roles are general categories you can use to assign a collection of broad permissions to users. There are two classes of roles: online and offline. Generally speaking, CHWs are usually offline users, while managers and nurses are usually online users. SMS users do not use the app, and thus do not have a user role.&lt;/p>
&lt;h2 id="roles">Roles&lt;/h2>
&lt;p>Differing levels of access and permissions are assigned to each persona. A user role is created to provide them with access to the information they need. Offline and online access, storage limitations, and data privacy are taken into account.&lt;/p>
&lt;table>
&lt;thead>
&lt;tr>
&lt;th style="text-align:left">Persona&lt;/th>
&lt;th style="text-align:left">Hierarchy&lt;/th>
&lt;th style="text-align:left">Device&lt;/th>
&lt;th style="text-align:left">Permissions&lt;/th>
&lt;/tr>
&lt;/thead>
&lt;tbody>
&lt;tr>
&lt;td style="text-align:left">Program Officer&lt;/td>
&lt;td style="text-align:left">Logs in as Admin&lt;/td>
&lt;td style="text-align:left">Computer&lt;/td>
&lt;td style="text-align:left">Admin users, usually Program Officers, are online-only admin users not associated to a particular level. They have access to all people, places, and records in the app, but since they are online-only users, they cannot view any tasks or targets.&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td style="text-align:left">CHW Supervisors&lt;/td>
&lt;td style="text-align:left">Logs in at Health Facility level&lt;/td>
&lt;td style="text-align:left">Tablet&lt;/td>
&lt;td style="text-align:left">User at this level have online and offline access to view CHWs, fill out reports about them, and view tasks and targets related to them. Due to storage limitations, they aren’t able to view households or submit reports and review tasks and targets about them.&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td style="text-align:left">CHWs&lt;/td>
&lt;td style="text-align:left">Logs in at CHW Area level&lt;/td>
&lt;td style="text-align:left">Phone&lt;/td>
&lt;td style="text-align:left">Users at this level have online and offline access to view households and family members, submit reports about them, and view tasks and targets about them.&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td style="text-align:left">Family members&lt;/td>
&lt;td style="text-align:left">Registered at Household level, does not log in&lt;/td>
&lt;td style="text-align:left">Messaging&lt;/td>
&lt;td style="text-align:left">Family members might include fathers, mothers, children, and other adults. The program model determines which family members should be registered in the app. However, they are not users of the app, and do not log in themselves.&lt;/td>
&lt;/tr>
&lt;/tbody>
&lt;/table>
&lt;p>&lt;em>See Also&lt;/em>: &lt;a href="https://docs.communityhealthtoolkit.org/apps/reference/app-settings/user-roles/">Defining User Roles&lt;/a>&lt;/p>
&lt;h3 id="online-users">Online Users&lt;/h3>
&lt;p>Online roles are for users who need access to a lot of data and need to maintain the system or update system settings. An internet connection is required.&lt;/p>
&lt;h3 id="offline-users">Offline Users&lt;/h3>
&lt;p>Offline roles are for users who need to be able to access data on-the-go in the field and don’t have a reliable internet connection. All the data they have access to will be synced to their device. System administrators cannot be offline users as they won&amp;rsquo;t have access to the app management tools offline.&lt;/p>
&lt;div class="alert alert-primary" role="alert">
&lt;h4 class="alert-heading">Note&lt;/h4>
Advanced configuration options are available for a specific offline user role to manage what &lt;a href="https://docs.communityhealthtoolkit.org/apps/guides/performance/replication/">level of data&lt;/a> is synced to their device.
&lt;/div>
&lt;h2 id="permissions">Permissions&lt;/h2>
&lt;p>User Permissions are settings that can be individually toggled on or off to allow users with a particular Role to do a certain action or see a certain thing. CHT app developers and administrators can add as many User Roles as needed to grant permissions to different groups of users.&lt;/p>
&lt;p>Viewing permissions determine which page tabs a user sees in the app and which types of data they do and don’t have access to. User action permissions include who can create (e.g., create new users), who can delete (e.g., delete reports), who can edit (e.g., edit profiles), and who can export (e.g., export server logs).&lt;/p>
&lt;p>&lt;em>See Also&lt;/em>: &lt;a href="https://docs.communityhealthtoolkit.org/apps/reference/app-settings/user-permissions/">Defining User Permissions&lt;/a>&lt;/p>
&lt;figure class="left col-12 col-lg-10">&lt;a href="https://docs.communityhealthtoolkit.org/apps/features/admin/admin-roles.png">
&lt;img src="https://docs.communityhealthtoolkit.org/apps/features/admin/admin-roles.png"/> &lt;/a>
&lt;/figure></description></item><item><title>Apps: Interoperability</title><link>https://docs.communityhealthtoolkit.org/apps/concepts/interoperability/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://docs.communityhealthtoolkit.org/apps/concepts/interoperability/</guid><description>
&lt;h2 id="introduction">Introduction&lt;/h2>
&lt;p>Interoperability refers to the ability of different health information systems and applications to communicate with each other and exchange data seamlessly. With interoperability, patient information can be seen, exchanged, and used across different platforms. The information/data exchanged has to be understood across the different software for these systems to become interoperable. This is different from &lt;em>integration&lt;/em> which requires custom development to connect two specific systems together.&lt;/p>
&lt;p>Interoperability is the best practice for health systems because it allows information from one system to be shared with one or more other systems with no additional development. Interoperability allows technical teams to scale in an efficient and repeatable manner due to the already predefined standards.&lt;/p>
&lt;h2 id="cht-interoperability">CHT Interoperability&lt;/h2>
&lt;p>The native CHT database structure does not map directly to a &lt;a href="http://www.hl7.org/fhir/">Fast Healthcare Interoperability Resources (FHIR)&lt;/a> message format. To be compatible, we use a middleware to convert the CHT data structure into a standardized JSON format so the other systems can read it. See below the data workflow:&lt;/p>
&lt;div class="mermaid">graph LR
cht[CHT]
mediator_a([Mediator])
mediator_b([Mediator])
openhim[OpenHIM]
cht -- Outbound push\nfa:fa-arrow-right --- mediator_a
cht -- API request\nfa:fa-arrow-left --- mediator_b
mediator_a -- Request\nfa:fa-arrow-right --- openhim
mediator_b -- Channel\nfa:fa-arrow-left --- openhim
&lt;/div>
&lt;p>OpenHIM was utilised as the middleware component with &lt;a href="http://openhim.org/docs/configuration/mediators/">Mediators&lt;/a> to do the conversion. &lt;a href="https://docs.communityhealthtoolkit.org/apps/reference/app-settings/outbound/">Outbound Push&lt;/a> is configured to make a request to the middleware when relevant documents are created or modified in the CHT. A Mediator then creates a FHIR resource, which is then routed to OpenHIM. OpenHIM routes the resource to any other configured systems.&lt;/p>
&lt;p>Conversely to bring data into the CHT, OpenHIM is configured to route the updated resource to the Mediator, which then calls the relevant &lt;a href="https://docs.communityhealthtoolkit.org/apps/reference/api/">CHT APIs&lt;/a> to update the document in the CHT database. This will then be replicated to users’ devices as per usual.&lt;/p>
&lt;h2 id="standards--components">Standards &amp;amp; Components&lt;/h2>
&lt;ul>
&lt;li>
&lt;p>&lt;a href="https://ohie.org/">OpenHIE&lt;/a>: OpenHIE is an open-source framework for building interoperable health information systems. OpenHIE provides a set of standards and protocols for enabling different health systems and applications to communicate with each other.&lt;/p>
&lt;/li>
&lt;li>
&lt;p>&lt;a href="http://openhim.org/">OpenHIM&lt;/a>: OpenHIM is an open-source middleware platform that provides a central point of control for managing health information exchange (HIE). OpenHIM enables healthcare providers to connect different health systems and applications and provides a common interface for managing data exchange and security.&lt;/p>
&lt;/li>
&lt;li>
&lt;p>&lt;a href="http://www.hl7.org/fhir">FHIR&lt;/a>: FHIR is a standard for exchanging healthcare data electronically. FHIR provides a modern, web-based approach to exchanging healthcare data and is rapidly becoming the preferred standard for healthcare interoperability.&lt;/p>
&lt;/li>
&lt;/ul>
&lt;p>A reference application for this pattern is available in the &lt;a href="https://github.com/medic/cht-interoperability">CHIS Interoperability repository&lt;/a>.
This application implements a Loss to Follow Up (LTFU) workflow system for CHIS based on the OpenHIE LTFU Guide.&lt;/p>
&lt;h2 id="frequently-asked-questions">Frequently Asked Questions&lt;/h2>
&lt;h3 id="is-the-cht-fhir-compatible-and-does-it-have-a-fhir-api">Is the CHT FHIR Compatible and does it have a FHIR API?&lt;/h3>
&lt;p>Yes. Mediators are one of the components of a CHT deployment and expose FHIR compatible APIs to the rest of the healthcare ecosystem.&lt;/p>
&lt;h3 id="does-the-cht-support-legacy-standards">Does the CHT support legacy standards?&lt;/h3>
&lt;p>One of the advantages of using mediators is they are highly configurable to support different FHIR Implementation Guides, different FHIR versions, and other information standards, so the CHT can work with whatever systems are in the ecosystem.&lt;/p>
&lt;h3 id="what-about-compatibility-with-future-standards">What about compatibility with future standards?&lt;/h3>
&lt;p>The flexibility of mediators also means the CHT is future-proof and can be configured to support future FHIR revisions or completely new standards. Because this can be configured in the mediator layer it&amp;rsquo;s likely to be supported without any Core development required.&lt;/p>
&lt;h3 id="what-does-the-mediator-do-to-the-source-data">What does the mediator do to the source data?&lt;/h3>
&lt;ol>
&lt;li>It transforms the structure from the CHT format to the required standardized format.&lt;/li>
&lt;li>It can make requests for additional data. This could be querying the Client Registry for the patient&amp;rsquo;s national ID number, or other services such as the Terminology service to translate conditions, medications, procedures, and so on into the required classification system.&lt;/li>
&lt;li>Finally it passes the FHIR resource to the interoperability layer to be shared with other systems.&lt;/li>
&lt;/ol>
&lt;h3 id="what-are-the-fhir-resources-utilized">What are the FHIR Resources utilized?&lt;/h3>
&lt;ol>
&lt;li>&lt;a href="https://www.hl7.org/fhir/patient.html">Patient&lt;/a>&lt;/li>
&lt;li>&lt;a href="https://build.fhir.org/encounter.html">Encounter&lt;/a>&lt;/li>
&lt;li>&lt;a href="https://build.fhir.org/subscription.html">Subscription&lt;/a>&lt;/li>
&lt;li>&lt;a href="https://build.fhir.org/organization.html">Organization&lt;/a>&lt;/li>
&lt;li>&lt;a href="https://build.fhir.org/endpoint.html">Endpoint&lt;/a>&lt;/li>
&lt;/ol>
&lt;h2 id="important-links">Important Links&lt;/h2>
&lt;ul>
&lt;li>&lt;a href="https://github.com/medic/cht-interoperability">cht-interoperability repository&lt;/a>: A reference application for the LTFU workflow&lt;/li>
&lt;li>&lt;a href="https://interop-cht-test.dev.medicmobile.org/medic/login?redirect=https%3A%2F%2Finterop-cht-test.dev.medicmobile.org%2F">CHT Instance with LTFU configuration&lt;/a>&lt;/li>
&lt;li>&lt;a href="https://interoperability.dev.medicmobile.org/#!/login">OpenHIM Admin Console&lt;/a>&lt;/li>
&lt;/ul></description></item><item><title>Apps: Prerequisites for App Development</title><link>https://docs.communityhealthtoolkit.org/apps/concepts/prerequisites/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://docs.communityhealthtoolkit.org/apps/concepts/prerequisites/</guid><description>
&lt;p>There are no set prerequisites for users of CHT apps, yet the following are helpful for developing CHT applications.&lt;/p>
&lt;h2 id="test-instance">Test Instance&lt;/h2>
&lt;p>To build your own application using the Core Framework you will need an instance set up for testing. You can set up a local instance by &lt;a href="https://docs.communityhealthtoolkit.org/apps/tutorials/local-setup/">following these instructions&lt;/a>.&lt;/p>
&lt;h2 id="build-tool">Build tool&lt;/h2>
&lt;p>The build tool for applications using the Core Framework is &lt;code>cht-conf&lt;/code>. To set it up, follow the &lt;a href="https://github.com/medic/cht-conf/blob/master/README.md">installation instructions&lt;/a>. To properly use the tool you will need your application files in set locations within a folder. Once you are set up with the basic file structure you can edit the files, and rebuild the application by compiling or converting components as needed, and uploading them to your test instance.&lt;/p>
&lt;h2 id="background-skills">Background skills&lt;/h2>
&lt;p>To build applications with the Core Framework the following skills are helpful, ordered by importance:&lt;/p>
&lt;h3 id="xlsforms-and-xforms">XLSForms and XForms&lt;/h3>
&lt;p>Many workflows in your application, including completing tasks and creating contacts, will be generated using &lt;a href="https://opendatakit.github.io/xforms-spec/">ODK XForms&lt;/a>. Many app developers use XLSForms as an easier way to generate XForms. A strong knowledge of &lt;a href="http://xlsform.org/">XLSForm standard&lt;/a> is very useful in building your own application.&lt;/p>
&lt;h3 id="json">JSON&lt;/h3>
&lt;p>JSON (JavaScript Object Notation) is a format for storing structured text. Understanding JSON will help with minor modification of existing applications.&lt;/p>
&lt;h3 id="javascript">Javascript&lt;/h3>
&lt;p>Many key aspects are defined with JavaScript code and expressions. This includes managing profile pages, creating tasks and targets, and setting the condition for when to show forms. Unless you are only doing minor modification to an existing application, a good understanding of JavaScript is required.&lt;/p>
&lt;h3 id="couchdb">CouchDB&lt;/h3>
&lt;p>A free and open source NoSQL database we use to store all our data, configuration, and even the application code. CouchDB is really good at replication which is the process of sending the data to another database, such as PouchDB in the client application, and back again. Although building your own app using the Core Framework does not require knowledge or experience with CouchDB it can be useful to be familiar with general concepts as a document store.&lt;/p>
&lt;h3 id="sql">SQL&lt;/h3>
&lt;p>Although the application you build uses a NoSQL database, a parallel PostgreSQL database is available in the Core Framework to make querying data easier. Familiarity with SQL is needed to set up and query the database.&lt;/p></description></item></channel></rss>