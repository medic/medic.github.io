<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>Community Health Toolkit – Self Hosting in CHT 4.x</title><link>https://docs.communityhealthtoolkit.org/apps/guides/hosting/4.x/self-hosting/</link><description>Recent content in Self Hosting in CHT 4.x on Community Health Toolkit</description><generator>Hugo -- gohugo.io</generator><atom:link href="https://docs.communityhealthtoolkit.org/apps/guides/hosting/4.x/self-hosting/index.xml" rel="self" type="application/rss+xml"/><item><title>Apps: Self Hosting in CHT 4.x - Single CouchDB Node</title><link>https://docs.communityhealthtoolkit.org/apps/guides/hosting/4.x/self-hosting/single-node/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://docs.communityhealthtoolkit.org/apps/guides/hosting/4.x/self-hosting/single-node/</guid><description>
&lt;div class="pageinfo pageinfo-primary">
&lt;p>This for a single node CHT 4.x instance and is the recommended solution for small deployments. If you want a more powerful setup, check out &lt;a href="https://docs.communityhealthtoolkit.org/apps/guides/hosting/4.x/self-hosting/multiple-nodes/">the 4.x multi-node install docs&lt;/a>.&lt;/p>
&lt;/div>
&lt;h2 id="prerequisites">Prerequisites&lt;/h2>
&lt;p>Be sure you have followed &lt;a href="https://docs.communityhealthtoolkit.org/apps/guides/hosting/requirements/">the requirements document&lt;/a> including installing Docker and Docker Compose. This guide assumes you&amp;rsquo;re using the &lt;code>ubuntu&lt;/code> user and that it &lt;a href="https://askubuntu.com/a/477554">has &lt;code>sudo-less&lt;/code> access to Docker&lt;/a>.&lt;/p>
&lt;h2 id="directory-structure">Directory Structure&lt;/h2>
&lt;p>Create the following directory structure:&lt;/p>
&lt;pre tabindex="0">&lt;code>|-- /home/ubuntu/cht/
|-- compose/
|-- certs/
|-- couchdb/
|-- upgrade-service/
&lt;/code>&lt;/pre>&lt;p>By calling this &lt;code>mkdir&lt;/code> commands:&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="background-color:#f8f8f8;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-shell" data-lang="shell">&lt;span style="display:flex;">&lt;span>mkdir -p /home/ubuntu/cht/&lt;span style="color:#ce5c00;font-weight:bold">{&lt;/span>compose,certs,upgrade-service,couchdb&lt;span style="color:#ce5c00;font-weight:bold">}&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;ol>
&lt;li>&lt;code>compose&lt;/code> - docker-compose files for cht-core and CouchDB&lt;/li>
&lt;li>&lt;code>certs&lt;/code> - TLS certificates directory&lt;/li>
&lt;li>&lt;code>upgrade-service&lt;/code> - where docker-compose file for the upgrade-service&lt;/li>
&lt;li>&lt;code>couchdb&lt;/code> - the path for the docker-compose file of the upgrade-service (not used in multi-node)&lt;/li>
&lt;/ol>
&lt;h2 id="download-required-docker-compose-files">Download required docker-compose files&lt;/h2>
&lt;p>The following 3 &lt;code>curl&lt;/code> commands download CHT version &lt;code>4.0.1&lt;/code> compose files, which you can change as needed. Otherwise, call:&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="background-color:#f8f8f8;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-shell" data-lang="shell">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#204a87">cd&lt;/span> /home/ubuntu/cht/
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>curl -s -o ./compose/cht-core.yml https://staging.dev.medicmobile.org/_couch/builds_4/medic:medic:4.3.1/docker-compose/cht-core.yml
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>curl -s -o ./compose/cht-couchdb.yml https://staging.dev.medicmobile.org/_couch/builds_4/medic:medic:4.3.1/docker-compose/cht-couchdb.yml
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>curl -s -o ./upgrade-service/docker-compose.yml https://raw.githubusercontent.com/medic/cht-upgrade-service/main/docker-compose.yml
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;h2 id="prepare-environment-variables-file">Prepare Environment Variables file&lt;/h2>
&lt;p>Prepare a &lt;code>.env&lt;/code> file by running this code:&lt;/p>
&lt;pre tabindex="0">&lt;code>sudo apt install wamerican
uuid=$(uuidgen)
couchdb_secret=$(shuf -n7 /usr/share/dict/words --random-source=/dev/random | tr &amp;#39;\n&amp;#39; &amp;#39;-&amp;#39; | tr -d &amp;#34;&amp;#39;&amp;#34; | cut -d&amp;#39;-&amp;#39; -f1,2,3,4,5,6,7)
couchdb_password=$(shuf -n7 /usr/share/dict/words --random-source=/dev/random | tr &amp;#39;\n&amp;#39; &amp;#39;-&amp;#39; | tr -d &amp;#34;&amp;#39;&amp;#34; | cut -d&amp;#39;-&amp;#39; -f1,2,3,4,5,6,7)
cat &amp;gt; /home/ubuntu/cht/upgrade-service/.env &amp;lt;&amp;lt; EOF
CHT_COMPOSE_PROJECT_NAME=cht
COUCHDB_SECRET=${couchdb_secret}
DOCKER_CONFIG_PATH=/home/ubuntu/cht/upgrade-service
COUCHDB_DATA=/home/ubuntu/cht/couchdb
CHT_COMPOSE_PATH=/home/ubuntu/cht/compose
COUCHDB_USER=medic
COUCHDB_PASSWORD=${couchdb_password}
COUCHDB_UUID=${uuid}
EOF
&lt;/code>&lt;/pre>&lt;p>Note that secure passwords and UUIDs were generated on the first four calls and saved in the resulting &lt;code>.env&lt;/code> file.&lt;/p>
&lt;h2 id="launch-containers">Launch containers&lt;/h2>
&lt;div class="alert alert-primary" role="alert">
&lt;h4 class="alert-heading">Note&lt;/h4>
This section has the first use of &lt;code>docker compose&lt;/code>. This should work, but you may need to use the older style &lt;code>docker-compose&lt;/code> if you get an error &lt;code>docker: 'compose' is not a docker command.&lt;/code>.
&lt;/div>
&lt;p>To start your CHT instance, run the following&lt;/p>
&lt;pre tabindex="0">&lt;code>cd /home/ubuntu/cht/upgrade-service
docker compose up --detach
&lt;/code>&lt;/pre>&lt;p>Docker will start the upgrade service, which in turn pulls the required images and starts all the services as defined by the compose files in &lt;code>/home/ubuntu/cht/compose&lt;/code>.&lt;/p>
&lt;p>To follow the progress tail the log of the upgrade service container by running this:&lt;/p>
&lt;p>&lt;code>docker logs -f upgrade-service_cht-upgrade-service_1&lt;/code>&lt;/p>
&lt;p>To make sure everything is running correctly, call &lt;code>docker ps&lt;/code> and make sure that 7 CHT containers show:&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="background-color:#f8f8f8;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-shell" data-lang="shell">&lt;span style="display:flex;">&lt;span>CONTAINER ID IMAGE COMMAND CREATED STATUS PORTS NAMES
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>8c1c22d526f3 public.ecr.aws/s5s3h4s7/cht-nginx:4.0.1-4.0.1 &lt;span style="color:#4e9a06">&amp;#34;/docker-entrypoint.…&amp;#34;&lt;/span> &lt;span style="color:#0000cf;font-weight:bold">17&lt;/span> minutes ago Up &lt;span style="color:#0000cf;font-weight:bold">8&lt;/span> minutes 0.0.0.0:80-&amp;gt;80/tcp, :::80-&amp;gt;80/tcp, 0.0.0.0:443-&amp;gt;443/tcp, :::443-&amp;gt;443/tcp cht_nginx_1
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>f7b596be2721 public.ecr.aws/s5s3h4s7/cht-api:4.0.1-4.0.1 &lt;span style="color:#4e9a06">&amp;#34;/bin/bash /api/dock…&amp;#34;&lt;/span> &lt;span style="color:#0000cf;font-weight:bold">17&lt;/span> minutes ago Up &lt;span style="color:#0000cf;font-weight:bold">8&lt;/span> minutes 5988/tcp cht_api_1
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>029cd86ac721 public.ecr.aws/s5s3h4s7/cht-sentinel:4.0.1-4.0.1 &lt;span style="color:#4e9a06">&amp;#34;/bin/bash /sentinel…&amp;#34;&lt;/span> &lt;span style="color:#0000cf;font-weight:bold">17&lt;/span> minutes ago Up &lt;span style="color:#0000cf;font-weight:bold">8&lt;/span> minutes cht_sentinel_1
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>61ee1e0b377b public.ecr.aws/s5s3h4s7/cht-haproxy-healthcheck:4.0.1-4.0.1 &lt;span style="color:#4e9a06">&amp;#34;/bin/sh -c \&amp;#34;/app/ch…&amp;#34;&lt;/span> &lt;span style="color:#0000cf;font-weight:bold">17&lt;/span> minutes ago Up &lt;span style="color:#0000cf;font-weight:bold">8&lt;/span> minutes cht_healthcheck_1
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>87415a2d91ea public.ecr.aws/s5s3h4s7/cht-haproxy:4.0.1-4.0.1 &lt;span style="color:#4e9a06">&amp;#34;/entrypoint.sh -f /…&amp;#34;&lt;/span> &lt;span style="color:#0000cf;font-weight:bold">17&lt;/span> minutes ago Up &lt;span style="color:#0000cf;font-weight:bold">8&lt;/span> minutes 5984/tcp cht_haproxy_1
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>58454457467a public.ecr.aws/s5s3h4s7/cht-couchdb:4.0.1-4.0.1 &lt;span style="color:#4e9a06">&amp;#34;tini -- /docker-ent…&amp;#34;&lt;/span> &lt;span style="color:#0000cf;font-weight:bold">17&lt;/span> minutes ago Up &lt;span style="color:#0000cf;font-weight:bold">8&lt;/span> minutes 4369/tcp, 5984/tcp, 9100/tcp cht_couchdb_1
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>d01343658f3f public.ecr.aws/s5s3h4s7/cht-upgrade-service:latest &lt;span style="color:#4e9a06">&amp;#34;node /app/src/index…&amp;#34;&lt;/span> &lt;span style="color:#0000cf;font-weight:bold">17&lt;/span> minutes ago Up &lt;span style="color:#0000cf;font-weight:bold">8&lt;/span> minutes upgrade-service-cht-upgrade-service-1
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>This should show related to the CHT core are running&lt;/p>
&lt;ul>
&lt;li>cht_nginx&lt;/li>
&lt;li>cht_api&lt;/li>
&lt;li>cht_sentinel&lt;/li>
&lt;li>cht_couchdb&lt;/li>
&lt;li>cht_healthcheck&lt;/li>
&lt;li>cht_haproxy&lt;/li>
&lt;li>cht-upgrade-service&lt;/li>
&lt;/ul>
&lt;p>Take note of the &lt;code>STATUS&lt;/code> column and make sure no errors are displayed there. If any container is restarting or mentioning any other error, check the logs using the &lt;code>docker logs &amp;lt;container-name&amp;gt;&lt;/code> command.&lt;/p>
&lt;p>If all has gone well, nginx should now be listening at both port 80 and port 443. Port 80 has a permanent redirect to port 443, so you can only access the CHT using https.&lt;/p>
&lt;p>To login as the &lt;code>medic&lt;/code> user in the web app, you can find your password with this command:&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="background-color:#f8f8f8;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-shell" data-lang="shell">&lt;span style="display:flex;">&lt;span>grep COUCHDB_PASSWORD /home/ubuntu/cht/upgrade-service/.env &lt;span style="color:#000;font-weight:bold">|&lt;/span> cut -d&lt;span style="color:#4e9a06">&amp;#39;=&amp;#39;&lt;/span> -f2
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;h2 id="tls-certificates">TLS Certificates&lt;/h2>
&lt;p>See the &lt;a href="https://docs.communityhealthtoolkit.org/apps/guides/hosting/4.x/adding-tls-certificates/">TLS Certificates page&lt;/a> for how to import your certificates.&lt;/p>
&lt;h2 id="upgrades">Upgrades&lt;/h2>
&lt;p>During upgrades, the CHT upgrade service updates the docker-compose files located in &lt;code>/home/ubuntu/cht/compose/&lt;/code>. This means that any and all changes made to the docker-compose files will be overwritten. If there is ever a need to make any changes to the docker-compose files, be sure to re-do them post upgrades or should consider implementing them outside of those docker-compose files.&lt;/p></description></item><item><title>Apps: Self Hosting in CHT 4.x - Multiple CouchDB Nodes</title><link>https://docs.communityhealthtoolkit.org/apps/guides/hosting/4.x/self-hosting/multiple-nodes/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://docs.communityhealthtoolkit.org/apps/guides/hosting/4.x/self-hosting/multiple-nodes/</guid><description>
&lt;div class="pageinfo pageinfo-primary">
&lt;p>The clustered multi-node hosting described below is recommended for deployments that need increased performance gains. These gains will increase the complexity of troubleshooting and decrease the ease ongoing maintenance.&lt;/p>
&lt;p>If you are unsure which deployment to use check out &lt;a href="https://docs.communityhealthtoolkit.org/apps/guides/hosting/4.x/self-hosting/#recommendations-and-considerations">Self-hosting recommendations&lt;/a>.&lt;/p>
&lt;/div>
&lt;h3 id="about-clustered-deployments">About clustered deployments&lt;/h3>
&lt;p>In a clustered CHT setup, there are multiple CouchDB nodes responding to users. The ability to &lt;a href="https://en.wikipedia.org/wiki/Horizontal_scaling#Horizontal_(scale_out)_and_vertical_scaling_(scale_up)">horizontally scale&lt;/a> a CHT instance was added in version CHT 4.0.0. In this document we set up a three node CouchDB cluster. We require all three CouchDB nodes to be running and healthy before installing the CHT. Our healthcheck service determines the health of the CouchDB nodes and turns off the CHT if any single node is not functional.&lt;/p>
&lt;h3 id="nodes">Nodes&lt;/h3>
&lt;ul>
&lt;li>CHT Core (1x) - Core functionality of the CHT including API and sentinel&lt;/li>
&lt;li>CouchDB (3x) - 3 node CouchDB cluster&lt;/li>
&lt;/ul>
&lt;h2 id="prerequisites">Prerequisites&lt;/h2>
&lt;h3 id="servers">Servers&lt;/h3>
&lt;p>Provision four Ubuntu servers (22.04 as of this writing) that meet our &lt;a href="https://docs.communityhealthtoolkit.org/apps/guides/hosting/requirements/">hosting requirements&lt;/a> including installing Docker and Docker Compose on all of them. This guide assumes you&amp;rsquo;re using the &lt;code>ubuntu&lt;/code> user, with a home directory of &lt;code>/home/ubuntu&lt;/code> and that it &lt;a href="https://askubuntu.com/a/477554">has &lt;code>sudo-less&lt;/code> access to Docker&lt;/a>.&lt;/p>
&lt;h3 id="network">Network&lt;/h3>
&lt;p>Make sure the following ports are open for all nodes:&lt;/p>
&lt;ul>
&lt;li>&lt;code>7946 TCP/UDP&lt;/code> - For Docker communication amongst nodes&lt;/li>
&lt;li>&lt;code>2377 TCP&lt;/code> - Docker cluster management communication&lt;/li>
&lt;li>&lt;code>4789 UDP&lt;/code> - Docker overlay network traffic&lt;/li>
&lt;li>&lt;code>ICMP&lt;/code> - For ping&lt;/li>
&lt;/ul>
&lt;p>As a security measure, be sure to restrict the IP addresses of the four nodes only to be able to connect to these ports.&lt;/p>
&lt;h2 id="create-an-overlay-network">Create an Overlay Network&lt;/h2>
&lt;p>To set up a private network that only the four nodes can use, we&amp;rsquo;ll use &lt;code>docker swarm&lt;/code>&amp;rsquo;s overlay network feature. You&amp;rsquo;ll first need to initialize the swarm on the CHT Core node and then join the swarm on each of the three CouchDB nodes.&lt;/p>
&lt;h3 id="cht-core-node">CHT Core node&lt;/h3>
&lt;p>Initialize swarm mode by running:&lt;/p>
&lt;pre tabindex="0">&lt;code>docker swarm init
&lt;/code>&lt;/pre>&lt;p>This will output:&lt;/p>
&lt;div class="highlight">&lt;div style="background-color:#f8f8f8;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">
&lt;table style="border-spacing:0;padding:0;margin:0;border:0;">&lt;tr>&lt;td style="vertical-align:top;padding:0;margin:0;border:0;">
&lt;pre tabindex="0" style="background-color:#f8f8f8;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code>&lt;span style="white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">1
&lt;/span>&lt;span style="white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">2
&lt;/span>&lt;span style="white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">3
&lt;/span>&lt;span style="white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">4
&lt;/span>&lt;span style="white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">5
&lt;/span>&lt;span style="white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">6
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td style="vertical-align:top;padding:0;margin:0;border:0;;width:100%">
&lt;pre tabindex="0" style="background-color:#f8f8f8;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-shell" data-lang="shell">&lt;span style="display:flex;">&lt;span>Swarm initialized: current node &lt;span style="color:#ce5c00;font-weight:bold">(&lt;/span>ca7z1v4tm9q4kf9uimreqoauj&lt;span style="color:#ce5c00;font-weight:bold">)&lt;/span> is now a manager.
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>To add a worker to this swarm, run the following command:
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> docker swarm join --token &amp;lt;very-long-token-value&amp;gt; &amp;lt;main-server-private-ip&amp;gt;:2377
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>To add a manager to this swarm, run &lt;span style="color:#4e9a06">&amp;#39;docker swarm join-token manager&amp;#39;&lt;/span> and follow the instructions. &lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>
&lt;p>Then create overlay network by calling:&lt;/p>
&lt;pre tabindex="0">&lt;code>docker network create --driver=overlay --attachable cht-net
&lt;/code>&lt;/pre>&lt;h3 id="couchdb-nodes">CouchDB nodes&lt;/h3>
&lt;p>On each of these three CouchDB nodes run the &lt;code>docker swarm join&lt;/code> command given to you in &lt;a href="#cht-core-node">line 4 above in &amp;ldquo;CHT Core node&amp;rdquo;&lt;/a>:&lt;/p>
&lt;pre>&lt;code>docker swarm join --token &amp;lt;very-long-token-value&amp;gt; &amp;lt;main-server-private-ip&amp;gt;:2377`
&lt;/code>&lt;/pre>
&lt;h3 id="confirm-swarm">Confirm swarm&lt;/h3>
&lt;p>Back on the CHT Core node, run &lt;code>docker node ls&lt;/code> and ensure you see 4 nodes listed as &lt;code>STATUS&lt;/code> of &lt;code>Ready&lt;/code> and &lt;code>AVAILABILITY&lt;/code> of &lt;code>Active&lt;/code>&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="background-color:#f8f8f8;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-shell" data-lang="shell">&lt;span style="display:flex;">&lt;span>ID HOSTNAME STATUS AVAILABILITY MANAGER STATUS ENGINE VERSION
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>zolpxb5jpej8yiq9gcyv2nrdj * cht-core Ready Active Leader 20.10.23
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>y9giir8c3ydifxvwozs3sn8vw couchdb1 Ready Active 20.10.23
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>mi3vj0prd76djbvxms43urqiv couchdb2 Ready Active 20.10.23
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>kcpxlci3jjjtm6xjz7v50ef7k couchdb3 Ready Active 20.10.23
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;h2 id="cht-core-installation">CHT Core installation&lt;/h2>
&lt;p>Create the following directory structure:&lt;/p>
&lt;pre tabindex="0">&lt;code>|-- /home/ubuntu/cht/
|-- compose/
|-- certs/
|-- couchdb/
|-- upgrade-service/
&lt;/code>&lt;/pre>&lt;p>By calling this &lt;code>mkdir&lt;/code> commands:&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="background-color:#f8f8f8;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-shell" data-lang="shell">&lt;span style="display:flex;">&lt;span>mkdir -p /home/ubuntu/cht/&lt;span style="color:#ce5c00;font-weight:bold">{&lt;/span>compose,certs,upgrade-service,couchdb&lt;span style="color:#ce5c00;font-weight:bold">}&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;ol>
&lt;li>&lt;code>compose&lt;/code> - docker-compose files for cht-core and CouchDB&lt;/li>
&lt;li>&lt;code>certs&lt;/code> - TLS certificates directory&lt;/li>
&lt;li>&lt;code>upgrade-service&lt;/code> - where docker-compose file for the upgrade-service&lt;/li>
&lt;li>&lt;code>couchdb&lt;/code> - the path for the docker-compose file of the upgrade-service (not used in multi-node)&lt;/li>
&lt;/ol>
&lt;h3 id="prepare-environment-variables-file">Prepare Environment Variables file&lt;/h3>
&lt;p>Prepare an &lt;code>.env&lt;/code> file by running this code:&lt;/p>
&lt;pre tabindex="0">&lt;code>sudo apt install wamerican
uuid=$(uuidgen)
couchdb_secret=$(shuf -n7 /usr/share/dict/words --random-source=/dev/random | tr &amp;#39;\n&amp;#39; &amp;#39;-&amp;#39; | tr -d &amp;#34;&amp;#39;&amp;#34; | cut -d&amp;#39;-&amp;#39; -f1,2,3,4,5,6,7)
couchdb_password=$(shuf -n7 /usr/share/dict/words --random-source=/dev/random | tr &amp;#39;\n&amp;#39; &amp;#39;-&amp;#39; | tr -d &amp;#34;&amp;#39;&amp;#34; | cut -d&amp;#39;-&amp;#39; -f1,2,3,4,5,6,7)
cat &amp;gt; /home/ubuntu/cht/upgrade-service/.env &amp;lt;&amp;lt; EOF
CHT_COMPOSE_PROJECT_NAME=cht
DOCKER_CONFIG_PATH=/home/ubuntu/cht/upgrade-service
CHT_COMPOSE_PATH=/home/ubuntu/cht/compose
COUCHDB_USER=medic
COUCHDB_PASSWORD=${couchdb_password}
COUCHDB_SERVERS=couchdb-1.local,couchdb-2.local,couchdb-3.local
EOF
&lt;/code>&lt;/pre>&lt;p>Note that secure passwords and UUIDs were generated on the first four calls and saved in the resulting &lt;code>.env&lt;/code> file.&lt;/p>
&lt;h3 id="download-compose-files">Download compose files&lt;/h3>
&lt;p>The following 2 &lt;code>curl&lt;/code> commands download CHT version &lt;code>4.0.1&lt;/code> compose files, which you can change as needed. Otherwise, call:&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="background-color:#f8f8f8;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-shell" data-lang="shell">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#204a87">cd&lt;/span> /home/ubuntu/cht/
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>curl -s -o ./compose/cht-core.yml https://staging.dev.medicmobile.org/_couch/builds_4/medic:medic:4.3.1/docker-compose/cht-core.yml
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>curl -s -o ./upgrade-service/docker-compose.yml https://raw.githubusercontent.com/medic/cht-upgrade-service/main/docker-compose.yml
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;h4 id="compose-file-overrides">Compose file overrides&lt;/h4>
&lt;p>We need to override the &lt;code>networks:&lt;/code> in the two compose files we just created. Create the override file with this code:&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="background-color:#f8f8f8;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-shell" data-lang="shell">&lt;span style="display:flex;">&lt;span>cat &amp;gt; /home/ubuntu/cht/compose/cluster-overrides.yml &lt;span style="color:#4e9a06">&amp;lt;&amp;lt; EOF
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#4e9a06">version: &amp;#39;3.9&amp;#39;
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#4e9a06">networks:
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#4e9a06"> cht-net:
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#4e9a06"> driver: overlay
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#4e9a06"> external: true
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#4e9a06">EOF&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;h3 id="tls-certificates">TLS Certificates&lt;/h3>
&lt;div class="alert alert-primary" role="alert">
&lt;h4 class="alert-heading">Note&lt;/h4>
This section has the first use of &lt;code>docker compose&lt;/code>. This should work, but you may need to use the older style &lt;code>docker-compose&lt;/code> if you get an error &lt;code>docker: 'compose' is not a docker command&lt;/code>.
&lt;/div>
&lt;p>To ensure the needed docker volume is created, start the CHT Core services, which will intentionally all fail as the CouchDB nodes don&amp;rsquo;t exist. We&amp;rsquo;ll then ensure they&amp;rsquo;re all stopped with the &lt;code>docker kill&lt;/code> at the end. Note that this command has will &lt;code>sleep 120&lt;/code> (wait for 2 minutes) in hopes of&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="background-color:#f8f8f8;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-shell" data-lang="shell">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#204a87">cd&lt;/span> /home/ubuntu/cht/upgrade-service/
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>docker compose up -d
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>sleep &lt;span style="color:#0000cf;font-weight:bold">120&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>docker &lt;span style="color:#204a87">kill&lt;/span> &lt;span style="color:#204a87;font-weight:bold">$(&lt;/span>docker ps --quiet&lt;span style="color:#204a87;font-weight:bold">)&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>With docker volume having been created, see the &lt;a href="https://docs.communityhealthtoolkit.org/apps/guides/hosting/4.x/adding-tls-certificates/">TLS Certificates page&lt;/a> for how to import your certificates on the CHT Core node.&lt;/p>
&lt;h2 id="couchdb-installation-on-3-nodes">CouchDB installation on 3 nodes&lt;/h2>
&lt;p>Now that CHT Core is installed, we need to install CouchDB on the three nodes. Be sure all 3 nodes &lt;a href="#prerequisites">meet the prerequisites&lt;/a> before proceeding.&lt;/p>
&lt;h3 id="prepare-environment-variables-file-1">Prepare Environment Variables file&lt;/h3>
&lt;p>First, &lt;strong>on the CHT Core node&lt;/strong>, get your CouchDB password with this command:&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="background-color:#f8f8f8;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-shell" data-lang="shell">&lt;span style="display:flex;">&lt;span>grep COUCHDB_PASSWORD /home/ubuntu/cht/upgrade-service/.env &lt;span style="color:#000;font-weight:bold">|&lt;/span> cut -d&lt;span style="color:#4e9a06">&amp;#39;=&amp;#39;&lt;/span> -f2
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>Now, &lt;strong>on all 3 CouchDB nodes&lt;/strong>, create an &lt;code>.env&lt;/code> file by running this code. You&amp;rsquo;ll need to replace &lt;code>PASSWORD-FROM-ABOVE&lt;/code> so it is the same on all three nodes:&lt;/p>
&lt;pre tabindex="0">&lt;code>sudo apt install wamerican
mkdir -p /home/ubuntu/cht/srv
uuid=$(uuidgen)
couchdb_secret=$(shuf -n7 /usr/share/dict/words --random-source=/dev/random | tr &amp;#39;\n&amp;#39; &amp;#39;-&amp;#39; | tr -d &amp;#34;&amp;#39;&amp;#34; | cut -d&amp;#39;-&amp;#39; -f1,2,3,4,5,6,7)
cat &amp;gt; /home/ubuntu/cht/.env &amp;lt;&amp;lt; EOF
CHT_COMPOSE_PROJECT_NAME=cht
COUCHDB_SECRET=${couchdb_secret}
COUCHDB_DATA=/home/ubuntu/cht/couchdb
COUCHDB_USER=medic
COUCHDB_PASSWORD=PASSWORD-FROM-ABOVE
COUCHDB_UUID=${uuid}
EOF
&lt;/code>&lt;/pre>&lt;p>Note that secure passwords and UUIDs were generated and saved in the resulting &lt;code>.env&lt;/code> file.&lt;/p>
&lt;h4 id="couchdb-node-1">CouchDB Node 1&lt;/h4>
&lt;p>Create &lt;code>/home/ubuntu/cht/docker-compose.yml&lt;/code> on Node 1 by running this code:&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="background-color:#f8f8f8;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-shell" data-lang="shell">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#204a87">cd&lt;/span> /home/ubuntu/cht/
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>curl -s -o ./docker-compose.yml https://staging.dev.medicmobile.org/_couch/builds_4/medic:medic:4.3.1/docker-compose/cht-couchdb.yml
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>Now create the override file to have Node 1 join the &lt;code>cht-net&lt;/code> overlay network we created above. As well, we&amp;rsquo;ll set some &lt;code>services:&lt;/code> specific overrides:&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="background-color:#f8f8f8;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-shell" data-lang="shell">&lt;span style="display:flex;">&lt;span>cat &amp;gt; /home/ubuntu/cht/cluster-overrides.yml &lt;span style="color:#4e9a06">&amp;lt;&amp;lt; EOF
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#4e9a06">version: &amp;#39;3.9&amp;#39;
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#4e9a06">services:
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#4e9a06"> couchdb:
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#4e9a06"> container_name: couchdb-1.local
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#4e9a06"> environment:
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#4e9a06"> - &amp;#34;SVC_NAME=${SVC1_NAME:-couchdb-1.local}&amp;#34;
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#4e9a06"> - &amp;#34;CLUSTER_PEER_IPS=couchdb-2.local,couchdb-3.local&amp;#34;
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#4e9a06">networks:
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#4e9a06"> cht-net:
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#4e9a06"> driver: overlay
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#4e9a06"> external: true
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#4e9a06">EOF&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;h4 id="couchdb-node-2">CouchDB Node 2&lt;/h4>
&lt;p>Like we did for Node 1, create &lt;code>/home/ubuntu/cht/docker-compose.yml&lt;/code> and the &lt;code>cluster-overrides.yml&lt;/code> file on Node 2 by running this code:&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="background-color:#f8f8f8;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-shell" data-lang="shell">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#204a87">cd&lt;/span> /home/ubuntu/cht/
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>curl -s -o ./docker-compose.yml https://staging.dev.medicmobile.org/_couch/builds_4/medic:medic:4.3.1/docker-compose/cht-couchdb.yml
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>cat &amp;gt; /home/ubuntu/cht/cluster-overrides.yml &lt;span style="color:#4e9a06">&amp;lt;&amp;lt; EOF
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#4e9a06">version: &amp;#39;3.9&amp;#39;
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#4e9a06">services:
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#4e9a06"> couchdb:
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#4e9a06"> container_name: couchdb-2.local
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#4e9a06"> environment:
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#4e9a06"> - &amp;#34;SVC_NAME=couchdb-2.local&amp;#34;
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#4e9a06"> - &amp;#34;COUCHDB_SYNC_ADMINS_NODE=${COUCHDB_SYNC_ADMINS_NODE:-couchdb-1.local}&amp;#34;
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#4e9a06">networks:
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#4e9a06"> cht-net:
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#4e9a06"> driver: overlay
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#4e9a06"> external: true
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#4e9a06">EOF&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;h4 id="couchdb-node-3">CouchDB Node 3&lt;/h4>
&lt;p>Finally, we&amp;rsquo;ll match Node 3 up with the others by running this code:&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="background-color:#f8f8f8;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-shell" data-lang="shell">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#204a87">cd&lt;/span> /home/ubuntu/cht/
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>curl -s -o ./docker-compose.yml https://staging.dev.medicmobile.org/_couch/builds_4/medic:medic:4.3.1/docker-compose/cht-couchdb.yml
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>cat &amp;gt; /home/ubuntu/cht/cluster-overrides.yml &lt;span style="color:#4e9a06">&amp;lt;&amp;lt; EOF
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#4e9a06">version: &amp;#39;3.9&amp;#39;
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#4e9a06">services:
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#4e9a06"> couchdb:
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#4e9a06"> container_name: couchdb-3.local
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#4e9a06"> environment:
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#4e9a06"> - &amp;#34;SVC_NAME=couchdb-3.local&amp;#34;
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#4e9a06"> - &amp;#34;COUCHDB_SYNC_ADMINS_NODE=${COUCHDB_SYNC_ADMINS_NODE:-couchdb-1.local}&amp;#34;
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#4e9a06">networks:
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#4e9a06"> cht-net:
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#4e9a06"> driver: overlay
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#4e9a06"> external: true
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#4e9a06">EOF&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;h2 id="starting-services">Starting Services&lt;/h2>
&lt;h3 id="couchdb-nodes-1">CouchDB Nodes&lt;/h3>
&lt;ol>
&lt;li>
&lt;p>On each of the three CouchDB nodes starting with node 3, then 2 then 1. Be sure to wait until &lt;code>docker-compose&lt;/code> is finished running and has returned you to the command prompt before continuing to the next node:&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="background-color:#f8f8f8;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-shell" data-lang="shell">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#204a87">cd&lt;/span> /home/ubuntu/cht
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>docker compose -f docker-compose.yml -f cluster-overrides.yml up -d
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;/li>
&lt;li>
&lt;p>Watch the logs and wait for everything to be up and running. You can run this on each node to watch the logs:&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="background-color:#f8f8f8;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-shell" data-lang="shell">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#204a87">cd&lt;/span> /home/ubuntu/cht
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>docker compose logs --follow
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>Nodes 2 and 3 should show output like &lt;code>couchdb is ready&lt;/code> after node 1 has started.&lt;/p>
&lt;p>Node 1 will show this when it has added all nodes:&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="background-color:#f8f8f8;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-shell" data-lang="shell">&lt;span style="display:flex;">&lt;span>cht-couchdb-1.local-1 &lt;span style="color:#000;font-weight:bold">|&lt;/span> &lt;span style="color:#ce5c00;font-weight:bold">{&lt;/span>&lt;span style="color:#4e9a06">&amp;#34;ok&amp;#34;&lt;/span>:true&lt;span style="color:#ce5c00;font-weight:bold">}&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>cht-couchdb-1.local-1 &lt;span style="color:#000;font-weight:bold">|&lt;/span> &lt;span style="color:#ce5c00;font-weight:bold">{&lt;/span>&lt;span style="color:#4e9a06">&amp;#34;all_nodes&amp;#34;&lt;/span>:&lt;span style="color:#ce5c00;font-weight:bold">[&lt;/span>&lt;span style="color:#4e9a06">&amp;#34;couchdb@couchdb-1.local&amp;#34;&lt;/span>,&lt;span style="color:#4e9a06">&amp;#34;couchdb@couchdb-2.local&amp;#34;&lt;/span>,&lt;span style="color:#4e9a06">&amp;#34;couchdb@couchdb-3.local&amp;#34;&lt;/span>&lt;span style="color:#ce5c00;font-weight:bold">]&lt;/span>,&lt;span style="color:#4e9a06">&amp;#34;cluster_nodes&amp;#34;&lt;/span>:&lt;span style="color:#ce5c00;font-weight:bold">[&lt;/span>&lt;span style="color:#4e9a06">&amp;#34;couchdb@couchdb-1.local&amp;#34;&lt;/span>,&lt;span style="color:#4e9a06">&amp;#34;couchdb@couchdb-2.local&amp;#34;&lt;/span>,&lt;span style="color:#4e9a06">&amp;#34;couchdb@couchdb-3.local&amp;#34;&lt;/span>&lt;span style="color:#ce5c00;font-weight:bold">]}&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;/li>
&lt;/ol>
&lt;h3 id="cht-core">CHT Core&lt;/h3>
&lt;p>Now that CouchDB is running on all the nodes, start the CHT Core:&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="background-color:#f8f8f8;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-shell" data-lang="shell">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#204a87">cd&lt;/span> /home/ubuntu/cht/upgrade-service/
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>docker compose -f docker-compose.yml -f ../compose/cluster-overrides.yml up -d
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>To follow the progress tail the log of the upgrade service container by running:&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="background-color:#f8f8f8;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-shell" data-lang="shell">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#204a87">cd&lt;/span> /home/ubuntu/cht/upgrade-service/
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>docker compose logs --follow
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>To make sure everything is running correctly, call &lt;code>docker ps&lt;/code> and make sure that 6 CHT containers show:&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="background-color:#f8f8f8;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-shell" data-lang="shell">&lt;span style="display:flex;">&lt;span>CONTAINER ID IMAGE COMMAND CREATED STATUS PORTS NAMES
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>8c1c22d526f3 public.ecr.aws/s5s3h4s7/cht-nginx:4.0.1-4.0.1 &lt;span style="color:#4e9a06">&amp;#34;/docker-entrypoint.…&amp;#34;&lt;/span> &lt;span style="color:#0000cf;font-weight:bold">17&lt;/span> minutes ago Up &lt;span style="color:#0000cf;font-weight:bold">8&lt;/span> minutes 0.0.0.0:80-&amp;gt;80/tcp, :::80-&amp;gt;80/tcp, 0.0.0.0:443-&amp;gt;443/tcp, :::443-&amp;gt;443/tcp cht_nginx_1
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>f7b596be2721 public.ecr.aws/s5s3h4s7/cht-api:4.0.1-4.0.1 &lt;span style="color:#4e9a06">&amp;#34;/bin/bash /api/dock…&amp;#34;&lt;/span> &lt;span style="color:#0000cf;font-weight:bold">17&lt;/span> minutes ago Up &lt;span style="color:#0000cf;font-weight:bold">8&lt;/span> minutes 5988/tcp cht_api_1
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>029cd86ac721 public.ecr.aws/s5s3h4s7/cht-sentinel:4.0.1-4.0.1 &lt;span style="color:#4e9a06">&amp;#34;/bin/bash /sentinel…&amp;#34;&lt;/span> &lt;span style="color:#0000cf;font-weight:bold">17&lt;/span> minutes ago Up &lt;span style="color:#0000cf;font-weight:bold">8&lt;/span> minutes cht_sentinel_1
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>61ee1e0b377b public.ecr.aws/s5s3h4s7/cht-haproxy-healthcheck:4.0.1-4.0.1 &lt;span style="color:#4e9a06">&amp;#34;/bin/sh -c \&amp;#34;/app/ch…&amp;#34;&lt;/span> &lt;span style="color:#0000cf;font-weight:bold">17&lt;/span> minutes ago Up &lt;span style="color:#0000cf;font-weight:bold">8&lt;/span> minutes cht_healthcheck_1
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>87415a2d91ea public.ecr.aws/s5s3h4s7/cht-haproxy:4.0.1-4.0.1 &lt;span style="color:#4e9a06">&amp;#34;/entrypoint.sh -f /…&amp;#34;&lt;/span> &lt;span style="color:#0000cf;font-weight:bold">17&lt;/span> minutes ago Up &lt;span style="color:#0000cf;font-weight:bold">8&lt;/span> minutes 5984/tcp cht_haproxy_1 cht_couchdb_1
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>d01343658f3f public.ecr.aws/s5s3h4s7/cht-upgrade-service:latest &lt;span style="color:#4e9a06">&amp;#34;node /app/src/index…&amp;#34;&lt;/span> &lt;span style="color:#0000cf;font-weight:bold">17&lt;/span> minutes ago Up &lt;span style="color:#0000cf;font-weight:bold">8&lt;/span> minutes upgrade-service-cht-upgrade-service-1
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>This should show related to the CHT core are running&lt;/p>
&lt;ul>
&lt;li>cht_nginx&lt;/li>
&lt;li>cht_api&lt;/li>
&lt;li>cht_sentinel&lt;/li>
&lt;li>cht_healthcheck&lt;/li>
&lt;li>cht_haproxy&lt;/li>
&lt;li>cht-upgrade-service&lt;/li>
&lt;/ul>
&lt;p>Take note of the &lt;code>STATUS&lt;/code> column and make sure no errors are displayed. If any container is restarting or mentioning any other error, check the logs using the &lt;code>docker logs &amp;lt;container-name&amp;gt;&lt;/code> command.&lt;/p>
&lt;p>If all has gone well, &lt;code>nginx&lt;/code> should now be listening at both port 80 and port 443. Port 80 has a permanent redirect to port 443, so you can only access the CHT using https.&lt;/p>
&lt;p>To login as the medic user in the web app, you can find your password with this command:&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="background-color:#f8f8f8;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-shell" data-lang="shell">&lt;span style="display:flex;">&lt;span>grep COUCHDB_PASSWORD /home/ubuntu/cht/upgrade-service/.env &lt;span style="color:#000;font-weight:bold">|&lt;/span> cut -d&lt;span style="color:#4e9a06">&amp;#39;=&amp;#39;&lt;/span> -f2
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;h2 id="upgrades">Upgrades&lt;/h2>
&lt;p>Upgrades are completely manual for the clustered setup right now. You have to go into each of the docker compose files and modify the image tag and take containers down and restart them.&lt;/p></description></item></channel></rss>