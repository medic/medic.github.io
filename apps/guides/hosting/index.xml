<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>Community Health Toolkit â€“ Hosting</title><link>https://docs.communityhealthtoolkit.org/apps/guides/hosting/</link><description>Recent content in Hosting on Community Health Toolkit</description><generator>Hugo -- gohugo.io</generator><atom:link href="https://docs.communityhealthtoolkit.org/apps/guides/hosting/index.xml" rel="self" type="application/rss+xml"/><item><title>Apps: Requirements</title><link>https://docs.communityhealthtoolkit.org/apps/guides/hosting/requirements/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://docs.communityhealthtoolkit.org/apps/guides/hosting/requirements/</guid><description>
&lt;div class="alert alert-primary" role="alert">
&lt;h4 class="alert-heading">Note&lt;/h4>
For production CHT deployments, Linux is recommended, with &lt;a href="https://ubuntu.com/server">Ubuntu&lt;/a> the most commonly used. For CHT development, Linux or macOS may be used. Windows can be used for either, but without recommendation.
&lt;/div>
&lt;div class="alert alert-primary" role="alert">
&lt;h4 class="alert-heading">Note&lt;/h4>
These requirements apply to both 3.x and 4.x CHT hosting
&lt;/div>
&lt;p>Hosting a CHT instance in a cloud provider like AWS or on bare-metal requires you have sufficient hardware specifications, Docker and Docker Compose installed and other infrastructure requirements met.&lt;/p>
&lt;h2 id="hardware-requirements">Hardware Requirements&lt;/h2>
&lt;ul>
&lt;li>4 GiB RAM&lt;/li>
&lt;li>2 CPU/vCPU&lt;/li>
&lt;li>8 GB Hard Disk (SSD prefered)&lt;/li>
&lt;li>SSL certificates ( To be able to use the CHT app on mobile)&lt;/li>
&lt;li>Root Access&lt;/li>
&lt;/ul>
&lt;p>Depending on the scale of your operation these may need to be adjusted. Be sure to monitor disk usage so that the 8 GB can be increased as needed.&lt;/p>
&lt;h2 id="docker">Docker&lt;/h2>
&lt;p>Install both &lt;code>docker&lt;/code> and &lt;code>docker-compose&lt;/code> to run the two &lt;code>medic-os&lt;/code> and &lt;code>haproxy&lt;/code> containers.&lt;/p>
&lt;div class="alert alert-primary" role="alert">
&lt;h4 class="alert-heading">Note&lt;/h4>
Skip this step if you&amp;rsquo;re following the &lt;a href="https://docs.communityhealthtoolkit.org/apps/guides/hosting/3.x/ec2-setup-guide/#create-and-configure-ec2-instance">EC2 guide 3.x&lt;/a> as &lt;code>docker&lt;/code> and &lt;code>docker-compose&lt;/code> are automatically installed when following the setup scripts.
&lt;/div>
&lt;h3 id="linux">Linux&lt;/h3>
&lt;p>Depending on which distro you run, install the Docker packages from &lt;a href="https://docs.docker.com/engine/install/#server">Docker&amp;rsquo;s Linux options&lt;/a>. Historically, Medic runs Ubuntu: see &lt;a href="https://docs.docker.com/engine/install/ubuntu/">Docker CE&lt;/a> and &lt;a href="https://docs.docker.com/compose/install/">Docker-compose&lt;/a> install pages.&lt;/p>
&lt;h3 id="windows">Windows&lt;/h3>
&lt;p>Docker Desktop for Windows needs either Hyper-V support or Windows Subsystem for Linux 2 (WSL 2). &lt;a href="https://docs.docker.com/docker-for-windows/install/">Docker&amp;rsquo;s Windows Docker Desktop install page&lt;/a> covers both scenarios.&lt;/p>
&lt;h3 id="macos">macOS:&lt;/h3>
&lt;p>See &lt;a href="https://docs.docker.com/docker-for-mac/install/">Docker&amp;rsquo;s macOS Docker Desktop install page&lt;/a>.&lt;/p>
&lt;h3 id="verify-install">Verify install&lt;/h3>
&lt;p>Test that &lt;code>docker&lt;/code> and &lt;code>docker-compose&lt;/code> installed correctly by showing their versions with &lt;code>sudo docker-compose --version&lt;/code> and &lt;code>sudo docker --version&lt;/code>. Note, your version may be different:&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="background-color:#f8f8f8;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-bash" data-lang="bash">&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>sudo docker-compose --version
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>docker-compose version 1.27.1, build 509cfb99
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>sudo docker --version
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>Docker version 19.03.12, build 48a66213fe
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>Finally, confirm you can run the &amp;ldquo;hello world&amp;rdquo; docker container: &lt;code>sudo docker run hello-world&lt;/code>&lt;/p>
&lt;h2 id="considerations">Considerations&lt;/h2>
&lt;p>There are serious implications to consider when deploying a CHT instance beyond the above requirements. Be sure to account for:&lt;/p>
&lt;ul>
&lt;li>Alerting - How will alerts be sent in the case of downtime or degraded service?&lt;/li>
&lt;li>Power failures and unplanned restarts - Will the server cleanly restart such that the CHT resumes service correctly?&lt;/li>
&lt;li>Backups - What happens to the CHT data if there&amp;rsquo;s a hard drive failure?&lt;/li>
&lt;li>Disaster Recovery - What happens if there is a flood at the facility and on-site active and backup data are destroyed?&lt;/li>
&lt;li>Scale - What happens when the hardware deployed needs to be upgraded to increase capacity?&lt;/li>
&lt;li>Updates - By definition TLS certificates expire and software needs to be updated - how will the deployment get these updates on a regular basis?&lt;/li>
&lt;li>Security - While the TLS certificate will protect data on the LAN, is the server hard drive encrypted in the event of property theft?&lt;/li>
&lt;li>Privacy - The CHT inherently carries sensitive patient medical information in the database. Are there sufficient measures in place to protect this sensitive data?&lt;/li>
&lt;/ul></description></item><item><title>Apps: CHT Core Developer Setup</title><link>https://docs.communityhealthtoolkit.org/apps/guides/hosting/core-developer/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://docs.communityhealthtoolkit.org/apps/guides/hosting/core-developer/</guid><description>
&lt;div class="alert alert-primary" role="alert">
&lt;h4 class="alert-heading">Note&lt;/h4>
&lt;p>This guide assumes you are a CHT Core developer wanting to run the CHT Core from source code to make commits to the &lt;a href="https://github.com/medic/cht-core">public GitHub repository&lt;/a>. To set up a your environment for developing apps, see the &lt;a href="https://docs.communityhealthtoolkit.org/apps/guides/hosting/3.x/app-developer/">app guide&lt;/a>.&lt;/p>
&lt;p>To deploy the CHT in production, see either &lt;a href="https://docs.communityhealthtoolkit.org/apps/guides/hosting/3.x/ec2-setup-guide/">AWS hosting&lt;/a> or &lt;a href="https://docs.communityhealthtoolkit.org/apps/guides/hosting/3.x/self-hosting/">Self hosting&lt;/a>&lt;/p>
&lt;/div>
&lt;div class="alert alert-primary" role="alert">
&lt;h4 class="alert-heading">Note&lt;/h4>
These steps apply to both 3.x and 4.x CHT core development, unless stated otherwise.
&lt;/div>
&lt;h2 id="the-happy-path-installation">The Happy Path Installation&lt;/h2>
&lt;p>This CHT Core developer guide will have you install NodeJS, npm, Grunt and CouchDB (via Docker) on your local workstation. These instructions should work verbatim on Ubuntu 18-22 (see &lt;a href="#ubuntu-1804">Ubuntu 18 note&lt;/a>), but will need tweaks for MacOS (via &lt;code>brew&lt;/code>, see &lt;a href="#macos--123">MacOS &amp;gt; 12.3 note&lt;/a>) or Windows (via WSL2).&lt;/p>
&lt;h3 id="install-nodejs-npm-grunt-and-docker">Install NodeJS, npm, grunt and Docker&lt;/h3>
&lt;p>First, update your current Ubuntu packages and install some supporting tools via &lt;code>apt&lt;/code>:&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="background-color:#f8f8f8;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-shell" data-lang="shell">&lt;span style="display:flex;">&lt;span>sudo apt update &lt;span style="color:#ce5c00;font-weight:bold">&amp;amp;&amp;amp;&lt;/span> sudo apt -y dist-upgrade
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>sudo apt -y install xsltproc curl uidmap jq python2 git make g++
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>Then install &lt;code>nvm&lt;/code>, add it to your path and install NodeJS 16:&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="background-color:#f8f8f8;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-shell" data-lang="shell">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#204a87">export&lt;/span> &lt;span style="color:#000">nvm_version&lt;/span>&lt;span style="color:#ce5c00;font-weight:bold">=&lt;/span>&lt;span style="color:#4e9a06">`&lt;/span>curl -s https://api.github.com/repos/nvm-sh/nvm/releases/latest &lt;span style="color:#000;font-weight:bold">|&lt;/span> jq -r .name&lt;span style="color:#4e9a06">`&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>curl -o- https://raw.githubusercontent.com/nvm-sh/nvm/&lt;span style="color:#000">$nvm_version&lt;/span>/install.sh &lt;span style="color:#000;font-weight:bold">|&lt;/span> &lt;span style="color:#000">$0&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>. ~/.&lt;span style="color:#000">$0&lt;/span>rc
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>nvm install &lt;span style="color:#0000cf;font-weight:bold">16&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>Now let&amp;rsquo;s ensure NodeJS 16 and npm 8 were installed. This should output version 16.x.x for NodeJS and 8.x.x for &lt;code>npm&lt;/code>:&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="background-color:#f8f8f8;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-shell" data-lang="shell">&lt;span style="display:flex;">&lt;span>node -v &lt;span style="color:#ce5c00;font-weight:bold">&amp;amp;&amp;amp;&lt;/span> npm -v
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>With NodeJS out of the way, let&amp;rsquo;s install &lt;code>grunt&lt;/code> via &lt;code>npm&lt;/code>:&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="background-color:#f8f8f8;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-shell" data-lang="shell">&lt;span style="display:flex;">&lt;span>npm install -g grunt-cli
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>Install Docker:&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="background-color:#f8f8f8;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-shell" data-lang="shell">&lt;span style="display:flex;">&lt;span>curl -fsSL get.docker.com -o get-docker.sh &lt;span style="color:#ce5c00;font-weight:bold">&amp;amp;&amp;amp;&lt;/span> sh get-docker.sh
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>It&amp;rsquo;s easier if you don&amp;rsquo;t always have to run &lt;code>sudo&lt;/code> for all your Docker calls, so let&amp;rsquo;s set that up:&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="background-color:#f8f8f8;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-shell" data-lang="shell">&lt;span style="display:flex;">&lt;span>dockerd-rootless-setuptool.sh install
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#204a87">echo&lt;/span> &lt;span style="color:#4e9a06">&amp;#34;export PATH=/usr/bin:&lt;/span>&lt;span style="color:#000">$PATH&lt;/span>&lt;span style="color:#4e9a06">&amp;#34;&lt;/span> &amp;gt;&amp;gt; ~/.&lt;span style="color:#000">$0&lt;/span>rc
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#204a87">echo&lt;/span> &lt;span style="color:#4e9a06">&amp;#34;export DOCKER_HOST=unix:///run/user/1000/docker.sock&amp;#34;&lt;/span> &amp;gt;&amp;gt; ~/.&lt;span style="color:#000">$0&lt;/span>rc
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>. ~/.&lt;span style="color:#000">$0&lt;/span>rc
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>In order for Docker to boot correctly, restart entire machine, which will complete the &amp;ldquo;Install&amp;rdquo; Section:&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="background-color:#f8f8f8;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-shell" data-lang="shell">&lt;span style="display:flex;">&lt;span>sudo reboot
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;h3 id="couchdb-setup-in-docker">CouchDB Setup in Docker&lt;/h3>
&lt;p>Before we get started, let&amp;rsquo;s run the simple &lt;code>hello-world&lt;/code> Docker container. This will ensure docker is working as expected and output &amp;ldquo;Hello from Docker!&amp;rdquo; as well as some other intro text:&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="background-color:#f8f8f8;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-shell" data-lang="shell">&lt;span style="display:flex;">&lt;span>docker run hello-world
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>Now that we know Docker is set up, let&amp;rsquo;s start our CouchDB container.&lt;/p>
&lt;h4 id="couchdb-setup-in-cht-3x">CouchDB Setup in CHT 3.x&lt;/h4>
&lt;p>Note this will run in the background and store its data in &lt;code>/home/YOUR-USER/cht-docker&lt;/code>. The login for your CHT instance will be &lt;code>medic&lt;/code> and the password will be &lt;code>password&lt;/code>:&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="background-color:#f8f8f8;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-shell" data-lang="shell">&lt;span style="display:flex;">&lt;span>docker run -d -p 5984:5984 -p 5986:5986 --name medic-couchdb -e &lt;span style="color:#000">COUCHDB_USER&lt;/span>&lt;span style="color:#ce5c00;font-weight:bold">=&lt;/span>medic -e &lt;span style="color:#000">COUCHDB_PASSWORD&lt;/span>&lt;span style="color:#ce5c00;font-weight:bold">=&lt;/span>password -v ~/cht-docker/local.d:/opt/couchdb/data -v ~/cht-docker/local.d:/opt/couchdb/etc/local.d apache/couchdb:2
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>Let&amp;rsquo;s ensure CouchDB is set up with a test &lt;code>curl&lt;/code> call. This should show &amp;ldquo;nonode@nohost&amp;rdquo; in JSON:&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="background-color:#f8f8f8;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-shell" data-lang="shell">&lt;span style="display:flex;">&lt;span>curl -X GET &lt;span style="color:#4e9a06">&amp;#34;http://medic:password@localhost:5984/_membership&amp;#34;&lt;/span> &lt;span style="color:#000;font-weight:bold">|&lt;/span> jq
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>Every time you run any &lt;code>grunt&lt;/code> or &lt;code>node&lt;/code> commands, it will expect &lt;code>COUCH_NODE_NAME&lt;/code> and &lt;code>COUCH_URL&lt;/code> environment variables to be set:&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="background-color:#f8f8f8;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-shell" data-lang="shell">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#204a87">echo&lt;/span> &lt;span style="color:#4e9a06">&amp;#34;export COUCH_NODE_NAME=nonode@nohost&amp;#34;&lt;/span>&amp;gt;&amp;gt; ~/.&lt;span style="color:#000">$0&lt;/span>rc
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#204a87">echo&lt;/span> &lt;span style="color:#4e9a06">&amp;#34;export COUCH_URL=http://medic:password@localhost:5984/medic&amp;#34;&lt;/span>&amp;gt;&amp;gt; ~/.&lt;span style="color:#000">$0&lt;/span>rc
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>. ~/.&lt;span style="color:#000">$0&lt;/span>rc
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>To ensure these to exports and sourcing your rc file worked, echo the values back out. You should see &lt;code>nonode@nohost&lt;/code> and &lt;code>http://medic:password@localhost:5984/medic&lt;/code>:&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="background-color:#f8f8f8;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-shell" data-lang="shell">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#204a87">echo&lt;/span> &lt;span style="color:#000">$COUCH_NODE_NAME&lt;/span> &lt;span style="color:#ce5c00;font-weight:bold">&amp;amp;&amp;amp;&lt;/span> &lt;span style="color:#204a87">echo&lt;/span> &lt;span style="color:#000">$COUCH_URL&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>You need to harden CouchDB with a &lt;code>grunt&lt;/code> call, required even in development:&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="background-color:#f8f8f8;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-shell" data-lang="shell">&lt;span style="display:flex;">&lt;span>grunt secure-couchdb
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>curl -X PUT &lt;span style="color:#4e9a06">&amp;#34;http://medic:password@localhost:5984/_node/&lt;/span>&lt;span style="color:#000">$COUCH_NODE_NAME&lt;/span>&lt;span style="color:#4e9a06">/_config/httpd/WWW-Authenticate&amp;#34;&lt;/span> -d &lt;span style="color:#4e9a06">&amp;#39;&amp;#34;Basic realm=\&amp;#34;administrator\&amp;#34;&amp;#34;&amp;#39;&lt;/span> -H &lt;span style="color:#4e9a06">&amp;#34;Content-Type: application/json&amp;#34;&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;h4 id="couchdb-setup-in-cht-4x">CouchDB Setup in CHT 4.x&lt;/h4>
&lt;p>Create a &lt;code>docker-compose.yml&lt;/code> file under the &lt;code>couchdb&lt;/code> folder.&lt;/p>
&lt;p>Copy the content of the CouchDB &lt;code>docker-compose&lt;/code> file from the of the CHT release version you are trying to run locally. For example, this is &lt;a href="https://staging.dev.medicmobile.org/_couch/builds_4/medic%3Amedic%3Amaster/docker-compose%2Fcht-couchdb-clustered.yml">the file&lt;/a> for the most recent build.&lt;/p>
&lt;p>Startup CouchDB:&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="background-color:#f8f8f8;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-shell" data-lang="shell">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#204a87">cd&lt;/span> couchdb
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>docker-compose up
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;h3 id="cht-core-cloning-and-setup">CHT Core Cloning and Setup&lt;/h3>
&lt;p>Clone the main CHT Core repo from GitHub and change directories into it:&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="background-color:#f8f8f8;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-shell" data-lang="shell">&lt;span style="display:flex;">&lt;span>git clone https://github.com/medic/cht-core ~/cht-core
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#204a87">cd&lt;/span> ~/cht-core
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>Install dependencies and perform other setup tasks via an &lt;code>npm&lt;/code> command. Note this command may take many minutes. Be patient!&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="background-color:#f8f8f8;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-shell" data-lang="shell">&lt;span style="display:flex;">&lt;span>npm ci
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>If you encounter conflicting dependencies, run the following command:&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="background-color:#f8f8f8;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-shell" data-lang="shell">&lt;span style="display:flex;">&lt;span>npm ci --legacy-peer-deps
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;h3 id="developing">Developing&lt;/h3>
&lt;p>Now you have everything installed and can begin development! You&amp;rsquo;ll need three separate terminals when doing development. In the first terminal, run:&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="background-color:#f8f8f8;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-shell" data-lang="shell">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#204a87">cd&lt;/span> ~/cht-core &lt;span style="color:#ce5c00;font-weight:bold">&amp;amp;&amp;amp;&lt;/span> grunt
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>Be &lt;strong>very&lt;/strong> patient until you see:&lt;/p>
&lt;blockquote>
&lt;p>&amp;ldquo;Waiting&amp;hellip;&amp;rdquo;&lt;/p>
&lt;/blockquote>
&lt;p>Then in a 2nd terminal run:&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="background-color:#f8f8f8;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-shell" data-lang="shell">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#204a87">cd&lt;/span> ~/cht-core &lt;span style="color:#ce5c00;font-weight:bold">&amp;amp;&amp;amp;&lt;/span> grunt dev-api
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>Finally, in a 3rd terminal run:&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="background-color:#f8f8f8;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-shell" data-lang="shell">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#204a87">cd&lt;/span> ~/cht-core &lt;span style="color:#ce5c00;font-weight:bold">&amp;amp;&amp;amp;&lt;/span> grunt dev-sentinel
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>That&amp;rsquo;s it! Now when you edit code in your IDE, it will automatically reload. You can see the CHT running locally here: &lt;a href="http://localhost:5988/">http://localhost:5988/&lt;/a>&lt;/p>
&lt;p>When you&amp;rsquo;re done with development you can &lt;code>ctrl + c&lt;/code> in the three terminals and stop the CouchDB container with &lt;code>docker stop medic-couchdb&lt;/code>. When you want to resume development later, run &lt;code>docker start medic-couchdb&lt;/code> and re-run the three terminal commands.&lt;/p>
&lt;h2 id="other-path-troubleshooting">Other Path Troubleshooting&lt;/h2>
&lt;p>If you weren&amp;rsquo;t able to follow &lt;a href="#the-happy-path-installation">the happy path above&lt;/a>, here are some details about the developer install that may help you troubleshoot what went wrong.&lt;/p>
&lt;h3 id="prerequisites">Prerequisites&lt;/h3>
&lt;p>If you had issues with following the above steps, check out these links for how to install the prerequisites on your specific platform:&lt;/p>
&lt;ul>
&lt;li>&lt;a href="https://nodejs.org/">Node.js 16.x&lt;/a> &amp;amp; &lt;a href="https://npmjs.com/">npm 8.x.x&lt;/a> - Both of which we recommend installing &lt;a href="https://github.com/nvm-sh/nvm#installing-and-updating">via &lt;code>nvm&lt;/code>&lt;/a>&lt;/li>
&lt;li>&lt;a href="https://gruntjs.com/using-the-cli">grunt cli&lt;/a>&lt;/li>
&lt;li>&lt;a href="http://www.sagehill.net/docbookxsl/InstallingAProcessor.html">xsltproc&lt;/a>&lt;/li>
&lt;li>&lt;a href="https://www.python.org/downloads/">python 2.7&lt;/a>&lt;/li>
&lt;li>&lt;a href="https://docs.docker.com/engine/install/">Docker&lt;/a>&lt;/li>
&lt;li>&lt;a href="https://docs.couchdb.org/en/2.3.1/install/index.html">CouchDB&lt;/a> - OS package instead of in Docker - you &lt;strong>MUST&lt;/strong> use CouchDB 2.x! We still strongly recommend using Docker.&lt;/li>
&lt;/ul>
&lt;h3 id="ubuntu-1804">Ubuntu 18.04&lt;/h3>
&lt;p>Ubuntu 18.04&amp;rsquo;s default &lt;code>apt&lt;/code> repositories do not know about &lt;code>python2&lt;/code>. This means when you go to install run the first &lt;code>apt install&lt;/code> command above, you see an error:&lt;/p>
&lt;pre tabindex="0">&lt;code>E: Unable to locate package python2
&lt;/code>&lt;/pre>&lt;p>To fix this, change the &lt;code>apt install&lt;/code> call to this:&lt;/p>
&lt;pre tabindex="0">&lt;code>sudo apt -y install xsltproc curl uidmap jq python git make g++
&lt;/code>&lt;/pre>&lt;p>As well, after you install docker, and go to run the rootless script &lt;code>dockerd-rootless-setuptool.sh&lt;/code>, you might see this error:&lt;/p>
&lt;pre tabindex="0">&lt;code>[ERROR] Failed to start docker.service. Run `journalctl -n 20 --no-pager --user --unit docker.service` to show the error log.
&lt;/code>&lt;/pre>&lt;p>To work around, unfortunately, is to just start your CouchDB Docker container with sudo: &lt;code>sudo docker run...&lt;/code>.&lt;/p>
&lt;h3 id="macos--123">MacOS &amp;gt; 12.3&lt;/h3>
&lt;p>Apple removed the system-provided &lt;code>python2&lt;/code> installation starting with MacOS version 12.3. This means when you run the &lt;code>npm ci&lt;/code> command above, you see an error:&lt;/p>
&lt;pre tabindex="0">&lt;code>npm ERR! gyp ERR verb find Python Python is not set from command line or npm configuration
&lt;/code>&lt;/pre>&lt;p>To fix this, run the following commands:&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="background-color:#f8f8f8;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-shell" data-lang="shell">&lt;span style="display:flex;">&lt;span>brew install pyenv
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>pyenv install 2.7.18
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>pyenv global 2.7.18
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#204a87">echo&lt;/span> &lt;span style="color:#4e9a06">&amp;#34;eval \&amp;#34;\$(pyenv init --path)\&amp;#34;&amp;#34;&lt;/span> &amp;gt;&amp;gt; ~/.zshrc &lt;span style="color:#ce5c00;font-weight:bold">(&lt;/span>or ~/.bash_profile or ~/.zprofile&lt;span style="color:#ce5c00;font-weight:bold">)&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#204a87">exec&lt;/span> zsh
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;h3 id="couchdb-on-docker-details">CouchDB on Docker Details&lt;/h3>
&lt;p>Breaking down the command from &lt;a href="https://docs.communityhealthtoolkit.org/apps/guides/hosting/core-developer/#couchdb-setup-in-docker">the above section&lt;/a>, here&amp;rsquo;s a generic version that doesn&amp;rsquo;t include hard coded paths:&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="background-color:#f8f8f8;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-shell" data-lang="shell">&lt;span style="display:flex;">&lt;span>docker run -d -p 5984:5984 -p 5986:5986 --name medic-couchdb -e &lt;span style="color:#000">COUCHDB_USER&lt;/span>&lt;span style="color:#ce5c00;font-weight:bold">=&lt;/span>medic -e &lt;span style="color:#000">COUCHDB_PASSWORD&lt;/span>&lt;span style="color:#ce5c00;font-weight:bold">=&lt;/span>password -v &amp;lt;data path&amp;gt;:/opt/couchdb/data -v &amp;lt;config path&amp;gt;:/opt/couchdb/etc/local.d apache/couchdb:2
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>Parts of the command:&lt;/p>
&lt;ul>
&lt;li>&lt;code>--name&lt;/code> creates a container called &lt;code>medic-couchdb&lt;/code>. You can name it whatever you want, but this is how you refer to it later&lt;/li>
&lt;li>&lt;code>-e&lt;/code> sets an environment variable inside the container. Two are set here, for a user and password for the initial admin user.&lt;/li>
&lt;li>&lt;code>-v&lt;/code> maps where couchdb stores data to your local file system to ensure persistence without depending on the container, using the path &lt;em>before&lt;/em> the &lt;code>:&lt;/code> (the path after the colon is the internal path inside the docker image). This should be somewhere you have write access to, and want this data to be stored. The second mounted volume is for the couch configuration, which will retain settings if your container is removed. This is especially important after running the command to secure the instance (done in steps below).&lt;/li>
&lt;li>&lt;code>apache/couchdb:2&lt;/code> will install the latest package for CouchDB 2.x&lt;/li>
&lt;/ul>
&lt;p>Once this downloads and starts, you will need to &lt;a href="http://localhost:5984/_utils/#/setup">initialise CouchDB&lt;/a> as noted in &lt;a href="https://docs.couchdb.org/en/2.3.1/setup/index.html#setup">their install instructions&lt;/a>.&lt;/p>
&lt;p>You can use &lt;code>docker stop medic-couchdb&lt;/code> to stop it and &lt;code>docker start medic-couchdb&lt;/code> to start it again. Remember that you&amp;rsquo;ll need to start it whenever you restart your OS, which might not be the case if you use a normal OS package. &lt;code>docker rm medic-couchdb&lt;/code> will totally remove the container.&lt;/p>
&lt;p>Medic recommends you familiarise yourself with other Docker commands to make docker image and container management clearer.&lt;/p>
&lt;h3 id="required-environment-variables">Required environment variables&lt;/h3>
&lt;p>Medic needs the following environment variables to be declared:&lt;/p>
&lt;ul>
&lt;li>&lt;code>COUCH_URL&lt;/code>: the full authenticated url to the &lt;code>medic&lt;/code> DB. Locally this would be &lt;code>http://myadminuser:myadminpass@localhost:5984/medic&lt;/code>&lt;/li>
&lt;li>&lt;code>COUCH_NODE_NAME&lt;/code>: the name of your CouchDB&amp;rsquo;s node. The Docker image default is &lt;code>nonode@nohost&lt;/code>. Other installations may use &lt;code>couchdb@127.0.0.1&lt;/code>. You can find out by querying &lt;a href="https://docs.couchdb.org/en/stable/api/server/common.html#membership">CouchDB&amp;rsquo;s membership API&lt;/a>&lt;/li>
&lt;li>(optionally) &lt;code>API_PORT&lt;/code>: the port API will run on. If not defined, the port defaults to &lt;code>5988&lt;/code>&lt;/li>
&lt;li>(optionally) &lt;code>CHROME_BIN&lt;/code>: only required if &lt;code>grunt unit&lt;/code> or &lt;code>grunt e2e&lt;/code> complain that they can&amp;rsquo;t find Chrome or if you want to run a specific version of the Chrome webdriver.&lt;/li>
&lt;/ul>
&lt;p>How to permanently define environment variables depends on your OS and shell (e.g. for bash you can put them &lt;code>~/.bashrc&lt;/code>). You can temporarily define them with &lt;code>export&lt;/code>:&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="background-color:#f8f8f8;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-shell" data-lang="shell">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#204a87">export&lt;/span> &lt;span style="color:#000">COUCH_NODE_NAME&lt;/span>&lt;span style="color:#ce5c00;font-weight:bold">=&lt;/span>nonode@nohost
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#204a87">export&lt;/span> &lt;span style="color:#000">COUCH_URL&lt;/span>&lt;span style="color:#ce5c00;font-weight:bold">=&lt;/span>http://myadminuser:myadminpass@localhost:5984/medic
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;h2 id="tests">Tests&lt;/h2>
&lt;p>Refer to &lt;a href="https://github.com/medic/cht-core/blob/master/TESTING.md">the testing doc&lt;/a> in the GitHub repo.&lt;/p>
&lt;h2 id="nginx-local-ip">nginx-local-ip&lt;/h2>
&lt;p>&lt;a href="https://github.com/medic/nginx-local-ip">&lt;code>nginx-local-ip&lt;/code>&lt;/a> is a local proxy that keeps all traffic local, and runs without latency or throttling. If sharing your local CHT instance is not required, it is the recommended method to add a valid SSL certificate (rather than &lt;code>ngrok&lt;/code> or similar).&lt;/p>
&lt;ol>
&lt;li>Clone the repo: &lt;code>git clone https://github.com/medic/nginx-local-ip.git&lt;/code>&lt;/li>
&lt;li>&lt;code>cd&lt;/code> into the new directory: &lt;code>cd nginx-local-ip&lt;/code>&lt;/li>
&lt;li>Assuming your IP is &lt;code>192.168.0.3&lt;/code>, start &lt;code>nginx-local-ip&lt;/code> to connect to:
&lt;ul>
&lt;li>The CHT API running via &lt;code>grunt&lt;/code> or &lt;code>horti&lt;/code>, execute &lt;code>APP_URL=http://192.168.0.3:5988 docker compose up&lt;/code> and then access it at &lt;a href="https://192-168-0-3.my.local-ip.co/">https://192-168-0-3.my.local-ip.co/&lt;/a>&lt;/li>
&lt;li>The CHT API running via &lt;code>docker&lt;/code>, the ports are remapped, so execute &lt;code>HTTP=8080 HTTPS=8443 APP_URL=https://192.168.0.3 docker compose up&lt;/code> and then access it at &lt;a href="https://192-168-0-3.my.local-ip.co:8443/">https://192-168-0-3.my.local-ip.co:8443/&lt;/a>&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>The HTTP/HTTPS ports (&lt;code>80&lt;/code>/&lt;code>443&lt;/code>) need to accept traffic from the IP address of your host machine and your local webapp port (e.g. &lt;code>5988&lt;/code>) needs to accept traffic from the IP address of the &lt;code>nginx-local-ip&lt;/code> container (on the Docker network). If you are using the UFW firewall (in a Linux environment) you can allow traffic on these ports with the following commands:&lt;/li>
&lt;/ol>
&lt;p>(Since local IP addresses can change over time, ranges are used in these rules so that the firewall configuration does not have to be updated each time a new address is assigned.)&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="background-color:#f8f8f8;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-shell" data-lang="shell">&lt;span style="display:flex;">&lt;span>sudo ufw allow proto tcp from 192.168.0.0/16 to any port 80,443
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>sudo ufw allow proto tcp from 172.16.0.0/16 to any port &lt;span style="color:#0000cf;font-weight:bold">5988&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;h2 id="remote-proxies">Remote Proxies&lt;/h2>
&lt;p>&lt;code>ngrok&lt;/code> and &lt;code>pagekite&lt;/code> are remote proxies that route local traffic between your client and the CHT via a remote SSL terminator. While easy and handy, they introduce latency and are sometimes throttled. Always use &lt;code>nginx-local-ip&lt;/code> when you need a TLS certificate and only use these when you need to share your dev instance.&lt;/p>
&lt;h3 id="ngrok">ngrok&lt;/h3>
&lt;ol>
&lt;li>Create an &lt;a href="https://ngrok.com/">ngrok account&lt;/a>, download and install the binary, then link your computer to your ngrok account.&lt;/li>
&lt;li>Start &lt;code>ngrok&lt;/code> to connect to:
&lt;ul>
&lt;li>The CHT API running via &lt;code>grunt&lt;/code> or &lt;code>horti&lt;/code>, execute &lt;code>./ngrok http 5988&lt;/code>&lt;/li>
&lt;li>The CHT API running via &lt;code>docker&lt;/code>, execute &lt;code>./ngrok http 443&lt;/code>&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>Access the app using the https address shown (e.g. &lt;code>https://YOUR-NGROK-NAME.ngrok.io&lt;/code>, replacing &lt;code>YOUR-NGROK-NAME&lt;/code> with what you signed up with).&lt;/li>
&lt;/ol>
&lt;p>&lt;strong>Note:&lt;/strong> The service worker cache preload sometimes fails due to connection throttling (thereby causing an &lt;code>ngrok&lt;/code> failure at startup).&lt;/p>
&lt;h3 id="pagekite">pagekite&lt;/h3>
&lt;ol>
&lt;li>Create a &lt;a href="https://pagekite.net/signup/">pagekite account&lt;/a>, download and install the python script.&lt;/li>
&lt;li>Start pagekite (be sure to replace &lt;code>YOUR-PAGEKIT-NAME&lt;/code> with the URL you signed up for) to connect to:&lt;/li>
&lt;/ol>
&lt;ul>
&lt;li>The CHT API running via &lt;code>grunt&lt;/code> or &lt;code>horti&lt;/code>, execute &lt;code>python pagekite.py 5988 YOUR-PAGEKIT-NAME.pagekite.me&lt;/code>&lt;/li>
&lt;li>The CHT API running via &lt;code>docker&lt;/code>, execute &lt;code>python pagekite.py 443 YOUR-PAGEKIT-NAME.pagekite.me&lt;/code>&lt;/li>
&lt;/ul>
&lt;ol>
&lt;li>Access the app using the https address shown (e.g. &lt;code>https://YOUR-PAGEKIT-NAME.pagekite.me&lt;/code>).&lt;/li>
&lt;/ol></description></item><item><title>Apps: Monitoring and alerting on the CHT</title><link>https://docs.communityhealthtoolkit.org/apps/guides/hosting/monitoring/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://docs.communityhealthtoolkit.org/apps/guides/hosting/monitoring/</guid><description>
&lt;div class="alert alert-primary" role="alert">
&lt;h4 class="alert-heading">Note&lt;/h4>
This guide applies to all production instances of the CHT including &lt;a href="https://docs.communityhealthtoolkit.org/apps/guides/hosting/3.x/self-hosting/">self hosted&lt;/a> and &lt;a href="https://docs.communityhealthtoolkit.org/apps/guides/hosting/3.x/ec2-setup-guide/">AWS hosted&lt;/a>. It also works with &lt;a href="https://docs.communityhealthtoolkit.org/apps/guides/hosting/3.x/app-developer/">app developer&lt;/a> and &lt;a href="https://docs.communityhealthtoolkit.org/apps/guides/hosting/core-developer/">CHT core developer&lt;/a> setups if youâ€™re looking to test how it works or develop monitoring tools.
&lt;/div>
&lt;div class="alert alert-primary" role="alert">
&lt;h4 class="alert-heading">Note&lt;/h4>
These instructions apply to both 3.x and 4.x CHT monitoring
&lt;/div>
&lt;p>While this guide does not detail exactly how to set up monitoring and alerting, it will outline the items you should monitor and alert on. At a later date we&amp;rsquo;ll deploy an opinionated guide on which software and services to use when doing real world hosting.&lt;/p>
&lt;p>Each deployment will experience different stresses on its resources. Be sure to tune the alerting levels in the case of an outage so that you may avoid it in the future. Any thresholds for alerts, and even what is alerted on, is just a guideline, not a garuntee of uptime.&lt;/p>
&lt;h2 id="monitoring-vs-alerting">Monitoring vs Alerting&lt;/h2>
&lt;p>Monitoring allows CHT admins to see statistics about their server, often over time. This can be helpful when you want to be aware of growth in your deployment (eg number of active users or number of reports per region). It should not be assumed that these will be checked regularly enough to notice a problem, for example a spike in number of feedback documents.&lt;/p>
&lt;p>Alerting is a push mechanism designed to notify users who can act on the alert. These can go over SMS, email, Slack, WhatsApp or any other channel to notify the right users.&lt;/p>
&lt;p>The process of setting up monitoring and alerting should be done together. Monitoring sets the baseline and then alerting tells admins when the metric has gone beyond the baseline to a critical state. Certain metrics, like uptime for example, likely do not need to have a monitoring visualization on a dashboard, but the monitoring system should still be the authority to send an alert to denote when the service has restarted unexpectedly.&lt;/p>
&lt;h2 id="outside-the-cht">Outside the CHT&lt;/h2>
&lt;p>Be sure to monitor important items that the CHT depends on in order to be healthy. You should alert when any of these are close to their maximum (disk space) or minimum (days left of valid TLS certificate):&lt;/p>
&lt;ul>
&lt;li>Domain expiration with registrar&lt;/li>
&lt;li>TLS certificate expiration&lt;/li>
&lt;li>Disk &amp;amp; swap space&lt;/li>
&lt;li>CPU utilization&lt;/li>
&lt;li>Memory utilization&lt;/li>
&lt;li>Network utilization&lt;/li>
&lt;li>Process count&lt;/li>
&lt;li>OS Uptime&lt;/li>
&lt;/ul>
&lt;h2 id="inside-the-cht">Inside the CHT&lt;/h2>
&lt;p>The &lt;a href="(/apps/reference/api/#get-apiv2monitoring)">monitoring API&lt;/a> was added in 3.9.0 and does not require any authentication and so can easily be used with third party tools as they do not need a CHT user account.&lt;/p>
&lt;p>All metrics need to be monitored over time so that you can easily see longitudinal patterns when debugging an outage or slow down.&lt;/p>
&lt;h3 id="specific-of-monitoring">Specific of monitoring&lt;/h3>
&lt;h4 id="explosive-growth">Explosive Growth&lt;/h4>
&lt;p>Many of the values in the monitoring API do not mean much in isolation. For example if an instance has 10,714,278 feedback docs, is that bad? If it&amp;rsquo;s years old and has thousands of users, then this is normal. If it is 4 months old and has 100 users, this is a dire problem!&lt;/p>
&lt;p>You should monitor these metrics for unexpected growth as measured by percent change over 24 hours. Ideally this can be subjectively calculated when it is more than 5% growth than the prior day. They&amp;rsquo;re marked as &lt;code>growth&lt;/code> in the table below.&lt;/p>
&lt;h4 id="non-zero-values">Non-Zero Values&lt;/h4>
&lt;p>Other values should always be zero, and you should alert when they are not. You may opt to alert only when they are non-zero for more than 24 hours. These are marked as &lt;code>non-zero&lt;/code> in the table below.&lt;/p>
&lt;h4 id="zero-or-near-zero-values">Zero or Near Zero Values&lt;/h4>
&lt;p>Finally, these values should always be &lt;em>not&lt;/em> zero, and you should alert when are zero or very close to it. You may opt to alert only when they are zero for more than 24 hours. They&amp;rsquo;re marked with &lt;code>zero&lt;/code> below.&lt;/p>
&lt;h4 id="elements-types-and-samples">Elements, types and samples&lt;/h4>
&lt;p>The names below are extrapolated from the paths in the JSON returned by the API and should be easy to find when viewing the Monitoring API URL on your CHT instance:&lt;/p>
&lt;table>
&lt;thead>
&lt;tr>
&lt;th>Name&lt;/th>
&lt;th>Type&lt;/th>
&lt;th>Example Value&lt;/th>
&lt;/tr>
&lt;/thead>
&lt;tbody>
&lt;tr>
&lt;td>Conflict Count&lt;/td>
&lt;td>&lt;code>growth&lt;/code>&lt;/td>
&lt;td>23,318&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>CouchDB Medic Doc Count&lt;/td>
&lt;td>&lt;code>growth&lt;/code>&lt;/td>
&lt;td>16,254,271&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>CouchDB Medic Fragmentation&lt;/td>
&lt;td>&lt;code>growth&lt;/code>&lt;/td>
&lt;td>1.4366029665729645&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>CouchDB Sentinel Doc Count&lt;/td>
&lt;td>&lt;code>growth&lt;/code>&lt;/td>
&lt;td>15,756,449&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>CouchDB Sentinel Fragmentation&lt;/td>
&lt;td>&lt;code>growth&lt;/code>&lt;/td>
&lt;td>2.388733774539664&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>CouchDB Users Doc Count&lt;/td>
&lt;td>&lt;code>growth&lt;/code>&lt;/td>
&lt;td>535&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>CouchDB Users Fragmentation&lt;/td>
&lt;td>&lt;code>growth&lt;/code>&lt;/td>
&lt;td>2.356411021364134&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>CouchDB Users Meta Doc Count&lt;/td>
&lt;td>&lt;code>growth&lt;/code>&lt;/td>
&lt;td>10,761,549&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>Feedback Count&lt;/td>
&lt;td>&lt;code>growth&lt;/code>&lt;/td>
&lt;td>10,714,368&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>Messaging Outgoing State Due&lt;/td>
&lt;td>&lt;code>growth&lt;/code>&lt;/td>
&lt;td>3,807&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>Messaging Outgoing State Failed&lt;/td>
&lt;td>&lt;code>non-zero&lt;/code>&lt;/td>
&lt;td>0&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>Outbound Push Backlog&lt;/td>
&lt;td>&lt;code>non-zero&lt;/code>&lt;/td>
&lt;td>0&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>Sentinel Backlog&lt;/td>
&lt;td>&lt;code>non-zero&lt;/code>&lt;/td>
&lt;td>0&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>Date Uptime&lt;/td>
&lt;td>&lt;code>zero&lt;/code>&lt;/td>
&lt;td>1,626,508.148&lt;/td>
&lt;/tr>
&lt;/tbody>
&lt;/table></description></item><item><title>Apps: 3.x</title><link>https://docs.communityhealthtoolkit.org/apps/guides/hosting/3.x/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://docs.communityhealthtoolkit.org/apps/guides/hosting/3.x/</guid><description>
&lt;div class="alert alert-primary" role="alert">
&lt;h4 class="alert-heading">Note&lt;/h4>
To get an overview on how these hosting solutions use &lt;code>docker&lt;/code> and &lt;code>docker-compose&lt;/code>, as well as other key CHT concepts, be sure to read the &lt;a href="https://docs.communityhealthtoolkit.org/apps/tutorials/local-setup/">guide on a Local Setup&lt;/a>. Note that while this is for CHT 4.x, the concepts apply to 3.x.
&lt;/div>
&lt;p>Before beginning any of these guides, be sure to meet all of the &lt;a href="https://docs.communityhealthtoolkit.org/apps/guides/hosting/requirements/">CHT hosting requirements&lt;/a> first.&lt;/p>
&lt;p>To host a production instance of CHT, use either the &lt;a href="https://docs.communityhealthtoolkit.org/apps/guides/hosting/3.x/ec2-setup-guide/">AWS&lt;/a> or &lt;a href="https://docs.communityhealthtoolkit.org/apps/guides/hosting/3.x/self-hosting/">Self&lt;/a> hosting guides. To do app development, see our &lt;a href="https://docs.communityhealthtoolkit.org/apps/guides/hosting/3.x/app-developer/">App Developer&lt;/a> hosting guide.&lt;/p>
&lt;p>To view 4.x hosting options, see the &lt;a href="https://docs.communityhealthtoolkit.org/apps/guides/hosting/4.x/">4.x hosting section&lt;/a>&lt;/p></description></item><item><title>Apps: 4.x</title><link>https://docs.communityhealthtoolkit.org/apps/guides/hosting/4.x/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://docs.communityhealthtoolkit.org/apps/guides/hosting/4.x/</guid><description>
&lt;div class="alert alert-primary" role="alert">
&lt;h4 class="alert-heading">Note&lt;/h4>
4.x hosting guides coming soon! For now, please check out the &lt;a href="https://docs.communityhealthtoolkit.org/apps/tutorials/local-setup/">local hosting page&lt;/a> which goes through setting up a CHT 4.x instance.
&lt;/div>
&lt;hr></description></item></channel></rss>