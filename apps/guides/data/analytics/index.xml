<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>Community Health Toolkit â€“ Data Synchronization and Analytics</title><link>https://docs.communityhealthtoolkit.org/apps/guides/data/analytics/</link><description>Recent content in Data Synchronization and Analytics on Community Health Toolkit</description><generator>Hugo -- gohugo.io</generator><language>en</language><atom:link href="https://docs.communityhealthtoolkit.org/apps/guides/data/analytics/index.xml" rel="self" type="application/rss+xml"/><item><title>Apps: Introduction &amp; Prerequisites to data synchronization and analytics</title><link>https://docs.communityhealthtoolkit.org/apps/guides/data/analytics/introduction/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://docs.communityhealthtoolkit.org/apps/guides/data/analytics/introduction/</guid><description>
&lt;div class="pageinfo pageinfo-primary">
&lt;p>The pages in this section apply to both CHT 3.x (beyond 3.12) and CHT 4.x.&lt;/p>
&lt;p>&lt;a href="https://github.com/medic/cht-sync/blob/main/postgres/init-dbt-resources.sh">CHT Sync schema&lt;/a> differs from &lt;a href="https://github.com/medic/cht-couch2pg">CHT Couch2pg&lt;/a>.&lt;/p>
&lt;/div>
&lt;p>Most CHT deployments require some sort of analytics so that stakeholders can make data driven decisions. CouchDB, which is the database used by the CHT, is not designed for analytics. It is a document database, which means that it is optimized for storing and retrieving documents, and not for aggregating data. For example, if you wanted to know how many patients were registered in a particular area, you would have to query the database for all the patients in that area, and then count them. This is not a very efficient process. It is much more efficient to store the number of patients in a particular area in a separate database, and update that number whenever a patient is registered or unregistered. This is what CHT Sync paired with CHT Pipeline is designed to do.&lt;/p>
&lt;h2 id="cht-sync-introduction">CHT Sync Introduction&lt;/h2>
&lt;p>Medic maintains CHT Sync which is an integrated solution designed to enable data synchronization between CouchDB and PostgreSQL for the purpose of analytics. It can easily be deployed using Docker. It is supported on CHT 3.12 and later, including CHT 4.x. By using CHT Sync, a CHT deployment can easily get analytics by using a data visualization tool. All tools are open-source and have no licensing fees.&lt;/p>
&lt;p>CHT Sync has been designed to work in both local development environments for testing models or workflows, and in production environments. The setup can accommodate the needs of different environments.&lt;/p>
&lt;h2 id="cht-sync-prerequisites">CHT Sync Prerequisites&lt;/h2>
&lt;ul>
&lt;li>&lt;a href="https://docs.docker.com/install/">Docker&lt;/a>&lt;/li>
&lt;li>&lt;a href="https://docs.docker.com/compose/install/">Docker Compose&lt;/a>&lt;/li>
&lt;li>&lt;a href="https://git-scm.com/book/en/v2/Getting-Started-Installing-Git">git&lt;/a>&lt;/li>
&lt;li>&lt;a href="https://docs.npmjs.com/downloading-and-installing-node-js-and-npm">Node and npm&lt;/a> (Node 18 LTS or newer)&lt;/li>
&lt;li>&lt;a href="https://github.com/medic/cht-sync">CHT Sync&lt;/a> GitHub repository (can be cloned via &lt;code>git clone https://github.com/medic/cht-sync&lt;/code>).&lt;/li>
&lt;/ul></description></item><item><title>Apps: Local CHT Sync Setup</title><link>https://docs.communityhealthtoolkit.org/apps/guides/data/analytics/setup/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://docs.communityhealthtoolkit.org/apps/guides/data/analytics/setup/</guid><description>
&lt;p>Before setting up CHT Sync in production, it&amp;rsquo;s very handy to be able to run it locally. This will allow you to experiment with the data flow and easily query development data quickly and locally.&lt;/p>
&lt;p>These instructions assume you&amp;rsquo;re running CHT Sync, CHT Core and PostgreSQL either locally on your workstation or on a local server. They are not meant to be used to deploy a secure, always on production instance.&lt;/p>
&lt;h2 id="setup">Setup&lt;/h2>
&lt;p>Copy the values in &lt;code>env.template&lt;/code> file to the &lt;code>.env&lt;/code> file. For more information, see the references on the &lt;a href="https://docs.communityhealthtoolkit.org/apps/guides/data/analytics/environment-variables/">Environment variables page&lt;/a>.&lt;/p>
&lt;p>Install the dependencies:&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="background-color:#f8f8f8;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-sh" data-lang="sh">&lt;span style="display:flex;">&lt;span>npm install
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>
&lt;div class="alert alert-primary" role="alert">
&lt;h4 class="alert-heading">Note&lt;/h4>
The first time you run the commands from any of the sections below it will need to download many Docker images and will take a while. You&amp;rsquo;ll know it&amp;rsquo;s done when you see &lt;code>#8 DONE 0.0s&lt;/code> and you are returned to the command line. Be patient!
&lt;/div>
&lt;h3 id="sample-couchdb-data">Sample CouchDB data&lt;/h3>
&lt;p>This setup involves starting Logstash, PostgreSQL, PostgREST, DBT, and CouchDB. Sample fake data is generated for CouchDB.&lt;/p>
&lt;p>Run the Docker containers and wait for every container to be up and running:&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="background-color:#f8f8f8;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-sh" data-lang="sh">&lt;span style="display:flex;">&lt;span>docker-compose -f docker-compose.couchdb.yml -f docker-compose.postgres.yml -f docker-compose.yml up -d
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>You can verify this command worked by running &lt;code>docker ps&lt;/code>. It should show 6 containers running including Logstash, DBT, data generator, PostgreSQL, CouchDB and PostgREST (note the &lt;code>t&lt;/code> at the end!).&lt;/p>
&lt;p>Now that all services are running, use a PostgreSQL client like &lt;a href="https://www.pgadmin.org/">pgAdmin&lt;/a> or &lt;a href="https://www.beekeeperstudio.io/">Beekeeper&lt;/a> to connect to server &lt;code>localhost:5432&lt;/code> with user &lt;code>postgres&lt;/code> and password &lt;code>postgres&lt;/code>. You should be able to see sample data being inserted into the &lt;code>v1.medic&lt;/code> table.&lt;/p>
&lt;h3 id="separate-couchdb-instance">Separate CouchDB instance&lt;/h3>
&lt;p>This setup involves starting Logstash, PostgreSQL, PostgREST, and DBT. It assumes you have a CouchDB instance running, and you updated the &lt;code>.env&lt;/code> CouchDB variables accordingly.&lt;/p>
&lt;p>Run the Docker containers locally and wait for every container to be up and running:&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="background-color:#f8f8f8;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-sh" data-lang="sh">&lt;span style="display:flex;">&lt;span>docker-compose -f docker-compose.postgres.yml -f docker-compose.yml up -d
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>You can verify this command worked by running &lt;code>docker ps&lt;/code>. It should show 4 containers running including Logstash, DBT, PostgreSQL, and PostgREST.&lt;/p>
&lt;h3 id="separate-couchdb-and-postgresql-instances">Separate CouchDB and PostgreSQL instances&lt;/h3>
&lt;p>This local setup involves starting Logstash, PostgREST, and DBT. It assumes that CouchDB and PostgreSQL instances are run separately from the Docker Compose provided with CHT Sync, and the &lt;code>.env&lt;/code> variables were updated to match those instances details.&lt;/p>
&lt;p>Run the Docker containers locally and wait for every container to be up and running:&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="background-color:#f8f8f8;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-sh" data-lang="sh">&lt;span style="display:flex;">&lt;span>docker-compose -f docker-compose.postgrest.yml -f docker-compose.yml up -d logstash postgrest dbt
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>You can verify this command worked by running &lt;code>docker ps&lt;/code>. It should show 3 containers running including Logstash, DBT, and PostgREST.&lt;/p>
&lt;h3 id="cleanup">Cleanup&lt;/h3>
&lt;p>When you are done using the services, you can clean everything by running &lt;code>down&lt;/code>.&lt;/p>
&lt;p>For example, in the scenario of the &lt;a href="#sample-couchdb-data">Sample CouchDB data&lt;/a>, the command should look like:&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="background-color:#f8f8f8;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-sh" data-lang="sh">&lt;span style="display:flex;">&lt;span>docker compose -f docker-compose.couchdb.yml -f docker-compose.postgres.yml -f docker-compose.yml down
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>To remove all the data volumes, add &lt;code>-v&lt;/code> at the end of this command.&lt;/p>
&lt;h2 id="setup-superset">Setup Superset&lt;/h2>
&lt;p>To build data visualization dashboards, follow the &lt;a href="https://superset.apache.org/docs/installation/installing-superset-using-docker-compose/">Superset instructions&lt;/a> to run Superset and connect it to the PostgreSQL database.&lt;/p></description></item><item><title>Apps: Production CHT Sync Setup</title><link>https://docs.communityhealthtoolkit.org/apps/guides/data/analytics/production/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://docs.communityhealthtoolkit.org/apps/guides/data/analytics/production/</guid><description>
&lt;div class="pageinfo pageinfo-primary">
&lt;p>&lt;strong>This is under active development.&lt;/strong> The page will be updated accordingly once it&amp;rsquo;s validated that the current approach is suited for being used in production. For the time being, you can try out and test CHT Sync &lt;a href="https://docs.communityhealthtoolkit.org/apps/guides/data/analytics/setup/">locally&lt;/a>.&lt;/p>
&lt;/div></description></item><item><title>Apps: Environment Variables</title><link>https://docs.communityhealthtoolkit.org/apps/guides/data/analytics/environment-variables/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://docs.communityhealthtoolkit.org/apps/guides/data/analytics/environment-variables/</guid><description>
&lt;p>There are three environment variable groups in the &lt;code>.env&lt;/code> file. To successfully set up CHT Sync, it is important to understand the difference between them.&lt;/p>
&lt;ol>
&lt;li>&lt;code>POSTGRES_&lt;/code>: Used by PostgREST and PostgreSQL to establish the PostgreSQL database to synchronize CouchDB data to. They also define the schema and table names to store the CouchDB data. The main objective is to define the environment where the raw CouchDB data will be copied.&lt;/li>
&lt;li>&lt;code>DBT_&lt;/code>: Exclusive to the DBT configuration. The main objective is to define the environment where the tables and views for the models defined in &lt;code>CHT_PIPELINE_BRANCH_URL&lt;/code> will be created. It is important to separate this environment from the previous group. &lt;code>DBT_POSTGRES_SCHEMA&lt;/code> must be different from &lt;code>POSTGRES_SCHEMA&lt;/code>. &lt;code>DBT_POSTGRES_HOST&lt;/code> has to be the Postgres instance created with the environment variables set in the first group.&lt;/li>
&lt;li>&lt;code>COUCHDB_&lt;/code>: Used by CouchDB and Logstash to define the CouchDB instance to sync with. With &lt;code>COUCHDB_DBS&lt;/code>, we can specify a list of databases to sync.&lt;/li>
&lt;/ol>
&lt;p>All the variables in the &lt;code>.env&lt;/code> file:&lt;/p>
&lt;table>
&lt;thead>
&lt;tr>
&lt;th>Name&lt;/th>
&lt;th>Default&lt;/th>
&lt;th>Description&lt;/th>
&lt;/tr>
&lt;/thead>
&lt;tbody>
&lt;tr>
&lt;td>&lt;code>COMPOSE_PROJECT_NAME&lt;/code>&lt;/td>
&lt;td>&lt;code>pipeline&lt;/code>&lt;/td>
&lt;td>(Optional) Docker Compose name&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>&lt;code>POSTGRES_USER&lt;/code>&lt;/td>
&lt;td>&lt;code>postgres&lt;/code>&lt;/td>
&lt;td>Username of the PostgreSQL database to copy CouchDB data to&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>&lt;code>POSTGRES_PASSWORD&lt;/code>&lt;/td>
&lt;td>&lt;code>postgres&lt;/code>&lt;/td>
&lt;td>Password of the PostgreSQL database to copy CouchDB data to&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>&lt;code>POSTGRES_DB&lt;/code>&lt;/td>
&lt;td>&lt;code>data&lt;/code>&lt;/td>
&lt;td>PostgreSQL database where the CouchDB data is copied&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>&lt;code>POSTGRES_SCHEMA&lt;/code>&lt;/td>
&lt;td>&lt;code>v1&lt;/code>&lt;/td>
&lt;td>PostgreSQL schema where the CouchDB data is copied&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>&lt;code>POSTGRES_TABLE&lt;/code>&lt;/td>
&lt;td>&lt;code>medic&lt;/code>&lt;/td>
&lt;td>PostgreSQL table where the CouchDB data is copied. For &lt;code>DBT&lt;/code> use only.&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>&lt;code>POSTGRES_HOST&lt;/code>&lt;/td>
&lt;td>&lt;code>localhost&lt;/code>&lt;/td>
&lt;td>PostgreSQL instance to copy CouchDB data to. To be set only if the PostgreSQL instance is different than the container provided with CHT Sync.&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>&lt;code>DBT_POSTGRES_USER&lt;/code>&lt;/td>
&lt;td>&lt;code>postgres&lt;/code>&lt;/td>
&lt;td>Username of the PostgreSQL database where &lt;code>DBT&lt;/code> creates tables and views from the models in &lt;code>CHT_PIPELINE_BRANCH_URL&lt;/code>&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>&lt;code>DBT_POSTGRES_PASSWORD&lt;/code>&lt;/td>
&lt;td>&lt;code>postgres&lt;/code>&lt;/td>
&lt;td>Password of the PostgreSQL database where &lt;code>DBT&lt;/code> creates tables and views from the models in &lt;code>CHT_PIPELINE_BRANCH_URL&lt;/code>&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>&lt;code>DBT_POSTGRES_SCHEMA&lt;/code>&lt;/td>
&lt;td>&lt;code>dbt&lt;/code>&lt;/td>
&lt;td>PostgreSQL schema where &lt;code>DBT&lt;/code> creates tables and views from the models in &lt;code>CHT_PIPELINE_BRANCH_URL&lt;/code>&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>&lt;code>DBT_POSTGRES_HOST&lt;/code>&lt;/td>
&lt;td>&lt;code>postgres&lt;/code>&lt;/td>
&lt;td>PostgreSQL instance IP or endpoint&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>&lt;code>CHT_PIPELINE_BRANCH_URL&lt;/code>&lt;/td>
&lt;td>&lt;code>&amp;quot;https://github.com/medic/cht-pipeline.git#main&amp;quot;&lt;/code>&lt;/td>
&lt;td>CHT Pipeline branch containing the &lt;code>DBT&lt;/code> models&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>&lt;code>DATAEMON_INTERVAL&lt;/code>&lt;/td>
&lt;td>&lt;code>5&lt;/code>&lt;/td>
&lt;td>Interval (in minutes) for looking for new changes in the CouchDB data&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>&lt;code>COUCHDB_USER&lt;/code>&lt;/td>
&lt;td>&lt;code>medic&lt;/code>&lt;/td>
&lt;td>Username of the CouchDB instance to sync with&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>&lt;code>COUCHDB_PASSWORD&lt;/code>&lt;/td>
&lt;td>&lt;code>password&lt;/code>&lt;/td>
&lt;td>Password of the CouchDB instance to sync with&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>&lt;code>COUCHDB_DBS&lt;/code>&lt;/td>
&lt;td>&lt;code>&amp;quot;medic&amp;quot;&lt;/code>&lt;/td>
&lt;td>Space separated list of databases to sync e.g &lt;code>&amp;quot;medic medic_sentinel&amp;quot;&lt;/code>&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>&lt;code>COUCHDB_HOST&lt;/code>&lt;/td>
&lt;td>&lt;code>couchdb&lt;/code>&lt;/td>
&lt;td>Host of the CouchDB instance to sync with&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>&lt;code>COUCHDB_PORT&lt;/code>&lt;/td>
&lt;td>&lt;code>5984&lt;/code>&lt;/td>
&lt;td>Port of the CouchDB instance to sync with&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>&lt;code>COUCHDB_SECURE&lt;/code>&lt;/td>
&lt;td>&lt;code>false&lt;/code>&lt;/td>
&lt;td>Is connection to CouchDB instance secure?&lt;/td>
&lt;/tr>
&lt;/tbody>
&lt;/table>
&lt;div class="alert alert-primary" role="alert">
&lt;h4 class="alert-heading">Note&lt;/h4>
If &lt;code>CHT_PIPELINE_BRANCH_URL&lt;/code> is pointing to a private GitHub repository, you&amp;rsquo;ll need an access token in the URL. Assuming your repository is &lt;code>medic/cht-pipeline&lt;/code>, you would replace &lt;code>&amp;lt;PAT&amp;gt;&lt;/code> with an access token: &lt;code>https://&amp;lt;PAT&amp;gt;@github.com/medic/cht-pipeline.git#main&lt;/code>. Please see &lt;a href="https://docs.github.com/en/authentication/keeping-your-account-and-data-secure/managing-your-personal-access-tokens">GitHub&amp;rsquo;s instructions&lt;/a> on how to generate a token.
&lt;/div></description></item></channel></rss>