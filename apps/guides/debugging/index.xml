<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>Community Health Toolkit â€“ Debugging Applications</title><link>https://docs.communityhealthtoolkit.org/apps/guides/debugging/</link><description>Recent content in Debugging Applications on Community Health Toolkit</description><generator>Hugo -- gohugo.io</generator><atom:link href="https://docs.communityhealthtoolkit.org/apps/guides/debugging/index.xml" rel="self" type="application/rss+xml"/><item><title>Apps: Obtaining Logs</title><link>https://docs.communityhealthtoolkit.org/apps/guides/debugging/obtaining-logs/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://docs.communityhealthtoolkit.org/apps/guides/debugging/obtaining-logs/</guid><description>
&lt;p>There are many places where useful logs reside. This details all those places, and the easiest way to get a hold of them.&lt;/p>
&lt;h2 id="on-a-laptop-or-desktop">On a laptop or desktop&lt;/h2>
&lt;p>To check if there are relevant logs open up the developer console in your browser. The shortcut is probably COMMAND+OPTION+I on MacOS, or CTRL+SHIFT+I on Linux and Windows. Click the console tab and copy out any errors or logging that you think is relevant.&lt;/p>
&lt;h2 id="on-a-phone">On a phone&lt;/h2>
&lt;p>There are two types of logs updated by Android devices depending on what information is needed. If you trying to get either of the logs from a device for the first time you need to set it up for USB debugging.&lt;/p>
&lt;ol>
&lt;li>
&lt;p>Enable USB debugging on the phone. This varies from phone to phone, but here is the &lt;a href="https://developer.android.com/studio/debug/dev-options#enable">official Android documentation&lt;/a>.&lt;/p>
&lt;/li>
&lt;li>
&lt;p>Connect your phone by USB to the computer.&lt;/p>
&lt;/li>
&lt;li>
&lt;p>On your phone, you will see a popup &lt;em>&amp;ldquo;Allow USB debugging. The computer&amp;rsquo;s RSA fingerprint&amp;hellip;&amp;rdquo;&lt;/em>, click &lt;em>&amp;ldquo;OK&amp;rdquo;&lt;/em>.&lt;/p>
&lt;p>&lt;img src="https://docs.communityhealthtoolkit.org/apps/guides/debugging/images/allow_usb_debugging.png" alt="Allow USB debugging">&lt;/p>
&lt;/li>
&lt;/ol>
&lt;h3 id="browser-logs">Browser logs&lt;/h3>
&lt;p>Now that you&amp;rsquo;ve enabled USB debugging on the phone you can access the dev console on the phone via USB from your desktop browser. This allows the same level of debugging and inspection you have on a desktop browser, but from your phone&amp;rsquo;s browser in the CHT app. Follow the &lt;a href="https://developer.chrome.com/docs/devtools/remote-debugging/webviews/#open_a_webview_in_devtools">official Android documentation&lt;/a> to access the console.&lt;/p>
&lt;h3 id="android-logs">Android logs&lt;/h3>
&lt;p>The Android log is written to from the cht-android wrapper which captures errors like application crashes or failing integrations between Android apps.&lt;/p>
&lt;ol>
&lt;li>
&lt;p>To install the &lt;code>adb&lt;/code> command, follow the instructions under the &lt;a href="https://docs.communityhealthtoolkit.org/core/guides/android/development-setup/#debug-tool-adb">Development Environment &amp;gt; Debug tool adb&lt;/a> section.&lt;/p>
&lt;/li>
&lt;li>
&lt;p>Within a command line session, write the following command: &lt;code>adb start-server&lt;/code>.&lt;/p>
&lt;/li>
&lt;li>
&lt;p>To check if your phone is properly connected, write the command &lt;code>adb devices&lt;/code>. This will list the devices connected.&lt;/p>
&lt;p>&lt;img src="https://docs.communityhealthtoolkit.org/apps/guides/debugging/images/adb_devices.png" alt="ADB Devices">&lt;/p>
&lt;/li>
&lt;li>
&lt;p>Type the command &lt;code>adb logcat &amp;gt; phone.log&lt;/code> to get the android logs in the file &lt;code>phone.log&lt;/code>. The log will be written to the &lt;code>phone.log&lt;/code> file as long as this command is running. You can stop the recording at any time pressing &lt;em>Ctrl+C&lt;/em>. Now if you reproduce the error on the phone you can look for any useful information being written to the &lt;code>phone.log&lt;/code>.&lt;/p>
&lt;/li>
&lt;/ol>
&lt;p>This will get all the logs from the device, not just logs for the app you want to debug. You can pass arguments to &lt;code>adb&lt;/code> to only get the logs you want.&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="background-color:#f8f8f8;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-sh" data-lang="sh">&lt;span style="display:flex;">&lt;span>$ adb logcat MedicMobile:V AndroidRuntime:E chromium:V &lt;span style="color:#4e9a06">&amp;#39;*:S&amp;#39;&lt;/span> &amp;gt; phone.log
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>Alternatively you can use &lt;code>grep&lt;/code> to filter the logs down to only those from the relevant app.&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="background-color:#f8f8f8;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-sh" data-lang="sh">&lt;span style="display:flex;">&lt;span>$ adb logcat &lt;span style="color:#000;font-weight:bold">|&lt;/span> grep MedicMobile &amp;gt; phone.log
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;h2 id="on-the-server">On the server&lt;/h2>
&lt;p>Some unexpected errors are caught and stored in &lt;code>feedback&lt;/code> docs and stored on the phone and later synced to CouchDB on the server. To access these, look for docs in the &lt;code>medic-user-{username}-meta&lt;/code> or &lt;code>medic-users-meta&lt;/code> databases. This is particularly useful to debug issues where you do not have physical access to the device. More information is available under &lt;a href="https://docs.communityhealthtoolkit.org/apps/guides/database/">Managing Databases&lt;/a>.&lt;/p></description></item><item><title>Apps: Replicating Production Data Locally</title><link>https://docs.communityhealthtoolkit.org/apps/guides/debugging/replicating-production-data-locally/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://docs.communityhealthtoolkit.org/apps/guides/debugging/replicating-production-data-locally/</guid><description>
&lt;p>Sometimes there will be a production problem that you need to dig into locally to solve. This guide explains how to:&lt;/p>
&lt;ul>
&lt;li>Copy the data from an instance to a local CouchDB database&lt;/li>
&lt;li>Run a local webapp instance with that data&lt;/li>
&lt;/ul>
&lt;h2 id="first-a-note-about-data-safety">First, a note about data safety&lt;/h2>
&lt;p>Production data is medical data. It&amp;rsquo;s HIV statuses and pregnancies. It&amp;rsquo;s important, and it&amp;rsquo;s not yours. If you&amp;rsquo;re downloading it, do so on an encrypted drive and delete it once you&amp;rsquo;re done with it.&lt;/p>
&lt;h2 id="step-1-get-the-data">Step 1: Get the data&lt;/h2>
&lt;p>First thing is to get the data onto your local CouchDB. It&amp;rsquo;s advisable to create a new DB for this, so that you have a fresh untouched collection of data that isn&amp;rsquo;t mixed in with anything you have locally.&lt;/p>
&lt;h3 id="small-production-instances">Small production instances&lt;/h3>
&lt;p>If there isn&amp;rsquo;t much data you can replicate the entire DB locally. You can initiate this either from your local Fauxton, or from the command line. You must use an administrator username and password for this at both the source and destination.&lt;/p>
&lt;p>For Fauxton, navigate to http://localhost:5984/_utils/#/replication/_create
For command line, see: &lt;a href="http://docs.couchdb.org/en/2.1.1/api/server/common.html#post--_replicate">http://docs.couchdb.org/en/2.1.1/api/server/common.html#post--_replicate&lt;/a>&lt;/p>
&lt;p>Note that replication may stall on one document, and you may end up with your local DB having one less document than the source. This is due to how our URLs are setup: the replicator gets confused and considers &lt;code>login&lt;/code> (ie &lt;code>https://url/login&lt;/code>) to be a document. You can safely ignore this difference - you&amp;rsquo;re good to go once your destination database has one less document than the source.&lt;/p>
&lt;h3 id="large-production-instances">Large production instances&lt;/h3>
&lt;p>If the instance is too large to replicate locally (or you are too impatient), you can replicate the data accessible to a single user. This process downloads a user&amp;rsquo;s data into a browser and then copies that data into a CouchDB database.&lt;/p>
&lt;ol>
&lt;li>Open Firefox and navigate to &lt;code>about:config&lt;/code>. Set &lt;code>security.csp.enable&lt;/code> to &lt;code>false&lt;/code> to disable Content Security Policies.&lt;/li>
&lt;li>Navigate to the instance and login as the user with the data you want. &lt;em>(If you want more data, like an entire district, you could consider logging in as a new user with a contact document at your desired place in the contact hierarchy. But that is an exercise for the reader)&lt;/em>&lt;/li>
&lt;li>Wait for the data to replicate. You know this is done once the app lets you interact with it. &lt;em>(If you want to get the user&amp;rsquo;s data before purging, consider disabling purging. Another exercise for the reader)&lt;/em>&lt;/li>
&lt;li>Make sure your local CouchDB has CORS enabled: &lt;a href="http://docs.couchdb.org/en/2.1.1/config/http.html?highlight=CORs">http://docs.couchdb.org/en/2.1.1/config/http.html?highlight=CORs&lt;/a>. Consider using &lt;a href="https://github.com/pouchdb/add-cors-to-couchdb#user-content-what-it-does">add-cors-to-couchdb&lt;/a> or its recommended settings.&lt;/li>
&lt;li>Allow your CouchDB to be accessible via &lt;code>https&lt;/code>. One way is to run &lt;code>ngrok http PORT&lt;/code>. The &lt;code>PORT&lt;/code> &lt;em>(&lt;code>5984&lt;/code> by default)&lt;/em> can be found in database configuration using fauxton under the &lt;code>chttpd&lt;/code> section. This will make your CouchDB accessible via a url like &lt;code>https://abcd1234.ngrok.io&lt;/code>.&lt;/li>
&lt;li>Open the console in Firefox and run &lt;code>await PouchDB.replicate('medic-user-XXX', 'https://your:admin@abcd1234.ngrok.io/YYY');&lt;/code>. Here &lt;code>XXX&lt;/code> is the name you logged in as, and &lt;code>YYY&lt;/code> is the name of a database in which to store the data.
&lt;ul>
&lt;li>&lt;strong>Note&lt;/strong>: If you get 401s make sure that: your CouchDB credentials are right; and you don&amp;rsquo;t have a local session in the same browser already (session cookies can take precedence over basic auth); and if you&amp;rsquo;re running CouchDB in Docker you have exposed both &lt;code>5984&lt;/code> and &lt;code>5986&lt;/code> to localhost.&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>Wait for the replication to complete. In Fauxton you should see the database YYY with the same number of documents reported during the user&amp;rsquo;s initial replication.&lt;/li>
&lt;li>Log out of the instance and clear your data from the developer console (Application -&amp;gt; Clear storage).&lt;/li>
&lt;li>Navigate to &lt;code>about:config&lt;/code>. Set &lt;code>security.csp.enable&lt;/code> to &lt;code>true&lt;/code> to re-enable Content Security Policies.&lt;/li>
&lt;/ol>
&lt;h3 id="regardless-do-this-too">Regardless, do this too&lt;/h3>
&lt;p>To log in as a specific prod user you need to also copy them from the prod &lt;code>_users&lt;/code> database into your own local &lt;code>_users&lt;/code> database. The simplest way to do this is to just open the DB in Fauxton, find the document and copy it on your clipboard, then create a new document in your local &lt;code>_users&lt;/code> DB and paste it in, deleting the &lt;code>_rev&lt;/code> property.&lt;/p>
&lt;p>You could also use this opportunity to change the password to something easier to work with locally. To do this, add a &lt;code>password&lt;/code> property into the document with the password you want in plain text. CouchDB will convert this to a properly hashed password on save.&lt;/p>
&lt;h2 id="step-2-run-it-locally">Step 2, run it locally&lt;/h2>
&lt;p>First you need to decide if you need a local development environment (unless you already have one, in which case you might as well use it), or are happy to just use &lt;a href="https://github.com/medic/horticulturalist">Horticulturalist&lt;/a>.&lt;/p>
&lt;p>A local development environment will be useful to you if:&lt;/p>
&lt;ul>
&lt;li>You want to change code locally&lt;/li>
&lt;li>You want to see useful, non-minified stack traces, or otherwise browse / step through non-minified code in the browser&lt;/li>
&lt;li>You want to deploy a version of the code older than &lt;code>2.14.0&lt;/code>, as they are not available in Horticulturalist&amp;rsquo;s repos.&lt;/li>
&lt;/ul>
&lt;h3 id="option-1-local-development-environment">Option 1, local development environment&lt;/h3>
&lt;p>If you don&amp;rsquo;t already have a local dev env, follow the instructions on the &lt;a href="https://docs.communityhealthtoolkit.org/apps/guides/hosting/core-developer/">development setup instructions&lt;/a>.&lt;/p>
&lt;p>Then you need to:&lt;/p>
&lt;ol>
&lt;li>Push the code you want to run via &lt;code>COUCH_URL=http://your:admin@localhost:5984/YYY grunt deploy&lt;/code>.&lt;/li>
&lt;li>Start API and Sentinel by running &lt;code>COUCH_URL=http://your:admin@localhost:5984/YYY node api/server&lt;/code>.&lt;/li>
&lt;/ol>
&lt;p>Once you&amp;rsquo;ve done all of that you should be able to log in with your user.&lt;/p>
&lt;h3 id="option-2-horticulturalist">Option 2, horticulturalist&lt;/h3>
&lt;p>Follow the instructions on the &lt;a href="https://github.com/medic/horticulturalist">horticulturalist repo&lt;/a> to get it installed. Then:&lt;/p>
&lt;ol>
&lt;li>Make sure that the &lt;code>medic&lt;/code> DB doesn&amp;rsquo;t exist, so that you have a fresh database.&lt;/li>
&lt;li>Replicate your local PROD DB into a new &lt;code>medic&lt;/code> database using the Fauxton console.&lt;/li>
&lt;li>Run &lt;code>horti --local --bootstrap=XXX&lt;/code>, where &lt;code>XXX&lt;/code> is the version you want to use (maybe the same one as production?)&lt;/li>
&lt;/ol>
&lt;p>You should now be able to log in as that user locally!&lt;/p></description></item><item><title>Apps: Securely Sharing Your Development Environment</title><link>https://docs.communityhealthtoolkit.org/apps/guides/debugging/secure-sharing-of-developer-instance/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://docs.communityhealthtoolkit.org/apps/guides/debugging/secure-sharing-of-developer-instance/</guid><description>
&lt;div class="alert alert-primary" role="alert">
&lt;h4 class="alert-heading">Warning&lt;/h4>
&lt;p>Be extra careful with this process! The end result will be that your development instance will be accessible to the internet. If you have simple logins and passwords like &amp;ldquo;admin/test.223&amp;rdquo; because you thought it was just your local dev instance and it doesn&amp;rsquo;t matter, now it matters! Whenever you&amp;rsquo;re not using the SSH tunnel for testing, shut it down so there&amp;rsquo;s no more remote access.&lt;/p>
&lt;p>Never expose a development instance to the internet where you&amp;rsquo;ve replicated production data locally. Well, maybe not never, but with extreme care and intention.&lt;/p>
&lt;p>Also not - if you only want to test with mobile devices that require a valid TLS certificate, do not use method. Instead, use &lt;a href="https://docs.communityhealthtoolkit.org/apps/guides/hosting/core-developer/#nginx-local-ip">nginx-local-ip&lt;/a>&lt;/p>
&lt;/div>
&lt;h2 id="overview">Overview&lt;/h2>
&lt;p>When using a local &lt;a href="https://docs.communityhealthtoolkit.org/apps/guides/hosting/core-developer/">development environment&lt;/a>, you may want to share your work with other collaborators. By using a publicly accessible web server, you can receive the secure https requests and forward them back to your CHT instance which doesn&amp;rsquo;t have https set up:&lt;/p>
&lt;p>&lt;a href="https://docs.communityhealthtoolkit.org/apps/guides/debugging/images/SSH.tunnel.diagram.svg">&lt;img src="https://docs.communityhealthtoolkit.org/apps/guides/debugging/images/SSH.tunnel.diagram.svg" width=100% height=100%>&lt;/a>&lt;/p>
&lt;p>Once you have this web server set up, you may continue to use it whenever you want by simply reconnecting to it via the secure tunnel.&lt;/p>
&lt;h2 id="prerequisites">Prerequisites&lt;/h2>
&lt;p>This guide assumes:&lt;/p>
&lt;ul>
&lt;li>You have a local &lt;a href="https://docs.communityhealthtoolkit.org/apps/guides/hosting/core-developer/">dev instance&lt;/a> set up of cht-core&lt;/li>
&lt;li>You have the &lt;a href="https://play.google.com/store/apps/details?id=org.medicmobile.webapp.mobile&amp;amp;hl=en_US">generic Medic app&lt;/a> installed on your Android device. This version allows you to enter a custom CHT URL on first run.&lt;/li>
&lt;li>You have an Ubuntu &amp;gt;18.04 server with a public IP and a DNS entry that you can SSH into and have sudo on&lt;/li>
&lt;li>You have Apache &amp;gt;2.4.29 installed on the Ubuntu server and can add a new vhost to it, including an SSL cert. (nginx could be used instead as well, but not covered here)&lt;/li>
&lt;li>You have certbot installed from letsencrypt.org&lt;/li>
&lt;/ul>
&lt;p>The steps in this guide can be done on any of the cheap server providers out there (&lt;a href="https://digitalocean.com">Digital Ocean&lt;/a> has a $5/mo server).&lt;/p>
&lt;h2 id="steps">Steps&lt;/h2>
&lt;ol>
&lt;li>
&lt;p>Create a DNS entry. Let&amp;rsquo;s assume it&amp;rsquo;s &lt;code>cht.domain.com&lt;/code>. It should point to the IP of your Ubuntu server. If you do not already have a domain name with DNS services that you can use, you can sign up for a free service to do this like &lt;a href="https://www.noip.com/remote-access">noip.com&lt;/a>.&lt;/p>
&lt;/li>
&lt;li>
&lt;p>On your Ubuntu server, create a new apache vhost in &lt;code>/etc/apache2/sites-available/100-cht.domain.com.conf&lt;/code> with the following contents:&lt;/p>
&lt;pre tabindex="0">&lt;code>&amp;lt;VirtualHost *:80&amp;gt;
ServerName cht.domain.com
RewriteEngine on
RewriteRule (.*) https://cht.domain.com%{REQUEST_URI}
&amp;lt;/VirtualHost&amp;gt;
&amp;lt;IfModule mod_ssl.c&amp;gt;
&amp;lt;VirtualHost *:443&amp;gt;
ServerName cht.domain.com
SSLEngine On
&amp;lt;IfModule mod_headers.c&amp;gt;
Header always set Strict-Transport-Security &amp;#34;max-age=63072000; preload&amp;#34;
&amp;lt;/IfModule&amp;gt;
RewriteEngine on
Include /etc/letsencrypt/options-ssl-apache.conf
SSLCertificateFile /etc/ssl/certs/ssl-cert-snakeoil.pem
SSLCertificateKeyFile /etc/ssl/private/ssl-cert-snakeoil.key
ProxyPass / http://localhost:8081/
ProxyPassReverse / http://localhost:8081/
RequestHeader set X-Forwarded-Proto &amp;#34;https&amp;#34;
&amp;lt;/VirtualHost&amp;gt;
&amp;lt;/IfModule&amp;gt;
&lt;/code>&lt;/pre>&lt;/li>
&lt;li>
&lt;p>Enable the new site: &lt;code>a2ensite 100-cht.domain.com&lt;/code>&lt;/p>
&lt;/li>
&lt;li>
&lt;p>Restart apache and ensure there&amp;rsquo;s no errors: &lt;code>apachectl restart&lt;/code>&lt;/p>
&lt;/li>
&lt;li>
&lt;p>Create the TLS certificate: &lt;code>certbot -d cht.domain.com&lt;/code>&lt;/p>
&lt;/li>
&lt;li>
&lt;p>When prompted choose no redirect: &amp;ldquo;No redirect - Make no further changes to the webserver configuration.&amp;rdquo;&lt;/p>
&lt;/li>
&lt;li>
&lt;p>Restart apache and ensure there&amp;rsquo;s no errors: &lt;code>apachectl restart&lt;/code>&lt;/p>
&lt;/li>
&lt;li>
&lt;p>In a browser, test that you can connect to your server with no errors at &lt;a href="https://cht.domain.com">https://cht.domain.com&lt;/a> (you may get a &lt;code>500&lt;/code> error, but you shouldn&amp;rsquo;t get any TLS errors)&lt;/p>
&lt;/li>
&lt;li>
&lt;p>Ensure your cht-core local dev instance is running by going to http://localhost:5988/&lt;/p>
&lt;/li>
&lt;li>
&lt;p>On your local dev box, set up the SSH tunnel with: &lt;code>ssh -NT -R 8081:127.0.0.1:5988 cht.domain.com&lt;/code>&lt;/p>
&lt;/li>
&lt;li>
&lt;p>This assumes your local username is the same as it is on cht.domain.com. This command will hang and you may exit when down with &lt;code>ctrl + c&lt;/code>&lt;/p>
&lt;/li>
&lt;li>
&lt;p>In a browser, test again that you now see your local dev instance and it loads correctly at &lt;a href="https://cht.domain.com">https://cht.domain.com&lt;/a>&lt;/p>
&lt;/li>
&lt;li>
&lt;p>If needed, reset the Medic app on your phone so that it prompts which instance to use&lt;/p>
&lt;/li>
&lt;li>
&lt;p>In the app on your phone, choose &amp;ldquo;custom&amp;rdquo; for which instance to use and enter &lt;a href="https://cht.domain.com">https://cht.domain.com&lt;/a>. You should now see your local dev instance in the CHT Android device. Happy testing!&lt;/p>
&lt;/li>
&lt;/ol>
&lt;h2 id="tunnel-command-breakdown">Tunnel command breakdown&lt;/h2>
&lt;p>From the SSH command in step 10 above:&lt;/p>
&lt;p>&lt;a href="https://docs.communityhealthtoolkit.org/apps/guides/debugging/images/ssh.ports.svg">&lt;img src="https://docs.communityhealthtoolkit.org/apps/guides/debugging/images/ssh.ports.svg" width=100% height=100%>&lt;/a>&lt;/p>
&lt;ol>
&lt;li>&lt;code>8081&lt;/code> - Remote port on cht.domain.com to listen to. This is the same port that apache redirects to in step 2 above.&lt;/li>
&lt;li>&lt;code>127.0.0.1&lt;/code> - Host to send forwarded traffic to. In this case, your local machine.&lt;/li>
&lt;li>&lt;code>5988&lt;/code> - Local port where traffic from step one will be sent. In this case, your instance of the CHT&lt;/li>
&lt;li>&lt;code>cht.domain.com&lt;/code> - Public domain where you have an SSH account and we&amp;rsquo;ll attach port &lt;code>8081&lt;/code> to from step 1.&lt;/li>
&lt;/ol></description></item></channel></rss>