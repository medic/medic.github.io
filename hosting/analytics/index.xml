<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>Data Synchronization and Analytics on Community Health Toolkit</title><link>https://docs.communityhealthtoolkit.org/hosting/analytics/</link><description>Recent content in Data Synchronization and Analytics on Community Health Toolkit</description><generator>Hugo -- gohugo.io</generator><language>en</language><atom:link href="https://docs.communityhealthtoolkit.org/hosting/analytics/index.xml" rel="self" type="application/rss+xml"/><item><title>CHT Sync Setup with Kubernetes</title><link>https://docs.communityhealthtoolkit.org/hosting/analytics/setup-kubernetes/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://docs.communityhealthtoolkit.org/hosting/analytics/setup-kubernetes/</guid><description>This guide will walk you through setting up a deployment of CHT Sync with the CHT using Kubernetes. This path is recommended if you already have a Kubernetes cluster hosting the CHT.
Prerequisites git A Kubernetes cluster: You can use a managed Kubernetes service like Google Kubernetes Engine (GKE), Amazon Elastic Kubernetes Service (EKS), or Azure Kubernetes Service (AKS), or you can set up a cluster using a tool like Minikube.</description></item><item><title>CHT Sync Setup with Docker</title><link>https://docs.communityhealthtoolkit.org/hosting/analytics/setup-docker-compose/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://docs.communityhealthtoolkit.org/hosting/analytics/setup-docker-compose/</guid><description>This guide will walk you through setting up a deployment of CHT Sync with the CHT using Docker. This path is recommended if you host the CHT with Docker.
Prerequisites Current version of docker or current version of Docker Desktop both of which include docker compose. Note that the older docker-compose is no longer supported. git cht-sync GitHub repository (can be cloned via git clone https://github.com/medic/cht-sync). A dbt project. SetupIn the cht-sync folder, copy the values from the env.</description></item><item><title>Migrating from couch2pg to CHT Sync</title><link>https://docs.communityhealthtoolkit.org/hosting/analytics/couch2pg-to-cht-sync-migration/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://docs.communityhealthtoolkit.org/hosting/analytics/couch2pg-to-cht-sync-migration/</guid><description>This page outlines guidelines for migrating from couch2pg to the data pipeline based on CHT Sync. One of the main changes in this flow is separating the syncing process from the data transformation, with dbt now handling the latter in cht-pipeline. This migration requires dbt models in the cht-pipeline repository instead of SQL views and tables. One thing to note is that the schema for CHT Sync differs from cht-couch2pg, so dbt models will not directly replace the SQL views and tables.</description></item><item><title>dbt Models for CHT Applications</title><link>https://docs.communityhealthtoolkit.org/hosting/analytics/building-dbt-models/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://docs.communityhealthtoolkit.org/hosting/analytics/building-dbt-models/</guid><description>OverviewCHT Sync copies data from CouchDB to a relational database. It initially stores the document data from CouchDB in a jsonb column in a single PostgreSQL table. This is not possible to query for analytics, so it uses dbt to convert the document data to a relational database format.
The cht-pipeline repository defines a dbt project, which contains model files for the data schema described in the database schema conventions. Forms may be specific to each CHT application; additional models will need to be developed to analyze data from responses to these custom forms.</description></item><item><title>Testing dbt Models</title><link>https://docs.communityhealthtoolkit.org/hosting/analytics/testing-dbt-models/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://docs.communityhealthtoolkit.org/hosting/analytics/testing-dbt-models/</guid><description>OverviewTo ensure code accuracy and data integrity, and also to prevent data quality regressions on dbt models, it is recommended to write dbt tests. dbt tests help validate the accuracy and reliability of data and data models and identify issues before they cause downstream impacts on analytics and decision-making. Additionally, they increase developer confidence in making changes to the data models.
Types of dbt testsThere are two main types of dbt tests:</description></item><item><title>Tuning dbt runs for performance</title><link>https://docs.communityhealthtoolkit.org/hosting/analytics/tuning-dbt/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://docs.communityhealthtoolkit.org/hosting/analytics/tuning-dbt/</guid><description>In production setups with large tables, it can be helpful to control how DBT runs.
ThreadsThe DBT_THREADS variable can be used to allow dbt to run independent models concurrently in the same process using threads.
This can allow models to update more quickly by reducing the total duration of a dbt run.
More threads means more database processes running concurrently which can create performance issues; this value is per process, so if running separate processes, the total number of concurrent processes in the db will be DBT_THREADS x the number of processes.</description></item><item><title>Data visualization</title><link>https://docs.communityhealthtoolkit.org/hosting/analytics/dashboards/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://docs.communityhealthtoolkit.org/hosting/analytics/dashboards/</guid><description>These instructions assume you are running CHT Sync, CHT Core and PostgreSQL either with Kubernetes or Docker.
SupersetTo build data visualization dashboards, follow the Superset instructions to run Superset and connect it to the PostgreSQL database. It is recommended that a way to track Superset changes be added via a git repository or any other version control system to make it easier to track changes over time and potentially catch and remediate bugs and regressions.</description></item><item><title>Environment Variables</title><link>https://docs.communityhealthtoolkit.org/hosting/analytics/environment-variables/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://docs.communityhealthtoolkit.org/hosting/analytics/environment-variables/</guid><description>There are three groups of environment variables. One for Postgres, one for CouchDB and one for DBT. These are found in the .env file and the values.yaml file for docker and Kubernetes respectively.
POSTGRES_: Used by PostgreSQL to establish the PostgreSQL database to synchronize CouchDB data to. They define the schema and table names to store the CouchDB data, as well as where the tables and views for the models defined in CHT_PIPELINE_BRANCH_URL will be created.</description></item></channel></rss>