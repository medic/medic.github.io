<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>4.x on Community Health Toolkit</title><link>https://docs.communityhealthtoolkit.org/hosting/4.x/</link><description>Recent content in 4.x on Community Health Toolkit</description><generator>Hugo -- gohugo.io</generator><language>en</language><atom:link href="https://docs.communityhealthtoolkit.org/hosting/4.x/index.xml" rel="self" type="application/rss+xml"/><item><title>Migration from CHT 3.x to CHT 4.x</title><link>https://docs.communityhealthtoolkit.org/hosting/4.x/data-migration/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://docs.communityhealthtoolkit.org/hosting/4.x/data-migration/</guid><description>The hosting architecture differs entirely between CHT-Core 3.x and CHT-Core 4.x. Migrating data from an existing instance running CHT 3.x requires a few manual steps. This guide will present the required steps while using a migration helping tool, called couchdb-migration. This tool interfaces with CouchDb, to update shard maps and database metadata. By the end of this guide, your CHT-Core 3.x CouchDb will be down and CHT-Core 4.x ready to be used.</description></item><item><title>App Developer Hosting in CHT 4.x</title><link>https://docs.communityhealthtoolkit.org/hosting/4.x/app-developer/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://docs.communityhealthtoolkit.org/hosting/4.x/app-developer/</guid><description>This guide assumes you are a CHT app developer wanting to either run concurrent instances of the CHT, or easily be able to switch between different instances without losing any data while doing so. To do development on the CHT Core Framework itself, see the development guide.
To deploy the CHT 3.x in production, see either AWS hosting or Self hosting. 4.x production hosting guides are coming soon!
Getting started Be sure to meet the CHT hosting requirements first.</description></item><item><title>Adding TLS certificates in CHT 4.x</title><link>https://docs.communityhealthtoolkit.org/hosting/4.x/adding-tls-certificates/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://docs.communityhealthtoolkit.org/hosting/4.x/adding-tls-certificates/</guid><description>By default, CHT 4.x will create a self-signed certificate for every deployment. These instructions are for changing to either a pre-existing certificate or automatically creating and renewing a Certbot based certificate using ACME, like Let&amp;rsquo;s Encrypt.
This guide assumes you&amp;rsquo;ve already met the hosting requirements, specifically around Docker being installed.
Pre-existing certificate To load your certificates into your CHT instance, we&amp;rsquo;ll be creating an interstitial container called cht-temp-tls which will enable you to copy your local certificate files into the native docker volume.</description></item><item><title>Viewing server logs in CHT 4.x</title><link>https://docs.communityhealthtoolkit.org/hosting/4.x/logs/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://docs.communityhealthtoolkit.org/hosting/4.x/logs/</guid><description>CHT 4.x has the following services running via Docker and each can have its logs queried:
nginx sentinel api haproxy couchdb healthcheck upgrade-service Setting log level By default, the CHT server logs are set to the info level. To change the log level to debug, you can set the NODE_ENV environment variable to development. A log level of debug can affect system performance and cause log files sizes to grow rapidly.</description></item><item><title>Backups in CHT 4.x</title><link>https://docs.communityhealthtoolkit.org/hosting/4.x/backups/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://docs.communityhealthtoolkit.org/hosting/4.x/backups/</guid><description>This guide is about backups in CHT 4.x - there&amp;rsquo;s the self hosted guide for 3.x which includes backups for 3.x.
Introduction As CHT 4.x uses a container per service, the only data that needs to be backed up is:
CouchDB database Docker Compose and .env files TLS certificates This is because Docker containers are inherently stateless so all the important binaries are already stored in CHT&amp;rsquo;s Docker images. Docker Compose files, including the .</description></item><item><title>Docker Directory Setup</title><link>https://docs.communityhealthtoolkit.org/hosting/4.x/_partial_docker_directories/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://docs.communityhealthtoolkit.org/hosting/4.x/_partial_docker_directories/</guid><description>Create the following directory structure:
|-- /home/ubuntu/cht/ |-- compose/ |-- certs/ |-- couchdb/ |-- upgrade-service/ By calling this mkdir commands:
mkdir -p /home/ubuntu/cht/{compose,certs,upgrade-service,couchdb} compose - docker-compose files for cht-core and CouchDB certs - TLS certificates directory upgrade-service - where docker-compose file for the upgrade-service couchdb - the path for the docker-compose file of the upgrade-service (not used in multi-node)</description></item></channel></rss>